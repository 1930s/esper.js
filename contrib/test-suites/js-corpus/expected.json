{
	"boolean.js": {
		"source": "var i = 0;\nfunction inspect(x) {\n\tconsole.log(++i, typeof x, x);\n}\n\ninspect(new Boolean('Rob'));\ninspect(new Boolean(7));\ninspect(new Boolean(0));\ninspect(new Boolean('0'));\ninspect(new Boolean(false));\ninspect(new Boolean('false'));\ninspect(new Boolean());\n\ninspect(Boolean('Rob'));\ninspect(Boolean(7));\ninspect(Boolean(0));\ninspect(Boolean('0'));\ninspect(Boolean(false));\ninspect(Boolean('false'));\ninspect(Boolean());\n",
		"stdout": [
			"1\tobject\ttrue",
			"2\tobject\ttrue",
			"3\tobject\tfalse",
			"4\tobject\ttrue",
			"5\tobject\tfalse",
			"6\tobject\ttrue",
			"7\tobject\tfalse",
			"8\tboolean\ttrue",
			"9\tboolean\ttrue",
			"10\tboolean\tfalse",
			"11\tboolean\ttrue",
			"12\tboolean\tfalse",
			"13\tboolean\ttrue",
			"14\tboolean\tfalse"
		]
	},
	"es6.js": {
		"source": "'use strict';\n\nvar arrow = (x) => x*2;\n\nconsole.log(arrow(10));\n\nvar arrow2 = (x) => {\n\tconsole.log(\"xyzzy\");\n}\n\narrow2();\n\nclass Clazz {\n\twhatever() { return 30; }\n\tstatic something() { return 40; }\n}\n\nvar x = new Clazz();\nconsole.log(typeof x.whatever, x.whatever());\n\nconsole.log(typeof Clazz.whatever);\nconsole.log(typeof Clazz.prototype.whatever);\nconsole.log(typeof Clazz.something, Clazz.something());\n\nfor ( let y of [8,6,7,5,3,0,9] )\n\tconsole.log(y);",
		"stdout": [
			"20",
			"xyzzy",
			"function\t30",
			"undefined",
			"function",
			"function\t40",
			"8",
			"6",
			"7",
			"5",
			"3",
			"0",
			"9"
		]
	},
	"fib.js": {
		"source": "\nfunction fib(x) {\n\tif ( x == 1 ) return 1;\n\tif ( x == 2 ) return 1;\n\tvar result = fib(x-1) + fib(x-2);\n\treturn result;\n}\n\nfor ( var i = 1; i < 15; ++i ) {\n\t//print(i);\n\t//if ( i % 2 == 1 ) continue;\n\t//var f = fib(i);\n\t//print(i, \"\\t\", f);\n\n}\n",
		"stdout": []
	},
	"fib2.js": {
		"source": "\r\nvar results = {0:0,1:1,2:1};\r\nfunction fib(x) {\r\n\tif ( !(x in results )) results[x] = fib(x-1) + fib(x-2);\r\n\treturn results[x];\r\n}\r\n\r\n\r\nvar val = fib(20);\r\nconsole.log(val);\r\nif ( val != 6765 ) throw new Error(\"Failed\");\r\n",
		"stdout": [
			"6765"
		]
	},
	"number.js": {
		"source": "function test(n) {\n\tvar a = Number(n);\n\tvar b = new Number(n);\n\n\tconsole.log(n, typeof a, a, a.toExponential(), a.toFixed(), a.toPrecision());\n\tconsole.log(n, typeof a, a, a.toExponential(3), a.toFixed(3), a.toPrecision(3));\n\tconsole.log(n, typeof b, b, b.toExponential(), b.toFixed(), b.toPrecision());\n\tconsole.log(n, typeof n, n, n.toExponential(), n.toFixed(), n.toPrecision());\n}\n\ntest(0);\ntest(100)\ntest(NaN);\ntest(100)",
		"stdout": [
			"0\tnumber\t0\t0e+0\t0\t0",
			"0\tnumber\t0\t0.000e+0\t0.000\t0.00",
			"0\tobject\t0\t0e+0\t0\t0",
			"0\tnumber\t0\t0e+0\t0\t0",
			"100\tnumber\t100\t1e+2\t100\t100",
			"100\tnumber\t100\t1.000e+2\t100.000\t100",
			"100\tobject\t100\t1e+2\t100\t100",
			"100\tnumber\t100\t1e+2\t100\t100",
			"NaN\tnumber\tNaN\tNaN\tNaN\tNaN",
			"NaN\tnumber\tNaN\tNaN\tNaN\tNaN",
			"NaN\tobject\tNaN\tNaN\tNaN\tNaN",
			"NaN\tnumber\tNaN\tNaN\tNaN\tNaN",
			"100\tnumber\t100\t1e+2\t100\t100",
			"100\tnumber\t100\t1.000e+2\t100.000\t100",
			"100\tobject\t100\t1e+2\t100\t100",
			"100\tnumber\t100\t1e+2\t100\t100"
		]
	},
	"object.js": {
		"source": "function Rob() {\n\n};\n\nfunction test(n) {\n\tconsole.log(\n\t\ttypeof n,\n\t\tObject.prototype.isPrototypeOf.call(n, Rob),\n\t\tObject.prototype.isPrototypeOf.call(Rob, n)\n\t);\n}\n\n\ntest({});\ntest(0);\n\ntest(function() {});\ntest(new Rob());\ntest(Object.prototype);\n",
		"stdout": [
			"object\tfalse\tfalse",
			"number\tfalse\tfalse",
			"function\tfalse\tfalse",
			"object\tfalse\tfalse",
			"object\ttrue\tfalse"
		]
	},
	"simple.js": {
		"source": "var a = 2;\nvar b = 2;\n\nif ( 2 + 2 != 4 ) throw \"Didnt work!\";\nprint(\"Okay\");\n",
		"stdout": [
			"Okay"
		]
	},
	"test.js": {
		"source": "var rob = 2*3+4;\nconsole.log(\"Rob is\", rob);\nif ( rob % 2 == 1 ) {\n\tconsole.log(\"+\");\n} else {\n\tconsole.log(\"-\");\n}\n\nvar x = 2;\nfunction d(x) {\n\tconsole.log(\"Rob is great!\", x);\n\treturn x*2;\n\tconsole.log(\"Nope\");\n}\nvar rob2 = d(10);\nconsole.log(\"Okay\");\nd(rob2);\nconsole.log(x);\n\n//console.log(d(10))\n\nfunction start(d) {\n\tvar count = d;\n\tfunction p() {\n\t\tconsole.log(++count);\n\t}\n\treturn p;\n}\n\nvar z = start(10);\nz()\nz()\nz()\nvar y = start(100)\ny()\ny()\nz()\ny()\nvar o = {a: 1, b: 2, c: 3};",
		"stdout": [
			"Rob is\t10",
			"-",
			"Rob is great!\t10",
			"Okay",
			"Rob is great!\t20",
			"2",
			"11",
			"12",
			"13",
			"101",
			"102",
			"14",
			"103"
		]
	}
}