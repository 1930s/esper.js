/*!
 * esper.js
 * 
 * Compiled: Wed Apr 19 2017 23:41:00 GMT-0700 (PDT)
 * Target  : web (umd)
 * Profile : web
 * Version : 077e05b
 * 
 * 
 * The MIT License (MIT)
 * Copyright (c) 2016 Robert Blanckaert
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["esper"] = factory();
	else
		root["esper"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 220);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(36);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(204);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _defineProperties = __webpack_require__(146);

var _defineProperties2 = _interopRequireDefault(_defineProperties);

var _typeof2 = __webpack_require__(25);

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = __webpack_require__(64);

var _weakMap2 = _interopRequireDefault(_weakMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CompletionRecord = __webpack_require__(7);
var GenDash = __webpack_require__(33);

var undef = void 0,
    nil = void 0,
    tru = void 0,
    fals = void 0,
    nan = void 0,
    emptyString = void 0,
    zero = void 0,
    one = void 0,
    negone = void 0,
    negzero = void 0,
    smallIntValues = void 0;
var cache = new _weakMap2.default();
var bookmarks = new _weakMap2.default();
var ObjectValue = void 0,
    PrimitiveValue = void 0,
    StringValue = void 0,
    NumberValue = void 0,
    BridgeValue = void 0,
    Evaluator = void 0;

var serial = 0;
/**
 * Represents a value a variable could take.
 */

var Value = function () {
	(0, _createClass3.default)(Value, null, [{
		key: 'fromPrimativeNative',

		/**
   * Convert a native javascript primative value to a Value
   * @param {any} value - The value to convert
   */
		value: function fromPrimativeNative(value) {
			if (!value) {
				if (value === undefined) return undef;
				if (value === null) return nil;
				if (value === false) return fals;
				if (value === '') return emptyString;
			}

			if (value === true) return tru;

			if (typeof value === 'number') {
				if (value === 0) {
					return 1 / value > 0 ? zero : negzero;
				}
				if (value | 0 === value) {
					var snv = smallIntValues[value + 1];
					if (snv) return snv;
				}
				return new NumberValue(value);
			}
			if (typeof value === 'string') return new StringValue(value);
			if (typeof value === 'boolean') return new PrimitiveValue(value);
		}
	}, {
		key: 'hasBookmark',
		value: function hasBookmark(native) {
			return bookmarks.has(native);
		}
	}, {
		key: 'getBookmark',
		value: function getBookmark(native) {
			return bookmarks.get(native);
		}

		/**
   * Convert a native javascript value to a Value
   *
   * @param {any} value - The value to convert
   * @param {Realm} realm - The realm of the new value.
   */

	}, {
		key: 'fromNative',
		value: function fromNative(value, realm) {
			if (value instanceof Value) return value;
			var prim = Value.fromPrimativeNative(value);
			if (prim) return prim;

			if (value instanceof Error) {
				if (!realm) throw new Error('We needed a realm, but we didnt have one.  We were sad :(');
				if (value instanceof TypeError) return realm.TypeError.makeFrom(value);
				if (value instanceof ReferenceError) return realm.ReferenceError.makeFrom(value);
				if (value instanceof SyntaxError) return realm.SyntaxError.makeFrom(value);else return realm.Error.makeFrom(value);
			}

			if (Value.hasBookmark(value)) {
				return Value.getBookmark(value);
			}

			throw new TypeError('Tried to load an unsafe native value into the interperter:' + (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) + ' / ' + value);
			//TODO: Is this cache dangerous?
			if (!cache.has(value)) {
				var nue = new BridgeValue(realm, value);
				cache.set(value, nue);
				return nue;
			}
			return cache.get(value);
		}

		/**
   * Holds a value representing `undefined`
   *
   * @returns {UndefinedValue}
   */

	}, {
		key: 'createNativeBookmark',
		value: function createNativeBookmark(v, realm) {
			var out;
			var thiz = this;
			if (typeof v.call === 'function') {
				switch (realm.options.bookmarkInvocationMode) {
					case 'loop':

						out = function Bookmark() {
							var Evaluator = __webpack_require__(88);
							var cthis = realm.makeForForeignObject(this);
							var c = v.call(cthis, [], realm.globalScope);
							var evalu = new Evaluator(realm, null, realm.globalScope);
							evalu.pushFrame({ type: 'program', generator: c, scope: realm.globalScope });
							var gen = evalu.generator();
							var result = void 0;
							do {
								result = gen.next();
							} while (!result.done);
							return result.value.toNative();
						};
						break;
					default:
						out = function Bookmark() {
							throw new Error('Atempted to invoke bookmark for ' + v.debugString);
						};
				}
			} else {
				out = {};
			}
			(0, _defineProperties2.default)(out, {
				toString: { value: function value() {
						return v.debugString;
					}, writable: true },
				inspect: { value: function value() {
						return v.debugString;
					}, writable: true }
			});
			bookmarks.set(out, v);
			return out;
		}
	}, {
		key: 'undef',
		get: function get() {
			return undef;
		}

		/**
   * Holds a value representing `null`
   *
   * @returns {NullValue}
   */

	}, {
		key: 'null',
		get: function get() {
			return nil;
		}

		/**
   * Holds a value representing `true`
   *
   * @returns {BooleanValue} true
   */

	}, {
		key: 'true',
		get: function get() {
			return tru;
		}

		/**
   * Holds a value representing `fasle`
   *
   * @returns {BooleanValue} false
   */

	}, {
		key: 'false',
		get: function get() {
			return fals;
		}

		/**
   * Holds a value representing `NaN`
   *
   * @returns {NumberValue} NaN
   */

	}, {
		key: 'nan',
		get: function get() {
			return nan;
		}

		/**
   * Holds a value representing `''`
   *
   * @returns {StringValue} ''
   */

	}, {
		key: 'emptyString',
		get: function get() {
			return emptyString;
		}

		/**
   * Holds a value representing `0`
   *
   * @returns {NumberValue} 0
   */

	}, {
		key: 'zero',
		get: function get() {
			return zero;
		}
	}]);

	function Value() {
		(0, _classCallCheck3.default)(this, Value);

		this.serial = serial++;
	}

	/**
  * Converts this value to a native javascript value.
  *
  * @abstract
  * @returns {*}
  */


	(0, _createClass3.default)(Value, [{
		key: 'toNative',
		value: function toNative() {
			throw new Error('Unimplemented: Value#toNative');
		}

		/**
   * A string representation of this Value suitable for display when
   * debugging.
   * @abstract
   * @returns {string}
   */

	}, {
		key: 'inspect',
		value: function inspect() {
			return this.debugString;
		}

		//TODO: Kill this

	}, {
		key: 'fromNative',
		value: function fromNative(other, realm) {
			return Value.fromNative(other, realm);
		}

		/**
   * Indexes the value to get the value of a property.
   * i.e. `value[name]`
   * @param {String} name
   * @param {Realm} realm
   * @abstract
   * @returns {Value}
   */

	}, {
		key: 'get',
		value: _regenerator2.default.mark(function get(name, realm) {
			var err;
			return _regenerator2.default.wrap(function get$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							err = "Can't access get " + name + ' of that type: ' + __webpack_require__(208).inspect(this);
							return _context.abrupt('return', CompletionRecord.makeTypeError(realm, err));

						case 2:
						case 'end':
							return _context.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'getImmediate',
		value: function getImmediate(name) {
			return GenDash.syncGenHelper(this.get(name));
		}

		/**
   * Computes the javascript expression `!value`
   * @returns {Value}
   */

	}, {
		key: 'not',
		value: _regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.abrupt('return', !this.truthy ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context2.stop();
					}
				}
			}, not, this);
		})

		/**
   * Computes the javascript expression `+value`
   * @returns {Value}
   */

	}, {
		key: 'unaryPlus',
		value: _regenerator2.default.mark(function unaryPlus() {
			return _regenerator2.default.wrap(function unaryPlus$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							_context3.t0 = Value;
							return _context3.delegateYield(this.toNumberValue(), 't1', 2);

						case 2:
							_context3.t2 = +_context3.t1;
							return _context3.abrupt('return', _context3.t0.fromNative.call(_context3.t0, _context3.t2));

						case 4:
						case 'end':
							return _context3.stop();
					}
				}
			}, unaryPlus, this);
		})

		/**
   * Computes the javascript expression `-value`
   * @returns {Value}
   */

	}, {
		key: 'unaryMinus',
		value: _regenerator2.default.mark(function unaryMinus() {
			return _regenerator2.default.wrap(function unaryMinus$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							_context4.t0 = Value;
							return _context4.delegateYield(this.toNumberValue(), 't1', 2);

						case 2:
							_context4.t2 = -_context4.t1;
							return _context4.abrupt('return', _context4.t0.fromNative.call(_context4.t0, _context4.t2));

						case 4:
						case 'end':
							return _context4.stop();
					}
				}
			}, unaryMinus, this);
		})

		/**
   * Computes the javascript expression `typeof value`
   * @returns {Value}
   */

	}, {
		key: 'typeOf',
		value: _regenerator2.default.mark(function typeOf() {
			return _regenerator2.default.wrap(function typeOf$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', Value.fromNative(this.jsTypeName));

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, typeOf, this);
		})

		/**
   * Computes the javascript expression `!(value == other)`
   * @param {Value} other - The other value
   * @param {Realm} realm - The realm to use when creating resuls.
   * @returns {Value}
   */

	}, {
		key: 'notEquals',
		value: _regenerator2.default.mark(function notEquals(other, realm) {
			var result;
			return _regenerator2.default.wrap(function notEquals$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(this.doubleEquals(other, realm), 't0', 1);

						case 1:
							result = _context6.t0;
							return _context6.delegateYield(result.not(), 't1', 3);

						case 3:
							return _context6.abrupt('return', _context6.t1);

						case 4:
						case 'end':
							return _context6.stop();
					}
				}
			}, notEquals, this);
		})

		/**
   * Computes the javascript expression `!(value === other)`
   * @param {Value} other - The other value
   * @param {Realm} realm - The realm to use when creating resuls.
   * @returns {Value}
   */

	}, {
		key: 'doubleNotEquals',
		value: _regenerator2.default.mark(function doubleNotEquals(other, realm) {
			var result;
			return _regenerator2.default.wrap(function doubleNotEquals$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.delegateYield(this.tripleEquals(other, realm), 't0', 1);

						case 1:
							result = _context7.t0;
							return _context7.delegateYield(result.not(), 't1', 3);

						case 3:
							return _context7.abrupt('return', _context7.t1);

						case 4:
						case 'end':
							return _context7.stop();
					}
				}
			}, doubleNotEquals, this);
		})

		/**
   * Computes the javascript expression `value === other`
   * @param {Value} other - The other value
   * @param {Realm} realm - The realm to use when creating resuls.
   * @returns {Value}
   */

	}, {
		key: 'tripleEquals',
		value: _regenerator2.default.mark(function tripleEquals(other, realm) {
			return _regenerator2.default.wrap(function tripleEquals$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.abrupt('return', other === this ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context8.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'makeThisForNew',
		value: _regenerator2.default.mark(function makeThisForNew(realm) {
			var nue, p;
			return _regenerator2.default.wrap(function makeThisForNew$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							nue = new ObjectValue(realm);
							p = this.properties['prototype'];

							if (p) nue.setPrototype(p.value);
							return _context9.abrupt('return', nue);

						case 4:
						case 'end':
							return _context9.stop();
					}
				}
			}, makeThisForNew, this);
		})

		/**
   * Computes the javascript expression `value > other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'gt',
		value: _regenerator2.default.mark(function gt(other) {
			return _regenerator2.default.wrap(function gt$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							_context10.t0 = this;
							return _context10.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context10.t2 = _context10.t1;
							return _context10.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context10.t4 = _context10.t3;
							_context10.t5 = _context10.t2 > _context10.t4;
							return _context10.abrupt('return', _context10.t0.fromNative.call(_context10.t0, _context10.t5));

						case 7:
						case 'end':
							return _context10.stop();
					}
				}
			}, gt, this);
		})

		/**
   * Computes the javascript expression `value < other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'lt',
		value: _regenerator2.default.mark(function lt(other) {
			return _regenerator2.default.wrap(function lt$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							_context11.t0 = this;
							return _context11.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context11.t2 = _context11.t1;
							return _context11.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context11.t4 = _context11.t3;
							_context11.t5 = _context11.t2 < _context11.t4;
							return _context11.abrupt('return', _context11.t0.fromNative.call(_context11.t0, _context11.t5));

						case 7:
						case 'end':
							return _context11.stop();
					}
				}
			}, lt, this);
		})

		/**
   * Computes the javascript expression `value >= other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'gte',
		value: _regenerator2.default.mark(function gte(other) {
			return _regenerator2.default.wrap(function gte$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							_context12.t0 = this;
							return _context12.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context12.t2 = _context12.t1;
							return _context12.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context12.t4 = _context12.t3;
							_context12.t5 = _context12.t2 >= _context12.t4;
							return _context12.abrupt('return', _context12.t0.fromNative.call(_context12.t0, _context12.t5));

						case 7:
						case 'end':
							return _context12.stop();
					}
				}
			}, gte, this);
		})

		/**
   * Computes the javascript expression `value <= other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'lte',
		value: _regenerator2.default.mark(function lte(other) {
			return _regenerator2.default.wrap(function lte$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							_context13.t0 = this;
							return _context13.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context13.t2 = _context13.t1;
							return _context13.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context13.t4 = _context13.t3;
							_context13.t5 = _context13.t2 <= _context13.t4;
							return _context13.abrupt('return', _context13.t0.fromNative.call(_context13.t0, _context13.t5));

						case 7:
						case 'end':
							return _context13.stop();
					}
				}
			}, lte, this);
		})

		/**
   * Computes the javascript expression `value - other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'subtract',
		value: _regenerator2.default.mark(function subtract(other) {
			return _regenerator2.default.wrap(function subtract$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							_context14.t0 = this;
							return _context14.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context14.t2 = _context14.t1;
							return _context14.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context14.t4 = _context14.t3;
							_context14.t5 = _context14.t2 - _context14.t4;
							return _context14.abrupt('return', _context14.t0.fromNative.call(_context14.t0, _context14.t5));

						case 7:
						case 'end':
							return _context14.stop();
					}
				}
			}, subtract, this);
		})

		/**
   * Computes the javascript expression `value / other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'divide',
		value: _regenerator2.default.mark(function divide(other) {
			return _regenerator2.default.wrap(function divide$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							_context15.t0 = this;
							return _context15.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context15.t2 = _context15.t1;
							return _context15.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context15.t4 = _context15.t3;
							_context15.t5 = _context15.t2 / _context15.t4;
							return _context15.abrupt('return', _context15.t0.fromNative.call(_context15.t0, _context15.t5));

						case 7:
						case 'end':
							return _context15.stop();
					}
				}
			}, divide, this);
		})

		/**
   * Computes the javascript expression `value * other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'multiply',
		value: _regenerator2.default.mark(function multiply(other) {
			return _regenerator2.default.wrap(function multiply$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							_context16.t0 = this;
							return _context16.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context16.t2 = _context16.t1;
							return _context16.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context16.t4 = _context16.t3;
							_context16.t5 = _context16.t2 * _context16.t4;
							return _context16.abrupt('return', _context16.t0.fromNative.call(_context16.t0, _context16.t5));

						case 7:
						case 'end':
							return _context16.stop();
					}
				}
			}, multiply, this);
		})

		/**
   * Computes the javascript expression `value % other`
   * @param {Value} other - The other value
   * @returns {Value}
   */

	}, {
		key: 'mod',
		value: _regenerator2.default.mark(function mod(other) {
			return _regenerator2.default.wrap(function mod$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							_context17.t0 = this;
							return _context17.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context17.t2 = _context17.t1;
							return _context17.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context17.t4 = _context17.t3;
							_context17.t5 = _context17.t2 % _context17.t4;
							return _context17.abrupt('return', _context17.t0.fromNative.call(_context17.t0, _context17.t5));

						case 7:
						case 'end':
							return _context17.stop();
					}
				}
			}, mod, this);
		})
	}, {
		key: 'bitNot',
		value: _regenerator2.default.mark(function bitNot() {
			return _regenerator2.default.wrap(function bitNot$(_context18) {
				while (1) {
					switch (_context18.prev = _context18.next) {
						case 0:
							_context18.t0 = this;
							return _context18.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context18.t2 = ~_context18.t1;
							return _context18.abrupt('return', _context18.t0.fromNative.call(_context18.t0, _context18.t2));

						case 4:
						case 'end':
							return _context18.stop();
					}
				}
			}, bitNot, this);
		})
	}, {
		key: 'shiftLeft',
		value: _regenerator2.default.mark(function shiftLeft(other) {
			return _regenerator2.default.wrap(function shiftLeft$(_context19) {
				while (1) {
					switch (_context19.prev = _context19.next) {
						case 0:
							_context19.t0 = this;
							return _context19.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context19.t2 = _context19.t1;
							return _context19.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context19.t4 = _context19.t3;
							_context19.t5 = _context19.t2 << _context19.t4;
							return _context19.abrupt('return', _context19.t0.fromNative.call(_context19.t0, _context19.t5));

						case 7:
						case 'end':
							return _context19.stop();
					}
				}
			}, shiftLeft, this);
		})
	}, {
		key: 'shiftRight',
		value: _regenerator2.default.mark(function shiftRight(other) {
			return _regenerator2.default.wrap(function shiftRight$(_context20) {
				while (1) {
					switch (_context20.prev = _context20.next) {
						case 0:
							_context20.t0 = this;
							return _context20.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context20.t2 = _context20.t1;
							return _context20.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context20.t4 = _context20.t3;
							_context20.t5 = _context20.t2 >> _context20.t4;
							return _context20.abrupt('return', _context20.t0.fromNative.call(_context20.t0, _context20.t5));

						case 7:
						case 'end':
							return _context20.stop();
					}
				}
			}, shiftRight, this);
		})
	}, {
		key: 'shiftRightZF',
		value: _regenerator2.default.mark(function shiftRightZF(other) {
			return _regenerator2.default.wrap(function shiftRightZF$(_context21) {
				while (1) {
					switch (_context21.prev = _context21.next) {
						case 0:
							_context21.t0 = this;
							return _context21.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context21.t2 = _context21.t1;
							return _context21.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context21.t4 = _context21.t3;
							_context21.t5 = _context21.t2 >>> _context21.t4;
							return _context21.abrupt('return', _context21.t0.fromNative.call(_context21.t0, _context21.t5));

						case 7:
						case 'end':
							return _context21.stop();
					}
				}
			}, shiftRightZF, this);
		})
	}, {
		key: 'bitAnd',
		value: _regenerator2.default.mark(function bitAnd(other) {
			return _regenerator2.default.wrap(function bitAnd$(_context22) {
				while (1) {
					switch (_context22.prev = _context22.next) {
						case 0:
							_context22.t0 = this;
							return _context22.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context22.t2 = _context22.t1;
							return _context22.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context22.t4 = _context22.t3;
							_context22.t5 = _context22.t2 & _context22.t4;
							return _context22.abrupt('return', _context22.t0.fromNative.call(_context22.t0, _context22.t5));

						case 7:
						case 'end':
							return _context22.stop();
					}
				}
			}, bitAnd, this);
		})
	}, {
		key: 'bitOr',
		value: _regenerator2.default.mark(function bitOr(other) {
			return _regenerator2.default.wrap(function bitOr$(_context23) {
				while (1) {
					switch (_context23.prev = _context23.next) {
						case 0:
							_context23.t0 = this;
							return _context23.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context23.t2 = _context23.t1;
							return _context23.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context23.t4 = _context23.t3;
							_context23.t5 = _context23.t2 | _context23.t4;
							return _context23.abrupt('return', _context23.t0.fromNative.call(_context23.t0, _context23.t5));

						case 7:
						case 'end':
							return _context23.stop();
					}
				}
			}, bitOr, this);
		})
	}, {
		key: 'bitXor',
		value: _regenerator2.default.mark(function bitXor(other) {
			return _regenerator2.default.wrap(function bitXor$(_context24) {
				while (1) {
					switch (_context24.prev = _context24.next) {
						case 0:
							_context24.t0 = this;
							return _context24.delegateYield(this.toNumberNative(), 't1', 2);

						case 2:
							_context24.t2 = _context24.t1;
							return _context24.delegateYield(other.toNumberNative(), 't3', 4);

						case 4:
							_context24.t4 = _context24.t3;
							_context24.t5 = _context24.t2 ^ _context24.t4;
							return _context24.abrupt('return', _context24.t0.fromNative.call(_context24.t0, _context24.t5));

						case 7:
						case 'end':
							return _context24.stop();
					}
				}
			}, bitXor, this);
		})

		/**
   * Is the value is truthy, i.e. `!!value`
   *
   * @abstract
   * @type {boolean}
   */

	}, {
		key: 'toNumberValue',
		value: _regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context25) {
				while (1) {
					switch (_context25.prev = _context25.next) {
						case 0:
							throw new Error('Unimplemented: Value#toNumberValue');

						case 1:
						case 'end':
							return _context25.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toStringValue',
		value: _regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context26) {
				while (1) {
					switch (_context26.prev = _context26.next) {
						case 0:
							throw new Error('Unimplemented: Value#StringValue');

						case 1:
						case 'end':
							return _context26.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'toStringNative',
		value: _regenerator2.default.mark(function toStringNative() {
			return _regenerator2.default.wrap(function toStringNative$(_context27) {
				while (1) {
					switch (_context27.prev = _context27.next) {
						case 0:
							return _context27.delegateYield(this.toStringValue(), 't0', 1);

						case 1:
							return _context27.abrupt('return', _context27.t0.native);

						case 2:
						case 'end':
							return _context27.stop();
					}
				}
			}, toStringNative, this);
		})
	}, {
		key: 'toBooleanValue',
		value: _regenerator2.default.mark(function toBooleanValue() {
			return _regenerator2.default.wrap(function toBooleanValue$(_context28) {
				while (1) {
					switch (_context28.prev = _context28.next) {
						case 0:
							return _context28.abrupt('return', this.truthy ? tru : fals);

						case 1:
						case 'end':
							return _context28.stop();
					}
				}
			}, toBooleanValue, this);
		})
	}, {
		key: 'toUIntNative',
		value: _regenerator2.default.mark(function toUIntNative() {
			var nv;
			return _regenerator2.default.wrap(function toUIntNative$(_context29) {
				while (1) {
					switch (_context29.prev = _context29.next) {
						case 0:
							return _context29.delegateYield(this.toNumberValue(), 't0', 1);

						case 1:
							nv = _context29.t0;
							return _context29.abrupt('return', Math.floor(nv.native));

						case 3:
						case 'end':
							return _context29.stop();
					}
				}
			}, toUIntNative, this);
		})
	}, {
		key: 'toIntNative',
		value: _regenerator2.default.mark(function toIntNative() {
			var nv;
			return _regenerator2.default.wrap(function toIntNative$(_context30) {
				while (1) {
					switch (_context30.prev = _context30.next) {
						case 0:
							return _context30.delegateYield(this.toNumberValue(), 't0', 1);

						case 1:
							nv = _context30.t0;
							return _context30.abrupt('return', Math.floor(nv.native));

						case 3:
						case 'end':
							return _context30.stop();
					}
				}
			}, toIntNative, this);
		})
	}, {
		key: 'toNumberNative',
		value: _regenerator2.default.mark(function toNumberNative() {
			var nv;
			return _regenerator2.default.wrap(function toNumberNative$(_context31) {
				while (1) {
					switch (_context31.prev = _context31.next) {
						case 0:
							return _context31.delegateYield(this.toNumberValue(), 't0', 1);

						case 1:
							nv = _context31.t0;
							return _context31.abrupt('return', nv.native);

						case 3:
						case 'end':
							return _context31.stop();
					}
				}
			}, toNumberNative, this);
		})
	}, {
		key: 'toPrimitiveValue',
		value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context32) {
				while (1) {
					switch (_context32.prev = _context32.next) {
						case 0:
							throw new Error('Unimplemented: Value#toPrimitiveValue');

						case 1:
						case 'end':
							return _context32.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toPrimitiveNative',
		value: _regenerator2.default.mark(function toPrimitiveNative(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveNative$(_context33) {
				while (1) {
					switch (_context33.prev = _context33.next) {
						case 0:
							return _context33.delegateYield(this.toPrimitiveValue(preferedType), 't0', 1);

						case 1:
							return _context33.abrupt('return', _context33.t0.native);

						case 2:
						case 'end':
							return _context33.stop();
					}
				}
			}, toPrimitiveNative, this);
		})

		/**
   * Quickly make a generator for this value
   */

	}, {
		key: 'fastGen',
		value: _regenerator2.default.mark(function fastGen() {
			return _regenerator2.default.wrap(function fastGen$(_context34) {
				while (1) {
					switch (_context34.prev = _context34.next) {
						case 0:
							return _context34.abrupt('return', this);

						case 1:
						case 'end':
							return _context34.stop();
					}
				}
			}, fastGen, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			var native = this.toNative();
			return native ? native.toString() : '???';
		}
	}, {
		key: 'truthy',
		get: function get() {
			throw new Error('Unimplemented: Value#truthy');
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			throw new Error('Unimplemented: Value#jsTypeName');
		}
	}, {
		key: 'specTypeName',
		get: function get() {
			return this.jsTypeName;
		}
	}, {
		key: 'isCallable',
		get: function get() {
			return typeof this.call === 'function';
		}
	}]);
	return Value;
}();

module.exports = Value;

ObjectValue = __webpack_require__(9);
PrimitiveValue = __webpack_require__(12);
StringValue = __webpack_require__(45);
NumberValue = __webpack_require__(61);
var UndefinedValue = __webpack_require__(92);
var NullValue = __webpack_require__(60);

undef = new UndefinedValue();
nil = new NullValue();
tru = new PrimitiveValue(true);
fals = new PrimitiveValue(false);
nan = new PrimitiveValue(NaN);
emptyString = new StringValue('');

zero = new NumberValue(0);
negzero = new NumberValue(-0);
one = new NumberValue(1);
negone = new NumberValue(-1);
smallIntValues = [negone, zero, one, new NumberValue(2), new NumberValue(3), new NumberValue(4), new NumberValue(5), new NumberValue(6), new NumberValue(7), new NumberValue(8), new NumberValue(9)];

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(157), __esModule: true };

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(95);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(29);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(25);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(25);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);

var CompletionRecord = function () {
	function CompletionRecord(type, value, target) {
		(0, _classCallCheck3.default)(this, CompletionRecord);

		if (value === undefined) {
			value = type;
			type = CompletionRecord.NORMAL;
		}

		this.type = type;
		this.value = value;
		this.target = target;
	}

	(0, _createClass3.default)(CompletionRecord, [{
		key: 'addExtra',


		/**
   * Easy access to value.addExtra.
   * Note: Returns a generator.
   * @param {Object} obj - Extra properties
   */
		value: function addExtra(obj) {
			return this.value.addExtra(obj);
		}
	}, {
		key: 'abrupt',
		get: function get() {
			return this.type !== CompletionRecord.NORMAL;
		}
	}], [{
		key: 'makeTypeError',
		value: function makeTypeError(realm, msg) {
			var err = void 0;
			if (msg instanceof Error) err = realm.TypeError.makeFrom(msg);else err = realm.TypeError.make(msg);
			return new CompletionRecord(CompletionRecord.THROW, err);
		}
	}, {
		key: 'makeReferenceError',
		value: function makeReferenceError(realm, msg) {
			var err = void 0;
			if (msg instanceof Error) err = realm.ReferenceError.makeFrom(msg);else err = realm.ReferenceError.make(msg);
			return new CompletionRecord(CompletionRecord.THROW, err);
		}
	}, {
		key: 'makeSyntaxError',
		value: function makeSyntaxError(realm, msg) {
			var err = void 0;
			if (msg instanceof Error) err = realm.SyntaxError.makeFrom(msg);else err = realm.SyntaxError.make(msg);
			return new CompletionRecord(CompletionRecord.THROW, err);
		}
	}, {
		key: 'makeRangeError',
		value: function makeRangeError(realm, msg) {
			var err = void 0;
			if (msg instanceof Error) err = realm.RangeError.makeFrom(msg);else err = realm.RangeError.make(msg);
			return new CompletionRecord(CompletionRecord.THROW, err);
		}
	}]);
	return CompletionRecord;
}();

module.exports = CompletionRecord;

CompletionRecord.NORMAL = 0;
CompletionRecord.BREAK = 1;
CompletionRecord.CONTINUE = 2;
CompletionRecord.RETURN = 3;
CompletionRecord.THROW = 4;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _getOwnPropertyDescriptor = __webpack_require__(93);

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getOwnPropertyNames = __webpack_require__(94);

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var PropertyDescriptor = __webpack_require__(15);
var ObjectValue = __webpack_require__(9);
var CompletionRecord = __webpack_require__(7);
var EasyNativeFunction = __webpack_require__(35);

var EasyObjectValue = function (_ObjectValue) {
	(0, _inherits3.default)(EasyObjectValue, _ObjectValue);

	function EasyObjectValue(realm) {
		(0, _classCallCheck3.default)(this, EasyObjectValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (EasyObjectValue.__proto__ || (0, _getPrototypeOf2.default)(EasyObjectValue)).call(this, realm));

		var objProto = realm.ObjectPrototype;
		if (typeof _this.objPrototype === 'function') {
			objProto = _this.objPrototype(realm);
		} else if (typeof _this.call === 'function') {
			objProto = realm.FunctionPrototype;
		}
		if (_this.call == 'function') _this.clazz = 'Function';
		_this.setPrototype(objProto);

		_this._init(realm);
		return _this;
	}

	(0, _createClass3.default)(EasyObjectValue, [{
		key: '_init',
		value: function _init(realm) {
			var clazz = (0, _getPrototypeOf2.default)(this);
			for (var _iterator = (0, _getOwnPropertyNames2.default)(clazz.constructor), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var p = _ref;

				if (p === 'length') continue;
				if (p === 'name') continue;
				if (p === 'prototype') continue;
				if (p === 'constructor') continue;
				if (p === 'caller') continue;
				if (p === 'callee') continue;
				if (p === 'arguments') continue;
				var parts = p.split(/\$/);
				var name = parts[0];
				var flags = parts[1] || '';
				var d = (0, _getOwnPropertyDescriptor2.default)(clazz.constructor, p);
				var v = new PropertyDescriptor();
				var length = 1;

				if (d.get) {
					//Its a property
					var val = d.get();
					if (val instanceof Value) v.value = val;else v.value = this.fromNative(val);
				} else {
					if (d.value.esperLength !== undefined) length = d.value.esperLength;
					var rb = EasyNativeFunction.make(realm, d.value, this);
					var _rblen = new PropertyDescriptor(Value.fromNative(length));
					_rblen.configurable = false;
					_rblen.writable = false;
					_rblen.enumerable = false;
					rb.properties['length'] = _rblen;
					v.value = rb;
				}
				if (flags.indexOf('e') !== -1) v.enumerable = false;
				if (flags.indexOf('w') !== -1) v.writable = false;
				if (flags.indexOf('c') !== -1) v.configurable = false;
				if (flags.indexOf('g') !== -1) {
					v.getter = v.value;
					delete v.value;
				}
				this.properties[name] = v;
			}

			if (this.callPrototype) {
				var pt = new PropertyDescriptor(this.callPrototype(realm));
				pt.configurable = false;
				pt.enumerable = false;
				pt.writable = false;
				this.properties['prototype'] = pt;
			}

			if (this.callLength !== undefined) {
				var rblen = new PropertyDescriptor(Value.fromNative(this.callLength));
				rblen.configurable = false;
				rblen.writable = false;
				rblen.enumerable = false;
				this.properties['length'] = rblen;
			}

			if (this.constructorFor) {
				var target = this.constructorFor(realm);
				if (target) {
					var cs = new PropertyDescriptor(this);
					cs.configurable = false;
					cs.enumerable = false;
					target.properties['constructor'] = cs;
				}
			}

			if (realm.Function) {
				var _cs = new PropertyDescriptor(realm.Function);
				_cs.configurable = false;
				_cs.enumerable = false;
				this.properties['constructor'] = _cs;
			}
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return typeof this.call === 'function' ? 'function' : 'object';
		}
	}]);
	return EasyObjectValue;
}(ObjectValue);

EasyObjectValue.EasyNativeFunction = EasyNativeFunction;

module.exports = EasyObjectValue;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _setPrototypeOf = __webpack_require__(95);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _defineProperty = __webpack_require__(36);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _create = __webpack_require__(29);

var _create2 = _interopRequireDefault(_create);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var PropertyDescriptor = __webpack_require__(15);
var CompletionRecord = __webpack_require__(7);
var PrimitiveValue = __webpack_require__(12);
var NullValue = __webpack_require__(60);
var GenDash = __webpack_require__(33);

var alwaysFalse = function alwaysFalse() {
	return false;
};
var undefinedReturningGenerator = _regenerator2.default.mark(function undefinedReturningGenerator() {
	return _regenerator2.default.wrap(function undefinedReturningGenerator$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					return _context.abrupt('return', Value.undef);

				case 1:
				case 'end':
					return _context.stop();
			}
		}
	}, undefinedReturningGenerator, this);
});

var ObjRefrence = function () {
	function ObjRefrence(object, name, ctxthis) {
		(0, _classCallCheck3.default)(this, ObjRefrence);

		this.object = object;
		this.name = name;
		this.ctxthis = ctxthis;
	}

	(0, _createClass3.default)(ObjRefrence, [{
		key: 'del',
		value: function del(s) {
			return this.object.delete(this.name, s);
		}
	}, {
		key: 'getValue',
		value: function getValue(s) {
			return this.object.get(this.name, this.ctxthis || this.object, s);
		}
	}, {
		key: 'setValue',
		value: function setValue(value, s) {
			return this.object.set(this.name, value, s);
		}
	}]);
	return ObjRefrence;
}();

/**
 * Represents an Object.
 */


var ObjectValue = function (_Value) {
	(0, _inherits3.default)(ObjectValue, _Value);

	function ObjectValue(realm, proto) {
		(0, _classCallCheck3.default)(this, ObjectValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (ObjectValue.__proto__ || (0, _getPrototypeOf2.default)(ObjectValue)).call(this));

		_this.extensable = true;
		_this.realm = realm;
		_this.proto = null;
		if (proto) _this.eraseAndSetPrototype(proto);else if (realm) _this.eraseAndSetPrototype(realm.ObjectPrototype);else _this.properties = (0, _create2.default)(null);
		return _this;
	}

	(0, _createClass3.default)(ObjectValue, [{
		key: 'ref',
		value: function ref(name, ctxthis) {
			var existing = this.properties[name];
			var thiz = this;

			var get = void 0;
			if (existing) {
				return new ObjRefrence(this, name, ctxthis);
			} else {
				return {
					name: name,
					object: thiz,
					isVariable: false,
					del: alwaysFalse,
					getValue: undefinedReturningGenerator,
					setValue: function setValue(to, s) {
						return this.object.set(this.name, to, s);
					}
				};
			}
		}

		//Note: Returns generator by tailcall.

	}, {
		key: 'set',
		value: function set(name, value, s, extra) {
			var thiz = this;
			extra = extra || {};
			if (!Object.prototype.hasOwnProperty.call(this.properties, name)) {
				if (!this.extensable) {
					//TODO: Should we throw here in strict mode?
					return Value.undef.fastGen();
				}
				var v = new PropertyDescriptor(value);
				v.enumerable = 'enumerable' in extra ? extra.enumerable : true;
				this.properties[name] = v;

				return v.setValue(this, value, s);
			}

			return this.properties[name].setValue(this, value, s);
		}
	}, {
		key: 'rawSetProperty',
		value: function rawSetProperty(name, value) {
			this.properties[name] = value;
		}
	}, {
		key: 'setImmediate',
		value: function setImmediate(name, value) {
			if (name in this.properties) {
				if (Object.prototype.hasOwnProperty.call(this.properties, name)) {
					if (this.properties[name].direct) {
						this.properties[name].value = value;
						return;
					}
				}
			} else if (this.extensable) {
				var v = new PropertyDescriptor(value);
				v.del = this.delete.bind(this, name);
				this.properties[name] = v;
				return;
			}
			return GenDash.syncGenHelper(this.set(name, value, this.realm));
		}
	}, {
		key: 'has',
		value: function has(name) {
			return name in this.properties;
		}
	}, {
		key: 'delete',
		value: function _delete(name, s) {
			var po = this.properties[name];
			if (!po.configurable) {
				if (s.strict) return CompletionRecord.makeTypeError(s.realm, "Can't delete nonconfigurable object");else return false;
			}
			return delete this.properties[name];
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			var _this2 = this;

			//TODO: This is really a mess and should maybe be somewhere else.
			var bk = Value.createNativeBookmark(this, this.realm);
			if (this.jsTypeName === 'function') return bk;

			var _loop = function _loop(p) {
				var name = p; //work around bug in FF where the scope of p is incorrect
				var po = _this2.properties[name];
				if (Object.prototype.hasOwnProperty.call(bk, name)) return 'continue';
				if (bk[p] !== undefined) return 'continue';

				(0, _defineProperty2.default)(bk, p, {
					get: function get() {
						var c = _this2.properties[name].value;
						return c === undefined ? undefined : c.toNative();
					},
					set: function set(v) {
						_this2.properties[name].value = Value.fromNative(v, _this2.realm);
					},
					enumerable: po.enumerable,
					configurable: po.configurable
				});
			};

			for (var p in this.properties) {
				var _ret = _loop(p);

				if (_ret === 'continue') continue;
			}
			return bk;
		}
	}, {
		key: 'add',
		value: _regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.delegateYield(this.toPrimitiveValue(), 't0', 1);

						case 1:
							_context2.t1 = other;
							return _context2.delegateYield(_context2.t0.add(_context2.t1), 't2', 3);

						case 3:
							return _context2.abrupt('return', _context2.t2);

						case 4:
						case 'end':
							return _context2.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'doubleEquals',
		value: _regenerator2.default.mark(function doubleEquals(other) {
			var hint, pv, pthis;
			return _regenerator2.default.wrap(function doubleEquals$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							if (!(other instanceof PrimitiveValue)) {
								_context3.next = 6;
								break;
							}

							hint = other.jsTypeName == 'string' ? 'string' : 'number';
							return _context3.delegateYield(this.toPrimitiveValue(hint), 't0', 3);

						case 3:
							pv = _context3.t0;
							return _context3.delegateYield(pv.doubleEquals(other), 't1', 5);

						case 5:
							return _context3.abrupt('return', _context3.t1);

						case 6:
							return _context3.delegateYield(this.toPrimitiveValue('string'), 't2', 7);

						case 7:
							pthis = _context3.t2;
							return _context3.delegateYield(pthis.doubleEquals(other), 't3', 9);

						case 9:
							return _context3.abrupt('return', _context3.t3);

						case 10:
						case 'end':
							return _context3.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'inOperator',
		value: _regenerator2.default.mark(function inOperator(str) {
			var svalue;
			return _regenerator2.default.wrap(function inOperator$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(str.toStringValue(), 't0', 1);

						case 1:
							svalue = _context4.t0;
							return _context4.abrupt('return', this.has(svalue.toNative()) ? Value.true : Value.false);

						case 3:
						case 'end':
							return _context4.stop();
					}
				}
			}, inOperator, this);
		})
	}, {
		key: 'get',
		value: _regenerator2.default.mark(function get(name, realm, ctxthis) {
			var existing;
			return _regenerator2.default.wrap(function get$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							existing = this.properties[name];

							if (existing) {
								_context5.next = 3;
								break;
							}

							return _context5.abrupt('return', Value.undef);

						case 3:
							if (!existing.direct) {
								_context5.next = 5;
								break;
							}

							return _context5.abrupt('return', existing.value);

						case 5:
							return _context5.delegateYield(existing.getValue(ctxthis || this), 't0', 6);

						case 6:
							return _context5.abrupt('return', _context5.t0);

						case 7:
						case 'end':
							return _context5.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'getImmediate',
		value: function getImmediate(name, realm, ctxthis) {
			var existing = this.properties[name];
			if (!existing) return Value.undef;
			if (existing.direct) return existing.value;
			return GenDash.syncGenHelper(existing.getValue(ctxthis || this));
		}
	}, {
		key: 'instanceOf',
		value: _regenerator2.default.mark(function instanceOf(other, realm) {
			return _regenerator2.default.wrap(function instanceOf$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(other.constructorOf(this, realm), 't0', 1);

						case 1:
							return _context6.abrupt('return', _context6.t0);

						case 2:
						case 'end':
							return _context6.stop();
					}
				}
			}, instanceOf, this);
		})
	}, {
		key: 'constructorOf',
		value: _regenerator2.default.mark(function constructorOf(what, realm) {
			var target, pt, checked;
			return _regenerator2.default.wrap(function constructorOf$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.delegateYield(this.get('prototype'), 't0', 1);

						case 1:
							target = _context7.t0;
							pt = what.getPrototype(realm);
							checked = [];

						case 4:
							if (!pt) {
								_context7.next = 13;
								break;
							}

							if (!(pt === target)) {
								_context7.next = 7;
								break;
							}

							return _context7.abrupt('return', Value.true);

						case 7:
							checked.push(pt);
							pt = pt.getPrototype(realm);

							if (!(checked.indexOf(pt) !== -1)) {
								_context7.next = 11;
								break;
							}

							return _context7.abrupt('return', Value.false);

						case 11:
							_context7.next = 4;
							break;

						case 13:
							return _context7.abrupt('return', Value.false);

						case 14:
						case 'end':
							return _context7.stop();
					}
				}
			}, constructorOf, this);
		})
	}, {
		key: 'observableProperties',
		value: _regenerator2.default.mark(function observableProperties(realm) {
			var p;
			return _regenerator2.default.wrap(function observableProperties$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							_context8.t0 = _regenerator2.default.keys(this.properties);

						case 1:
							if ((_context8.t1 = _context8.t0()).done) {
								_context8.next = 9;
								break;
							}

							p = _context8.t1.value;

							if (this.properties[p].enumerable) {
								_context8.next = 5;
								break;
							}

							return _context8.abrupt('continue', 1);

						case 5:
							_context8.next = 7;
							return this.fromNative(p);

						case 7:
							_context8.next = 1;
							break;

						case 9:
							return _context8.abrupt('return');

						case 10:
						case 'end':
							return _context8.stop();
					}
				}
			}, observableProperties, this);
		})
	}, {
		key: 'getPropertyValueMap',
		value: function getPropertyValueMap() {
			var list = {};
			for (var p in this.properties) {
				var v = this.properties[p];
				if (v.value) {
					list[p] = v.value;
				}
			}
			return list;
		}
	}, {
		key: 'hasOwnProperty',
		value: function hasOwnProperty(name) {
			return Object.prototype.hasOwnProperty.call(this.properties, name);
		}
	}, {
		key: 'setPrototype',
		value: function setPrototype(val) {
			if (!this.properties) return this.eraseAndSetPrototype(val);
			if (val === null || val === undefined || val instanceof NullValue) {
				(0, _setPrototypeOf2.default)(this.properties, null);
				this.proto = null;
				return;
			}
			this.proto = val;
			(0, _setPrototypeOf2.default)(this.properties, val.properties);
		}
	}, {
		key: 'eraseAndSetPrototype',
		value: function eraseAndSetPrototype(val) {
			if (val === null || val === undefined || val instanceof NullValue) {
				this.proto = null;
				this.properties = (0, _create2.default)(null);
			} else {
				this.proto = val;
				this.properties = (0, _create2.default)(val.properties);
			}
		}
	}, {
		key: 'getPrototype',
		value: function getPrototype() {
			return this.proto;
		}
	}, {
		key: 'toPrimitiveValue',
		value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			var methodNames, _iterator, _isArray, _i, _ref, _name, method, rescr, res;

			return _regenerator2.default.wrap(function toPrimitiveValue$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							methodNames = void 0;

							if (preferedType == 'string') {
								methodNames = ['toString', 'valueOf'];
							} else {
								methodNames = ['valueOf', 'toString'];
							}

							_iterator = methodNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 3:
							if (!_isArray) {
								_context9.next = 9;
								break;
							}

							if (!(_i >= _iterator.length)) {
								_context9.next = 6;
								break;
							}

							return _context9.abrupt('break', 36);

						case 6:
							_ref = _iterator[_i++];
							_context9.next = 13;
							break;

						case 9:
							_i = _iterator.next();

							if (!_i.done) {
								_context9.next = 12;
								break;
							}

							return _context9.abrupt('break', 36);

						case 12:
							_ref = _i.value;

						case 13:
							_name = _ref;
							return _context9.delegateYield(this.get(_name), 't0', 15);

						case 15:
							method = _context9.t0;

							if (!(method && method.call)) {
								_context9.next = 34;
								break;
							}

							return _context9.delegateYield(method.call(this, [], this.realm.globalScope), 't1', 18);

						case 18:
							_context9.next = 20;
							return _context9.t1;

						case 20:
							rescr = _context9.sent;
							//TODO: There should be more aruments here
							res = Value.undef;

							if (rescr instanceof CompletionRecord) {
								_context9.next = 26;
								break;
							}

							res = rescr;
							_context9.next = 32;
							break;

						case 26:
							if (!(rescr.type == CompletionRecord.RETURN)) {
								_context9.next = 30;
								break;
							}

							res = rescr.value;
							_context9.next = 32;
							break;

						case 30:
							if (!(rescr.type != CompletionRecord.NORMAL)) {
								_context9.next = 32;
								break;
							}

							return _context9.abrupt('continue', 34);

						case 32:
							if (!(res.specTypeName !== 'object')) {
								_context9.next = 34;
								break;
							}

							return _context9.abrupt('return', res);

						case 34:
							_context9.next = 3;
							break;

						case 36:
							_context9.next = 38;
							return CompletionRecord.makeTypeError(this.realm, 'Cannot convert object to primitive value');

						case 38:
							return _context9.abrupt('return', _context9.sent);

						case 39:
						case 'end':
							return _context9.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toNumberValue',
		value: _regenerator2.default.mark(function toNumberValue() {
			var prim;
			return _regenerator2.default.wrap(function toNumberValue$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.delegateYield(this.toPrimitiveValue('number'), 't0', 1);

						case 1:
							prim = _context10.t0;
							return _context10.delegateYield(prim.toNumberValue(), 't1', 3);

						case 3:
							return _context10.abrupt('return', _context10.t1);

						case 4:
						case 'end':
							return _context10.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toObjectValue',
		value: _regenerator2.default.mark(function toObjectValue(realm) {
			return _regenerator2.default.wrap(function toObjectValue$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', this);

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, toObjectValue, this);
		})
	}, {
		key: 'toStringValue',
		value: _regenerator2.default.mark(function toStringValue() {
			var prim, gen;
			return _regenerator2.default.wrap(function toStringValue$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.delegateYield(this.toPrimitiveValue('string'), 't0', 1);

						case 1:
							prim = _context12.t0;
							gen = prim.toStringValue();
							return _context12.delegateYield(gen, 't1', 4);

						case 4:
							return _context12.abrupt('return', _context12.t1);

						case 5:
						case 'end':
							return _context12.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			var strProps = ['{', '[', this.clazz, ']'];
			var delim = [];
			if (this.wellKnownName) {
				strProps.push('(', this.wellKnownName, ')');
			}
			if (this.proto) {
				delim.push('[[Prototype]]: ' + (this.proto.wellKnownName || this.proto.clazz || this.proto.jsTypeName));
			}
			for (var n in this.properties) {
				if (!Object.prototype.hasOwnProperty.call(this.properties, n)) continue;
				var val = this.properties[n].value;
				if (this.properties[n].getter || this.properties[n].setter) delim.push(n + ': [Getter/Setter]');else if (val.specTypeName === 'object') delim.push(n + ': [Object]');else if (val.specTypeName === 'function') delim.push(n + ': [Function]');else delim.push(n + ': ' + val.debugString);
			}
			strProps.push(delim.join(', '));
			strProps.push('} ]');
			return strProps.join(' ');
		}
	}, {
		key: 'truthy',
		get: function get() {
			return true;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			if (typeof this.call !== 'function') return 'object';
			return 'function';
		}
	}, {
		key: 'specTypeName',
		get: function get() {
			return 'object';
		}
	}]);
	return ObjectValue;
}(Value);

ObjectValue.prototype.clazz = 'Object';

module.exports = ObjectValue;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var store      = __webpack_require__(79)('wks')
  , uid        = __webpack_require__(53)
  , Symbol     = __webpack_require__(13).Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _stringify = __webpack_require__(46);

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = __webpack_require__(25);

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _create = __webpack_require__(29);

var _create2 = _interopRequireDefault(_create);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);
var StringValue = void 0;

/**
 * Represents a primitive value.
 */

var PrimitiveValue = function (_Value) {
	(0, _inherits3.default)(PrimitiveValue, _Value);

	function PrimitiveValue(value) {
		(0, _classCallCheck3.default)(this, PrimitiveValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (PrimitiveValue.__proto__ || (0, _getPrototypeOf2.default)(PrimitiveValue)).call(this, null));

		_this.native = value;
		//Object.defineProperty(this, 'native', {
		//	'value': value,
		//	'enumerable': true
		//});
		return _this;
	}

	(0, _createClass3.default)(PrimitiveValue, [{
		key: 'ref',
		value: function ref(name, realm) {
			var that = this;
			var out = (0, _create2.default)(null);
			out.getValue = _regenerator2.default.mark(function _callee() {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.delegateYield(that.get(name, realm), 't0', 1);

							case 1:
								return _context.abrupt('return', _context.t0);

							case 2:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			});
			out.setValue = _regenerator2.default.mark(function _callee2(to) {
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								return _context2.delegateYield(that.set(name, to, realm), 't0', 1);

							case 1:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this);
			});
			return out;
		}
	}, {
		key: 'get',
		value: _regenerator2.default.mark(function get(name, realm) {
			return _regenerator2.default.wrap(function get$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(this.derivePrototype(realm).get(name, realm, this), 't0', 1);

						case 1:
							return _context3.abrupt('return', _context3.t0);

						case 2:
						case 'end':
							return _context3.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'set',
		value: _regenerator2.default.mark(function set(name, to, realm) {
			return _regenerator2.default.wrap(function set$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
						case 'end':
							return _context4.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'derivePrototype',
		value: function derivePrototype(realm) {
			switch ((0, _typeof3.default)(this.native)) {
				case 'string':
					return realm.StringPrototype;
				case 'number':
					return realm.NumberPrototype;
				case 'boolean':
					return realm.BooleanPrototype;
			}
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			return this.native;
		}
	}, {
		key: 'asString',
		value: _regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', this.native.toString());

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'doubleEquals',
		value: _regenerator2.default.mark(function doubleEquals(other) {
			var native, num, _num;

			return _regenerator2.default.wrap(function doubleEquals$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							native = this.native;

							if (!(other instanceof PrimitiveValue)) {
								_context6.next = 5;
								break;
							}

							return _context6.abrupt('return', Value.fromNative(this.native == other.native));

						case 5:
							if (!(typeof native === 'number')) {
								_context6.next = 15;
								break;
							}

							if (!(other instanceof StringValue)) {
								_context6.next = 12;
								break;
							}

							return _context6.delegateYield(other.toNumberValue(), 't0', 8);

						case 8:
							num = _context6.t0;
							return _context6.abrupt('return', Value.from(native === num.toNative()));

						case 12:
							return _context6.abrupt('return', Value.false);

						case 13:
							_context6.next = 20;
							break;

						case 15:
							if (!(typeof native == 'boolean')) {
								_context6.next = 20;
								break;
							}

							return _context6.delegateYield(this.toNumberValue(), 't1', 17);

						case 17:
							_num = _context6.t1;
							return _context6.delegateYield(_num.doubleEquals(other), 't2', 19);

						case 19:
							return _context6.abrupt('return', _context6.t2);

						case 20:
							return _context6.abrupt('return', Value.false);

						case 21:
						case 'end':
							return _context6.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'tripleEquals',
		value: _regenerator2.default.mark(function tripleEquals(other) {
			return _regenerator2.default.wrap(function tripleEquals$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.abrupt('return', this.native === other.toNative() ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context7.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'add',
		value: _regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							_context8.t0 = this;
							_context8.t1 = this.native;
							return _context8.delegateYield(other.toPrimitiveNative(), 't2', 3);

						case 3:
							_context8.t3 = _context8.t2;
							_context8.t4 = _context8.t1 + _context8.t3;
							return _context8.abrupt('return', _context8.t0.fromNative.call(_context8.t0, _context8.t4));

						case 6:
						case 'end':
							return _context8.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'inOperator',
		value: _regenerator2.default.mark(function inOperator(other) {
			return _regenerator2.default.wrap(function inOperator$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							return _context9.abrupt('return', this.fromNative(this.native in other.toNative()));

						case 1:
						case 'end':
							return _context9.stop();
					}
				}
			}, inOperator, this);
		})
	}, {
		key: 'instanceOf',
		value: _regenerator2.default.mark(function instanceOf(other) {
			return _regenerator2.default.wrap(function instanceOf$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.abrupt('return', Value.false);

						case 1:
						case 'end':
							return _context10.stop();
					}
				}
			}, instanceOf, this);
		})
	}, {
		key: 'unaryPlus',
		value: _regenerator2.default.mark(function unaryPlus() {
			return _regenerator2.default.wrap(function unaryPlus$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', this.fromNative(+this.native));

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, unaryPlus, this);
		})
	}, {
		key: 'unaryMinus',
		value: _regenerator2.default.mark(function unaryMinus() {
			return _regenerator2.default.wrap(function unaryMinus$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.abrupt('return', this.fromNative(-this.native));

						case 1:
						case 'end':
							return _context12.stop();
					}
				}
			}, unaryMinus, this);
		})
	}, {
		key: 'not',
		value: _regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							return _context13.abrupt('return', this.fromNative(!this.native));

						case 1:
						case 'end':
							return _context13.stop();
					}
				}
			}, not, this);
		})
	}, {
		key: 'observableProperties',
		value: _regenerator2.default.mark(function observableProperties(realm) {
			return _regenerator2.default.wrap(function observableProperties$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							return _context14.delegateYield(this.derivePrototype(realm).observableProperties(realm), 't0', 1);

						case 1:
						case 'end':
							return _context14.stop();
					}
				}
			}, observableProperties, this);
		})
	}, {
		key: 'makeThisForNew',
		value: _regenerator2.default.mark(function makeThisForNew() {
			return _regenerator2.default.wrap(function makeThisForNew$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							throw new Error('Naw');

						case 1:
						case 'end':
							return _context15.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'getPrototype',
		value: function getPrototype(realm) {
			return this.derivePrototype(realm);
		}
	}, {
		key: 'toPrimitiveValue',
		value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							return _context16.abrupt('return', this);

						case 1:
						case 'end':
							return _context16.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toStringValue',
		value: _regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							if (!(typeof this.native === 'string')) {
								_context17.next = 2;
								break;
							}

							return _context17.abrupt('return', this);

						case 2:
							return _context17.abrupt('return', this.fromNative(String(this.native)));

						case 3:
						case 'end':
							return _context17.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'toNumberValue',
		value: _regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context18) {
				while (1) {
					switch (_context18.prev = _context18.next) {
						case 0:
							if (!(typeof this.native === 'number')) {
								_context18.next = 2;
								break;
							}

							return _context18.abrupt('return', this);

						case 2:
							return _context18.abrupt('return', this.fromNative(Number(this.native)));

						case 3:
						case 'end':
							return _context18.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			if ((0, _typeof3.default)(this.native) === 'object') return '[native object]';else if (typeof this.native === 'function') return '[native function]';else if (typeof this.native === 'string') return (0, _stringify2.default)(this.native);else return '' + this.native;
		}
	}, {
		key: 'truthy',
		get: function get() {
			return !!this.native;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return (0, _typeof3.default)(this.native);
		}
	}]);
	return PrimitiveValue;
}(Value);

module.exports = PrimitiveValue;

StringValue = __webpack_require__(45);

/***/ }),
/* 13 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty = __webpack_require__(36);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = __webpack_require__(37);

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(47);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(12);
var ObjectValue = __webpack_require__(9);
var Value = __webpack_require__(3);
var NumberValue = void 0;

var ArrayValue = function (_ObjectValue) {
	(0, _inherits3.default)(ArrayValue, _ObjectValue);

	function ArrayValue(realm) {
		(0, _classCallCheck3.default)(this, ArrayValue);
		return (0, _possibleConstructorReturn3.default)(this, (ArrayValue.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue)).call(this, realm, realm.ArrayPrototype));
	}

	(0, _createClass3.default)(ArrayValue, [{
		key: 'get',
		value: _regenerator2.default.mark(function get(name, realm) {
			return _regenerator2.default.wrap(function get$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.delegateYield((0, _get3.default)(ArrayValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue.prototype), 'get', this).call(this, name, realm), 't0', 1);

						case 1:
							return _context.abrupt('return', _context.t0);

						case 2:
						case 'end':
							return _context.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'adjustLength',
		value: function adjustLength(name) {
			if (!isNaN(parseInt(name))) {
				var length = this.getLengthSync();
				if (name >= length) {
					this.properties.length.value = Value.fromNative(name + 1);
				}
			}
		}
	}, {
		key: 'getLengthSync',
		value: function getLengthSync() {
			return this.properties.length.value.native;
		}
	}, {
		key: 'set',
		value: function set(name, v) {
			this.adjustLength(name);
			return (0, _get3.default)(ArrayValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue.prototype), 'set', this).call(this, name, v);
		}
	}, {
		key: 'setImmediate',
		value: function setImmediate(name, v) {
			this.adjustLength(name);
			return (0, _get3.default)(ArrayValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue.prototype), 'setImmediate', this).call(this, name, v);
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			var out = new Array(this.getLengthSync());
			for (var _iterator = (0, _keys2.default)(this.properties), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var i = _ref;

				if (i === "length") continue;
				var po = this.properties[i];
				if (po && po.value) {
					if (!po.direct) {
						(0, _defineProperty2.default)(out, i, {
							enumerable: po.enumerable,
							writable: po.writable,
							configurable: po.configurable,
							value: po.value.toNative()
						});
					} else {
						out[i] = po.value.toNative();
					}
				}
			}
			return out;
		}
	}, {
		key: 'debugString',
		get: function get() {
			if (!this.properties.length) return (0, _get3.default)(ArrayValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayValue.prototype), 'debugString', this);
			var length = this.properties.length.value.native;

			var loop = Math.min(length, 20);
			var r = new Array(loop);
			for (var i = 0; i < loop; ++i) {
				var po = this.properties[i];
				if (po && po.value) r[i] = po.value.debugString;else r[i] = '';
			}
			return '[' + r.join(', ') + (loop < length ? '...' : '') + ']';
		}
	}], [{
		key: 'make',
		value: function make(vals, realm) {

			var av = new ArrayValue(realm);

			av.setImmediate('length', Value.fromNative(0));
			av.properties.length.enumerable = false;

			for (var i = 0; i < vals.length; ++i) {
				var v = vals[i];
				if (!(v instanceof Value)) v = realm.fromNative(v);
				av.setImmediate(i, v);
			}
			return av;
		}
	}]);
	return ArrayValue;
}(ObjectValue);

ArrayValue.prototype.clazz = 'Array';

module.exports = ArrayValue;

NumberValue = __webpack_require__(61);

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);

var serial = 0;

//TODO: We should call this a PropertyDescriptor, not a variable.

var PropertyDescriptor = function () {
	function PropertyDescriptor(value, enumerable) {
		(0, _classCallCheck3.default)(this, PropertyDescriptor);

		this.value = value;
		this.serial = serial++;
		this.configurable = true;
		this.enumerable = enumerable !== undefined ? !!enumerable : true;
		this.writable = true;
		this.getter = undefined;
		this.setter = undefined;
	}

	(0, _createClass3.default)(PropertyDescriptor, [{
		key: 'getValue',
		value: _regenerator2.default.mark(function getValue(thiz) {
			return _regenerator2.default.wrap(function getValue$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							thiz = thiz || Value.null;

							if (!this.getter) {
								_context.next = 4;
								break;
							}

							return _context.delegateYield(this.getter.call(thiz, []), 't0', 3);

						case 3:
							return _context.abrupt('return', _context.t0);

						case 4:
							return _context.abrupt('return', this.value);

						case 5:
						case 'end':
							return _context.stop();
					}
				}
			}, getValue, this);
		})
	}, {
		key: 'setValue',
		value: _regenerator2.default.mark(function setValue(thiz, to, s) {
			return _regenerator2.default.wrap(function setValue$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							thiz = thiz || Value.null;

							if (!this.setter) {
								_context2.next = 4;
								break;
							}

							return _context2.delegateYield(this.setter.call(thiz, [to], s), 't0', 3);

						case 3:
							return _context2.abrupt('return', _context2.t0);

						case 4:
							if (this.writable) {
								_context2.next = 10;
								break;
							}

							if (!(!s || !s.strict)) {
								_context2.next = 7;
								break;
							}

							return _context2.abrupt('return', this.value);

						case 7:
							_context2.next = 9;
							return CompletionRecord.makeTypeError(s.realm, "Can't write to non-writable value.");

						case 9:
							return _context2.abrupt('return', _context2.sent);

						case 10:
							this.value = to;
							return _context2.abrupt('return', this.value);

						case 12:
						case 'end':
							return _context2.stop();
					}
				}
			}, setValue, this);
		})
	}, {
		key: 'direct',
		get: function get() {
			return !this.getter && !this.setter && this.writable;
		}
	}]);
	return PropertyDescriptor;
}();

module.exports = PropertyDescriptor;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(150), __esModule: true };

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(19);
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(26)(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(13)
  , core      = __webpack_require__(10)
  , ctx       = __webpack_require__(30)
  , hide      = __webpack_require__(23)
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var anObject       = __webpack_require__(17)
  , IE8_DOM_DEFINE = __webpack_require__(101)
  , toPrimitive    = __webpack_require__(82)
  , dP             = Object.defineProperty;

exports.f = __webpack_require__(18) ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

/***/ }),
/* 22 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(21)
  , createDesc = __webpack_require__(52);
module.exports = __webpack_require__(18) ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(72)
  , defined = __webpack_require__(68);
module.exports = function(it){
  return IObject(defined(it));
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(148);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(147);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EvaluatorInstruction = function () {
	(0, _createClass3.default)(EvaluatorInstruction, null, [{
		key: 'branch',
		value: function branch(kind, ast, scope, extra) {
			var ei = new EvaluatorInstruction('branch');
			ei.kind = kind;
			ei.ast = ast;
			ei.scope = scope;
			ei.extra = extra;
			return ei;
		}
	}, {
		key: 'getEvaluator',
		value: function getEvaluator() {
			return new EvaluatorInstruction('getEvaluator');
		}
	}]);

	function EvaluatorInstruction(type) {
		(0, _classCallCheck3.default)(this, EvaluatorInstruction);

		this.type = type;
	}

	(0, _createClass3.default)(EvaluatorInstruction, [{
		key: 'mark',
		value: function mark(o) {
			for (var k in o) {
				this[k] = o[k];
			}return this;
		}
	}]);
	return EvaluatorInstruction;
}();

EvaluatorInstruction.stepMinor = new EvaluatorInstruction('step');
EvaluatorInstruction.stepMajor = new EvaluatorInstruction('step');
EvaluatorInstruction.stepStatement = new EvaluatorInstruction('step');
EvaluatorInstruction.waitForFramePop = new EvaluatorInstruction('waitForFramePop');
EvaluatorInstruction.framePushed = new EvaluatorInstruction('framePushed');

EvaluatorInstruction.eventLoopBodyStart = new EvaluatorInstruction('event').mark({ event: 'loopBodyStart' });
module.exports = EvaluatorInstruction;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var BridgeValue = __webpack_require__(58);
var CompletionRecord = __webpack_require__(7);

var EmptyValue = function (_Value) {
	(0, _inherits3.default)(EmptyValue, _Value);

	function EmptyValue() {
		(0, _classCallCheck3.default)(this, EmptyValue);
		return (0, _possibleConstructorReturn3.default)(this, (EmptyValue.__proto__ || (0, _getPrototypeOf2.default)(EmptyValue)).call(this, null));
	}

	(0, _createClass3.default)(EmptyValue, [{
		key: 'not',
		value: _regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', Value.fromNative(true));

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, not, this);
		})
	}, {
		key: 'doubleEquals',
		value: _regenerator2.default.mark(function doubleEquals(other) {
			return _regenerator2.default.wrap(function doubleEquals$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(other instanceof EmptyValue)) {
								_context2.next = 4;
								break;
							}

							return _context2.abrupt('return', Value.true);

						case 4:
							if (!(other instanceof BridgeValue)) {
								_context2.next = 8;
								break;
							}

							return _context2.abrupt('return', this.fromNative(this.toNative() == other.toNative()));

						case 8:
							return _context2.abrupt('return', Value.false);

						case 9:
						case 'end':
							return _context2.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'observableProperties',
		value: _regenerator2.default.mark(function observableProperties(realm) {
			return _regenerator2.default.wrap(function observableProperties$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return');

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, observableProperties, this);
		})
	}, {
		key: 'instanceOf',
		value: _regenerator2.default.mark(function instanceOf() {
			return _regenerator2.default.wrap(function instanceOf$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', Value.false);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, instanceOf, this);
		})

		/**
   * @param {String} name
   * @param {Realm} realm
   * @returns {CompletionRecord} Indexing empty values is a type error.
   */

	}, {
		key: 'get',
		value: _regenerator2.default.mark(function get(name, realm) {
			var str, err;
			return _regenerator2.default.wrap(function get$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							str = 'Cannot read property \'' + name + '\' of ' + this.specTypeName;
							err = CompletionRecord.makeTypeError(realm, str);
							return _context5.delegateYield(err.addExtra({ code: 'IndexEmpty', target: this, prop: name }), 't0', 3);

						case 3:
							return _context5.abrupt('return', err);

						case 4:
						case 'end':
							return _context5.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'truthy',
		get: function get() {
			return false;
		}
	}]);
	return EmptyValue;
}(Value);

module.exports = EmptyValue;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(152), __esModule: true };

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(65);
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = __webpack_require__(108)
  , enumBugKeys = __webpack_require__(70);

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var Engine = void 0;

function esper(opts) {
	return new Engine(opts);
}
module.exports = esper;

Engine = __webpack_require__(122);
esper.plugins = { 'lang-javascript': __webpack_require__(124) };
esper.Engine = Engine;
esper.Value = __webpack_require__(3);
esper.ASTPreprocessor = __webpack_require__(43);
esper.FutureValue = __webpack_require__(44);
esper.SmartLinkValue = __webpack_require__(63);
esper.ObjectValue = __webpack_require__(9);
esper.EasyNativeFunction = __webpack_require__(35);
esper.EasyObjectValue = __webpack_require__(8);
esper.Realm = __webpack_require__(89);
esper.eval = function (source) {
	return new Engine().evalSync(source).toNative();
};

esper.version = __webpack_require__(201).version;

esper.languages = {
	javascript: esper.plugins['lang-javascript']
};

esper.plugin = function (name) {
	var pl = void 0;
	if (!esper.plugins[name]) {
		//console.log("Loading ", name, '../plugins/' + name + '/index.js');
		var _pl = __webpack_require__(209)("./" + name + '/index.js');
		if (name != _pl.name) throw new Error('Loaded plugin as "' + name + '" but it had name "' + _pl.name + '"');
		if (!esper.plugins[name]) esper._registerPlugin(_pl);
	}
	return esper.plugins[name];
};

esper._registerPlugin = function (pl) {
	if (typeof pl.init !== "function") throw new Error("Tried to add a plugin without an init method.");
	if (typeof pl.name !== "string") throw new Error("Tried to add a plugin without a name.");
	esper.plugins[pl.name] = pl;
	pl.init(esper);
};

var list = __webpack_require__(115);
esper.pluginList = list;
for (var pl in list) {
	if (list[pl] == "bundle") esper.plugin(pl);
}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [sortValArray, mergeValArray].map(_regenerator2.default.mark);

function sortValArray(arr, comp) {
	var mid, left, right;
	return _regenerator2.default.wrap(function sortValArray$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (!(arr.length < 2)) {
						_context.next = 2;
						break;
					}

					return _context.abrupt('return', arr);

				case 2:
					mid = Math.floor(arr.length / 2);
					return _context.delegateYield(sortValArray(arr.slice(0, mid), comp), 't0', 4);

				case 4:
					left = _context.t0;
					return _context.delegateYield(sortValArray(arr.slice(mid, arr.length), comp), 't1', 6);

				case 6:
					right = _context.t1;
					return _context.delegateYield(mergeValArray(left, right, comp), 't2', 8);

				case 8:
					return _context.abrupt('return', _context.t2);

				case 9:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked[0], this);
}

function mergeValArray(l, r, comp) {
	var result;
	return _regenerator2.default.wrap(function mergeValArray$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					result = [];

				case 1:
					if (!(l.length && r.length)) {
						_context2.next = 10;
						break;
					}

					return _context2.delegateYield(comp(l[0], r[0]), 't0', 3);

				case 3:
					if (!_context2.t0) {
						_context2.next = 7;
						break;
					}

					result.push(l.shift());
					_context2.next = 8;
					break;

				case 7:
					result.push(r.shift());

				case 8:
					_context2.next = 1;
					break;

				case 10:

					while (l.length) {
						result.push(l.shift());
					}while (r.length) {
						result.push(r.shift());
					}return _context2.abrupt('return', result);

				case 13:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked[1], this);
}

var GenDash = function () {
	function GenDash() {
		(0, _classCallCheck3.default)(this, GenDash);
	}

	(0, _createClass3.default)(GenDash, null, [{
		key: 'identify',
		value: _regenerator2.default.mark(function identify(value) {
			return _regenerator2.default.wrap(function identify$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', value);

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, identify, this);
		})
	}, {
		key: 'map',
		value: _regenerator2.default.mark(function map(what, fx) {
			var out, i;
			return _regenerator2.default.wrap(function map$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							fx = fx || GenDash.identify;
							out = new Array(what.length);
							i = 0;

						case 3:
							if (!(i < what.length)) {
								_context4.next = 9;
								break;
							}

							return _context4.delegateYield(fx(what[i], i, what), 't0', 5);

						case 5:
							out[i] = _context4.t0;

						case 6:
							++i;
							_context4.next = 3;
							break;

						case 9:
							return _context4.abrupt('return', out);

						case 10:
						case 'end':
							return _context4.stop();
					}
				}
			}, map, this);
		})
	}, {
		key: 'each',
		value: _regenerator2.default.mark(function each(what, fx) {
			var i;
			return _regenerator2.default.wrap(function each$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							if (!(what == null)) {
								_context5.next = 2;
								break;
							}

							return _context5.abrupt('return', what);

						case 2:
							i = 0;

						case 3:
							if (!(i < what.length)) {
								_context5.next = 11;
								break;
							}

							return _context5.delegateYield(fx(what[i], i, what), 't0', 5);

						case 5:
							_context5.t1 = _context5.t0;

							if (!(false === _context5.t1)) {
								_context5.next = 8;
								break;
							}

							return _context5.abrupt('break', 11);

						case 8:
							++i;
							_context5.next = 3;
							break;

						case 11:
							return _context5.abrupt('return', what);

						case 12:
						case 'end':
							return _context5.stop();
					}
				}
			}, each, this);
		})
	}, {
		key: 'noop',
		value: _regenerator2.default.mark(function noop() {
			return _regenerator2.default.wrap(function noop$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
						case 'end':
							return _context6.stop();
					}
				}
			}, noop, this);
		})
	}, {
		key: 'sort',
		value: _regenerator2.default.mark(function sort(what, comp) {
			return _regenerator2.default.wrap(function sort$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							comp = comp || _regenerator2.default.mark(function _callee(left, right) {
								return _regenerator2.default.wrap(function _callee$(_context7) {
									while (1) {
										switch (_context7.prev = _context7.next) {
											case 0:
												return _context7.abrupt('return', left < right);

											case 1:
											case 'end':
												return _context7.stop();
										}
									}
								}, _callee, this);
							});
							return _context8.delegateYield(sortValArray(what, comp), 't0', 2);

						case 2:
							return _context8.abrupt('return', _context8.t0);

						case 3:
						case 'end':
							return _context8.stop();
					}
				}
			}, sort, this);
		})
	}, {
		key: 'values',
		value: _regenerator2.default.mark(function values(what) {
			var out, o;
			return _regenerator2.default.wrap(function values$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							out = [];
							_context9.t0 = _regenerator2.default.keys(what);

						case 2:
							if ((_context9.t1 = _context9.t0()).done) {
								_context9.next = 9;
								break;
							}

							o = _context9.t1.value;

							if (Object.hasOwnProperty(o)) {
								_context9.next = 6;
								break;
							}

							return _context9.abrupt('continue', 2);

						case 6:
							out.push(what[o]);
							_context9.next = 2;
							break;

						case 9:
							return _context9.abrupt('return', out);

						case 10:
						case 'end':
							return _context9.stop();
					}
				}
			}, values, this);
		})
	}, {
		key: 'keys',
		value: _regenerator2.default.mark(function keys(what) {
			var out, o;
			return _regenerator2.default.wrap(function keys$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							out = [];
							_context10.t0 = _regenerator2.default.keys(what);

						case 2:
							if ((_context10.t1 = _context10.t0()).done) {
								_context10.next = 9;
								break;
							}

							o = _context10.t1.value;

							if (Object.hasOwnProperty(o)) {
								_context10.next = 6;
								break;
							}

							return _context10.abrupt('continue', 2);

						case 6:
							out.push(o);
							_context10.next = 2;
							break;

						case 9:
							return _context10.abrupt('return', out);

						case 10:
						case 'end':
							return _context10.stop();
					}
				}
			}, keys, this);
		})
	}, {
		key: 'identity',
		value: _regenerator2.default.mark(function identity(value) {
			return _regenerator2.default.wrap(function identity$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', value);

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, identity, this);
		})
	}, {
		key: 'syncGenHelper',
		value: function syncGenHelper(gen) {
			var val = gen.next();
			if (!val.done) {
				console.log('This code path uses a helper, but the actual method yielded...');
				throw new Error('This code path uses a helper, but the actual method yielded...');
			}
			return val.value;
		}
	}]);
	return GenDash;
}();

module.exports = GenDash;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var PropertyDescriptor = __webpack_require__(15);
var ObjectValue = __webpack_require__(9);
var EvaluatorInstruction = __webpack_require__(27);

/**
 * Represents a value that maps directly to an untrusted local value.
 */

var ClosureValue = function (_ObjectValue) {
	(0, _inherits3.default)(ClosureValue, _ObjectValue);

	/**
  * @param {object} func - AST Node for function
  * @param {Scope} scope - Functions up-values.
  */
	function ClosureValue(func, scope) {
		(0, _classCallCheck3.default)(this, ClosureValue);

		var realm = scope.realm;

		var _this = (0, _possibleConstructorReturn3.default)(this, (ClosureValue.__proto__ || (0, _getPrototypeOf2.default)(ClosureValue)).call(this, realm, realm.FunctionPrototype));

		_this.realm = scope.realm;
		_this.func = func;
		_this.scope = scope;
		_this.returnLastValue = false;
		_this.properties['prototype'] = new PropertyDescriptor(new ObjectValue(realm));
		_this.properties['name'] = new PropertyDescriptor(_this.fromNative(func.id ? func.id.name : undefined));
		_this.properties['length'] = new PropertyDescriptor(_this.fromNative(func.params.length));

		return _this;
	}

	(0, _createClass3.default)(ClosureValue, [{
		key: 'toNative',
		value: function toNative() {
			return Value.createNativeBookmark(this, this.realm);
		}
	}, {
		key: 'doubleEquals',
		value: _regenerator2.default.mark(function doubleEquals(other) {
			return _regenerator2.default.wrap(function doubleEquals$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', other === this ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, doubleEquals, this);
		})

		/**
   *
   * @param {Value} thiz
   * @param {Value[]} args
   * @param {Scope} scope
   */

	}, {
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, scope, extra) {
			var invokeScope, obj, n, v, fn, _n, closure, argn, argvars, argsObj, i, vv, _v, calleeProp, lengthProp, _i, name, opts, result;

			return _regenerator2.default.wrap(function call$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							//TODO: This way of scoping is entirelly wrong.
							if (!scope) scope = this.scope;
							invokeScope = void 0;

							if (this.boundScope) {
								invokeScope = this.boundScope.createChild();
								invokeScope.writeTo = this.boundScope.object;
								invokeScope.thiz = this.thiz || /* thiz ||*/this.boundScope.thiz;
							} else {
								invokeScope = scope.createChild();
								invokeScope.thiz = this.thiz || thiz;
							}

							if (this.func.strict === true) invokeScope.strict = true;

							obj = this.scope.object;

							if (this.func.upvars) {
								for (n in this.func.upvars) {
									//TODO: There should be a method that does this.
									invokeScope.object.rawSetProperty(n, obj.properties[n]);
								}
							}

							//Do Var Hoisting
							if (this.func.vars) {
								for (v in this.func.vars) {
									invokeScope.add(v, Value.undef);
									invokeScope.object.properties[v].isVariable = true;
								}
							}

							if (this.func.funcs) {
								for (fn in this.func.funcs) {
									_n = this.func.funcs[fn];
									closure = new ClosureValue(_n, scope);

									invokeScope.add(_n.id.name, closure);
								}
							}

							argn = Math.max(args.length, this.func.params.length);
							argvars = new Array(argn);
							argsObj = new ObjectValue(scope.realm);
							i = 0;

						case 12:
							if (!(i < argn)) {
								_context2.next = 25;
								break;
							}

							vv = Value.undef;

							if (i < args.length) vv = args[i];

							_v = new PropertyDescriptor(vv);

							argvars[i] = _v;

							if (!invokeScope.strict) {
								_context2.next = 21;
								break;
							}

							return _context2.delegateYield(argsObj.set(i, vv), 't0', 19);

						case 19:
							_context2.next = 22;
							break;

						case 21:
							argsObj.rawSetProperty(i, _v);

						case 22:
							++i;
							_context2.next = 12;
							break;

						case 25:
							if (invokeScope.strict) {
								_context2.next = 30;
								break;
							}

							calleeProp = new PropertyDescriptor(this.fromNative(args.length));

							calleeProp.enumerable = false;
							argsObj.rawSetProperty('callee', calleeProp);
							return _context2.delegateYield(argsObj.set('callee', this), 't1', 30);

						case 30:
							lengthProp = new PropertyDescriptor(this.fromNative(args.length));

							lengthProp.enumerable = false;
							argsObj.rawSetProperty('length', lengthProp);

							invokeScope.add('arguments', argsObj);

							for (_i = 0; _i < this.func.params.length; ++_i) {
								name = this.func.params[_i].name;

								if (scope.strict) {
									//Scope is strict, so we make a copy for the args variable
									invokeScope.add(name, _i < args.length ? args[_i] : Value.undef);
								} else {
									//Scope isnt strict, magic happens.
									invokeScope.object.rawSetProperty(name, argvars[_i]);
								}
							}
							opts = { returnLastValue: this.returnLastValue };

							if (extra && extra.evaluator && extra.evaluator.debug) {
								opts['profileName'] = extra.callNode.callee.srcName;
							}
							if (this.func.nonUserCode) {
								opts.yieldPower = -1;
							}
							_context2.next = 40;
							return EvaluatorInstruction.branch('function', this.func.body, invokeScope, opts);

						case 40:
							result = _context2.sent;
							return _context2.abrupt('return', result);

						case 42:
						case 'end':
							return _context2.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			if (this.func && this.func.id) return '[Function ' + this.func.id.name + ']';
			return '[Function]';
		}
	}, {
		key: 'truthy',
		get: function get() {
			return true;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return 'function';
		}
	}, {
		key: 'specTypeName',
		get: function get() {
			return 'object';
		}
	}]);
	return ClosureValue;
}(ObjectValue);

ClosureValue.prototype.clazz = 'Function';

module.exports = ClosureValue;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var ObjectValue = __webpack_require__(9);
var CompletionRecord = __webpack_require__(7);

var EasyNativeFunction = function (_ObjectValue) {
	(0, _inherits3.default)(EasyNativeFunction, _ObjectValue);

	function EasyNativeFunction(realm) {
		(0, _classCallCheck3.default)(this, EasyNativeFunction);
		return (0, _possibleConstructorReturn3.default)(this, (EasyNativeFunction.__proto__ || (0, _getPrototypeOf2.default)(EasyNativeFunction)).call(this, realm, realm.FunctionPrototype));
	}

	(0, _createClass3.default)(EasyNativeFunction, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, argz, scope, extra) {
			var profile,
			    start,
			    s,
			    o,
			    _args = arguments;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							profile = false;
							start = 0;
							_context.prev = 2;

							if (extra && extra.evaluator && extra.evaluator.debug) {
								profile = true;
								start = Date.now();
							}
							s = scope ? scope.createChild() : scope;

							if (s) s.strict = true;
							return _context.delegateYield(this.fn.apply(this.binding, _args, s, extra), 't0', 7);

						case 7:
							o = _context.t0;

							if (!(o instanceof CompletionRecord)) {
								_context.next = 10;
								break;
							}

							return _context.abrupt('return', o);

						case 10:
							if (!(o instanceof Value)) o = scope.realm.makeForForeignObject(o);
							if (profile) extra.evaluator.incrCtr('fxTime', extra.callNode.callee.srcName, Date.now() - start);
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.NORMAL, o));

						case 15:
							_context.prev = 15;
							_context.t1 = _context['catch'](2);

							if (profile) extra.evaluator.incrCtr('fxTime', extra.callNode.callee.srcName, Date.now() - start);
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, scope.realm.makeForForeignObject(_context.t1)));

						case 19:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this, [[2, 15]]);
		})
	}, {
		key: 'makeThisForNew',
		value: _regenerator2.default.mark(function makeThisForNew(realm) {
			return _regenerator2.default.wrap(function makeThisForNew$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							_context2.next = 2;
							return CompletionRecord.makeTypeError(realm, 'function is not a constructor');

						case 2:
							return _context2.abrupt('return', _context2.sent);

						case 3:
						case 'end':
							return _context2.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			return 'function() { [Native Code] }';
		}
	}], [{
		key: 'make',
		value: function make(realm, fx, binding) {
			var out = new EasyNativeFunction(realm);
			out.fn = fx;
			out.binding = binding;
			return out;
		}
	}, {
		key: 'makeForNative',
		value: function makeForNative(realm, fx) {
			var out = new EasyNativeFunction(realm);
			out.fn = _regenerator2.default.mark(function _callee(thiz, args) {
				var rargs, i, nt, nr;
				return _regenerator2.default.wrap(function _callee$(_context3) {
					while (1) {
						switch (_context3.prev = _context3.next) {
							case 0:
								rargs = new Array(args.length);

								for (i = 0; i < args.length; ++i) {
									rargs[i] = args[i].toNative();
								}
								nt = thiz.toNative();
								nr = fx.apply(nt, rargs);
								return _context3.abrupt('return', Value.fromNative(nr));

							case 5:
							case 'end':
								return _context3.stop();
						}
					}
				}, _callee, this);
			});
			return out;
		}
	}]);
	return EasyNativeFunction;
}(ObjectValue);

EasyNativeFunction.prototype.clazz = 'Function';

module.exports = EasyNativeFunction;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(154), __esModule: true };

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(158), __esModule: true };

/***/ }),
/* 38 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(21).f
  , has = __webpack_require__(22)
  , TAG = __webpack_require__(11)('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(68);
module.exports = function(it){
  return Object(defined(it));
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(185);
var global        = __webpack_require__(13)
  , hide          = __webpack_require__(23)
  , Iterators     = __webpack_require__(39)
  , TO_STRING_TAG = __webpack_require__(11)('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _create = __webpack_require__(29);

var _create2 = _interopRequireDefault(_create);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _stringify = __webpack_require__(46);

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = __webpack_require__(37);

var _keys2 = _interopRequireDefault(_keys);

var _defineProperty = __webpack_require__(36);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _typeof2 = __webpack_require__(25);

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var esper = __webpack_require__(32);
var compiler = void 0;

function invokeCB(o, name) {
	if (!(name in o)) return;
	var args = Array.prototype.slice.call(arguments, 2);
	o[name].apply(o, args);
}

function detectStrict(body) {
	if (!body || body.length < 1) return;
	var first = body[0];
	if (first.type === 'ExpressionStatement') {
		var exp = first.expression;
		if (exp.type === 'Literal' && exp.value === 'use strict') {
			return true;
		}
	}
}

var ASTNode = function () {
	function ASTNode(o) {
		(0, _classCallCheck3.default)(this, ASTNode);

		this.visits = 0;
		this.dispatch = false;
		if ((typeof o === 'undefined' ? 'undefined' : (0, _typeof3.default)(o)) === 'object') {
			for (var k in o) {
				this[k] = o[k];
			}
		}
	}

	(0, _createClass3.default)(ASTNode, [{
		key: 'addHiddenProperty',
		value: function addHiddenProperty(name, value) {
			(0, _defineProperty2.default)(this, name, {
				value: value,
				configurable: true
			});
		}
	}, {
		key: 'source',
		value: function source() {
			if (!this._source) return;
			if (!this.range) return;
			return this._source.substring(this.range[0], this.range[1]);
		}
	}, {
		key: 'toString',
		value: function toString() {
			var _this = this;

			var extra = (0, _keys2.default)(this).map(function (k) {
				var v = _this[k];
				if (v === null || typeof v === 'function') return;
				if (k == 'range' || k == 'loc' || k == 'nodeID') return;
				if (v instanceof ASTNode) return k + ': [ASTNode: ' + v.type + ']';
				if (Array.isArray(v)) return '[...]';else return k + ': ' + (0, _stringify2.default)(v);
			}).filter(function (v) {
				return !!v;
			}).join(', ');
			return '[ASTNode: ' + this.type + ' ' + extra + ']';
		}
	}]);
	return ASTNode;
}();

var ASTPreprocessor = function () {
	(0, _createClass3.default)(ASTPreprocessor, null, [{
		key: 'process',
		value: function process(ast, extra) {
			if ((typeof ast === 'undefined' ? 'undefined' : (0, _typeof3.default)(ast)) !== 'object') throw new TypeError('Provided AST is invalid (type is ' + (typeof ast === 'undefined' ? 'undefined' : (0, _typeof3.default)(ast)) + ')');
			var nast = JSON.parse((0, _stringify2.default)(ast), function (n, o) {
				if (o === null) return null;
				if ((typeof o === 'undefined' ? 'undefined' : (0, _typeof3.default)(o)) !== 'object') return o;
				if (o.type) {
					var z = new ASTNode(o);
					if (extra && extra.source) z.addHiddenProperty('_source', extra.source);
					return z;
				}
				return o;
			});

			var options = extra || {};
			var cbs = new EsperASTInstructions(ast, options);
			new ASTPreprocessor(nast, extra).start(cbs);
			return nast;
		}
	}, {
		key: 'walker',
		value: _regenerator2.default.mark(function walker(ast, cbs, parent) {
			var me, _iterator, _isArray, _i, _ref, e, _iterator2, _isArray2, _i2, _ref2, _e, _iterator3, _isArray3, _i3, _ref3, _e2, _iterator4, _isArray4, _i4, _ref4, _e3, _iterator5, _isArray5, _i5, _ref5, _e4, _iterator6, _isArray6, _i6, _ref6, _e5, p, n;

			return _regenerator2.default.wrap(function walker$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							me = function me(a) {
								return ASTPreprocessor.walker(a, cbs, ast);
							};

							invokeCB(cbs, 'enter', ast);
							invokeCB(cbs, 'enter' + ast.type, ast);
							if (parent && ast instanceof ASTNode) ast.addHiddenProperty('parent', parent);
							_context.t0 = ast.type;
							_context.next = _context.t0 === 'Program' ? 7 : _context.t0 === 'BlockStatement' ? 23 : _context.t0 === 'NewExpression' ? 39 : _context.t0 === 'CallExpression' ? 39 : _context.t0 === 'WhileStatement' ? 56 : _context.t0 === 'DoWhileStatement' ? 56 : _context.t0 === 'VariableDeclaration' ? 60 : _context.t0 === 'VariableDeclarator' ? 76 : _context.t0 === 'FunctionDeclaration' ? 80 : _context.t0 === 'ArrowFunctionExpression' ? 85 : _context.t0 === 'FunctionExpression' ? 85 : _context.t0 === 'Identifier' ? 89 : _context.t0 === 'ArrayExpression' ? 90 : _context.t0 === 'ObjectExpression' ? 108 : _context.t0 === 'Property' ? 126 : 129;
							break;

						case 7:
							_iterator = ast.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 8:
							if (!_isArray) {
								_context.next = 14;
								break;
							}

							if (!(_i >= _iterator.length)) {
								_context.next = 11;
								break;
							}

							return _context.abrupt('break', 22);

						case 11:
							_ref = _iterator[_i++];
							_context.next = 18;
							break;

						case 14:
							_i = _iterator.next();

							if (!_i.done) {
								_context.next = 17;
								break;
							}

							return _context.abrupt('break', 22);

						case 17:
							_ref = _i.value;

						case 18:
							e = _ref;
							return _context.delegateYield(me(e), 't1', 20);

						case 20:
							_context.next = 8;
							break;

						case 22:
							return _context.abrupt('break', 152);

						case 23:
							_iterator2 = ast.body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

						case 24:
							if (!_isArray2) {
								_context.next = 30;
								break;
							}

							if (!(_i2 >= _iterator2.length)) {
								_context.next = 27;
								break;
							}

							return _context.abrupt('break', 38);

						case 27:
							_ref2 = _iterator2[_i2++];
							_context.next = 34;
							break;

						case 30:
							_i2 = _iterator2.next();

							if (!_i2.done) {
								_context.next = 33;
								break;
							}

							return _context.abrupt('break', 38);

						case 33:
							_ref2 = _i2.value;

						case 34:
							_e = _ref2;
							return _context.delegateYield(me(_e), 't2', 36);

						case 36:
							_context.next = 24;
							break;

						case 38:
							return _context.abrupt('break', 152);

						case 39:
							_iterator3 = ast.arguments, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

						case 40:
							if (!_isArray3) {
								_context.next = 46;
								break;
							}

							if (!(_i3 >= _iterator3.length)) {
								_context.next = 43;
								break;
							}

							return _context.abrupt('break', 54);

						case 43:
							_ref3 = _iterator3[_i3++];
							_context.next = 50;
							break;

						case 46:
							_i3 = _iterator3.next();

							if (!_i3.done) {
								_context.next = 49;
								break;
							}

							return _context.abrupt('break', 54);

						case 49:
							_ref3 = _i3.value;

						case 50:
							_e2 = _ref3;
							return _context.delegateYield(me(_e2), 't3', 52);

						case 52:
							_context.next = 40;
							break;

						case 54:
							return _context.delegateYield(me(ast.callee), 't4', 55);

						case 55:
							return _context.abrupt('break', 152);

						case 56:
							if (!ast.test) {
								_context.next = 58;
								break;
							}

							return _context.delegateYield(me(ast.test), 't5', 58);

						case 58:
							return _context.delegateYield(me(ast.body), 't6', 59);

						case 59:
							return _context.abrupt('break', 152);

						case 60:
							_iterator4 = ast.declarations, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

						case 61:
							if (!_isArray4) {
								_context.next = 67;
								break;
							}

							if (!(_i4 >= _iterator4.length)) {
								_context.next = 64;
								break;
							}

							return _context.abrupt('break', 75);

						case 64:
							_ref4 = _iterator4[_i4++];
							_context.next = 71;
							break;

						case 67:
							_i4 = _iterator4.next();

							if (!_i4.done) {
								_context.next = 70;
								break;
							}

							return _context.abrupt('break', 75);

						case 70:
							_ref4 = _i4.value;

						case 71:
							_e3 = _ref4;
							return _context.delegateYield(me(_e3), 't7', 73);

						case 73:
							_context.next = 61;
							break;

						case 75:
							return _context.abrupt('break', 152);

						case 76:
							invokeCB(cbs, 'decl', ast);

							if (!ast.init) {
								_context.next = 79;
								break;
							}

							return _context.delegateYield(me(ast.init), 't8', 79);

						case 79:
							return _context.abrupt('break', 152);

						case 80:
							invokeCB(cbs, 'decl', ast);
							invokeCB(cbs, 'enterFunction', ast);
							return _context.delegateYield(me(ast.body), 't9', 83);

						case 83:
							invokeCB(cbs, 'exitFunction', ast);
							return _context.abrupt('break', 152);

						case 85:
							invokeCB(cbs, 'enterFunction', ast);
							return _context.delegateYield(me(ast.body), 't10', 87);

						case 87:
							invokeCB(cbs, 'exitFunction', ast);
							return _context.abrupt('break', 152);

						case 89:
							return _context.abrupt('break', 152);

						case 90:
							if (!ast.elements) {
								_context.next = 107;
								break;
							}

							_iterator5 = ast.elements, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);

						case 92:
							if (!_isArray5) {
								_context.next = 98;
								break;
							}

							if (!(_i5 >= _iterator5.length)) {
								_context.next = 95;
								break;
							}

							return _context.abrupt('break', 107);

						case 95:
							_ref5 = _iterator5[_i5++];
							_context.next = 102;
							break;

						case 98:
							_i5 = _iterator5.next();

							if (!_i5.done) {
								_context.next = 101;
								break;
							}

							return _context.abrupt('break', 107);

						case 101:
							_ref5 = _i5.value;

						case 102:
							_e4 = _ref5;

							if (!_e4) {
								_context.next = 105;
								break;
							}

							return _context.delegateYield(me(_e4), 't11', 105);

						case 105:
							_context.next = 92;
							break;

						case 107:
							return _context.abrupt('break', 152);

						case 108:
							if (!ast.properties) {
								_context.next = 125;
								break;
							}

							_iterator6 = ast.properties, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);

						case 110:
							if (!_isArray6) {
								_context.next = 116;
								break;
							}

							if (!(_i6 >= _iterator6.length)) {
								_context.next = 113;
								break;
							}

							return _context.abrupt('break', 125);

						case 113:
							_ref6 = _iterator6[_i6++];
							_context.next = 120;
							break;

						case 116:
							_i6 = _iterator6.next();

							if (!_i6.done) {
								_context.next = 119;
								break;
							}

							return _context.abrupt('break', 125);

						case 119:
							_ref6 = _i6.value;

						case 120:
							_e5 = _ref6;

							if (!_e5) {
								_context.next = 123;
								break;
							}

							return _context.delegateYield(me(_e5), 't12', 123);

						case 123:
							_context.next = 110;
							break;

						case 125:
							return _context.abrupt('break', 152);

						case 126:
							return _context.delegateYield(me(ast.key), 't13', 127);

						case 127:
							return _context.delegateYield(me(ast.value), 't14', 128);

						case 128:
							return _context.abrupt('break', 152);

						case 129:
							_context.t15 = _regenerator2.default.keys(ast);

						case 130:
							if ((_context.t16 = _context.t15()).done) {
								_context.next = 152;
								break;
							}

							p = _context.t16.value;
							n = ast[p];

							if (!(p === 'parent')) {
								_context.next = 135;
								break;
							}

							return _context.abrupt('continue', 130);

						case 135:
							if (!(p === 'loc')) {
								_context.next = 137;
								break;
							}

							return _context.abrupt('continue', 130);

						case 137:
							if (!(p === 'type')) {
								_context.next = 139;
								break;
							}

							return _context.abrupt('continue', 130);

						case 139:
							if (!(p === 'nodeID')) {
								_context.next = 141;
								break;
							}

							return _context.abrupt('continue', 130);

						case 141:
							if (!(p === 'parentFunction')) {
								_context.next = 143;
								break;
							}

							return _context.abrupt('continue', 130);

						case 143:
							if (!(p === 'funcs')) {
								_context.next = 145;
								break;
							}

							return _context.abrupt('continue', 130);

						case 145:
							if (!(n === null)) {
								_context.next = 147;
								break;
							}

							return _context.abrupt('continue', 130);

						case 147:
							if (!(typeof n.type !== 'string')) {
								_context.next = 149;
								break;
							}

							return _context.abrupt('continue', 130);

						case 149:
							return _context.delegateYield(me(n), 't17', 150);

						case 150:
							_context.next = 130;
							break;

						case 152:

							invokeCB(cbs, 'exit' + ast.type, ast);
							invokeCB(cbs, 'exit', ast);

						case 154:
						case 'end':
							return _context.stop();
					}
				}
			}, walker, this);
		})
	}]);

	function ASTPreprocessor(ast) {
		(0, _classCallCheck3.default)(this, ASTPreprocessor);

		this.ast = ast;
	}

	(0, _createClass3.default)(ASTPreprocessor, [{
		key: 'start',
		value: function start(cbs) {
			var gen = ASTPreprocessor.walker(this.ast, cbs);
			for (var _iterator7 = gen, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);;) {
				var _ref7;

				if (_isArray7) {
					if (_i7 >= _iterator7.length) break;
					_ref7 = _iterator7[_i7++];
				} else {
					_i7 = _iterator7.next();
					if (_i7.done) break;
					_ref7 = _i7.value;
				}

				var x = _ref7;
			}
		}
	}]);
	return ASTPreprocessor;
}();

ASTPreprocessor.ASTNode = ASTNode;

var EsperASTInstructions = function () {
	function EsperASTInstructions(ast, options) {
		(0, _classCallCheck3.default)(this, EsperASTInstructions);


		if (!compiler && esper.plugins['jit']) {
			compiler = new esper.plugins['jit'].Compiler();
		}

		this.ast = ast;
		this.options = options;
		this.counter = 0;
		this.depth = 0;

		var globalScope = (0, _create2.default)(null);
		var globalVars = (0, _create2.default)(null);
		var globalFuncs = (0, _create2.default)(null);

		this.scopeStack = [globalScope];
		this.varStack = [globalVars];
		this.funcStack = [globalFuncs];
	}

	(0, _createClass3.default)(EsperASTInstructions, [{
		key: 'log',
		value: function log() {
			var str = Array.prototype.join.call(arguments, ', ');
			var indent = new Array(this.depth).join('  ');
			//console.log(indent + str);
		}
	}, {
		key: 'enter',
		value: function enter(a) {
			++this.depth;
			a.nodeID = this.counter++;
			this.log('Entering', a.type);
		}
	}, {
		key: 'enterIdentifier',
		value: function enterIdentifier(a) {
			var fn = this.funcStack[0];
			fn.refs[a.name] = true;
		}
	}, {
		key: 'decl',
		value: function decl(a) {
			if (a.parent.type == 'VariableDeclaration' && a.parent.kind != 'var') return;
			var stack = this.varStack[0];
			stack[a.id.name] = a;
		}
	}, {
		key: 'enterProgram',
		value: function enterProgram(a) {
			var scope = (0, _create2.default)(null);

			a.addHiddenProperty('refs', (0, _create2.default)(null));
			a.addHiddenProperty('vars', (0, _create2.default)(null));
			a.addHiddenProperty('funcs', (0, _create2.default)(null));

			this.funcStack.unshift(a);
			this.scopeStack.unshift(scope);
			this.varStack.unshift(a.vars);

			this.mangleBody(a);

			var strict = detectStrict(a.body);
			if (strict !== undefined) a.strict = strict;
		}
	}, {
		key: 'enterThisExpression',
		value: function enterThisExpression(a) {
			a.srcName = 'this';
		}
	}, {
		key: 'enterLabeledStatement',
		value: function enterLabeledStatement(a) {
			a.body.label = a.label.name;
		}
	}, {
		key: 'exitArrayExpression',
		value: function exitArrayExpression(a) {
			a.srcName = '[' + a.elements.map(function (e) {
				return e ? e.srcName : '';
			}).join() + ']';
		}
	}, {
		key: 'mangleBody',
		value: function mangleBody(a) {
			function prehoist(s) {
				if (s.type === 'VariableDeclaration' && s.kind == 'var') {
					for (var _iterator8 = s.declarations, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);;) {
						var _ref8;

						if (_isArray8) {
							if (_i8 >= _iterator8.length) break;
							_ref8 = _iterator8[_i8++];
						} else {
							_i8 = _iterator8.next();
							if (_i8.done) break;
							_ref8 = _i8.value;
						}

						var decl = _ref8;

						a.vars[decl.id.name] = decl;
					}
				} else if (s.type === 'FunctionDeclaration') {
					a.vars[s.id.name] = s;
				}
			}

			if (a.body.type === 'BlockStatement') {
				for (var _iterator9 = a.body.body, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : (0, _getIterator3.default)(_iterator9);;) {
					var _ref9;

					if (_isArray9) {
						if (_i9 >= _iterator9.length) break;
						_ref9 = _iterator9[_i9++];
					} else {
						_i9 = _iterator9.next();
						if (_i9.done) break;
						_ref9 = _i9.value;
					}

					var stmt = _ref9;
					prehoist(stmt);
				}
			} else if (Array.isArray(a.body)) {
				for (var _iterator10 = a.body, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : (0, _getIterator3.default)(_iterator10);;) {
					var _ref10;

					if (_isArray10) {
						if (_i10 >= _iterator10.length) break;
						_ref10 = _iterator10[_i10++];
					} else {
						_i10 = _iterator10.next();
						if (_i10.done) break;
						_ref10 = _i10.value;
					}

					var _stmt = _ref10;
					prehoist(_stmt);
				}
			} else {
				prehoist(a.body);
			}
		}
	}, {
		key: 'enterFunction',
		value: function enterFunction(a) {
			this.funcStack.unshift(a);
			var scope = (0, _create2.default)(this.scopeStack[0]);
			this.scopeStack.unshift(scope);

			a.addHiddenProperty('refs', (0, _create2.default)(null));
			a.addHiddenProperty('vars', (0, _create2.default)(null));
			a.addHiddenProperty('funcs', (0, _create2.default)(null));

			if (this.options.nonUserCode) {
				a.addHiddenProperty('nonUserCode', true);
			}

			for (var _iterator11 = a.params, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : (0, _getIterator3.default)(_iterator11);;) {
				var _ref11;

				if (_isArray11) {
					if (_i11 >= _iterator11.length) break;
					_ref11 = _iterator11[_i11++];
				} else {
					_i11 = _iterator11.next();
					if (_i11.done) break;
					_ref11 = _i11.value;
				}

				var o = _ref11;

				a.vars[o.name] = a;
			}

			this.mangleBody(a);

			var strict = detectStrict(a.body.body);
			if (strict !== undefined) a.strict = strict;

			this.varStack.unshift(a.vars);
		}
	}, {
		key: 'enterFunctionDeclaration',
		value: function enterFunctionDeclaration(a) {
			var parent = this.funcStack[0];
			//a.parentFunction = parent.nodeID;
			a.srcName = 'function ' + a.id.name + ' {';
			parent.funcs[a.id.name] = a;
		}
	}, {
		key: 'exitIdentifier',
		value: function exitIdentifier(a) {
			a.srcName = a.name;
		}
	}, {
		key: 'exitLiteral',
		value: function exitLiteral(a) {
			if (a.regex) {
				a.srcName = '/' + a.regex.pattern + '/' + a.regex.flags;
			} else if (typeof a.value === 'string') {
				a.srcName = a.raw;
			} else if (typeof a.value === 'undefined') {
				a.srcName = 'undefiend';
			} else {
				a.srcName = a.raw;
			}
		}
	}, {
		key: 'exitBinaryExpression',
		value: function exitBinaryExpression(a) {
			a.srcName = a.left.srcName + ' ' + a.operator + ' ' + a.right.srcName;
		}
	}, {
		key: 'exitMemberExpression',
		value: function exitMemberExpression(a) {
			var left = a.object.srcName || '??';
			var right = a.property.srcName || '(intermediate value)';
			if (!a.computed) a.srcName = left + '.' + right;else a.srcName = a.srcName = left + '[' + right + ']';
		}
	}, {
		key: 'exitCallExpression',
		value: function exitCallExpression(a) {
			a.srcName = a.callee.srcName + '(...)';
		}
	}, {
		key: 'exitFunction',
		value: function exitFunction(a) {
			var vars = this.varStack.shift();
			var free = {};
			var upvars = {};
			for (var r in a.refs) {
				if (r in vars) {
					//Local refrence
				} else if (r in this.varStack[0]) {
					upvars[r] = true;
				} else {
					free[r] = true;
				}
			}
			a.upvars = upvars;
			a.freevars = free;

			this.scopeStack.shift();
			this.funcStack.shift();
			delete a.refs;

			if (compiler && this.options.compile === 'pre' && compiler.canCompile(a.body)) {
				a.body.dispatch = compiler.compileNode(a.body);
			}
			//this.log("VARS:", Object.getOwnPropertyNames(a.vars).join(', '));
		}
	}, {
		key: 'exitProgram',
		value: function exitProgram(a) {
			this.scopeStack.shift();
			var vars = this.varStack.shift();
			//this.log("VARS:", Object.getOwnPropertyNames(a.vars).join(', '));
		}
	}, {
		key: 'exit',
		value: function exit(a) {
			this.log('Exiting', a.type);
			--this.depth;
		}
	}]);
	return EsperASTInstructions;
}();

ASTPreprocessor.ASTNode = ASTNode;

module.exports = ASTPreprocessor;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _promise = __webpack_require__(96);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EmptyValue = __webpack_require__(28);
var Value = __webpack_require__(3);

function defer() {
	var resolve, reject;
	var promise = new _promise2.default(function (a, b) {
		resolve = a;
		reject = b;
	});
	return {
		resolve: resolve,
		reject: reject,
		promise: promise
	};
}

var FutureValue = function (_Value) {
	(0, _inherits3.default)(FutureValue, _Value);

	function FutureValue(realm) {
		(0, _classCallCheck3.default)(this, FutureValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (FutureValue.__proto__ || (0, _getPrototypeOf2.default)(FutureValue)).call(this, realm));

		_this.resolved = false;
		_this.successful = undefined;
		_this.value = undefined;
		_this.defered = defer();
		return _this;
	}

	/**
  * Creates a new future value wraping the promise p.
  * @param {Promise} promise
  */


	(0, _createClass3.default)(FutureValue, [{
		key: 'resolve',
		value: function resolve(value) {
			this.value = value;
			this.resolved = true;
			this.successful = true;
			this.defered.resolve(value);
		}
	}, {
		key: 'reject',
		value: function reject(value) {
			this.value = value;
			this.resolved = true;
			this.successful = false;
			this.defered.resolve(value);
		}
	}, {
		key: 'then',
		value: function then() {
			var p = this.defered.promise;
			return p.then.apply(p, arguments);
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return 'internal:future';
		}
	}, {
		key: 'debugString',
		get: function get() {
			return '[Future]';
		}
	}], [{
		key: 'make',
		value: function make(promise) {
			var fv = new FutureValue(null);
			promise.then(function (resolved) {
				fv.resolve(Value.fromNative(resolved));
			}, function (caught) {
				fv.reject(Value.fromNative(caught));
			});
			return fv;
		}
	}]);
	return FutureValue;
}(Value);

module.exports = FutureValue;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(47);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(12);
var Value = __webpack_require__(3);
var NumberValue = void 0;

var StringValue = function (_PrimitiveValue) {
	(0, _inherits3.default)(StringValue, _PrimitiveValue);

	function StringValue() {
		(0, _classCallCheck3.default)(this, StringValue);
		return (0, _possibleConstructorReturn3.default)(this, (StringValue.__proto__ || (0, _getPrototypeOf2.default)(StringValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(StringValue, [{
		key: 'get',
		value: _regenerator2.default.mark(function get(name, realm) {
			var idx;
			return _regenerator2.default.wrap(function get$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							idx = Number(name);

							if (isNaN(idx)) {
								_context.next = 3;
								break;
							}

							return _context.abrupt('return', StringValue.fromNative(this.native[idx]));

						case 3:
							if (!(name === 'length')) {
								_context.next = 5;
								break;
							}

							return _context.abrupt('return', StringValue.fromNative(this.native.length));

						case 5:
							return _context.delegateYield((0, _get3.default)(StringValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(StringValue.prototype), 'get', this).call(this, name, realm), 't0', 6);

						case 6:
							return _context.abrupt('return', _context.t0);

						case 7:
						case 'end':
							return _context.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'doubleEquals',
		value: _regenerator2.default.mark(function doubleEquals(other) {
			var rv;
			return _regenerator2.default.wrap(function doubleEquals$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(other instanceof StringValue)) {
								_context2.next = 4;
								break;
							}

							return _context2.abrupt('return', Value.fromNative(this.native == other.native));

						case 4:
							if (!(other instanceof NumberValue)) {
								_context2.next = 9;
								break;
							}

							return _context2.delegateYield(this.toNumberValue(), 't0', 6);

						case 6:
							rv = _context2.t0;
							return _context2.delegateYield(rv.doubleEquals(other), 't1', 8);

						case 8:
							return _context2.abrupt('return', _context2.t1);

						case 9:
							return _context2.abrupt('return', Value.false);

						case 10:
						case 'end':
							return _context2.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'gt',
		value: _regenerator2.default.mark(function gt(other) {
			return _regenerator2.default.wrap(function gt$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							_context3.t0 = this;
							_context3.t1 = this.native;
							return _context3.delegateYield(other.toStringNative(), 't2', 3);

						case 3:
							_context3.t3 = _context3.t2;
							_context3.t4 = _context3.t1 > _context3.t3;
							return _context3.abrupt('return', _context3.t0.fromNative.call(_context3.t0, _context3.t4));

						case 6:
						case 'end':
							return _context3.stop();
					}
				}
			}, gt, this);
		})
	}, {
		key: 'lt',
		value: _regenerator2.default.mark(function lt(other) {
			return _regenerator2.default.wrap(function lt$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							_context4.t0 = this;
							_context4.t1 = this.native;
							return _context4.delegateYield(other.toStringNative(), 't2', 3);

						case 3:
							_context4.t3 = _context4.t2;
							_context4.t4 = _context4.t1 < _context4.t3;
							return _context4.abrupt('return', _context4.t0.fromNative.call(_context4.t0, _context4.t4));

						case 6:
						case 'end':
							return _context4.stop();
					}
				}
			}, lt, this);
		})
	}, {
		key: 'gte',
		value: _regenerator2.default.mark(function gte(other) {
			return _regenerator2.default.wrap(function gte$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							_context5.t0 = this;
							_context5.t1 = this.native;
							return _context5.delegateYield(other.toStringNative(), 't2', 3);

						case 3:
							_context5.t3 = _context5.t2;
							_context5.t4 = _context5.t1 >= _context5.t3;
							return _context5.abrupt('return', _context5.t0.fromNative.call(_context5.t0, _context5.t4));

						case 6:
						case 'end':
							return _context5.stop();
					}
				}
			}, gte, this);
		})
	}, {
		key: 'lte',
		value: _regenerator2.default.mark(function lte(other) {
			return _regenerator2.default.wrap(function lte$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							_context6.t0 = this;
							_context6.t1 = this.native;
							return _context6.delegateYield(other.toStringNative(), 't2', 3);

						case 3:
							_context6.t3 = _context6.t2;
							_context6.t4 = _context6.t1 <= _context6.t3;
							return _context6.abrupt('return', _context6.t0.fromNative.call(_context6.t0, _context6.t4));

						case 6:
						case 'end':
							return _context6.stop();
					}
				}
			}, lte, this);
		})
	}, {
		key: 'add',
		value: _regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							_context7.t0 = this;
							_context7.t1 = this.native;
							return _context7.delegateYield(other.toPrimitiveNative('string'), 't2', 3);

						case 3:
							_context7.t3 = _context7.t2;
							_context7.t4 = _context7.t1 + _context7.t3;
							return _context7.abrupt('return', _context7.t0.fromNative.call(_context7.t0, _context7.t4));

						case 6:
						case 'end':
							return _context7.stop();
					}
				}
			}, add, this);
		})
	}]);
	return StringValue;
}(PrimitiveValue);

module.exports = StringValue;

NumberValue = __webpack_require__(61);

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(151), __esModule: true };

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = __webpack_require__(93);

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = true;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var META     = __webpack_require__(53)('meta')
  , isObject = __webpack_require__(19)
  , has      = __webpack_require__(22)
  , setDesc  = __webpack_require__(21).f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !__webpack_require__(26)(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};

/***/ }),
/* 50 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(20)
  , core    = __webpack_require__(10)
  , fails   = __webpack_require__(26);
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

/***/ }),
/* 53 */
/***/ (function(module, exports) {

var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),
/* 54 */
/***/ (function(module, exports) {



/***/ }),
/* 55 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 56 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 2.0.0-beta9-dev
var concat, foldl, map, nub, span;
this.any = function (list, fn) {
  var e;
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    e = list[i$];
    if (fn(e))
      return true;
  }
  return false;
};
this.all = function (list, fn) {
  var e;
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    e = list[i$];
    if (!fn(e))
      return false;
  }
  return true;
};
this.foldl = foldl = function (memo, list, fn) {
  var i;
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    i = list[i$];
    memo = fn(memo, i);
  }
  return memo;
};
this.foldl1 = function (list, fn) {
  return foldl(list[0], list.slice(1), fn);
};
this.map = map = function (list, fn) {
  var e;
  return function (accum$) {
    for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
      e = list[i$];
      accum$.push(fn(e));
    }
    return accum$;
  }.call(this, []);
};
this.concat = concat = function (list) {
  var cache$;
  return (cache$ = []).concat.apply(cache$, [].slice.call(list));
};
this.concatMap = function (list, fn) {
  return concat(map(list, fn));
};
this.intersect = function (listA, listB) {
  var a;
  return function (accum$) {
    for (var i$ = 0, length$ = listA.length; i$ < length$; ++i$) {
      a = listA[i$];
      if (!in$(a, listB))
        continue;
      accum$.push(a);
    }
    return accum$;
  }.call(this, []);
};
this.difference = function (listA, listB) {
  var a;
  return function (accum$) {
    for (var i$ = 0, length$ = listA.length; i$ < length$; ++i$) {
      a = listA[i$];
      if (!!in$(a, listB))
        continue;
      accum$.push(a);
    }
    return accum$;
  }.call(this, []);
};
this.nub = nub = function (list) {
  var i, result;
  result = [];
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    i = list[i$];
    if (!!in$(i, result))
      continue;
    result.push(i);
  }
  return result;
};
this.union = function (listA, listB) {
  var b;
  return listA.concat(function (accum$) {
    for (var cache$ = nub(listB), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
      b = cache$[i$];
      if (!!in$(b, listA))
        continue;
      accum$.push(b);
    }
    return accum$;
  }.call(this, []));
};
this.flip = function (fn) {
  return function (b, a) {
    return fn.call(this, a, b);
  };
};
this.owns = function (hop) {
  return function (a, b) {
    return hop.call(a, b);
  };
}({}.hasOwnProperty);
this.span = span = function (list, f) {
  var cache$, ys, zs;
  if (list.length === 0) {
    return [
      [],
      []
    ];
  } else if (f(list[0])) {
    cache$ = span(list.slice(1), f);
    ys = cache$[0];
    zs = cache$[1];
    return [
      [list[0]].concat([].slice.call(ys)),
      zs
    ];
  } else {
    return [
      [],
      list
    ];
  }
};
this.divMod = function (a, b) {
  var c, div, mod;
  c = a % b;
  mod = c < 0 ? c + b : c;
  div = Math.floor(a / b);
  return [
    div,
    mod
  ];
};
this.partition = function (list, fn) {
  var item, result;
  result = [
    [],
    []
  ];
  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
    item = list[i$];
    result[+!fn(item)].push(item);
  }
  return result;
};
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {// Generated by CoffeeScript 2.0.0-beta9-dev
var ArrayInitialiser, Block, Bool, cache$, cache$1, Class, CompoundAssignOp, concat, concatMap, Conditional, createNodes, difference, exports, ForOf, FunctionApplications, Functions, GenSym, handleLists, handlePrimitives, HeregExp, Identifier, Identifiers, map, NegatedConditional, NewOp, Nodes, nub, ObjectInitialiser, Primitives, Range, RegExp, RegExps, Slice, StaticMemberAccessOps, Super, Switch, SwitchCase, union, While;
cache$ = __webpack_require__(56);
map = cache$.map;
concat = cache$.concat;
concatMap = cache$.concatMap;
difference = cache$.difference;
nub = cache$.nub;
union = cache$.union;
exports = null != ('undefined' !== typeof module && null != module ? module.exports : void 0) ? 'undefined' !== typeof module && null != module ? module.exports : void 0 : this;
createNodes = function (subclasses, superclasses) {
  var className, specs;
  if (null == superclasses)
    superclasses = [];
  for (className in subclasses) {
    if (!isOwn$(subclasses, className))
      continue;
    specs = subclasses[className];
    (function (className) {
      var externalCtor$, isCategory, klass, params, superclass;
      superclass = null != superclasses[0] ? superclasses[0] : function () {
      };
      isCategory = 'undefined' !== typeof specs && null != specs && specs.length === 2;
      params = 'undefined' !== typeof specs && null != specs ? function () {
        switch (specs.length) {
        case 0:
          return [];
        case 1:
        case 2:
          return specs[0];
        }
      }.call(this) : null;
      if (null != params)
        params;
      else
        params = null != superclass.prototype.childNodes ? superclass.prototype.childNodes : [];
      klass = function (super$) {
        extends$(class$, super$);
        externalCtor$ = isCategory ? function () {
        } : function () {
          var i, param;
          for (var i$ = 0, length$ = params.length; i$ < length$; ++i$) {
            param = params[i$];
            i = i$;
            this[param] = arguments[i];
          }
          if (null != this.initialise)
            this.initialise.apply(this, arguments);
          return this;
        };
        function class$() {
          return externalCtor$.apply(this, arguments);
        }
        class$.prototype.className = className;
        class$.superclasses = superclasses;
        return class$;
      }(superclass);
      if (null != ('undefined' !== typeof specs && null != specs ? specs[0] : void 0))
        klass.prototype.childNodes = specs[0];
      if (isCategory)
        createNodes(specs[1], [klass].concat([].slice.call(superclasses)));
      return exports[className] = klass;
    }(className));
  }
};
createNodes({
  Nodes: [
    [],
    {
      BinOps: [
        [
          'left',
          'right'
        ],
        {
          AssignOps: [
            [
              'assignee',
              'expression'
            ],
            {
              AssignOp: null,
              ClassProtoAssignOp: null,
              CompoundAssignOp: [[
                  'op',
                  'assignee',
                  'expression'
                ]]
            }
          ],
          BitOps: [
            null,
            {
              BitAndOp: null,
              BitOrOp: null,
              BitXorOp: null,
              LeftShiftOp: null,
              SignedRightShiftOp: null,
              UnsignedRightShiftOp: null
            }
          ],
          ComparisonOps: [
            null,
            {
              EQOp: null,
              GTEOp: null,
              GTOp: null,
              LTEOp: null,
              LTOp: null,
              NEQOp: null
            }
          ],
          ConcatOp: null,
          ExistsOp: null,
          ExtendsOp: null,
          InOp: null,
          InstanceofOp: null,
          LogicalOps: [
            null,
            {
              LogicalAndOp: null,
              LogicalOrOp: null
            }
          ],
          MathsOps: [
            null,
            {
              ExpOp: null,
              DivideOp: null,
              MultiplyOp: null,
              RemOp: null,
              SubtractOp: null
            }
          ],
          OfOp: null,
          PlusOp: null,
          Range: [[
              'isInclusive',
              'left',
              'right'
            ]],
          SeqOp: null
        }
      ],
      Statements: [
        [],
        {
          Break: null,
          Continue: null,
          Debugger: null,
          Return: [['expression']],
          Throw: [['expression']]
        }
      ],
      UnaryOps: [
        ['expression'],
        {
          BitNotOp: null,
          DeleteOp: null,
          DoOp: null,
          LogicalNotOp: null,
          NewOp: [[
              'ctor',
              'arguments'
            ]],
          PreDecrementOp: null,
          PreIncrementOp: null,
          PostDecrementOp: null,
          PostIncrementOp: null,
          TypeofOp: null,
          UnaryExistsOp: null,
          UnaryNegateOp: null,
          UnaryPlusOp: null
        }
      ],
      MemberAccessOps: [
        null,
        {
          StaticMemberAccessOps: [
            [
              'expression',
              'memberName'
            ],
            {
              MemberAccessOp: null,
              ProtoMemberAccessOp: null,
              SoakedMemberAccessOp: null,
              SoakedProtoMemberAccessOp: null
            }
          ],
          DynamicMemberAccessOps: [
            [
              'expression',
              'indexingExpr'
            ],
            {
              DynamicMemberAccessOp: null,
              DynamicProtoMemberAccessOp: null,
              SoakedDynamicMemberAccessOp: null,
              SoakedDynamicProtoMemberAccessOp: null
            }
          ]
        }
      ],
      ChainedComparisonOp: [['expression']],
      FunctionApplications: [
        [
          'function',
          'arguments'
        ],
        {
          FunctionApplication: null,
          SoakedFunctionApplication: null
        }
      ],
      Super: [['arguments']],
      Program: [['body']],
      Block: [['statements']],
      Conditional: [[
          'condition',
          'consequent',
          'alternate'
        ]],
      ForIn: [[
          'valAssignee',
          'keyAssignee',
          'target',
          'step',
          'filter',
          'body'
        ]],
      ForOf: [[
          'isOwn',
          'keyAssignee',
          'valAssignee',
          'target',
          'filter',
          'body'
        ]],
      Switch: [[
          'expression',
          'cases',
          'alternate'
        ]],
      SwitchCase: [[
          'conditions',
          'consequent'
        ]],
      Try: [[
          'body',
          'catchAssignee',
          'catchBody',
          'finallyBody'
        ]],
      While: [[
          'condition',
          'body'
        ]],
      ArrayInitialiser: [['members']],
      ObjectInitialiser: [['members']],
      ObjectInitialiserMember: [[
          'key',
          'expression'
        ]],
      Class: [[
          'nameAssignee',
          'parent',
          'ctor',
          'body',
          'boundMembers'
        ]],
      Constructor: [['expression']],
      Functions: [
        [
          'parameters',
          'body'
        ],
        {
          Function: null,
          BoundFunction: null
        }
      ],
      DefaultParam: [[
          'param',
          'default'
        ]],
      Identifiers: [
        ['data'],
        {
          Identifier: null,
          GenSym: null
        }
      ],
      Null: null,
      Primitives: [
        ['data'],
        {
          Bool: null,
          JavaScript: null,
          Numbers: [
            null,
            {
              Int: null,
              Float: null
            }
          ],
          String: null
        }
      ],
      RegExps: [
        null,
        {
          RegExp: [[
              'data',
              'flags'
            ]],
          HeregExp: [[
              'expression',
              'flags'
            ]]
        }
      ],
      This: null,
      Undefined: null,
      Slice: [[
          'expression',
          'isInclusive',
          'left',
          'right'
        ]],
      Rest: [['expression']],
      Spread: [['expression']]
    }
  ]
});
cache$1 = exports;
Nodes = cache$1.Nodes;
Primitives = cache$1.Primitives;
CompoundAssignOp = cache$1.CompoundAssignOp;
StaticMemberAccessOps = cache$1.StaticMemberAccessOps;
Range = cache$1.Range;
ArrayInitialiser = cache$1.ArrayInitialiser;
ObjectInitialiser = cache$1.ObjectInitialiser;
NegatedConditional = cache$1.NegatedConditional;
Conditional = cache$1.Conditional;
Identifier = cache$1.Identifier;
ForOf = cache$1.ForOf;
Functions = cache$1.Functions;
While = cache$1.While;
Class = cache$1.Class;
Block = cache$1.Block;
NewOp = cache$1.NewOp;
Bool = cache$1.Bool;
FunctionApplications = cache$1.FunctionApplications;
RegExps = cache$1.RegExps;
RegExp = cache$1.RegExp;
HeregExp = cache$1.HeregExp;
Super = cache$1.Super;
Slice = cache$1.Slice;
Switch = cache$1.Switch;
Identifiers = cache$1.Identifiers;
SwitchCase = cache$1.SwitchCase;
GenSym = cache$1.GenSym;
Nodes.fromBasicObject = function (obj) {
  return exports[obj.type].fromBasicObject(obj);
};
Nodes.prototype.listMembers = [];
Nodes.prototype.toBasicObject = function () {
  var child, obj, p;
  obj = { type: this.className };
  if (null != this.line)
    obj.line = this.line;
  if (null != this.column)
    obj.column = this.column;
  if (null != this.raw) {
    obj.raw = this.raw;
    if (null != this.offset)
      obj.range = [
        this.offset,
        this.offset + this.raw.length
      ];
  }
  for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {
    child = this.childNodes[i$];
    if (in$(child, this.listMembers)) {
      obj[child] = function (accum$) {
        for (var i$1 = 0, length$1 = this[child].length; i$1 < length$1; ++i$1) {
          p = this[child][i$1];
          accum$.push(p.toBasicObject());
        }
        return accum$;
      }.call(this, []);
    } else {
      obj[child] = null != this[child] ? this[child].toBasicObject() : void 0;
    }
  }
  return obj;
};
Nodes.prototype.fold = function (memo, fn) {
  var child, p;
  for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {
    child = this.childNodes[i$];
    if (in$(child, this.listMembers)) {
      memo = function (accum$) {
        for (var i$1 = 0, length$1 = this[child].length; i$1 < length$1; ++i$1) {
          p = this[child][i$1];
          accum$.push(p.fold(memo, fn));
        }
        return accum$;
      }.call(this, []);
    } else {
      memo = this[child].fold(memo, fn);
    }
  }
  return fn(memo, this);
};
Nodes.prototype.clone = function () {
  var ctor, k, n, v;
  ctor = function () {
  };
  ctor.prototype = this.constructor.prototype;
  n = new ctor;
  for (k in this) {
    if (!isOwn$(this, k))
      continue;
    v = this[k];
    n[k] = v;
  }
  return n;
};
Nodes.prototype['instanceof'] = function () {
  var ctor, ctors, superclasses;
  ctors = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
  superclasses = map(this.constructor.superclasses, function (c) {
    return c.prototype.className;
  });
  for (var i$ = 0, length$ = ctors.length; i$ < length$; ++i$) {
    ctor = ctors[i$];
    if (!in$(ctor.prototype.className, [this.className].concat([].slice.call(superclasses))))
      continue;
    return true;
  }
  return false;
};
Nodes.prototype.r = function (param$) {
  this.raw = param$;
  return this;
};
Nodes.prototype.p = function (param$, param$1, param$2) {
  this.line = param$;
  this.column = param$1;
  this.offset = param$2;
  return this;
};
Nodes.prototype.generated = false;
Nodes.prototype.g = function () {
  this.generated = true;
  return this;
};
handlePrimitives = function (ctor) {
  var primitives;
  primitives = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
  ctor.prototype.childNodes = difference(ctor.prototype.childNodes, primitives);
  return ctor.prototype.toBasicObject = function () {
    var obj, primitive;
    obj = Nodes.prototype.toBasicObject.call(this);
    for (var i$ = 0, length$ = primitives.length; i$ < length$; ++i$) {
      primitive = primitives[i$];
      obj[primitive] = this[primitive];
    }
    return obj;
  };
};
handlePrimitives(Class, 'boundMembers');
handlePrimitives(CompoundAssignOp, 'op');
handlePrimitives(ForOf, 'isOwn');
handlePrimitives(HeregExp, 'flags');
handlePrimitives(Identifiers, 'data');
handlePrimitives(Primitives, 'data');
handlePrimitives(Range, 'isInclusive');
handlePrimitives(RegExp, 'data', 'flags');
handlePrimitives(Slice, 'isInclusive');
handlePrimitives(StaticMemberAccessOps, 'memberName');
handleLists = function (ctor) {
  var listProps;
  listProps = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
  return ctor.prototype.listMembers = listProps;
};
handleLists(ArrayInitialiser, 'members');
handleLists(Block, 'statements');
handleLists(Functions, 'parameters');
handleLists(FunctionApplications, 'arguments');
handleLists(NewOp, 'arguments');
handleLists(ObjectInitialiser, 'members');
handleLists(Super, 'arguments');
handleLists(Switch, 'cases');
handleLists(SwitchCase, 'conditions');
Block.wrap = function (s) {
  return new Block(null != s ? [s] : []).r(s.raw).p(s.line, s.column);
};
Class.prototype.initialise = function () {
  if (null != this.boundMembers)
    this.boundMembers;
  else
    this.boundMembers = [];
  this.name = new GenSym('class');
  if (null != this.nameAssignee)
    return this.name = function () {
      switch (false) {
      case !this.nameAssignee['instanceof'](Identifier):
        return new Identifier(this.nameAssignee.data);
      case !this.nameAssignee['instanceof'](StaticMemberAccessOps):
        return new Identifier(this.nameAssignee.memberName);
      default:
        return this.name;
      }
    }.call(this);
};
Class.prototype.childNodes.push('name');
ObjectInitialiser.prototype.keys = function () {
  return map(this.members, function (m) {
    return m.key;
  });
};
ObjectInitialiser.prototype.vals = function () {
  return map(this.members, function (m) {
    return m.expression;
  });
};
RegExps.prototype.initialise = function (_, flags) {
  var flag;
  this.flags = {};
  for (var cache$2 = [
        'g',
        'i',
        'm',
        'y'
      ], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {
    flag = cache$2[i$];
    this.flags[flag] = in$(flag, flags);
  }
};
exports.NegatedConditional = function (super$) {
  extends$(NegatedConditional, super$);
  function NegatedConditional() {
    Conditional.apply(this, arguments);
  }
  return NegatedConditional;
}(Conditional);
exports.NegatedWhile = function (super$1) {
  extends$(NegatedWhile, super$1);
  function NegatedWhile() {
    While.apply(this, arguments);
  }
  return NegatedWhile;
}(While);
exports.Loop = function (super$2) {
  extends$(Loop, super$2);
  function Loop(body) {
    While.call(this, new Bool(true).g(), body);
  }
  return Loop;
}(While);
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  for (var key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(87)(module)))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _typeof2 = __webpack_require__(25);

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _create = __webpack_require__(29);

var _create2 = _interopRequireDefault(_create);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);
/**
 * Represents a value that maps directly to an untrusted local value.
 */

var BridgeValue = function (_Value) {
	(0, _inherits3.default)(BridgeValue, _Value);

	function BridgeValue(value) {
		(0, _classCallCheck3.default)(this, BridgeValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (BridgeValue.__proto__ || (0, _getPrototypeOf2.default)(BridgeValue)).call(this));

		_this.native = value;
		return _this;
	}

	(0, _createClass3.default)(BridgeValue, [{
		key: 'makeBridge',
		value: function makeBridge(value) {
			return BridgeValue.make(value);
		}
	}, {
		key: 'ref',
		value: function ref(name) {
			var that = this;
			var out = (0, _create2.default)(null);
			var str = function str(value) {
				return that.native[name] = value.toNative();
			};
			out.getValue = _regenerator2.default.mark(function _callee() {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.abrupt('return', that.native[name]);

							case 1:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			});
			out.setValue = _regenerator2.default.mark(function _callee2(to) {
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								return _context2.abrupt('return', str(to));

							case 1:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this);
			});

			return out;
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			return this.native;
		}
	}, {
		key: 'asString',
		value: _regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', this.native.toString());

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'doubleEquals',
		value: _regenerator2.default.mark(function doubleEquals(other) {
			return _regenerator2.default.wrap(function doubleEquals$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', this.makeBridge(this.native == other.toNative()));

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'tripleEquals',
		value: _regenerator2.default.mark(function tripleEquals(other) {
			return _regenerator2.default.wrap(function tripleEquals$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', this.makeBridge(this.native === other.toNative()));

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'add',
		value: _regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.abrupt('return', this.makeBridge(this.native + other.toNative()));

						case 1:
						case 'end':
							return _context6.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'subtract',
		value: _regenerator2.default.mark(function subtract(other) {
			return _regenerator2.default.wrap(function subtract$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.abrupt('return', this.makeBridge(this.native - other.toNative()));

						case 1:
						case 'end':
							return _context7.stop();
					}
				}
			}, subtract, this);
		})
	}, {
		key: 'multiply',
		value: _regenerator2.default.mark(function multiply(other) {
			return _regenerator2.default.wrap(function multiply$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.abrupt('return', this.makeBridge(this.native * other.toNative()));

						case 1:
						case 'end':
							return _context8.stop();
					}
				}
			}, multiply, this);
		})
	}, {
		key: 'divide',
		value: _regenerator2.default.mark(function divide(other) {
			return _regenerator2.default.wrap(function divide$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							return _context9.abrupt('return', this.makeBridge(this.native / other.toNative()));

						case 1:
						case 'end':
							return _context9.stop();
					}
				}
			}, divide, this);
		})
	}, {
		key: 'mod',
		value: _regenerator2.default.mark(function mod(other) {
			return _regenerator2.default.wrap(function mod$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.abrupt('return', this.makeBridge(this.native % other.toNative()));

						case 1:
						case 'end':
							return _context10.stop();
					}
				}
			}, mod, this);
		})
	}, {
		key: 'shiftLeft',
		value: _regenerator2.default.mark(function shiftLeft(other) {
			return _regenerator2.default.wrap(function shiftLeft$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', this.makeBridge(this.native << other.toNative()));

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, shiftLeft, this);
		})
	}, {
		key: 'shiftRight',
		value: _regenerator2.default.mark(function shiftRight(other) {
			return _regenerator2.default.wrap(function shiftRight$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.abrupt('return', this.makeBridge(this.native >> other.toNative()));

						case 1:
						case 'end':
							return _context12.stop();
					}
				}
			}, shiftRight, this);
		})
	}, {
		key: 'shiftRightZF',
		value: _regenerator2.default.mark(function shiftRightZF(other) {
			return _regenerator2.default.wrap(function shiftRightZF$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							return _context13.abrupt('return', this.makeBridge(this.native >>> other.toNative()));

						case 1:
						case 'end':
							return _context13.stop();
					}
				}
			}, shiftRightZF, this);
		})
	}, {
		key: 'bitAnd',
		value: _regenerator2.default.mark(function bitAnd(other) {
			return _regenerator2.default.wrap(function bitAnd$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							return _context14.abrupt('return', this.makeBridge(this.native & other.toNative()));

						case 1:
						case 'end':
							return _context14.stop();
					}
				}
			}, bitAnd, this);
		})
	}, {
		key: 'bitOr',
		value: _regenerator2.default.mark(function bitOr(other) {
			return _regenerator2.default.wrap(function bitOr$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							return _context15.abrupt('return', this.makeBridge(this.native | other.toNative()));

						case 1:
						case 'end':
							return _context15.stop();
					}
				}
			}, bitOr, this);
		})
	}, {
		key: 'bitXor',
		value: _regenerator2.default.mark(function bitXor(other) {
			return _regenerator2.default.wrap(function bitXor$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							return _context16.abrupt('return', this.makeBridge(this.native ^ other.toNative()));

						case 1:
						case 'end':
							return _context16.stop();
					}
				}
			}, bitXor, this);
		})
	}, {
		key: 'gt',
		value: _regenerator2.default.mark(function gt(other) {
			return _regenerator2.default.wrap(function gt$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							return _context17.abrupt('return', this.makeBridge(this.native > other.toNative()));

						case 1:
						case 'end':
							return _context17.stop();
					}
				}
			}, gt, this);
		})
	}, {
		key: 'lt',
		value: _regenerator2.default.mark(function lt(other) {
			return _regenerator2.default.wrap(function lt$(_context18) {
				while (1) {
					switch (_context18.prev = _context18.next) {
						case 0:
							return _context18.abrupt('return', this.makeBridge(this.native < other.toNative()));

						case 1:
						case 'end':
							return _context18.stop();
					}
				}
			}, lt, this);
		})
	}, {
		key: 'gte',
		value: _regenerator2.default.mark(function gte(other) {
			return _regenerator2.default.wrap(function gte$(_context19) {
				while (1) {
					switch (_context19.prev = _context19.next) {
						case 0:
							return _context19.abrupt('return', this.makeBridge(this.native >= other.toNative()));

						case 1:
						case 'end':
							return _context19.stop();
					}
				}
			}, gte, this);
		})
	}, {
		key: 'lte',
		value: _regenerator2.default.mark(function lte(other) {
			return _regenerator2.default.wrap(function lte$(_context20) {
				while (1) {
					switch (_context20.prev = _context20.next) {
						case 0:
							return _context20.abrupt('return', this.makeBridge(this.native <= other.toNative()));

						case 1:
						case 'end':
							return _context20.stop();
					}
				}
			}, lte, this);
		})
	}, {
		key: 'inOperator',
		value: _regenerator2.default.mark(function inOperator(other) {
			return _regenerator2.default.wrap(function inOperator$(_context21) {
				while (1) {
					switch (_context21.prev = _context21.next) {
						case 0:
							return _context21.abrupt('return', this.makeBridge(this.native in other.toNative()));

						case 1:
						case 'end':
							return _context21.stop();
					}
				}
			}, inOperator, this);
		})
	}, {
		key: 'instanceOf',
		value: _regenerator2.default.mark(function instanceOf(other) {
			return _regenerator2.default.wrap(function instanceOf$(_context22) {
				while (1) {
					switch (_context22.prev = _context22.next) {
						case 0:
							return _context22.abrupt('return', this.makeBridge(this.native instanceof other.toNative()));

						case 1:
						case 'end':
							return _context22.stop();
					}
				}
			}, instanceOf, this);
		})
	}, {
		key: 'unaryPlus',
		value: _regenerator2.default.mark(function unaryPlus() {
			return _regenerator2.default.wrap(function unaryPlus$(_context23) {
				while (1) {
					switch (_context23.prev = _context23.next) {
						case 0:
							return _context23.abrupt('return', this.makeBridge(+this.native));

						case 1:
						case 'end':
							return _context23.stop();
					}
				}
			}, unaryPlus, this);
		})
	}, {
		key: 'unaryMinus',
		value: _regenerator2.default.mark(function unaryMinus() {
			return _regenerator2.default.wrap(function unaryMinus$(_context24) {
				while (1) {
					switch (_context24.prev = _context24.next) {
						case 0:
							return _context24.abrupt('return', this.makeBridge(-this.native));

						case 1:
						case 'end':
							return _context24.stop();
					}
				}
			}, unaryMinus, this);
		})
	}, {
		key: 'not',
		value: _regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context25) {
				while (1) {
					switch (_context25.prev = _context25.next) {
						case 0:
							return _context25.abrupt('return', this.makeBridge(!this.native));

						case 1:
						case 'end':
							return _context25.stop();
					}
				}
			}, not, this);
		})
	}, {
		key: 'get',
		value: _regenerator2.default.mark(function get(name) {
			return _regenerator2.default.wrap(function get$(_context26) {
				while (1) {
					switch (_context26.prev = _context26.next) {
						case 0:
							return _context26.abrupt('return', this.makeBridge(this.native[name]));

						case 1:
						case 'end':
							return _context26.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'set',
		value: _regenerator2.default.mark(function set(name, value) {
			return _regenerator2.default.wrap(function set$(_context27) {
				while (1) {
					switch (_context27.prev = _context27.next) {
						case 0:
							this.native[name] = value.toNative();

						case 1:
						case 'end':
							return _context27.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'observableProperties',
		value: _regenerator2.default.mark(function observableProperties(realm) {
			var p;
			return _regenerator2.default.wrap(function observableProperties$(_context28) {
				while (1) {
					switch (_context28.prev = _context28.next) {
						case 0:
							_context28.t0 = _regenerator2.default.keys(this.native);

						case 1:
							if ((_context28.t1 = _context28.t0()).done) {
								_context28.next = 7;
								break;
							}

							p = _context28.t1.value;
							_context28.next = 5;
							return this.makeBridge(p);

						case 5:
							_context28.next = 1;
							break;

						case 7:
							return _context28.abrupt('return');

						case 8:
						case 'end':
							return _context28.stop();
					}
				}
			}, observableProperties, this);
		})

		/**
   *
   * @param {Value} thiz
   * @param {Value[]} args
   */

	}, {
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args) {
			var realArgs, i, result, _result;

			return _regenerator2.default.wrap(function call$(_context29) {
				while (1) {
					switch (_context29.prev = _context29.next) {
						case 0:
							realArgs = new Array(args.length);

							for (i = 0; i < args.length; ++i) {
								realArgs[i] = args[i].toNative();
							}
							_context29.prev = 2;
							result = this.native.apply(thiz ? thiz.toNative() : undefined, realArgs);
							return _context29.abrupt('return', this.makeBridge(result));

						case 7:
							_context29.prev = 7;
							_context29.t0 = _context29['catch'](2);
							_result = this.makeBridge(_context29.t0);
							return _context29.abrupt('return', new CompletionRecord(CompletionRecord.THROW, _result));

						case 11:
						case 'end':
							return _context29.stop();
					}
				}
			}, call, this, [[2, 7]]);
		})
	}, {
		key: 'makeThisForNew',
		value: _regenerator2.default.mark(function makeThisForNew() {
			return _regenerator2.default.wrap(function makeThisForNew$(_context30) {
				while (1) {
					switch (_context30.prev = _context30.next) {
						case 0:
							return _context30.abrupt('return', this.makeBridge((0, _create2.default)(this.native.prototype)));

						case 1:
						case 'end':
							return _context30.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'debugString',
		get: function get() {
			return '[Bridge: ' + this.native + ']';
		}
	}, {
		key: 'truthy',
		get: function get() {
			return !!this.native;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return (0, _typeof3.default)(this.native);
		}
	}], [{
		key: 'make',
		value: function make(native) {
			if (native === undefined) return Value.undef;
			var prim = Value.fromPrimativeNative(native);
			if (prim) return prim;

			if (Value.hasBookmark(native)) {
				return Value.getBookmark(native);
			}

			return new BridgeValue(native);
		}
	}]);
	return BridgeValue;
}(Value);

module.exports = BridgeValue;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _defineProperty = __webpack_require__(36);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(12);
var ObjectValue = __webpack_require__(9);
var Value = __webpack_require__(3);
var EvaluatorInstruction = __webpack_require__(27);

var ErrorInstance = function (_ObjectValue) {
	(0, _inherits3.default)(ErrorInstance, _ObjectValue);

	function ErrorInstance() {
		(0, _classCallCheck3.default)(this, ErrorInstance);
		return (0, _possibleConstructorReturn3.default)(this, (ErrorInstance.__proto__ || (0, _getPrototypeOf2.default)(ErrorInstance)).apply(this, arguments));
	}

	(0, _createClass3.default)(ErrorInstance, [{
		key: 'createNativeAnalog',
		value: function createNativeAnalog() {
			if (!this.native) {
				var stack = void 0;
				var NativeClass = this.proto.nativeClass || Error;
				this.native = new NativeClass();
				if (!this.native.stack) {
					try {
						throw native;
					} catch (e) {
						stack = e.stack;
					}
				} else {
					stack = this.native.stack;
				}

				var frames = stack ? stack.split(/\n/) : [];
				if (stack.length > 1) {
					var header = frames.shift();
					while (/at (ErrorInstance.createNativeAnalog|ErrorObject.make|Function.makeTypeError)/.test(frames[0])) {
						frames.shift();
					}
					this.native.stack = header + '\n' + frames.join('\n');
				}
				for (var k in this.extra) {
					this.native[k] = this.extra[k];
				}
			}
			return this.native;
		}
	}, {
		key: 'toNative',
		value: function toNative() {
			var out = this.createNativeAnalog();
			var msg = this.properties['message'].value;
			if (msg) out.message = msg.toNative();

			if (this.properties['stack']) {
				msg.stack = this.properties['stack'].value.native;
			}

			return out;
		}
	}, {
		key: 'addExtra',
		value: _regenerator2.default.mark(function addExtra(extra) {
			var evaluator, scope, ast, list, _k, v, k;

			return _regenerator2.default.wrap(function addExtra$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (this.realm.options.extraErrorInfo) {
								_context.next = 2;
								break;
							}

							return _context.abrupt('return');

						case 2:
							_context.next = 4;
							return EvaluatorInstruction.getEvaluator();

						case 4:
							evaluator = _context.sent;

							if (!evaluator) {
								_context.next = 21;
								break;
							}

							scope = evaluator.topFrame.scope;
							ast = extra.ast = evaluator.topFrame.ast;

							extra.scope = scope;
							//TODO: Sometiems scope is undefined, figure out why.
							if (extra.ast.loc) {
								extra.line = extra.ast.loc.start.line;
							}

							_context.t0 = extra.code;
							_context.next = _context.t0 === 'UndefinedVariable' ? 13 : _context.t0 === 'SmartAccessDenied' ? 13 : _context.t0 === 'CallNonFunction' ? 15 : _context.t0 === 'IndexEmpty' ? 20 : 21;
							break;

						case 13:
							if (scope) extra.candidates = scope.getVariableNames();
							return _context.abrupt('break', 21);

						case 15:
							list = void 0;

							if (extra.base && extra.base.getPropertyValueMap) {
								list = extra.base.getPropertyValueMap();
							} else {
								list = scope.object.getPropertyValueMap();
							}

							extra.candidates = [];
							for (_k in list) {
								v = list[_k];

								if (v && v.isCallable) {
									extra.candidates.push(_k);
								}
							}
							return _context.abrupt('break', 21);

						case 20:
							return _context.abrupt('break', 21);

						case 21:
							if (this.native) {
								for (k in extra) {
									if (['ast', 'scope', 'candidates', 'targetAst'].indexOf(k) !== -1) {
										(0, _defineProperty2.default)(this.native, k, {
											value: extra[k],
											enumerable: false
										});
									} else {
										this.native[k] = extra[k];
									}
								}
							}
							this.extra = extra;

						case 23:
						case 'end':
							return _context.stop();
					}
				}
			}, addExtra, this);
		})
	}]);
	return ErrorInstance;
}(ObjectValue);

module.exports = ErrorInstance;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EmptyValue = __webpack_require__(28);
var Value = __webpack_require__(3);

var NullValue = function (_EmptyValue) {
	(0, _inherits3.default)(NullValue, _EmptyValue);

	function NullValue() {
		(0, _classCallCheck3.default)(this, NullValue);
		return (0, _possibleConstructorReturn3.default)(this, (NullValue.__proto__ || (0, _getPrototypeOf2.default)(NullValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(NullValue, [{
		key: 'toNative',
		value: function toNative() {
			return null;
		}
	}, {
		key: 'tripleEquals',
		value: _regenerator2.default.mark(function tripleEquals(other, realm) {
			return _regenerator2.default.wrap(function tripleEquals$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', other instanceof NullValue ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'asString',
		value: _regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.abrupt('return', 'null');

						case 1:
						case 'end':
							return _context2.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'toPrimitiveValue',
		value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', this);

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toNumberValue',
		value: _regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', Value.zero);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toStringValue',
		value: _regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', Value.fromNative('null'));

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'jsTypeName',
		get: function get() {
			return 'object';
		}
	}, {
		key: 'specTypeName',
		get: function get() {
			return 'null';
		}
	}, {
		key: 'debugString',
		get: function get() {
			return 'null';
		}
	}]);
	return NullValue;
}(EmptyValue);

module.exports = NullValue;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(12);
var Value = __webpack_require__(3);
var StringValue = void 0;

var NumberValue = function (_PrimitiveValue) {
	(0, _inherits3.default)(NumberValue, _PrimitiveValue);

	function NumberValue() {
		(0, _classCallCheck3.default)(this, NumberValue);
		return (0, _possibleConstructorReturn3.default)(this, (NumberValue.__proto__ || (0, _getPrototypeOf2.default)(NumberValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(NumberValue, [{
		key: 'doubleEquals',
		value: _regenerator2.default.mark(function doubleEquals(other) {
			var on;
			return _regenerator2.default.wrap(function doubleEquals$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							on = void 0;

							if (!(other instanceof NumberValue)) {
								_context.next = 5;
								break;
							}

							return _context.abrupt('return', Value.fromNative(this.native == other.native));

						case 5:
							if (!(other instanceof StringValue)) {
								_context.next = 10;
								break;
							}

							return _context.delegateYield(other.toNumberValue(), 't0', 7);

						case 7:
							on = _context.t0;
							_context.next = 13;
							break;

						case 10:
							if (!(other.specTypeName == 'object')) {
								_context.next = 13;
								break;
							}

							return _context.delegateYield(other.toPrimitiveValue(), 't1', 12);

						case 12:
							on = _context.t1;

						case 13:
							if (on) {
								_context.next = 15;
								break;
							}

							return _context.abrupt('return', Value.false);

						case 15:
							return _context.delegateYield(this.doubleEquals(on), 't2', 16);

						case 16:
							return _context.abrupt('return', _context.t2);

						case 17:
						case 'end':
							return _context.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'add',
		value: _regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							_context2.t0 = this;
							_context2.t1 = this.native;
							return _context2.delegateYield(other.toPrimitiveNative(), 't2', 3);

						case 3:
							_context2.t3 = _context2.t2;
							_context2.t4 = _context2.t1 + _context2.t3;
							return _context2.abrupt('return', _context2.t0.fromNative.call(_context2.t0, _context2.t4));

						case 6:
						case 'end':
							return _context2.stop();
					}
				}
			}, add, this);
		})
	}]);
	return NumberValue;
}(PrimitiveValue);

module.exports = NumberValue;

StringValue = __webpack_require__(45);

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(12);
var ObjectValue = __webpack_require__(9);
var Value = __webpack_require__(3);

var RegExpValue = function (_ObjectValue) {
	(0, _inherits3.default)(RegExpValue, _ObjectValue);

	function RegExpValue(realm) {
		(0, _classCallCheck3.default)(this, RegExpValue);
		return (0, _possibleConstructorReturn3.default)(this, (RegExpValue.__proto__ || (0, _getPrototypeOf2.default)(RegExpValue)).call(this, realm, realm.RegExpPrototype));
	}

	(0, _createClass3.default)(RegExpValue, [{
		key: 'toNative',
		value: function toNative() {
			return this.regexp;
		}
	}, {
		key: 'debugString',
		get: function get() {
			return this.regexp.toString();
		}
	}], [{
		key: 'make',
		value: function make(regexp, realm) {

			var av = new RegExpValue(realm);
			av.regexp = regexp;
			av.setImmediate('source', Value.fromNative(regexp.source));
			av.properties['source'].enumerable = false;
			av.setImmediate('global', Value.fromNative(regexp.global));
			av.properties['global'].enumerable = false;
			av.setImmediate('ignoreCase', Value.fromNative(regexp.ignoreCase));
			av.properties['ignoreCase'].enumerable = false;
			av.setImmediate('multiline', Value.fromNative(regexp.multiline));
			av.properties['multiline'].enumerable = false;
			return av;
		}
	}]);
	return RegExpValue;
}(ObjectValue);

RegExpValue.prototype.clazz = 'RegExp';

module.exports = RegExpValue;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(47);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakSet = __webpack_require__(149);

var _weakSet2 = _interopRequireDefault(_weakSet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var LinkValue = __webpack_require__(91);
var CompletionRecord = __webpack_require__(7);
var ArrayValue = __webpack_require__(14);
var EvaluatorInstruction = __webpack_require__(27);
/**
 * Represents a value that maps directly to an untrusted local value.
 */

var privilegedThreads = new _weakSet2.default();

var SmartLinkValue = function (_LinkValue) {
	(0, _inherits3.default)(SmartLinkValue, _LinkValue);

	function SmartLinkValue(value, realm) {
		(0, _classCallCheck3.default)(this, SmartLinkValue);
		return (0, _possibleConstructorReturn3.default)(this, (SmartLinkValue.__proto__ || (0, _getPrototypeOf2.default)(SmartLinkValue)).call(this, value, realm));
	}

	(0, _createClass3.default)(SmartLinkValue, [{
		key: 'allowRead',
		value: function allowRead(name, e) {
			if (e && privilegedThreads.has(e)) return true;
			//if ( name === 'call' ) return true;
			//return true;
			if (name.indexOf('esper_') === 0) return true;
			if (name === 'hasOwnProperty') return true;
			var props = this.apiProperties;
			if (props === null) return true;
			return props.indexOf(name) !== -1;
		}
	}, {
		key: 'allowWrite',
		value: function allowWrite(name, e) {
			if (e && privilegedThreads.has(e)) return true;
			if (name.indexOf('esper_') === 0) name = name.substr(6);
			var allowed = [];
			var native = this.native;
			if (native.apiUserProperties) {
				Array.prototype.push.apply(allowed, native.apiUserProperties);
			}

			return allowed.indexOf(name) != -1;
		}
	}, {
		key: 'getPropertyValueMap',
		value: function getPropertyValueMap() {
			var list = {};
			for (var p in this.native) {
				var v = this.native[p];
				if (this.allowRead(p)) {
					list[p] = this.makeLink(v);
				}
			}
			return list;
		}
	}, {
		key: 'makeLink',
		value: function makeLink(value) {
			return this.realm.import(value, 'smart');
		}
	}, {
		key: 'ref',
		value: function ref(name, realm) {
			var native = this.native;
			var owner = this;
			if ('esper_' + name in native) name = 'esper_' + name;

			return (0, _get3.default)(SmartLinkValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(SmartLinkValue.prototype), 'ref', this).call(this, name, realm);
		}
	}, {
		key: 'set',
		value: _regenerator2.default.mark(function set(name, value, s) {
			var evaluator, native;
			return _regenerator2.default.wrap(function set$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							_context.next = 2;
							return EvaluatorInstruction.getEvaluator();

						case 2:
							evaluator = _context.sent;
							native = this.native;

							if (!(name in this.native)) {
								_context.next = 11;
								break;
							}

							if (this.allowWrite(name, evaluator)) {
								_context.next = 9;
								break;
							}

							_context.next = 8;
							return CompletionRecord.makeTypeError(s.realm, "Can't write to protected property: " + name);

						case 8:
							return _context.abrupt('return', _context.sent);

						case 9:
							_context.next = 13;
							break;

						case 11:
							if (!native.apiUserProperties) native.apiUserProperties = [];

							if (native.apiUserProperties.indexOf(name) == -1) {
								native.apiUserProperties.push(name);
							}

						case 13:
							return _context.delegateYield((0, _get3.default)(SmartLinkValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(SmartLinkValue.prototype), 'set', this).call(this, name, value, s), 't0', 14);

						case 14:
							return _context.abrupt('return', _context.t0);

						case 15:
						case 'end':
							return _context.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'get',
		value: _regenerator2.default.mark(function get(name, realm) {
			var evaluator, native;
			return _regenerator2.default.wrap(function get$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							_context2.next = 2;
							return EvaluatorInstruction.getEvaluator();

						case 2:
							evaluator = _context2.sent;
							native = this.native;

							if ('esper_' + name in this.native) name = 'esper_' + name;

							if (name in native) {
								_context2.next = 7;
								break;
							}

							return _context2.abrupt('return', Value.undef);

						case 7:
							if (this.allowRead(name, evaluator)) {
								_context2.next = 11;
								break;
							}

							_context2.next = 10;
							return CompletionRecord.makeTypeError(realm, "Can't read protected property: " + name);

						case 10:
							return _context2.abrupt('return', _context2.sent);

						case 11:
							return _context2.delegateYield((0, _get3.default)(SmartLinkValue.prototype.__proto__ || (0, _getPrototypeOf2.default)(SmartLinkValue.prototype), 'get', this).call(this, name, realm), 't0', 12);

						case 12:
							return _context2.abrupt('return', _context2.t0);

						case 13:
						case 'end':
							return _context2.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'apiProperties',
		get: function get() {
			var allowed = [];
			var native = this.native;

			if (native.apiProperties === undefined && native.apiMethods === undefined) return null;

			if (native.apiProperties) {
				Array.prototype.push.apply(allowed, native.apiProperties);
			}

			if (native.apiUserProperties) {
				Array.prototype.push.apply(allowed, native.apiUserProperties);
			}

			if (native.apiMethods) {
				Array.prototype.push.apply(allowed, native.apiMethods);
			}

			if (native.apiOwnMethods) {
				Array.prototype.push.apply(allowed, native.apiOwnMethods);
			}

			if (native.programmableProperties) {
				Array.prototype.push.apply(allowed, native.programmableProperties);
			}

			return allowed;
		}
	}, {
		key: 'debugString',
		get: function get() {
			var props = this.apiProperties;
			return '[SmartLink: ' + this.native + ', props: ' + (props ? props.join(',') : '[none]') + ']';
		}
	}], [{
		key: 'make',
		value: function make(native, realm) {
			var wellKnown = realm.lookupWellKnown(native);
			if (wellKnown) return wellKnown;

			if (Array.isArray(native)) {
				var ia = new Array(native.length);
				for (var i = 0; i < native.length; ++i) {
					ia[i] = realm.import(native[i], 'smart');
				}
				return ArrayValue.make(ia, realm);
			}

			return new SmartLinkValue(native, realm);
		}
	}]);
	return SmartLinkValue;
}(LinkValue);

SmartLinkValue.makeThreadPrivileged = function (e) {
	privilegedThreads.add(e);
};

SmartLinkValue.isThreadPrivileged = function (e) {
	return privilegedThreads.has(e);
};

SmartLinkValue.makeThreadPrivlaged = SmartLinkValue.makeThreadPrivileged;

module.exports = SmartLinkValue;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(163), __esModule: true };

/***/ }),
/* 65 */
/***/ (function(module, exports) {

module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),
/* 66 */
/***/ (function(module, exports) {

module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = __webpack_require__(30)
  , IObject  = __webpack_require__(72)
  , toObject = __webpack_require__(41)
  , toLength = __webpack_require__(81)
  , asc      = __webpack_require__(168);
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),
/* 68 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(19)
  , document = __webpack_require__(13).document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};

/***/ }),
/* 70 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var ctx         = __webpack_require__(30)
  , call        = __webpack_require__(172)
  , isArrayIter = __webpack_require__(171)
  , anObject    = __webpack_require__(17)
  , toLength    = __webpack_require__(81)
  , getIterFn   = __webpack_require__(110)
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(38);
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = __webpack_require__(17)
  , dPs         = __webpack_require__(104)
  , enumBugKeys = __webpack_require__(70)
  , IE_PROTO    = __webpack_require__(78)('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(69)('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(100).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var pIE            = __webpack_require__(50)
  , createDesc     = __webpack_require__(52)
  , toIObject      = __webpack_require__(24)
  , toPrimitive    = __webpack_require__(82)
  , has            = __webpack_require__(22)
  , IE8_DOM_DEFINE = __webpack_require__(101)
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(18) ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),
/* 75 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(23);
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(23);

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(79)('keys')
  , uid    = __webpack_require__(53);
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(13)
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};

/***/ }),
/* 80 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(80)
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(19);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var global         = __webpack_require__(13)
  , core           = __webpack_require__(10)
  , LIBRARY        = __webpack_require__(48)
  , wksExt         = __webpack_require__(84)
  , defineProperty = __webpack_require__(21).f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(11);

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at  = __webpack_require__(182)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(103)(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});

/***/ }),
/* 86 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(37);

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);
var ClosureValue = __webpack_require__(34);
var ObjectValue = __webpack_require__(9);
var FutureValue = __webpack_require__(44);
var RegExpValue = __webpack_require__(62);
var PropertyDescriptor = __webpack_require__(15);
var ErrorValue = __webpack_require__(59);
var ArrayValue = __webpack_require__(14);
var EvaluatorInstruction = __webpack_require__(27);

var Frame = function Frame(type, o) {
	(0, _classCallCheck3.default)(this, Frame);

	this.type = type;
	for (var k in o) {
		this[k] = o[k];
	}
};

var Evaluator = function () {
	function Evaluator(realm, n, s) {
		(0, _classCallCheck3.default)(this, Evaluator);

		this.realm = realm;
		var that = this;
		this.lastValue = null;
		this.ast = n;
		this.defaultYieldPower = 5;
		this.yieldPower = this.defaultYieldPower;
		this.debug = false;
		this.profile = false;
		this.lastASTNodeProcessed = null;
		/**
   * @type {Object[]}
   * @property {Generator} generator
   * @property {string} type
   * @property {ast} ast
   */
		this.frames = [];
		if (n) this.pushAST(n, s);
	}

	(0, _createClass3.default)(Evaluator, [{
		key: 'pushAST',
		value: function pushAST(n, s) {
			var that = this;
			var gen = n ? this.branch(n, s) : _regenerator2.default.mark(function _callee() {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								_context.next = 2;
								return EvaluatorInstruction.stepMinor;

							case 2:
								return _context.abrupt('return', _context.sent);

							case 3:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			})();
			this.pushFrame({ generator: gen, type: 'program', scope: s, ast: n });
		}
	}, {
		key: 'processLostFrames',
		value: function processLostFrames(frames) {
			for (var _iterator = frames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var f = _ref;

				if (f.profileName) {
					this.incrCtr('fxTime', f.profileName, Date.now() - f.entered);
				}
			}
		}
	}, {
		key: 'unwindStack',
		value: function unwindStack(target, canCrossFxBounds, label) {
			var finallyFrames = [];
			for (var i = 0; i < this.frames.length; ++i) {
				var t = this.frames[i].type;
				var match = t == target || target == 'return' && t == 'function';
				if (match && label) {
					match = label == this.frames[i].label;
				}

				if (match) {
					var j = i + 1;
					for (; j < this.frames.length; ++j) {
						if (this.frames[j].type != 'finally') break;
					}var fr = this.frames[j];
					this.processLostFrames(this.frames.splice(0, i + 1));
					this.saveFrameShortcuts();
					Array.prototype.unshift.apply(this.frames, finallyFrames);
					return fr;
				} else if (target == 'return' && this.frames[i].retValue) {
					var _fr = this.frames[i];
					this.processLostFrames(this.frames.splice(0, i));
					this.saveFrameShortcuts();
					Array.prototype.unshift.apply(this.frames, finallyFrames);
					return _fr;
				} else if (!canCrossFxBounds && this.frames[i].type == 'function') {
					break;
				} else if (t == 'finally') {
					finallyFrames.push(this.frames[i]);
				}
			}
			return false;
		}
	}, {
		key: 'next',
		value: function next(lastValueOveride) {
			var frames = this.frames;

			//Implement proper tailcalls by hand.
			do {
				var top = frames[0];
				var result = void 0;
				//console.log(top.type, top.ast && top.ast.type);

				if (top.exception) {
					this.lastValue = top.exception;
					delete top.exception;
				} else if (top.retValue) {
					this.lastValue = top.retValue;
					delete top.retValue;
				}

				result = top.generator.next(lastValueOveride || this.lastValue);
				lastValueOveride = undefined;
				var val = result.value;

				if (val instanceof EvaluatorInstruction) {
					switch (val.type) {
						case 'branch':
							this.branchFrame(val.kind, val.ast, val.scope, val.extra);
							continue;
						case 'getEvaluator':
							//lastValueOveride = this;
							//continue;
							return this.next(this);
						case 'waitForFramePop':
							continue;
						case 'framePushed':
							continue;
						case 'event':
						case 'step':
							if (this.instrument) this.instrument(this, val);
							return { done: false, value: val };
					}
				}

				if (val instanceof CompletionRecord) {
					this.processCompletionValueMeaning(val);
					this.lastValue = val.value;
					continue;
				}
				//if ( !val ) console.log("Bad val somewhere around", this.topFrame.type);
				if (this.instrument) this.instrument(this, val);

				if (val && val.then) {
					if (top && top.type !== 'await') {
						this.pushFrame({ generator: _regenerator2.default.mark(function _callee2(f) {
								return _regenerator2.default.wrap(function _callee2$(_context2) {
									while (1) {
										switch (_context2.prev = _context2.next) {
											case 0:
												if (f.resolved) {
													_context2.next = 5;
													break;
												}

												_context2.next = 3;
												return f;

											case 3:
												_context2.next = 0;
												break;

											case 5:
												if (!f.successful) {
													_context2.next = 9;
													break;
												}

												return _context2.abrupt('return', f.value);

											case 9:
												return _context2.abrupt('return', new CompletionRecord(CompletionRecord.THROW, f.value));

											case 10:
											case 'end':
												return _context2.stop();
										}
									}
								}, _callee2, this);
							})(val), type: 'await' });
					}
					return { done: false, value: val };
				}

				this.lastValue = val;
				if (result.done) {
					var lastFrame = this.popFrame();

					if (lastFrame.profileName) {
						this.processLostFrames([lastFrame]);
					}

					// Latient values can't cross function calls.
					// Dont do this, and you get coffeescript mode.
					if (lastFrame.type === 'function' && !lastFrame.returnLastValue) {
						this.lastValue = Value.undef;
					}

					if (frames.length === 0) {
						if (this.debug) {
							this.dumpProfilingInformation();
						}
						return { done: true, value: result.value };
					} else continue;
				}
			} while (false);

			return { done: false, value: this.lastValue };
		}
	}, {
		key: 'processCompletionValueMeaning',
		value: function processCompletionValueMeaning(val) {
			if (!(val.value instanceof Value)) {
				if (val.value instanceof Error) {
					throw new Error('Value was an error: ' + val.value.stack);
				}
				throw new Error('Value isnt of type Value, its' + val.value.toString());
			}

			switch (val.type) {
				case CompletionRecord.CONTINUE:
					if (this.unwindStack('continue', false, val.target)) return true;
					throw new Error('Cant find matching loop frame for continue');
				case CompletionRecord.BREAK:
					if (this.unwindStack('loop', false, val.target)) return true;
					throw new Error('Cant find matching loop frame for break');
				case CompletionRecord.RETURN:
					var rfr = this.unwindStack('return', false);
					if (!rfr) throw new Error('Cant find function bounds.');
					rfr.retValue = val.value;
					return true;
				case CompletionRecord.THROW:
					//TODO: Fix this nonsense:
					var e = val.value.toNative();
					//val.value.native = e;

					var smallStack = void 0;
					if (e && e.stack) smallStack = e.stack.split(/\n/).slice(0, 4).join('\n');
					var stk = this.buildStacktrace(e).join('\n    ');
					var bestFrame = void 0;
					for (var i = 0; i < this.frames.length; ++i) {
						if (this.frames[i].ast) {
							bestFrame = this.frames[i];
							break;
						}
					}

					if (val.value instanceof ErrorValue) {
						if (this.realm.options.addExtraErrorInfoToStacks && val.value.extra) {
							stk += '\n-------------';
							for (var key in val.value.extra) {
								var vv = val.value.extra[key];
								if (vv instanceof Value) stk += '\n' + key + ' => ' + vv.debugString;else stk += '\n' + key + ' => ' + vv;
							}
						}
					}

					if (e instanceof Error) {
						e.stack = stk;
						if (smallStack && this.realm.options.addInternalStack) e.stack += '\n-------------\n' + smallStack;
						if (bestFrame) {
							e.range = bestFrame.ast.range;
							e.loc = bestFrame.ast.loc;
						}
					}

					if (val.value instanceof ErrorValue) {
						if (!val.value.has('stack')) {
							val.value.setImmediate('stack', Value.fromNative(stk));
							val.value.properties['stack'].enumerable = false;
						}
					}

					var tfr = this.unwindStack('catch', true);
					if (tfr) {
						tfr.exception = val;
						this.lastValue = val;
						return true;
					}
					var line = -1;
					if (this.topFrame.ast && this.topFrame.ast.attr) {
						line = this.topFrame.ast.attr.pos.start_line;
					}
					//console.log(this.buildStacktrace(val.value.toNative()));
					throw val.value.toNative();
				case CompletionRecord.NORMAL:
					return false;
			}
		}
	}, {
		key: 'buildStacktrace',
		value: function buildStacktrace(e) {
			var lines = e ? [e.toString()] : [];
			for (var _iterator2 = this.frames, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
				var _ref2;

				if (_isArray2) {
					if (_i2 >= _iterator2.length) break;
					_ref2 = _iterator2[_i2++];
				} else {
					_i2 = _iterator2.next();
					if (_i2.done) break;
					_ref2 = _i2.value;
				}

				var f = _ref2;

				//if ( f.type !== 'function' ) continue;
				if (f.ast) {
					var line = 'at ' + (f.ast.srcName || f.ast.type) + ' ';
					if (f.ast.loc) line += '(<src>:' + f.ast.loc.start.line + ':' + f.ast.loc.start.column + ')';
					lines.push(line);
				}
			}
			return lines;
		}
	}, {
		key: 'pushFrame',
		value: function pushFrame(frame) {
			frame.srcAst = frame.ast;
			if (frame.yieldPower === undefined) frame.yieldPower = this.defaultYieldPower;
			this.frames.unshift(new Frame(frame.type, frame));
			this.saveFrameShortcuts();
		}
	}, {
		key: 'popFrame',
		value: function popFrame() {
			var frame = this.frames.shift();
			this.saveFrameShortcuts();
			return frame;
		}
	}, {
		key: 'saveFrameShortcuts',
		value: function saveFrameShortcuts() {
			var prev = this.yieldPower;
			if (this.frames.length == 0) {
				this.topFrame = undefined;
				this.yieldPower = this.defaultYieldPower;
			} else {
				this.topFrame = this.frames[0];
				this.yieldPower = this.topFrame.yieldPower;
			}
		}
	}, {
		key: 'fromNative',
		value: function fromNative(native) {
			return this.realm.valueFromNative(native);
		}
	}, {
		key: 'generator',
		value: function generator() {
			return { next: this.next.bind(this), throw: function _throw(e) {
					throw e;
				} };
		}
	}, {
		key: 'breakFrames',
		value: function breakFrames() {}
	}, {
		key: 'resolveRef',
		value: _regenerator2.default.mark(function resolveRef(n, s, create) {
			var oldAST, iref, idx, ref;
			return _regenerator2.default.wrap(function resolveRef$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							oldAST = this.topFrame.ast;

							this.topFrame.ast = n;
							_context6.t0 = n.type;
							_context6.next = _context6.t0 === 'Identifier' ? 5 : _context6.t0 === 'MemberExpression' ? 9 : 28;
							break;

						case 5:
							iref = s.ref(n.name, s.realm);

							if (!iref) {
								iref = {
									getValue: _regenerator2.default.mark(function getValue() {
										var err;
										return _regenerator2.default.wrap(function getValue$(_context3) {
											while (1) {
												switch (_context3.prev = _context3.next) {
													case 0:
														err = CompletionRecord.makeReferenceError(s.realm, n.name + ' is not defined');
														return _context3.delegateYield(err.addExtra({ code: 'UndefinedVariable', when: 'read', ident: n.name, strict: s.strict }), 't0', 2);

													case 2:
														_context3.next = 4;
														return err;

													case 4:
														return _context3.abrupt('return', _context3.sent);

													case 5:
													case 'end':
														return _context3.stop();
												}
											}
										}, getValue, this);
									}),
									del: function del() {
										return true;
									}
								};
								if (!create || s.strict) {
									iref.setValue = _regenerator2.default.mark(function _callee3() {
										var err;
										return _regenerator2.default.wrap(function _callee3$(_context4) {
											while (1) {
												switch (_context4.prev = _context4.next) {
													case 0:
														err = CompletionRecord.makeReferenceError(s.realm, n.name + ' is not defined');
														return _context4.delegateYield(err.addExtra({ code: 'UndefinedVariable', when: 'write', ident: n.name, strict: s.strict }), 't0', 2);

													case 2:
														_context4.next = 4;
														return err;

													case 4:
														return _context4.abrupt('return', _context4.sent);

													case 5:
													case 'end':
														return _context4.stop();
												}
											}
										}, _callee3, this);
									});
								} else {
									iref.setValue = _regenerator2.default.mark(function _callee4(value) {
										var aref;
										return _regenerator2.default.wrap(function _callee4$(_context5) {
											while (1) {
												switch (_context5.prev = _context5.next) {
													case 0:
														s.global.set(n.name, value, s);
														aref = s.global.ref(n.name, s.realm);

														this.setValue = aref.setValue;
														this.getValue = aref.getValue;
														this.del = aref.delete;

													case 5:
													case 'end':
														return _context5.stop();
												}
											}
										}, _callee4, this);
									});
								}
							}
							this.topFrame.ast = oldAST;
							return _context6.abrupt('return', iref);

						case 9:
							idx = void 0;
							return _context6.delegateYield(this.branch(n.object, s), 't1', 11);

						case 11:
							ref = _context6.t1;

							if (!n.computed) {
								_context6.next = 17;
								break;
							}

							return _context6.delegateYield(this.branch(n.property, s), 't2', 14);

						case 14:
							idx = _context6.t2.toNative();
							_context6.next = 18;
							break;

						case 17:
							idx = n.property.name;

						case 18:
							if (ref) {
								_context6.next = 22;
								break;
							}

							_context6.next = 21;
							return CompletionRecord.makeTypeError(s.realm, 'Can\'t write property of undefined: ' + idx);

						case 21:
							return _context6.abrupt('return', _context6.sent);

						case 22:
							if (ref.ref) {
								_context6.next = 26;
								break;
							}

							_context6.next = 25;
							return CompletionRecord.makeTypeError(s.realm, 'Can\'t write property of non-object type: ' + idx);

						case 25:
							return _context6.abrupt('return', _context6.sent);

						case 26:

							this.topFrame.ast = oldAST;
							return _context6.abrupt('return', ref.ref(idx, s.realm));

						case 28:
							_context6.next = 30;
							return CompletionRecord.makeTypeError(s.realm, 'Couldnt resolve ref component: ' + n.type);

						case 30:
							return _context6.abrupt('return', _context6.sent);

						case 31:
						case 'end':
							return _context6.stop();
					}
				}
			}, resolveRef, this);
		})
	}, {
		key: 'partialMemberExpression',
		value: _regenerator2.default.mark(function partialMemberExpression(left, n, s) {
			var right;
			return _regenerator2.default.wrap(function partialMemberExpression$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							if (!n.computed) {
								_context7.next = 7;
								break;
							}

							return _context7.delegateYield(this.branch(n.property, s), 't0', 2);

						case 2:
							right = _context7.t0;
							return _context7.delegateYield(left.get(right.toNative(), s.realm), 't1', 4);

						case 4:
							return _context7.abrupt('return', _context7.t1);

						case 7:
							if (!(n.property.type == 'Identifier')) {
								_context7.next = 14;
								break;
							}

							if (left) {
								_context7.next = 10;
								break;
							}

							throw 'Cant index ' + n.property.name + ' of undefined';

						case 10:
							return _context7.delegateYield(left.get(n.property.name, s.realm), 't2', 11);

						case 11:
							return _context7.abrupt('return', _context7.t2);

						case 14:
							if (left) {
								_context7.next = 16;
								break;
							}

							throw 'Cant index ' + n.property.value.toString() + ' of undefined';

						case 16:
							return _context7.delegateYield(left.get(n.property.value.toString(), s.realm), 't3', 17);

						case 17:
							return _context7.abrupt('return', _context7.t3);

						case 18:
						case 'end':
							return _context7.stop();
					}
				}
			}, partialMemberExpression, this);
		})

		//NOTE: Returns generator, fast return yield *;

	}, {
		key: 'doBinaryEvaluation',
		value: function doBinaryEvaluation(operator, left, right, realm) {
			switch (operator) {
				case '==':
					return left.doubleEquals(right, realm);
				case '!=':
					return left.notEquals(right, realm);
				case '===':
					return left.tripleEquals(right, realm);
				case '!==':
					return left.doubleNotEquals(right, realm);
				case '+':
					return left.add(right, realm);
				case '-':
					return left.subtract(right, realm);
				case '*':
					return left.multiply(right, realm);
				case '/':
					return left.divide(right, realm);
				case '%':
					return left.mod(right, realm);
				case '|':
					return left.bitOr(right, realm);
				case '^':
					return left.bitXor(right, realm);
				case '&':
					return left.bitAnd(right, realm);
				case 'in':
					return right.inOperator(left, realm);
				case 'instanceof':
					return left.instanceOf(right, realm);
				case '>':
					return left.gt(right, realm);
				case '<':
					return left.lt(right, realm);
				case '>=':
					return left.gte(right, realm);
				case '<=':
					return left.lte(right, realm);
				case '<<':
					return left.shiftLeft(right, realm);
				case '>>':
					return left.shiftRight(right, realm);
				case '>>>':
					return left.shiftRightZF(right, realm);
				default:
					throw new Error('Unknown binary operator: ' + operator);
			}
		}
	}, {
		key: 'branchFrame',
		value: function branchFrame(type, n, s, extra) {
			var frame = { generator: this.branch(n, s), type: type, scope: s, ast: n };

			if (extra) {
				for (var k in extra) {
					frame[k] = extra[k];
				}
				if (extra.profileName) {
					frame.entered = Date.now();
				}
			}
			this.pushFrame(frame);
			return EvaluatorInstruction.framePushed;
		}
	}, {
		key: 'beforeNode',
		value: function beforeNode(n) {
			var tf = this.topFrame;
			var state = { top: tf, ast: tf.ast, node: n };
			this.lastASTNodeProcessed = n;
			if (this.debug) this.incrCtr('astInvocationCount', n.type);
			tf.ast = n;
			return state;
		}
	}, {
		key: 'afterNode',
		value: function afterNode(state, r) {
			var tf = this.topFrame;
			tf.value = r;
			tf.ast = state.ast;
		}

		/**
   * @private
   * @param {object} n - AST Node to dispatch
   * @param {Scope} s - Current evaluation scope
   */

	}, {
		key: 'branch',
		value: function branch(n, s) {
			if (!n.dispatch) {
				var nextStep = this.findNextStep(n.type);

				n.dispatch = _regenerator2.default.mark(function _callee5(that, n, s) {
					var state, result;
					return _regenerator2.default.wrap(function _callee5$(_context8) {
						while (1) {
							switch (_context8.prev = _context8.next) {
								case 0:
									state = that.beforeNode(n);
									return _context8.delegateYield(nextStep(that, n, s), 't0', 2);

								case 2:
									result = _context8.t0;

									if (!(result instanceof CompletionRecord)) {
										_context8.next = 7;
										break;
									}

									_context8.next = 6;
									return result;

								case 6:
									result = _context8.sent;

								case 7:
									if (!(result && result.then)) {
										_context8.next = 11;
										break;
									}

									_context8.next = 10;
									return result;

								case 10:
									result = _context8.sent;

								case 11:

									that.afterNode(state, result);

									return _context8.abrupt('return', result);

								case 13:
								case 'end':
									return _context8.stop();
							}
						}
					}, _callee5, this);
				});
			}
			return n.dispatch(this, n, s);
		}
	}, {
		key: 'incrCtr',
		value: function incrCtr(n, c, v) {
			if (v === undefined) v = 1;
			if (!this.profile) this.profile = {};
			var o = this.profile[n];
			if (!o) {
				o = {};
				this.profile[n] = o;
			}
			c = c || '???';
			if (c in o) o[c] += v;else o[c] = v;
		}
	}, {
		key: 'dumpProfilingInformation',
		value: function dumpProfilingInformation() {
			var _this = this;

			function lpad(s, l) {
				return s + new Array(Math.max(l - s.length, 1)).join(' ');
			}

			if (!this.profile) {
				console.log("===== Profile: None collected =====");
				return;
			}

			console.log('===== Profile =====');

			var _loop = function _loop(sec) {
				console.log(sec + ' Stats:');
				var o = _this.profile[sec];
				var okeys = (0, _keys2.default)(o).sort(function (a, b) {
					return o[b] - o[a];
				});
				for (var _iterator3 = okeys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
					var _ref3;

					if (_isArray3) {
						if (_i3 >= _iterator3.length) break;
						_ref3 = _iterator3[_i3++];
					} else {
						_i3 = _iterator3.next();
						if (_i3.done) break;
						_ref3 = _i3.value;
					}

					var name = _ref3;

					console.log('  ' + lpad(name, 20) + ': ' + o[name]);
				}
			};

			for (var sec in this.profile) {
				_loop(sec);
			}
			console.log('=================');
		}
	}, {
		key: 'insterment',
		get: function get() {
			return this.instrument;
		},
		set: function set(v) {
			this.instrument = v;
		}
	}]);
	return Evaluator;
}();

Evaluator.prototype.findNextStep = __webpack_require__(123).findNextStep;

module.exports = Evaluator;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _weakMap = __webpack_require__(64);

var _weakMap2 = _interopRequireDefault(_weakMap);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Scope = __webpack_require__(90);
var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);
var ObjectValue = __webpack_require__(9);
var PrimitiveValue = __webpack_require__(12);
var StringValue = __webpack_require__(45);
var LinkValue = __webpack_require__(91);
var SmartLinkValue = __webpack_require__(63);
var BridgeValue = __webpack_require__(58);
var ASTPreprocessor = __webpack_require__(43);
var EasyNativeFunction = __webpack_require__(35);
var PropertyDescriptor = __webpack_require__(15);
var EvaluatorInstruction = __webpack_require__(27);

var ObjectPrototype = __webpack_require__(141);
var FunctionPrototype = __webpack_require__(135);
var ObjectClass = __webpack_require__(140);
var FunctionClass = __webpack_require__(134);
var NumberPrototype = __webpack_require__(139);

var StringPrototype = __webpack_require__(145);

var ArrayPrototype = __webpack_require__(126);
var ArrayClass = __webpack_require__(125);
var StringClass = __webpack_require__(144);
var NumberClass = __webpack_require__(138);

var BooleanPrototype = __webpack_require__(129);
var BooleanClass = __webpack_require__(128);
var RegExpPrototype = __webpack_require__(143);
var RegExpClass = __webpack_require__(142);
var EsperClass = __webpack_require__(133);
var ErrorPrototype = __webpack_require__(132);
var ErrorClass = __webpack_require__(131);

var AssertClass = __webpack_require__(127);
var MathClass = __webpack_require__(137);
var ConsoleClass = __webpack_require__(130);
var JSONClass = __webpack_require__(136);
var esper = __webpack_require__(32);

var EvalFunction = function (_ObjectValue) {
	(0, _inherits3.default)(EvalFunction, _ObjectValue);

	function EvalFunction(realm) {
		(0, _classCallCheck3.default)(this, EvalFunction);

		var _this = (0, _possibleConstructorReturn3.default)(this, (EvalFunction.__proto__ || (0, _getPrototypeOf2.default)(EvalFunction)).call(this, realm));

		_this.setPrototype(realm.FunctionPrototype);
		return _this;
	}

	(0, _createClass3.default)(EvalFunction, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, scope) {
			var cv, code, ast, oast, eo, bak;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							cv = Value.undef;

							if (args.length > 0) cv = args[0];

							if (cv instanceof StringValue) {
								_context.next = 4;
								break;
							}

							return _context.abrupt('return', cv);

						case 4:
							return _context.delegateYield(cv.toStringNative(), 't0', 5);

						case 5:
							code = _context.t0;
							ast = void 0;
							_context.prev = 7;
							oast = scope.realm.parser(code, { loc: true });

							ast = ASTPreprocessor.process(oast);
							_context.next = 17;
							break;

						case 12:
							_context.prev = 12;
							_context.t1 = _context['catch'](7);


							if (_context.t1.description == 'Invalid left-hand side in assignment') eo = new ReferenceError(_context.t1.description, _context.t1.fileName, _context.t1.lineNumber);else eo = new SyntaxError(_context.t1.description, _context.t1.fileName, _context.t1.lineNumber);

							if (_context.t1.stack) eo.stack = _context.t1.stack;
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, Value.fromNative(eo, scope.realm)));

						case 17:
							_context.next = 19;
							return EvaluatorInstruction.branch('eval', ast, scope.parent ? scope.parent : scope);

						case 19:
							bak = _context.sent;
							return _context.abrupt('return', bak);

						case 21:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this, [[7, 12]]);
		})
	}]);
	return EvalFunction;
}(ObjectValue);

/**
 * Represents a javascript execution environment including
 * it's scopes and standard libraries.
 */


var Realm = function () {
	(0, _createClass3.default)(Realm, [{
		key: 'print',
		value: function print() {
			console.log.apply(console, arguments);
		}
	}, {
		key: 'parser',
		value: function parser(code, options) {
			if (!esper.languages[this.language]) {
				throw new Error('Unknown language ' + this.language + '. Load the lang-' + this.language + ' plugin?');
			}
			return esper.languages[this.language].parser(code, options);
		}
	}]);

	function Realm(options) {
		(0, _classCallCheck3.default)(this, Realm);

		this.options = options || {};
		this.language = options.language || 'javascript';
		/** @type {Value} */
		this.ObjectPrototype = new ObjectPrototype(this);
		this.FunctionPrototype = new FunctionPrototype(this);
		this.Object = new ObjectClass(this);
		this.ObjectPrototype._init(this);
		this.FunctionPrototype._init(this);
		this.Object.setPrototype(this.ObjectPrototype);
		this.FunctionPrototype.setPrototype(this.ObjectPrototype);

		//TODO: Do this when we can make the property non enumerable.
		this.ObjectPrototype.rawSetProperty('constructor', new PropertyDescriptor(this.Object, false));

		this.Function = new FunctionClass(this);

		/** @type {Math} */
		this.Math = new MathClass(this);

		/** @type {NumberPrototype} */
		this.NumberPrototype = new NumberPrototype(this);

		/** @type {StringPrototype} */
		this.StringPrototype = new StringPrototype(this);

		this.ArrayPrototype = new ArrayPrototype(this);
		this.Array = new ArrayClass(this);
		this.String = new StringClass(this);
		this.Number = new NumberClass(this);

		this.BooleanPrototype = new BooleanPrototype(this);
		this.Boolean = new BooleanClass(this);

		this.RegExpPrototype = new RegExpPrototype(this);
		this.RegExp = new RegExpClass(this);

		this.Esper = new EsperClass(this);
		this.ErrorPrototype = new ErrorPrototype(this);
		this.Error = new ErrorClass(this);
		this.ErrorPrototype.rawSetProperty('constructor', new PropertyDescriptor(this.Error, false));

		/** @type {Value} */
		this.console = new ConsoleClass(this);

		var scope = new Scope(this);
		scope.object.clazz = 'global';
		scope.strict = options.strict || false;
		var that = this;
		var printer = EasyNativeFunction.makeForNative(this, function () {
			that.print.apply(that, arguments);
		});
		scope.set('print', printer);
		scope.set('log', printer);

		scope.addConst('NaN', this.fromNative(NaN));
		scope.addConst('Infinity', this.fromNative(Infinity));

		scope.set('console', this.console);
		scope.set('JSON', new JSONClass(this));

		if (options.exposeEsperGlobal) {
			scope.set('Esper', this.Esper);
		}

		scope.set('Math', this.Math);

		scope.set('Number', this.Number);
		scope.set('Boolean', this.Boolean);
		scope.set('Object', this.Object);
		scope.set('Function', this.Function);
		scope.set('Array', this.Array);
		scope.set('String', this.String);
		scope.set('RegExp', this.RegExp);

		scope.set('Error', this.Error);
		scope.set('TypeError', this.TypeError = this.Error.makeErrorType(TypeError));
		scope.set('SyntaxError', this.SyntaxError = this.Error.makeErrorType(SyntaxError));
		scope.set('ReferenceError', this.ReferenceError = this.Error.makeErrorType(ReferenceError));
		scope.set('RangeError', this.RangeError = this.Error.makeErrorType(RangeError));
		scope.set('EvalError', this.EvalError = this.Error.makeErrorType(EvalError));
		scope.set('URIError', this.URIError = this.Error.makeErrorType(URIError));

		scope.set('parseInt', EasyNativeFunction.makeForNative(this, parseInt));
		scope.set('parseFloat', EasyNativeFunction.makeForNative(this, parseFloat));
		scope.set('isNaN', EasyNativeFunction.makeForNative(this, isNaN));
		scope.set('isFinite', EasyNativeFunction.makeForNative(this, isFinite));

		//scope.set('Date', this.fromNative(Date));
		scope.set('eval', new EvalFunction(this));
		scope.set('assert', new AssertClass(this));

		scope.thiz = scope.object;
		this.importCache = new _weakMap2.default();
		/** @type {Scope} */
		this.globalScope = scope;
	}

	(0, _createClass3.default)(Realm, [{
		key: 'lookupWellKnown',
		value: function lookupWellKnown(v) {
			if (v === Object) return this.Object;
			if (v === Object.prototype) return this.ObjectPrototype;
			if (v === Function) return this.Function;
			if (v === Function.prototype) return this.FunctionPrototype;
			if (v === Math) return this.Math;
			if (v === Number) return this.Number;
			if (v === Number.prototype) return this.NumberPrototype;
			if (v === String) return this.String;
			if (v === String.prototype) return this.StringPrototype;
			if (v === Array) return this.Array;
			if (v === Array.prototype) return this.ArrayPrototype;
			if (v === RegExp) return this.RegExp;
			if (v === RegExp.prototype) return this.RegExpPrototype;
			if (typeof console !== 'undefined' && v === console) return this.console;
		}
	}, {
		key: 'lookupWellKnownByName',
		value: function lookupWellKnownByName(v) {
			switch (v) {
				case '%Object%':
					return this.Object;
				case '%ObjectPrototype%':
					return this.ObjectPrototype;
				case '%Function%':
					return this.Function;
				case '%FunctionPrototype%':
					return this.FunctionPrototype;
				case '%Math%':
					return this.Math;
				case '%Number%':
					return this.Number;
				case '%NumberPrototype%':
					return this.NumberPrototype;
				case '%Array%':
					return this.Array;
				case '%ArrayPrototype%':
					return this.ArrayPrototype;
				case '%RegExp%':
					return this.RegExp;
				case '%RegExpPrototype%':
					return this.RegExpPrototype;
			}
		}
	}, {
		key: 'valueFromNative',
		value: function valueFromNative(native) {
			return Value.fromNative(native, this);
		}
	}, {
		key: 'fromNative',
		value: function fromNative(native) {
			return Value.fromNative(native, this);
		}
	}, {
		key: 'import',
		value: function _import(native, modeHint) {
			if (native instanceof Value) return native;
			if (native === undefined) return Value.undef;

			var prim = Value.fromPrimativeNative(native);
			if (prim) return prim;

			//if ( this.importCache.has(native) ) {
			//	return this.importCache.get(native);
			//}

			if (Value.hasBookmark(native)) {
				return Value.getBookmark(native);
			}

			var result = void 0;
			switch (modeHint || this.options.foreignObjectMode) {
				case 'bridge':
					result = BridgeValue.make(native, this);
					break;
				case 'smart':
					result = SmartLinkValue.make(native, this);
					break;
				case 'link':
				default:
					result = LinkValue.make(native, this);
					break;
			}

			//this.importCache.set(native, result);
			return result;
		}
	}]);
	return Realm;
}();

Realm.prototype.makeForForeignObject = Realm.prototype.import;

module.exports = Realm;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PropertyDescriptor = __webpack_require__(15);

var Value = __webpack_require__(3);
var ObjectValue = __webpack_require__(9);

var Scope = function () {
	function Scope(realm) {
		(0, _classCallCheck3.default)(this, Scope);

		this.parent = null;
		this.object = new ObjectValue(realm);
		this.strict = false;
		this.realm = realm;
		this.global = this;
		this.writeTo = this.object;
	}

	/**
  * @param {string} name - Identifier to retreive
  * @returns {Value}
  */


	(0, _createClass3.default)(Scope, [{
		key: 'get',
		value: function get(name) {
			//Fast property access in the common case.
			var prop = this.object.properties[name];
			if (!prop) return Value.undef;
			if (!prop.getter) return prop.value;
			return this.object.getImmediate(name);
		}
	}, {
		key: 'ref',
		value: function ref(name) {
			var vhar = this.object.properties[name];
			if (!vhar) return undefined;
			var that = this;
			var o = {
				setValue: vhar.setValue.bind(vhar, this),
				getValue: vhar.getValue.bind(vhar, this),
				isVariable: true
			};
			return o;
		}
	}, {
		key: 'add',
		value: function add(name, value) {
			this.writeTo.setImmediate(name, value);
		}
	}, {
		key: 'addConst',
		value: function addConst(name, value) {
			this.set(name, value);
			this.writeTo.properties[name].writable = false;
			this.writeTo.properties[name].configurable = false;
		}

		/**
   * Sets an identifier in the scope to some value.
   *
   * @param {string} name - Identifier to set
   * @param {Value} value - Value to set
   */

	}, {
		key: 'set',
		value: function set(name, value) {
			this.writeTo.setImmediate(name, value);
		}
	}, {
		key: 'has',
		value: function has(name) {
			return this.object.has(name);
		}

		/**
   * Set the identifier in its nearest scope, or create a global.
   * @param {string} name - Identifier to retreive
   * @param {Value} value - New vaalue of variable
   * @param {Scope} s - Code scope to run setter functions in
   */

	}, {
		key: 'put',
		value: function put(name, value, s) {
			var variable = this.object.properties[name];
			if (variable) {
				return variable.setValue(this.object, value, s);
			}
			var v = new PropertyDescriptor(value, this);
			this.writeTo.properties[name] = v;
			return Value.undef.fastGen();
		}
	}, {
		key: 'createChild',
		value: function createChild() {
			var child = new Scope(this.realm);
			child.object.eraseAndSetPrototype(this.object);
			child.parent = this;
			child.strict = this.strict;
			child.global = this.global;
			child.realm = this.realm;
			return child;
		}
	}, {
		key: 'fromNative',
		value: function fromNative(value) {
			return this.realm.fromNative(value);
		}
	}, {
		key: 'getVariableNames',
		value: function getVariableNames() {
			var list = [];
			for (var o in this.object.properties) {
				list.push(o);
			}return list;
		}
	}]);
	return Scope;
}();

module.exports = Scope;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* @flow */

var _typeof2 = __webpack_require__(25);

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _create = __webpack_require__(29);

var _create2 = _interopRequireDefault(_create);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);
var ArrayValue = __webpack_require__(14);

function invoke(target, thiz, args) {
	return Function.prototype.apply.call(target, thiz, args);
}

/**
 * Represents a value that maps directly to an untrusted local value.
 */

var LinkValue = function (_Value) {
	(0, _inherits3.default)(LinkValue, _Value);

	function LinkValue(value, realm) {
		(0, _classCallCheck3.default)(this, LinkValue);

		var _this = (0, _possibleConstructorReturn3.default)(this, (LinkValue.__proto__ || (0, _getPrototypeOf2.default)(LinkValue)).call(this));

		_this.native = value;
		_this.realm = realm;
		return _this;
	}

	(0, _createClass3.default)(LinkValue, [{
		key: 'ref',
		value: function ref(name, realm) {

			var that = this;
			var out = (0, _create2.default)(null);

			out.getValue = _regenerator2.default.mark(function _callee() {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.delegateYield(that.get(name, realm), 't0', 1);

							case 1:
								return _context.abrupt('return', _context.t0);

							case 2:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			});
			out.setValue = _regenerator2.default.mark(function _callee2(to) {
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								return _context2.delegateYield(that.set(name, to), 't0', 1);

							case 1:
								return _context2.abrupt('return', _context2.t0);

							case 2:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this);
			});
			out.del = function () {
				return false;
			};

			return out;
		}
	}, {
		key: 'set',
		value: _regenerator2.default.mark(function set(name, value, s, extra) {
			return _regenerator2.default.wrap(function set$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							this.native[name] = value.toNative();

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, set, this);
		})
	}, {
		key: 'toNative',
		value: function toNative() {
			return this.native;
		}
	}, {
		key: 'asString',
		value: _regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', this.native.toString());

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'makeLink',
		value: function makeLink(value) {
			return this.realm.import(value, this.linkKind);
		}
	}, {
		key: 'doubleEquals',
		value: _regenerator2.default.mark(function doubleEquals(other) {
			return _regenerator2.default.wrap(function doubleEquals$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', this.makeLink(this.native == other.toNative()));

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, doubleEquals, this);
		})
	}, {
		key: 'tripleEquals',
		value: _regenerator2.default.mark(function tripleEquals(other) {
			return _regenerator2.default.wrap(function tripleEquals$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.abrupt('return', this.makeLink(this.native === other.toNative()));

						case 1:
						case 'end':
							return _context6.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'add',
		value: _regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.abrupt('return', this.makeLink(this.native + other.toNative()));

						case 1:
						case 'end':
							return _context7.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'subtract',
		value: _regenerator2.default.mark(function subtract(other) {
			return _regenerator2.default.wrap(function subtract$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.abrupt('return', this.makeLink(this.native - other.toNative()));

						case 1:
						case 'end':
							return _context8.stop();
					}
				}
			}, subtract, this);
		})
	}, {
		key: 'multiply',
		value: _regenerator2.default.mark(function multiply(other) {
			return _regenerator2.default.wrap(function multiply$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							return _context9.abrupt('return', this.makeLink(this.native * other.toNative()));

						case 1:
						case 'end':
							return _context9.stop();
					}
				}
			}, multiply, this);
		})
	}, {
		key: 'divide',
		value: _regenerator2.default.mark(function divide(other) {
			return _regenerator2.default.wrap(function divide$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.abrupt('return', this.makeLink(this.native / other.toNative()));

						case 1:
						case 'end':
							return _context10.stop();
					}
				}
			}, divide, this);
		})
	}, {
		key: 'mod',
		value: _regenerator2.default.mark(function mod(other) {
			return _regenerator2.default.wrap(function mod$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.abrupt('return', this.makeLink(this.native % other.toNative()));

						case 1:
						case 'end':
							return _context11.stop();
					}
				}
			}, mod, this);
		})
	}, {
		key: 'shiftLeft',
		value: _regenerator2.default.mark(function shiftLeft(other) {
			return _regenerator2.default.wrap(function shiftLeft$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.abrupt('return', this.makeLink(this.native << other.toNative()));

						case 1:
						case 'end':
							return _context12.stop();
					}
				}
			}, shiftLeft, this);
		})
	}, {
		key: 'shiftRight',
		value: _regenerator2.default.mark(function shiftRight(other) {
			return _regenerator2.default.wrap(function shiftRight$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							return _context13.abrupt('return', this.makeLink(this.native >> other.toNative()));

						case 1:
						case 'end':
							return _context13.stop();
					}
				}
			}, shiftRight, this);
		})
	}, {
		key: 'shiftRightZF',
		value: _regenerator2.default.mark(function shiftRightZF(other) {
			return _regenerator2.default.wrap(function shiftRightZF$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							return _context14.abrupt('return', this.makeLink(this.native >>> other.toNative()));

						case 1:
						case 'end':
							return _context14.stop();
					}
				}
			}, shiftRightZF, this);
		})
	}, {
		key: 'bitAnd',
		value: _regenerator2.default.mark(function bitAnd(other) {
			return _regenerator2.default.wrap(function bitAnd$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							return _context15.abrupt('return', this.makeLink(this.native & other.toNative()));

						case 1:
						case 'end':
							return _context15.stop();
					}
				}
			}, bitAnd, this);
		})
	}, {
		key: 'bitOr',
		value: _regenerator2.default.mark(function bitOr(other) {
			return _regenerator2.default.wrap(function bitOr$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							return _context16.abrupt('return', this.makeLink(this.native | other.toNative()));

						case 1:
						case 'end':
							return _context16.stop();
					}
				}
			}, bitOr, this);
		})
	}, {
		key: 'bitXor',
		value: _regenerator2.default.mark(function bitXor(other) {
			return _regenerator2.default.wrap(function bitXor$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							return _context17.abrupt('return', this.makeLink(this.native ^ other.toNative()));

						case 1:
						case 'end':
							return _context17.stop();
					}
				}
			}, bitXor, this);
		})
	}, {
		key: 'gt',
		value: _regenerator2.default.mark(function gt(other) {
			return _regenerator2.default.wrap(function gt$(_context18) {
				while (1) {
					switch (_context18.prev = _context18.next) {
						case 0:
							return _context18.abrupt('return', this.makeLink(this.native > other.toNative()));

						case 1:
						case 'end':
							return _context18.stop();
					}
				}
			}, gt, this);
		})
	}, {
		key: 'lt',
		value: _regenerator2.default.mark(function lt(other) {
			return _regenerator2.default.wrap(function lt$(_context19) {
				while (1) {
					switch (_context19.prev = _context19.next) {
						case 0:
							return _context19.abrupt('return', this.makeLink(this.native < other.toNative()));

						case 1:
						case 'end':
							return _context19.stop();
					}
				}
			}, lt, this);
		})
	}, {
		key: 'gte',
		value: _regenerator2.default.mark(function gte(other) {
			return _regenerator2.default.wrap(function gte$(_context20) {
				while (1) {
					switch (_context20.prev = _context20.next) {
						case 0:
							return _context20.abrupt('return', this.makeLink(this.native >= other.toNative()));

						case 1:
						case 'end':
							return _context20.stop();
					}
				}
			}, gte, this);
		})
	}, {
		key: 'lte',
		value: _regenerator2.default.mark(function lte(other) {
			return _regenerator2.default.wrap(function lte$(_context21) {
				while (1) {
					switch (_context21.prev = _context21.next) {
						case 0:
							return _context21.abrupt('return', this.makeLink(this.native <= other.toNative()));

						case 1:
						case 'end':
							return _context21.stop();
					}
				}
			}, lte, this);
		})
	}, {
		key: 'inOperator',
		value: _regenerator2.default.mark(function inOperator(other) {
			return _regenerator2.default.wrap(function inOperator$(_context22) {
				while (1) {
					switch (_context22.prev = _context22.next) {
						case 0:
							return _context22.abrupt('return', this.makeLink(other.toNative() in this.native));

						case 1:
						case 'end':
							return _context22.stop();
					}
				}
			}, inOperator, this);
		})
	}, {
		key: 'instanceOf',
		value: _regenerator2.default.mark(function instanceOf(other) {
			return _regenerator2.default.wrap(function instanceOf$(_context23) {
				while (1) {
					switch (_context23.prev = _context23.next) {
						case 0:
							return _context23.abrupt('return', this.makeLink(this.native instanceof other.toNative()));

						case 1:
						case 'end':
							return _context23.stop();
					}
				}
			}, instanceOf, this);
		})
	}, {
		key: 'unaryPlus',
		value: _regenerator2.default.mark(function unaryPlus() {
			return _regenerator2.default.wrap(function unaryPlus$(_context24) {
				while (1) {
					switch (_context24.prev = _context24.next) {
						case 0:
							return _context24.abrupt('return', this.makeLink(+this.native));

						case 1:
						case 'end':
							return _context24.stop();
					}
				}
			}, unaryPlus, this);
		})
	}, {
		key: 'unaryMinus',
		value: _regenerator2.default.mark(function unaryMinus() {
			return _regenerator2.default.wrap(function unaryMinus$(_context25) {
				while (1) {
					switch (_context25.prev = _context25.next) {
						case 0:
							return _context25.abrupt('return', this.makeLink(-this.native));

						case 1:
						case 'end':
							return _context25.stop();
					}
				}
			}, unaryMinus, this);
		})
	}, {
		key: 'not',
		value: _regenerator2.default.mark(function not() {
			return _regenerator2.default.wrap(function not$(_context26) {
				while (1) {
					switch (_context26.prev = _context26.next) {
						case 0:
							return _context26.abrupt('return', this.makeLink(!this.native));

						case 1:
						case 'end':
							return _context26.stop();
					}
				}
			}, not, this);
		})
	}, {
		key: 'get',
		value: _regenerator2.default.mark(function get(name, realm) {
			return _regenerator2.default.wrap(function get$(_context27) {
				while (1) {
					switch (_context27.prev = _context27.next) {
						case 0:
							if (!this.native.hasOwnProperty(name)) {
								_context27.next = 2;
								break;
							}

							return _context27.abrupt('return', this.makeLink(this.native[name], realm));

						case 2:
							return _context27.delegateYield(this.makeLink((0, _getPrototypeOf2.default)(this.native), realm).get(name, realm), 't0', 3);

						case 3:
							return _context27.abrupt('return', _context27.t0);

						case 4:
						case 'end':
							return _context27.stop();
					}
				}
			}, get, this);
		})
	}, {
		key: 'observableProperties',
		value: _regenerator2.default.mark(function observableProperties(realm) {
			var p;
			return _regenerator2.default.wrap(function observableProperties$(_context28) {
				while (1) {
					switch (_context28.prev = _context28.next) {
						case 0:
							_context28.t0 = _regenerator2.default.keys(this.native);

						case 1:
							if ((_context28.t1 = _context28.t0()).done) {
								_context28.next = 7;
								break;
							}

							p = _context28.t1.value;
							_context28.next = 5;
							return this.makeLink(p);

						case 5:
							_context28.next = 1;
							break;

						case 7:
							return _context28.abrupt('return');

						case 8:
						case 'end':
							return _context28.stop();
					}
				}
			}, observableProperties, this);
		})

		/**
   *
   * @param {Value} thiz
   * @param {Value[]} args
   * @param {Scope} s
   */

	}, {
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, s) {
			var realArgs, i, result, val, _result;

			return _regenerator2.default.wrap(function call$(_context29) {
				while (1) {
					switch (_context29.prev = _context29.next) {
						case 0:
							realArgs = new Array(args.length);

							for (i = 0; i < args.length; ++i) {
								realArgs[i] = args[i].toNative();
							}
							_context29.prev = 2;
							result = invoke(this.native, thiz ? thiz.toNative() : undefined, realArgs);
							val = this.makeLink(result, s.realm);

							if (typeof s.realm.options.linkValueCallReturnValueWrapper === 'function') {
								val = s.realm.options.linkValueCallReturnValueWrapper(val);
							}
							return _context29.abrupt('return', val);

						case 9:
							_context29.prev = 9;
							_context29.t0 = _context29['catch'](2);
							_result = this.makeLink(_context29.t0, s.realm);
							return _context29.abrupt('return', new CompletionRecord(CompletionRecord.THROW, _result));

						case 13:
						case 'end':
							return _context29.stop();
					}
				}
			}, call, this, [[2, 9]]);
		})
	}, {
		key: 'getPropertyValueMap',
		value: function getPropertyValueMap() {
			var list = {};
			for (var p in this.native) {
				var v = this.native[p];
				list[p] = this.makeLink(v);
			}
			return list;
		}
	}, {
		key: 'toNumberValue',
		value: _regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context30) {
				while (1) {
					switch (_context30.prev = _context30.next) {
						case 0:
							return _context30.abrupt('return', Value.fromNative(Number(this.native)));

						case 1:
						case 'end':
							return _context30.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toStringValue',
		value: _regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context31) {
				while (1) {
					switch (_context31.prev = _context31.next) {
						case 0:
							return _context31.abrupt('return', Value.fromNative(String(this.native)));

						case 1:
						case 'end':
							return _context31.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'getPrototype',
		value: function getPrototype(realm) {
			return realm.ObjectPrototype;
		}
	}, {
		key: 'makeThisForNew',
		value: _regenerator2.default.mark(function makeThisForNew() {
			return _regenerator2.default.wrap(function makeThisForNew$(_context32) {
				while (1) {
					switch (_context32.prev = _context32.next) {
						case 0:
							return _context32.abrupt('return', Value.undef);

						case 1:
						case 'end':
							return _context32.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'toPrimitiveValue',
		value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context33) {
				while (1) {
					switch (_context33.prev = _context33.next) {
						case 0:
							_context33.t0 = preferedType;
							_context33.next = _context33.t0 === 'string' ? 3 : 4;
							break;

						case 3:
							return _context33.abrupt('return', Value.fromNative(this.native.toString()));

						case 4:
							return _context33.abrupt('return', Value.fromNative(this.native.valueOf()));

						case 5:
						case 'end':
							return _context33.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'isCallable',
		get: function get() {
			return typeof this.native === 'function';
		}
	}, {
		key: 'debugString',
		get: function get() {
			return '[Link: ' + this.native + ']';
		}
	}, {
		key: 'truthy',
		get: function get() {
			return !!this.native;
		}
	}, {
		key: 'jsTypeName',
		get: function get() {
			return (0, _typeof3.default)(this.native);
		}
	}, {
		key: 'linkKind',
		get: function get() {
			return 'link';
		}
	}], [{
		key: 'make',
		value: function make(native, realm) {
			var wellKnown = realm.lookupWellKnown(native);
			if (wellKnown) return wellKnown;

			if (Array.isArray(native)) {
				var ia = new Array(native.length);
				for (var i = 0; i < native.length; ++i) {
					ia[i] = LinkValue.make(native[i], realm);
				}
				return ArrayValue.make(ia, realm);
			}

			return new LinkValue(native, realm);
		}
	}]);
	return LinkValue;
}(Value);

module.exports = LinkValue;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EmptyValue = __webpack_require__(28);
var Value = __webpack_require__(3);

var UndefinedValue = function (_EmptyValue) {
	(0, _inherits3.default)(UndefinedValue, _EmptyValue);

	function UndefinedValue() {
		(0, _classCallCheck3.default)(this, UndefinedValue);
		return (0, _possibleConstructorReturn3.default)(this, (UndefinedValue.__proto__ || (0, _getPrototypeOf2.default)(UndefinedValue)).apply(this, arguments));
	}

	(0, _createClass3.default)(UndefinedValue, [{
		key: 'toNative',
		value: function toNative() {
			return undefined;
		}
	}, {
		key: 'tripleEquals',
		value: _regenerator2.default.mark(function tripleEquals(other, realm) {
			return _regenerator2.default.wrap(function tripleEquals$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', other instanceof UndefinedValue ? Value.true : Value.false);

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, tripleEquals, this);
		})
	}, {
		key: 'add',
		value: _regenerator2.default.mark(function add(other) {
			return _regenerator2.default.wrap(function add$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.abrupt('return', this.fromNative(undefined + other.toNative()));

						case 1:
						case 'end':
							return _context2.stop();
					}
				}
			}, add, this);
		})
	}, {
		key: 'asString',
		value: _regenerator2.default.mark(function asString() {
			return _regenerator2.default.wrap(function asString$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', 'undefined');

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, asString, this);
		})
	}, {
		key: 'toPrimitiveValue',
		value: _regenerator2.default.mark(function toPrimitiveValue(preferedType) {
			return _regenerator2.default.wrap(function toPrimitiveValue$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', this);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, toPrimitiveValue, this);
		})
	}, {
		key: 'toNumberValue',
		value: _regenerator2.default.mark(function toNumberValue() {
			return _regenerator2.default.wrap(function toNumberValue$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', Value.nan);

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, toNumberValue, this);
		})
	}, {
		key: 'toStringValue',
		value: _regenerator2.default.mark(function toStringValue() {
			return _regenerator2.default.wrap(function toStringValue$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.abrupt('return', Value.fromNative('undefined'));

						case 1:
						case 'end':
							return _context6.stop();
					}
				}
			}, toStringValue, this);
		})
	}, {
		key: 'jsTypeName',
		get: function get() {
			return 'undefined';
		}
	}, {
		key: 'debugString',
		get: function get() {
			return 'undefined';
		}
	}]);
	return UndefinedValue;
}(EmptyValue);

module.exports = UndefinedValue;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(155), __esModule: true };

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(156), __esModule: true };

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(159), __esModule: true };

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(160), __esModule: true };

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(38)
  , TAG = __webpack_require__(11)('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll       = __webpack_require__(76)
  , getWeak           = __webpack_require__(49).getWeak
  , anObject          = __webpack_require__(17)
  , isObject          = __webpack_require__(19)
  , anInstance        = __webpack_require__(66)
  , forOf             = __webpack_require__(71)
  , createArrayMethod = __webpack_require__(67)
  , $has              = __webpack_require__(22)
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global         = __webpack_require__(13)
  , $export        = __webpack_require__(20)
  , meta           = __webpack_require__(49)
  , fails          = __webpack_require__(26)
  , hide           = __webpack_require__(23)
  , redefineAll    = __webpack_require__(76)
  , forOf          = __webpack_require__(71)
  , anInstance     = __webpack_require__(66)
  , isObject       = __webpack_require__(19)
  , setToStringTag = __webpack_require__(40)
  , dP             = __webpack_require__(21).f
  , each           = __webpack_require__(67)(0)
  , DESCRIPTORS    = __webpack_require__(18);

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function(target, iterable){
      anInstance(target, C, NAME, '_c');
      target._c = new Base;
      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
        anInstance(this, C, KEY);
        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    if('size' in proto)dP(C.prototype, 'size', {
      get: function(){
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(13).document && document.documentElement;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(18) && !__webpack_require__(26)(function(){
  return Object.defineProperty(__webpack_require__(69)('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(38);
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY        = __webpack_require__(48)
  , $export        = __webpack_require__(20)
  , redefine       = __webpack_require__(77)
  , hide           = __webpack_require__(23)
  , has            = __webpack_require__(22)
  , Iterators      = __webpack_require__(39)
  , $iterCreate    = __webpack_require__(173)
  , setToStringTag = __webpack_require__(40)
  , getPrototypeOf = __webpack_require__(107)
  , ITERATOR       = __webpack_require__(11)('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var dP       = __webpack_require__(21)
  , anObject = __webpack_require__(17)
  , getKeys  = __webpack_require__(31);

module.exports = __webpack_require__(18) ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(24)
  , gOPN      = __webpack_require__(106).f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = __webpack_require__(108)
  , hiddenKeys = __webpack_require__(70).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = __webpack_require__(22)
  , toObject    = __webpack_require__(41)
  , IE_PROTO    = __webpack_require__(78)('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var has          = __webpack_require__(22)
  , toIObject    = __webpack_require__(24)
  , arrayIndexOf = __webpack_require__(166)(false)
  , IE_PROTO     = __webpack_require__(78)('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var ctx                = __webpack_require__(30)
  , invoke             = __webpack_require__(170)
  , html               = __webpack_require__(100)
  , cel                = __webpack_require__(69)
  , global             = __webpack_require__(13)
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(__webpack_require__(38)(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(97)
  , ITERATOR  = __webpack_require__(11)('iterator')
  , Iterators = __webpack_require__(39);
module.exports = __webpack_require__(10).getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = {
	"name": "coffee-script-redux",
	"author": {
		"name": "Michael Ficarra"
	},
	"version": "2.0.0-beta9-dev",
	"homepage": "https://github.com/michaelficarra/CoffeeScriptRedux",
	"bugs": {
		"url": "https://github.com/michaelficarra/CoffeeScriptRedux/issues"
	},
	"description": "Unfancy JavaScript",
	"keywords": [
		"coffeescript",
		"javascript",
		"language",
		"compiler"
	],
	"main": "./lib/module",
	"bin": {
		"coffee": "./bin/coffee"
	},
	"repository": {
		"type": "git",
		"url": "git://github.com/michaelficarra/CoffeeScriptRedux.git"
	},
	"scripts": {
		"build": "make -j build",
		"test": "make -j test"
	},
	"devDependencies": {
		"mocha": "~1.12.0",
		"pegjs": "~0.8.0",
		"pegjs-each-code": "~0.2.0",
		"commonjs-everywhere": "~0.9.0",
		"cluster": "~0.7.7",
		"semver": "~2.1.0"
	},
	"dependencies": {
		"StringScanner": "~0.0.3",
		"nopt": "~2.1.2",
		"esmangle": "~1.0.0",
		"source-map": "0.1.x",
		"escodegen": "~1.2.0",
		"cscodegen": "git+https://github.com/michaelficarra/cscodegen.git#73fd7202ac086c26f18c9d56f025b18b3c6f5383"
	},
	"optionalDependencies": {
		"esmangle": "~1.0.0",
		"source-map": "0.1.x",
		"escodegen": "~1.2.0",
		"cscodegen": "git+https://github.com/michaelficarra/cscodegen.git#73fd7202ac086c26f18c9d56f025b18b3c6f5383"
	},
	"engines": {
		"node": "0.8.x || 0.10.x"
	},
	"licenses": [
		{
			"type": "3-clause BSD",
			"url": "https://raw.github.com/michaelficarra/CoffeeScriptRedux/master/LICENSE"
		}
	],
	"license": "3-clause BSD",
	"gitHead": "b1c747564a576f3c9d5e414e450d82c6b7bcbad6",
	"readme": "CoffeeScript II: The Wrath of Khan\n==================================\n\n```\n          {\n       }   }   {\n      {   {  }  }\n       }   }{  {\n      {  }{  }  }             _____       __  __\n     ( }{ }{  { )            / ____|     / _|/ _|\n   .- { { }  { }} -.        | |     ___ | |_| |_ ___  ___\n  (  ( } { } { } }  )       | |    / _ \\|  _|  _/ _ \\/ _ \\\n  |`-..________ ..-'|       | |___| (_) | | | ||  __/  __/\n  |                 |        \\_____\\___/|_| |_| \\___|\\___|       .-''-.\n  |                 ;--.                                       .' .-.  )\n  |                (__  \\     _____           _       _       / .'  / /\n  |                 | )  )   / ____|         (_)     | |     (_/   / /\n  |                 |/  /   | (___   ___ _ __ _ _ __ | |_         / /\n  |                 (  /     \\___ \\ / __| '__| | '_ \\| __|       / /\n  |                 |/       ____) | (__| |  | | |_) | |_       . '\n  |                 |       |_____/ \\___|_|  |_| .__/ \\__|     / /    _.-')\n   `-.._________..-'                           | |           .' '  _.'.-''\n                                               |_|          /  /.-'_.'\n                                                           /    _.'\n                                                          ( _.-'\n```\n\n### Status\n\nComplete enough to use for nearly every project. See the [roadmap to 2.0](https://github.com/michaelficarra/CoffeeScriptRedux/wiki/Roadmap).\n\n### Getting Started\n\n    npm install -g coffee-script-redux\n    coffee --help\n    coffee --js <input.coffee >output.js\n\nBefore transitioning from Jeremy's compiler, see the\n[intentional deviations from jashkenas/coffee-script](https://github.com/michaelficarra/CoffeeScriptRedux/wiki/Intentional-Deviations-From-jashkenas-coffee-script)\nwiki page.\n\n### Development\n\n    git clone git://github.com/michaelficarra/CoffeeScriptRedux.git && cd CoffeeScriptRedux && npm install\n    make clean && git checkout -- lib && make -j build && make test\n\n### Notable Contributors\n\nI'd like to thank the following financial contributors for their large\ndonations to [the Kickstarter project](https://www.kickstarter.com/projects/michaelficarra/make-a-better-coffeescript-compiler)\nthat funded the initial work on this compiler.\nTogether, you donated over $10,000. Without you, I wouldn't have been able to do this.\n\n* [Groupon](https://www.groupon.com/), who is generously allowing me to work in their offices\n* [Trevor Burnham](http://trevorburnham.com)\n* [Shopify](https://www.shopify.com/)\n* [Abakas](http://abakas.com)\n* [37signals](http://37signals.com)\n* [Brightcove](https://www.brightcove.com/en/)\n* [Gaslight](https://teamgaslight.com/)\n* [Pantheon](https://pantheon.io/)\n* Benbria\n* Sam Stephenson\n* Bevan Hunt\n* Meryn Stol\n* Rob Tsuk\n* Dion Almaer\n* Andrew Davey\n* Thomas Burleson\n* Michael Kedzierski\n* Jeremy Kemper\n* Kyle Cordes\n* Jason R. Lauman\n* Martin Drenovac (Envizion Systems - Aust)\n* Julian Bilcke\n* Michael Edmondson\n\nAnd of course, thank you [Jeremy](https://github.com/jashkenas) (and all the other\n[contributors](https://github.com/jashkenas/coffeescript/graphs/contributors))\nfor making [the original CoffeeScript compiler](https://github.com/jashkenas/coffeescript).\n",
	"readmeFilename": "README.md",
	"_id": "coffee-script-redux@2.0.0-beta9-dev",
	"_shasum": "a9e511707b777143f39acce07504d0746fa5de51",
	"_from": "git://github.com/basicer/CoffeeScriptRedux.git",
	"_resolved": "git://github.com/basicer/CoffeeScriptRedux.git#b1c747564a576f3c9d5e414e450d82c6b7bcbad6"
};

/***/ }),
/* 112 */
/***/ (function(module, exports) {



/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 2.0.0-beta9-dev
var beingDeclared, cache$, cleanMarkers, colourise, COLOURS, concat, concatMap, CS, difference, envEnrichments, envEnrichments_, foldl, humanReadable, map, nub, numberLines, pointToErrorLocation, SUPPORTS_COLOUR, usedAsExpression, usedAsExpression_;
cache$ = __webpack_require__(56);
concat = cache$.concat;
concatMap = cache$.concatMap;
difference = cache$.difference;
foldl = cache$.foldl;
map = cache$.map;
nub = cache$.nub;
CS = __webpack_require__(57);
COLOURS = {
  red: '\x1B[31m',
  green: '\x1B[32m',
  yellow: '\x1B[33m',
  blue: '\x1B[34m',
  magenta: '\x1B[35m',
  cyan: '\x1B[36m'
};
SUPPORTS_COLOUR = ('undefined' !== typeof process && null != process && null != process.stderr ? process.stderr.isTTY : void 0) && !process.env.NODE_DISABLE_COLORS;
colourise = function (colour, str) {
  if (SUPPORTS_COLOUR) {
    return '' + COLOURS[colour] + str + '\x1B[39m';
  } else {
    return str;
  }
};
this.numberLines = numberLines = function (input, startLine) {
  var currLine, i, line, lines, numbered, pad, padSize;
  if (null == startLine)
    startLine = 1;
  lines = input.split('\n');
  padSize = ('' + (lines.length + startLine - 1)).length;
  numbered = function (accum$) {
    for (var i$ = 0, length$ = lines.length; i$ < length$; ++i$) {
      line = lines[i$];
      i = i$;
      currLine = '' + (i + startLine);
      pad = Array(padSize + 1).join('0').slice(currLine.length);
      accum$.push('' + pad + currLine + ' : ' + lines[i]);
    }
    return accum$;
  }.call(this, []);
  return numbered.join('\n');
};
cleanMarkers = function (str) {
  return str.replace(/[\uEFEF\uEFFE\uEFFF]/g, '');
};
this.humanReadable = humanReadable = function (str) {
  return str.replace(/\uEFEF/g, '(INDENT)').replace(/\uEFFE/g, '(DEDENT)').replace(/\uEFFF/g, '(TERM)');
};
this.formatParserError = function (input, e) {
  var found, message, realColumn, unicode;
  realColumn = cleanMarkers(('' + input.split('\n')[e.line - 1] + '\n').slice(0, e.column)).length;
  if (!(null != e.found))
    return 'Syntax error on line ' + e.line + ', column ' + realColumn + ': unexpected end of input';
  found = JSON.stringify(humanReadable(e.found));
  found = found.replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"');
  unicode = e.found.charCodeAt(0).toString(16).toUpperCase();
  unicode = '\\u' + '0000'.slice(unicode.length) + unicode;
  message = 'Syntax error on line ' + e.line + ', column ' + realColumn + ": unexpected '" + found + "' (" + unicode + ')';
  return '' + message + '\n' + pointToErrorLocation(input, e.line, realColumn);
};
this.pointToErrorLocation = pointToErrorLocation = function (source, line, column, numLinesOfContext) {
  var currentLineOffset, lines, numberedLines, padSize, postLines, preLines, startLine;
  if (null == numLinesOfContext)
    numLinesOfContext = 3;
  lines = source.split('\n');
  if (!lines[lines.length - 1])
    lines.pop();
  currentLineOffset = line - 1;
  startLine = currentLineOffset - numLinesOfContext;
  if (startLine < 0)
    startLine = 0;
  preLines = lines.slice(startLine, +currentLineOffset + 1 || 9e9);
  preLines[preLines.length - 1] = colourise('yellow', preLines[preLines.length - 1]);
  postLines = lines.slice(currentLineOffset + 1, +(currentLineOffset + numLinesOfContext) + 1 || 9e9);
  numberedLines = numberLines(cleanMarkers([].slice.call(preLines).concat([].slice.call(postLines)).join('\n')), startLine + 1).split('\n');
  preLines = numberedLines.slice(0, preLines.length);
  postLines = numberedLines.slice(preLines.length);
  column = cleanMarkers(('' + lines[currentLineOffset] + '\n').slice(0, column)).length;
  padSize = (currentLineOffset + 1 + postLines.length).toString(10).length;
  return [].slice.call(preLines).concat(['' + colourise('red', Array(padSize + 1).join('^')) + ' : ' + Array(column).join(' ') + colourise('red', '^')], [].slice.call(postLines)).join('\n');
};
this.beingDeclared = beingDeclared = function (assignment) {
  switch (false) {
  case !!(null != assignment):
    return [];
  case !assignment['instanceof'](CS.Identifiers):
    return [assignment.data];
  case !assignment['instanceof'](CS.Rest):
    return beingDeclared(assignment.expression);
  case !assignment['instanceof'](CS.MemberAccessOps):
    return [];
  case !assignment['instanceof'](CS.DefaultParam):
    return beingDeclared(assignment.param);
  case !assignment['instanceof'](CS.ArrayInitialiser):
    return concatMap(assignment.members, beingDeclared);
  case !assignment['instanceof'](CS.ObjectInitialiser):
    return concatMap(assignment.vals(), beingDeclared);
  default:
    throw new Error('beingDeclared: Non-exhaustive patterns in case: ' + assignment.className);
  }
};
this.declarationsFor = function (node, inScope) {
  var vars;
  vars = envEnrichments(node, inScope);
  return foldl(new CS.Undefined().g(), vars, function (expr, v) {
    return new CS.AssignOp(new CS.Identifier(v).g(), expr).g();
  });
};
usedAsExpression_ = function (ancestors) {
  var grandparent, parent;
  parent = ancestors[0];
  grandparent = ancestors[1];
  switch (false) {
  case !!(null != parent):
    return true;
  case !parent['instanceof'](CS.Program, CS.Class):
    return false;
  case !parent['instanceof'](CS.SeqOp):
    return this === parent.right && usedAsExpression(parent, ancestors.slice(1));
  case !(parent['instanceof'](CS.Block) && parent.statements.indexOf(this) !== parent.statements.length - 1):
    return false;
  case !(parent['instanceof'](CS.Functions) && parent.body === this && null != grandparent && grandparent['instanceof'](CS.Constructor)):
    return false;
  default:
    return true;
  }
};
this.usedAsExpression = usedAsExpression = function (node, ancestors) {
  return usedAsExpression_.call(node, ancestors);
};
envEnrichments_ = function (inScope) {
  var possibilities;
  if (null == inScope)
    inScope = [];
  possibilities = nub(function () {
    switch (false) {
    case !this['instanceof'](CS.AssignOp):
      return concat([
        beingDeclared(this.assignee),
        envEnrichments(this.expression)
      ]);
    case !this['instanceof'](CS.Class):
      return concat([
        beingDeclared(this.nameAssignee),
        envEnrichments(this.parent)
      ]);
    case !this['instanceof'](CS.ForIn, CS.ForOf):
      return concat([
        beingDeclared(this.keyAssignee),
        beingDeclared(this.valAssignee),
        envEnrichments(this.target),
        envEnrichments(this.step),
        envEnrichments(this.filter),
        envEnrichments(this.body)
      ]);
    case !this['instanceof'](CS.Try):
      return concat([
        beingDeclared(this.catchAssignee),
        envEnrichments(this.body),
        envEnrichments(this.catchBody),
        envEnrichments(this.finallyBody)
      ]);
    case !this['instanceof'](CS.Functions):
      return [];
    default:
      return concatMap(this.childNodes, function (this$) {
        return function (child) {
          if (in$(child, this$.listMembers)) {
            return concatMap(this$[child], function (m) {
              return envEnrichments(m, inScope);
            });
          } else {
            return envEnrichments(this$[child], inScope);
          }
        };
      }(this));
    }
  }.call(this));
  return difference(possibilities, inScope);
};
this.envEnrichments = envEnrichments = function (node) {
  var args;
  args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
  if (null != node) {
    return envEnrichments_.apply(node, args);
  } else {
    return [];
  }
};
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)))

/***/ }),
/* 115 */
/***/ (function(module, exports) {

module.exports = {"ast-css":"bundle","lang-python":"bundle","lang-coffeescript":"bundle","lang-lua":"bundle"};

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _stringify = __webpack_require__(46);

var _stringify2 = _interopRequireDefault(_stringify);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var esper = __webpack_require__(32);
var csswhat = __webpack_require__(210);
var ASTNode = esper.ASTPreprocessor.ASTNode;

var debug = function debug() {};
//const debug = console.log.bind(console);


function tag(name) {
	switch (name.toLowerCase()) {
		case 'array':
		case 'arrayexpression':
			return 'ArrayExpression';
		case 'break':
		case 'breakstatement':
			return 'BreakStatement';
		case 'continue':
		case 'continuestatement':
			return 'ContinueStatement';
		case 'arrow':
		case 'arrowfunction':
			return 'ArrowFunctionExpression';
		case 'assign':
		case 'assignment':
		case 'assignmentexpression':
			return 'AssignmentExpression';
		case 'binop':
		case 'binary':
		case 'binaryexpression':
			return 'BinaryExpression';
		case 'block':
		case 'blockstatement':
			return 'BlockStatement';
		case 'call':
		case 'callexpression':
			return 'CallExpression';
		case 'class':
		case 'classdeclaration':
			return 'ClassDeclaration';
		case 'classex':
		case 'classexpression':
			return 'ClassExpression';
		case 'conditional':
		case 'conditionalexpression':
			return 'ConditionalExpression';
		case 'debugger':
		case 'debuggerstatement':
			return 'DebuggerStatement';
		case 'dowhile':
		case 'dowhilestatement':
			return 'DoWhileStatement';
		case 'empty':
		case 'emptystatement':
			return 'EmptyStatement';
		case 'expression':
		case 'exp':
		case 'expressionstatement':
			return 'ExpressionStatement';
		case 'for':
		case 'forstatement':
			return 'ForStatement';
		case 'forin':
		case 'forinstatement':
			return 'ForInStatement';
		case 'forof':
		case 'forofstatement':
			return 'ForOfStatement';
		case 'functiondeclaration':
			return 'FunctionDeclaration';
		case 'functionexpression':
			return 'FunctionExpression';
		case 'identifier':
			return 'Identifier';
		case 'if':
		case 'ifstatement':
			return 'IfStatement';
		case 'labeledstatement':
			return 'LabeledStatement';
		case 'literal':
		case 'value':
			return 'Literal';
		case 'logicalexpression':
			return 'LogicalExpression';
		case 'memberexpression':
		case 'member':
			return 'MemberExpression';
		case 'new':
		case 'newexpression':
			return 'NewExpression';
		case 'object':
		case 'objectexpression':
			return 'ObjectExpression';
		case 'program':
			return 'Program';
		case 'return':
		case 'returnstatement':
			return 'ReturnStatement';
		case 'sequence':
		case 'sequenceexpression':
			return 'SequenceExpression';
		case 'switch':
		case 'switchstatement':
			return 'SwitchStatement';
		case 'this':
		case 'thisexpression':
			return 'ThisExpression';
		case 'throw':
		case 'throwstatement':
			return 'ThrowStatement';
		case 'try':
		case 'trystatement':
			return 'TryStatement';
		case 'unaryexpression':
			return 'UnaryExpression';
		case 'updateexpression':
			return 'UpdateExpression';
		case 'variabledeclaration':
			return 'VariableDeclaration';
		case 'whilestatement':
		case 'while':
			return 'WhileStatement';
		case 'with':
		case 'withstatement':
			return 'WithStatement';
	}
}

function find(ast, selector, root) {
	var list;
	debug(selector);
	if (typeof selector === 'string') {
		list = csswhat(selector, { xmlMode: true });
		debug(list);
	} else {
		list = selector;
	}
	var matchers = list.map(compileRTL);
	var found = [];
	var cbs = {
		exit: function exit(n) {
			//console.log("EVAL", n);
			for (var i = 0; i < matchers.length; ++i) {
				var result = matchers[i](n, root);
				if (result !== false) found.push([n, result]);
			}
		}
	};
	var gen = esper.ASTPreprocessor.walker(ast, cbs);
	for (var _iterator = gen, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
		var _ref;

		if (_isArray) {
			if (_i >= _iterator.length) break;
			_ref = _iterator[_i++];
		} else {
			_i = _iterator.next();
			if (_i.done) break;
			_ref = _i.value;
		}

		var x = _ref;
	}
	return found;
}

function matches(m, selector, root) {

	var matches = find(m, selector, root);
	for (var i = 0; i < matches.length; ++i) {
		if (matches[i][1].indexOf(m) !== -1) {
			return true;
		}
	}
	return false;
}

function tagNames(n) {
	switch (n.toLowerCase()) {
		case 'loop':
			return ['WhileStatement', 'DoWhileStatement', 'ForStatement'];
		case 'breakable':
			return ['SwitchStatement', 'WhileStatement', 'DoWhileStatement', 'ForStatement'];
		case 'if':
			return ['IfStatement'];
		case 'function':
			return ['FunctionDeclaration', 'FunctionExpression', 'ArrowFunctionExpression'];
	}
	return [tag(n)];
}

function compileRTL(opts) {
	return function match(input, root) {
		var canidates = [{ n: input }];
		for (var i = opts.length - 1; i >= 0; --i) {
			var o = opts[i];
			//debug(canidates.map((m) => m ? m.type : 'F').join(','), "vs", o);
			var siblings;
			var adjlist;
			var list;

			(function () {
				switch (o.type) {
					case 'universal':
						break;
					case 'pseudo':
						if (o.name === 'downto') {
							var _list = tagNames(o.data);
							var _parents = [];
							canidates.map(function (c) {
								var m = c.n;
								while (m !== root && m.parent) {
									m = m.parent;
									if (_list.indexOf(m.type) !== -1) break;
									_parents.push({ n: m });
								}
							});
							canidates = _parents;
							debug('NT', _list);
							debug('DT!', canidates.map(function (s) {
								return s.n.type + '#' + s.n.loc.start.line;
							}));
							break;
						} else if (o.name == 'matches') {
							canidates = canidates.filter(function (c) {
								return matches(c.n, o.data, root);
							});
							break;
						} else if (o.name == 'has') {
							canidates = canidates.filter(function (c) {
								var matches = match(c.n, o.data, root);
								return matches.length > 0;
							});
							break;
						} else if (o.name == 'not') {
							canidates = canidates.filter(function (c) {
								return !matches(c.n, o.data, root);
							});
							break;
						} else {
							throw new Error('Unknown psudo selector:' + o.name);
						}
						break;
					case 'descendant':
						var parents = [];
						canidates.map(function (c) {
							var m = c.n;
							while (m !== root && m.parent) {
								m = m.parent;
								parents.push({ n: m, p: c.n });
							}
						});
						canidates = parents;
						break;
					case 'child':
						canidates = canidates.filter(function (c) {
							return c.n !== root && c.n.parent;
						}).map(function (c) {
							return { n: c.n.parent, p: c.n };
						});
						break;
					case 'parent':
						var parents2 = [];
						canidates.map(function (c) {
							var m = c.n;
							for (var k in m) {
								if (k === 'type') continue;
								if (k === 'parent') continue;
								if (k === 'visits') continue;
								if (k === 'dispatch') continue;
								if (k === 'loc') continue;
								if (k === 'range') continue;
								if (k === 'nodeID') continue;
								if (k === 'srcName') continue;

								if (m[k] instanceof ASTNode) {
									parents2.push({ n: m[k], p: m });
								}
							}
						});
						debug(canidates, parents2);
						canidates = parents2;
						break;
					case 'sibling':
						siblings = [];

						canidates.filter(function (c) {
							var m = c.n;
							var parent = m.parent;
							for (var key in parent) {
								if (!Array.isArray(parent[key])) continue;
								var idx = parent[key].indexOf(m);
								if (idx === -1) continue;
								for (var i = 0; i < idx; ++i) {
									if (parent[key][i] !== m) siblings.push({ n: parent[key][i] });
								}
								return;
							}
						});
						canidates = siblings;
						break;
					case 'adjacent':
						adjlist = [];

						canidates.filter(function (c) {
							var m = c.n;
							var parent = m.parent;
							for (var key in parent) {
								if (!Array.isArray(parent[key])) continue;
								var idx = parent[key].indexOf(m);
								if (idx == -1) continue;
								if (idx > 0) adjlist.push({ n: parent[key][idx - 1] });
								return;
							}
						});
						canidates = adjlist;
						break;
					case 'tag':
						list = tagNames(o.name);

						canidates = canidates.filter(function (c) {
							return list.indexOf(c.n.type) !== -1;
						});
						break;
					case 'attribute':
						if (o.name === 'class') {
							canidates = canidates.filter(function (c) {
								var test = c.n[o.value];
								if (!c.p) return !!test;
								if (Array.isArray(test)) return test.indexOf(c.p) !== -1;
								return test == c.p;
							});
							break;
						}
						canidates = canidates.filter(function (c) {
							var m = c.n;
							if (!(o.name in m)) return;
							var val = m[o.name];
							if (val.type && val.type === 'Identifier') val = val.name;else if (val.type && val.type === 'Literal') val = (0, _stringify2.default)(val.value);
							return o.value == val.toString();
						});
						break;
					default:
						throw new Error('Unknown CSS Selector Type: ' + o.type);
				}
			})();

			if (canidates.length > 0) {
				debug('MATCH@' + (0, _stringify2.default)(o));
				debug(canidates);
			} else {
				if (i < opts.length - 1) debug('FAIL@' + (0, _stringify2.default)(o));
				return false;
			}
		}
		debug('OK!', canidates.map(function (s) {
			return s.n.type + '#' + s.n.loc.start.line;
		}));
		return canidates.map(function (s) {
			return s.n;
		});
	};
}

function init(esper) {
	esper.ASTPreprocessor.prototype.find = function (sel) {
		return find(this.ast, sel).map(function (x) {
			return x[0];
		});
	};
	esper.ASTPreprocessor.ASTNode.prototype.find = function (sel) {
		return find(this, sel, null).map(function (x) {
			return x[0];
		});
	};
	esper.ASTPreprocessor.ASTNode.prototype.matches = function (sel) {
		return matches(this, sel, null);
	};
}

var plugin = module.exports = {
	name: "ast-css",
	find: find,
	init: init
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Preprocessor = __webpack_require__(214).Preprocessor;
var Parser = __webpack_require__(213);
var Compiler = __webpack_require__(211).Compiler;
var CS = __webpack_require__(57);

function formatParserError(preprocessed, e) {
	var result = new SyntaxError('Syntax error on line ' + e.line + ' column ' + e.column + ': unexpected \'' + e.found + '\'');
	return result;
}

function cparse(coffee, opts) {
	var parsed, preprocessed;
	try {
		preprocessed = Preprocessor.process(coffee, { literate: false });
		parsed = Parser.parse(preprocessed, {
			raw: true,
			inputSource: coffee,
			startRule: opts.inFunctionBody ? 'block' : 'program'
		});
		return parsed;
	} catch (e) {
		if (!(e instanceof Parser.SyntaxError)) throw e;
		throw formatParserError(preprocessed, e);
	}
}

function ccompile(csAst, options) {
	return Compiler.compile(csAst, options).toBasicObject();
}

function parser(code, options) {
	options = options || {};
	var opts = { locations: true, ranges: true };
	var csast = cparse(code, options);
	if (options.inFunctionBody) {
		//Gota fake being inside a function to trigger return rewriting.
		csast = new CS.Program(new CS.Function([], csast));
	}
	//console.log(JSON.stringify(csast,null, ' '));
	var ast = ccompile(csast, { bare: true });
	//console.log(JSON.stringify(ast,null, ' '))
	if (options.inFunctionBody) {
		ast = ast.body[0].expression.body;
	}
	return ast;
}

var plugin = module.exports = {
	name: 'lang-coffeescript',
	parser: parser,
	init: function init(esper) {
		esper.languages.coffeescript = plugin;
	}
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var lua2js = __webpack_require__(216);

function parser(code, options) {
	options = options || {};
	var opts = {
		forceVar: false,
		decorateLuaObjects: true,
		luaCalls: true,
		luaOperators: true,
		encloseWithFunctions: false
	};

	var ast = lua2js.parse(code, opts);
	var wrap = function wrap(o) {
		o.loc = ast.loc;
		o.range = ast.range;
		return o;
	};
	var final = ast;
	var fixThis = {
		'type': 'VariableDeclaration',
		'declarations': [{
			'type': 'VariableDeclarator',
			'id': {
				'type': 'Identifier',
				'name': 'self'
			},
			'init': {
				'type': 'ThisExpression'
			}
		}],
		'kind': 'var',
		'userCode': false
	};
	if (!options.inFunctionBody) {
		final = wrap({
			type: 'FunctionExpression',
			params: [],
			body: final
		});
		final = wrap({
			type: 'CallExpression',
			callee: final,
			arguments: []
		});
		final = wrap({
			type: 'ExpressionStatement',
			expression: final
		});
		final = wrap({
			type: 'Program',
			body: [fixThis, final]
		});
	} else {
		var newBody = [fixThis];
		Array.prototype.push.apply(newBody, final.body);
		final = wrap({
			type: 'Program',
			body: newBody
		});
	}
	return final;
}

var startupCode = __webpack_require__(119);
var startupCodeAST = void 0;

var plugin = module.exports = {
	name: 'lang-lua',
	lua2js: lua2js,
	parser: parser,
	init: function init(esper) {
		esper.languages.lua = plugin;
		startupCodeAST = esper.languages.javascript.esprima.parse(startupCode);
	},
	startupCode: function startupCode() {
		return startupCodeAST;
	}
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

var fs = __webpack_require__(112);
var path = __webpack_require__(113);

var str = void 0;

if (fs.readFileSync) str = fs.readFileSync(path.join(__dirname, 'node_modules', 'lua2js', 'stdlib.js'), 'utf8');else str = __webpack_require__(202);

module.exports = str.replace(/^var pythonRuntime = module.exports/, 'var __pythonRuntime');
/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var skulpty = __webpack_require__(219);

function parser(code, options) {
	options = options || {};
	var opts = { locations: true, ranges: true };
	var ast = skulpty.parse(code, opts);
	var fixThis = {
		'type': 'VariableDeclaration',
		'declarations': [{
			'type': 'VariableDeclarator',
			'id': {
				'type': 'Identifier',
				'name': 'self'
			},
			'init': {
				'type': 'ThisExpression'
			}
		}],
		'kind': 'var',
		'userCode': false
	};
	ast.body.unshift(fixThis);
	return ast;
}

var startupCode = __webpack_require__(121);
var startupCodeAST = void 0;

var plugin = module.exports = {
	name: 'lang-python',
	skulpty: skulpty,
	parser: parser,
	init: function init(esper) {
		esper.languages.python = plugin;
		startupCodeAST = esper.languages.javascript.esprima.parse(startupCode);
	},
	startupCode: function startupCode() {
		return startupCodeAST;
	}
};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

var fs = __webpack_require__(112);
var path = __webpack_require__(113);

var str = void 0;

if (fs.readFileSync) str = fs.readFileSync(path.join(__dirname, 'node_modules', 'skulpty', 'lib', 'stdlib.js'), 'utf8');else str = __webpack_require__(203);

module.exports = str.replace(/^var pythonRuntime = module.exports/, 'var __pythonRuntime');
/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = __webpack_require__(96);

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var esper = __webpack_require__(32);
var Evaluator = __webpack_require__(88);
var Realm = __webpack_require__(89);
var Scope = __webpack_require__(90);
var Value = __webpack_require__(3);
var BridgeValue = __webpack_require__(58);
var ASTPreprocessor = __webpack_require__(43);
var FutureValue = __webpack_require__(44);
var EasyNativeFunction = __webpack_require__(35);
var ClosureValue = __webpack_require__(34);
var SmartLinkValue = __webpack_require__(63);

var defaultOptions = {
	strict: false,
	foreignObjectMode: 'link',
	addInternalStack: false,
	executionLimit: Infinity,
	exposeEsperGlobal: true,
	extraErrorInfo: false,
	addExtraErrorInfoToStacks: false,
	bookmarkInvocationMode: 'error',
	yieldPower: 5,
	debug: false,
	compile: 'pre',
	language: 'javascript'
};

/**
 * Container class for all of esper.
 */

var Engine = function () {
	function Engine(options) {
		(0, _classCallCheck3.default)(this, Engine);

		options = options || {};
		this.options = {};
		for (var k in defaultOptions) {
			if (k in options) this.options[k] = options[k];else this.options[k] = defaultOptions[k];
		}
		this.realm = new Realm(this.options);
		this.evaluator = new Evaluator(this.realm, null, this.globalScope);
		if (this.options.debug) {
			this.evaluator.debug = true;
		}

		this.evaluator.defaultYieldPower = this.options.yieldPower;
		this.evaluator.yieldPower = this.options.yieldPower;

		if (this.language.startupCode) {
			this.loadLangaugeStartupCode();
		}
	}

	(0, _createClass3.default)(Engine, [{
		key: 'loadLangaugeStartupCode',
		value: function loadLangaugeStartupCode() {
			var past = this.preprocessAST(this.language.startupCode(), {});
			var stdlib_eval = new Evaluator(this.realm, null, this.globalScope);
			stdlib_eval.frames = [];
			stdlib_eval.pushAST(past, this.globalScope);
			stdlib_eval.ast = past;

			var gen = stdlib_eval.generator();
			var val = gen.next();
			while (!val.done) {
				val = gen.next();
			}
		}
	}, {
		key: 'eval',


		/**
   * Evalute `code` and return a promise for the result.
   *
   * @access public
   * @param {string} code - String of code to evaluate
   * @return {Promise<Value>} - The result of execution, as a promise.
   */
		value: function _eval(code) {
			var ast = this.realm.parser(code);
			return this.evalAST(ast, { source: code });
		}

		/**
   * Evalute `code` and return a the result.
   *
   * @access public
   * @param {string} code - String of code to evaluate
   * @return {Value} - The result of execution
   */

	}, {
		key: 'evalSync',
		value: function evalSync(code) {
			var ast = this.realm.parser(code);
			return this.evalASTSync(ast, { source: code });
		}

		/**
   * Evalute `ast` and return a promise for the result.
   *
   * @access public
   * @param {Node} ast - ESTree AST representing the code to run.
   * @param {string} codeRef - The code that was used to generate the AST.
   * @return {Value} - The result of execution, as a promise.
   */

	}, {
		key: 'evalAST',
		value: function evalAST(ast, opts) {
			var _this = this;

			//console.log(escodegen.generate(ast));
			this.loadAST(ast, opts);
			var p = this.run();
			p.then(function () {
				return delete _this.generator;
			});
			return p;
		}
	}, {
		key: 'evalASTSync',
		value: function evalASTSync(ast, opts) {
			this.loadAST(ast, opts);
			var value = this.runSync();
			delete this.generator;
			return value;
		}
	}, {
		key: 'preprocessAST',
		value: function preprocessAST(ast, opts) {
			opts = opts || {};
			opts.compile = this.options.compile;
			var past = ASTPreprocessor.process(ast, opts);
			return past;
		}
	}, {
		key: 'loadAST',
		value: function loadAST(ast, opts) {
			var past = this.preprocessAST(ast, opts);
			this.evaluator.frames = [];
			this.evaluator.pushAST(past, this.globalScope);
			this.evaluator.ast = past;
			this.generator = this.evaluator.generator();
		}
	}, {
		key: 'load',
		value: function load(code) {
			var ast = this.realm.parser(code);
			this.loadAST(ast, { source: code });
		}
	}, {
		key: 'step',
		value: function step() {
			if (!this.generator) throw new Error('No code loaded to step');
			var value = this.generator.next();
			return value.done;
		}
	}, {
		key: 'run',
		value: function run() {
			var that = this;
			var steps = 0;
			function handler(value) {
				while (!value.done) {
					value = that.generator.next();
					if (value.value && value.value.then) {
						return value.value.then(function (v) {
							return { done: false, value: v };
						});
					}
					if (++steps > that.options.executionLimit) throw new Error('Execution Limit Reached');
				}
				that.generator = undefined;
				return value;
			}
			return new _promise2.default(function (resolve, reject) {
				try {
					var value = that.generator.next();
					resolve(value);
				} catch (e) {
					reject(e);
				}
			}).then(handler).then(function (v) {
				return v.value;
			});
		}
	}, {
		key: 'runSync',
		value: function runSync() {
			var steps = 0;
			var value = this.generator.next();
			while (!value.done) {
				value = this.generator.next();
				if (value.value && value.value.then) throw new Error('Can\'t deal with futures when running in sync mode');
				if (++steps > this.options.executionLimit) throw new Error('Execution Limit Reached');
			}
			return value.value;
		}

		/**
   * Refrence to the global scope.
   * @return {Scope}
   */

	}, {
		key: 'addGlobal',
		value: function addGlobal(name, what, opts) {
			opts = opts || {};
			if (!(what instanceof Value)) what = this.realm.makeForForeignObject(what);
			if (!opts.const) this.globalScope.add(name, what);else this.globalScope.addConst(name, what);
		}
	}, {
		key: 'addGlobalFx',
		value: function addGlobalFx(name, what, opts) {
			var x = EasyNativeFunction.makeForNative(this.realm, what);
			x.makeThisForNew = _regenerator2.default.mark(function _callee(realm) {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.abrupt('return', Value.null);

							case 1:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			});
			this.addGlobal(name, x, opts);
		}
	}, {
		key: 'addGlobalValue',
		value: function addGlobalValue(name, what, opts) {
			this.addGlobal(name, Value.fromNative(what, this.realm), opts);
		}
	}, {
		key: 'addGlobalBridge',
		value: function addGlobalBridge(name, what, opts) {
			this.addGlobal(name, new BridgeValue(what, this.realm), opts);
		}
	}, {
		key: 'fetchFunctionSync',
		value: function fetchFunctionSync(name, shouldYield) {
			var genfx = this.fetchFunction(name, shouldYield);
			return function () {
				var gen = genfx.apply(this, arguments);
				var val = gen.next();
				//TODO: Make sure we dont await as it will loop FOREVER.
				while (!val.done) {
					val = gen.next();
				}return val.value;
			};
		}
	}, {
		key: 'fetchFunction',
		value: function fetchFunction(name, shouldYield) {
			var val = this.globalScope.get(name);
			return this.makeFunctionFromClosure(val, shouldYield);
		}
	}, {
		key: 'functionFromSource',
		value: function functionFromSource(source, shouldYield) {
			var code = source;
			var ast = this.realm.parser(code, { inFunctionBody: true });
			return this.functionFromAST(ast, shouldYield, source);
		}
	}, {
		key: 'functionFromAST',
		value: function functionFromAST(ast, shouldYield, source) {
			if (ast.type === 'Program') ast = ast.body;
			if (Array.isArray(ast)) ast = { type: 'BlockStatement', body: ast };
			if (ast.type !== 'BlockStatement') ast = { type: 'BlockStatement', body: [ast] };

			var past = {
				type: 'FunctionExpression',
				body: ast,
				params: []
			};
			past = ASTPreprocessor.process(past, { source: source });
			var fx = new ClosureValue(past, this.globalScope);
			return this.makeFunctionFromClosure(fx, shouldYield, this.evaluator);
		}
	}, {
		key: 'functionFromSourceSync',
		value: function functionFromSourceSync(source, shouldYield) {
			var genfx = this.functionFromSource(source, shouldYield);
			return function () {
				var gen = genfx.apply(this, arguments);
				var val = gen.next();
				//TODO: Make sure we dont await as it will loop FOREVER.
				while (!val.done) {
					val = gen.next();
				}return val.value;
			};
		}
	}, {
		key: 'functionFromASTSync',
		value: function functionFromASTSync(ast, shouldYield, source) {
			var genfx = this.functionFromAST(ast, shouldYield, source);
			return function () {
				var gen = genfx.apply(this, arguments);
				var val = gen.next();
				//TODO: Make sure we dont await as it will loop FOREVER.
				while (!val.done) {
					val = gen.next();
				}return val.value;
			};
		}
	}, {
		key: 'makeFunctionFromClosure',
		value: function makeFunctionFromClosure(val, shouldYield, evalu) {

			var realm = this.realm;
			var scope = this.globalScope;
			var that = this;
			var evaluator = evalu || this.evaluator;
			if (!evaluator) throw new Error("Evaluator is falsey");
			if (!val) return;

			return _regenerator2.default.mark(function _callee2() {
				var realThis,
				    realArgs,
				    i,
				    c,
				    gen,
				    last,
				    _args2 = arguments;
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								realThis = realm.makeForForeignObject(this);
								realArgs = new Array(_args2.length);

								for (i = 0; i < _args2.length; ++i) {
									realArgs[i] = realm.makeForForeignObject(_args2[i]);
								}

								if (val.isCallable) {
									_context2.next = 5;
									break;
								}

								throw new TypeError(val.debugStr + ' is not a function.');

							case 5:
								c = val.call(realThis, realArgs, scope);

								evaluator.pushFrame({ type: 'program', generator: c, scope: scope });
								gen = evaluator.generator();
								return _context2.delegateYield(that.filterGenerator(gen, shouldYield, evaluator), 't0', 9);

							case 9:
								last = _context2.t0;

								if (!last) {
									_context2.next = 12;
									break;
								}

								return _context2.abrupt('return', last.toNative());

							case 12:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this);
			});
		}

		/**
   * Returns a new engine that executes in the same Realm.  Useful
   * for creating threads / coroutines
   * @return {Engine}
   */

	}, {
		key: 'fork',
		value: function fork() {
			var engine = new Engine(this.options);
			var scope = this.globalScope;

			engine.realm = this.realm;

			engine.evaluator = this.makeEvaluatorClone();
			return engine;
		}
	}, {
		key: 'makeEvaluatorClone',
		value: function makeEvaluatorClone() {
			var evaluator = new Evaluator(this.realm, this.evaluator.ast, this.globalScope);
			evaluator.frames = [];
			if (this.evaluator.insturment) {
				evaluator.insturment = this.evaluator.insturment;
			}
			if (this.evaluator.debug) {
				evaluator.debug = true;
			}

			if (SmartLinkValue.isThreadPrivileged(this.evaluator)) {
				SmartLinkValue.makeThreadPrivileged(evaluator);
			}

			return evaluator;
		}
	}, {
		key: 'filterGenerator',
		value: _regenerator2.default.mark(function filterGenerator(gen, shouldYield, evaluator) {
			var value, steps, yieldValue;
			return _regenerator2.default.wrap(function filterGenerator$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							value = gen.next();
							steps = 0;

							if (evaluator) {
								_context3.next = 4;
								break;
							}

							throw new Error("Evaluator is falsey");

						case 4:
							if (value.done) {
								_context3.next = 25;
								break;
							}

							if (shouldYield) {
								_context3.next = 10;
								break;
							}

							_context3.next = 8;
							return;

						case 8:
							_context3.next = 20;
							break;

						case 10:
							if (!(evaluator.topFrame.type == 'await')) {
								_context3.next = 16;
								break;
							}

							if (value.value.resolved) {
								_context3.next = 14;
								break;
							}

							_context3.next = 14;
							return;

						case 14:
							_context3.next = 20;
							break;

						case 16:
							yieldValue = shouldYield(this, evaluator, value.value);

							if (!(yieldValue !== false)) {
								_context3.next = 20;
								break;
							}

							_context3.next = 20;
							return yieldValue;

						case 20:
							value = gen.next(value.value);

							if (!(++steps > this.options.executionLimit)) {
								_context3.next = 23;
								break;
							}

							throw new Error('Execution Limit Reached');

						case 23:
							_context3.next = 4;
							break;

						case 25:
							return _context3.abrupt('return', value.value);

						case 26:
						case 'end':
							return _context3.stop();
					}
				}
			}, filterGenerator, this);
		})
	}, {
		key: 'language',
		get: function get() {
			if (!(this.options.language in esper.languages)) {
				throw new Error('Unknown language ' + this.options.language + '. Load the lang-' + this.options.language + ' plugin?');
			}
			return esper.languages[this.options.language];
		}
	}, {
		key: 'globalScope',
		get: function get() {
			return this.realm.globalScope;
		}
	}]);
	return Engine;
}();

module.exports = Engine;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [evaluateArrayExpression, evaluateAssignmentExpression, evaluateBinaryExpression, evaluateBlockStatement, evaluateBreakStatement, evaluateCallExpression, evaluateClassExpression, evaluateClassDeclaration, evaluateConditionalExpression, evaluateContinueStatement, evaluateDoWhileStatement, evaluateEmptyStatement, evaluateExpressionStatement, evaluateIdentifier, evaluateIfStatement, genForLoop, evaluateForStatement, evaluateForInStatement, evaluateForOfStatement, evaluateFunctionDeclaration, evaluateFunctionExpression, evaluateLabeledStatement, evaluateLiteral, evaluateLogicalExpression, evaluateMemberExpression, evaluateObjectExpression, evaluateProgram, evaluateReturnStatement, evaluateSequenceExpression, evaluateSwitchStatement, evaluateThisExpression, evaluateThrowStatement, evaluateTryStatement, evaluateUpdateExpression, evaluateUnaryExpression, evaluateVariableDeclaration, genWhileLoop, evaluateWhileStatement, evaluateWithStatement].map(_regenerator2.default.mark);

var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);
var ClosureValue = __webpack_require__(34);
var ObjectValue = __webpack_require__(9);
var FutureValue = __webpack_require__(44);
var RegExpValue = __webpack_require__(62);
var PropertyDescriptor = __webpack_require__(15);
var ErrorValue = __webpack_require__(59);
var ArrayValue = __webpack_require__(14);
var EvaluatorInstruction = __webpack_require__(27);

function evaluateArrayExpression(e, n, s) {
	var result, i;
	return _regenerator2.default.wrap(function evaluateArrayExpression$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					//let result = new ObjectValue();
					result = new Array(n.elements.length);
					i = 0;

				case 2:
					if (!(i < n.elements.length)) {
						_context.next = 9;
						break;
					}

					if (!n.elements[i]) {
						_context.next = 6;
						break;
					}

					return _context.delegateYield(e.branch(n.elements[i], s), 't0', 5);

				case 5:
					result[i] = _context.t0;

				case 6:
					++i;
					_context.next = 2;
					break;

				case 9:
					if (!(e.yieldPower >= 3)) {
						_context.next = 12;
						break;
					}

					_context.next = 12;
					return EvaluatorInstruction.stepMinor;

				case 12:
					return _context.abrupt('return', ArrayValue.make(result, e.realm));

				case 13:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked[0], this);
}

function evaluateAssignmentExpression(e, n, s) {
	var realm, ref, argument, value, cur;
	return _regenerator2.default.wrap(function evaluateAssignmentExpression$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					//TODO: Account for not-strict mode
					realm = s.realm;
					return _context2.delegateYield(e.resolveRef(n.left, s, n.operator === '='), 't0', 2);

				case 2:
					ref = _context2.t0;

					if (!(!ref && s.strict)) {
						_context2.next = 5;
						break;
					}

					return _context2.abrupt('return', CompletionRecord.makeReferenceError(s.realm, 'Invalid refrence in assignment.'));

				case 5:
					return _context2.delegateYield(e.branch(n.right, s), 't1', 6);

				case 6:
					argument = _context2.t1;
					value = void 0;
					cur = void 0;

					if (!(e.yieldPower >= 3)) {
						_context2.next = 12;
						break;
					}

					_context2.next = 12;
					return EvaluatorInstruction.stepMinor;

				case 12:
					_context2.t2 = n.operator;
					_context2.next = _context2.t2 === '=' ? 15 : _context2.t2 === '+=' ? 17 : _context2.t2 === '-=' ? 22 : _context2.t2 === '*=' ? 27 : _context2.t2 === '/=' ? 32 : _context2.t2 === '%=' ? 37 : _context2.t2 === '<<=' ? 42 : _context2.t2 === '>>=' ? 47 : _context2.t2 === '>>>=' ? 52 : _context2.t2 === '|=' ? 57 : _context2.t2 === '&=' ? 62 : _context2.t2 === '^=' ? 67 : 72;
					break;

				case 15:
					value = argument;
					return _context2.abrupt('break', 73);

				case 17:
					return _context2.delegateYield(ref.getValue(), 't3', 18);

				case 18:
					cur = _context2.t3;
					return _context2.delegateYield(cur.add(argument, realm), 't4', 20);

				case 20:
					value = _context2.t4;
					return _context2.abrupt('break', 73);

				case 22:
					return _context2.delegateYield(ref.getValue(), 't5', 23);

				case 23:
					cur = _context2.t5;
					return _context2.delegateYield(cur.subtract(argument, realm), 't6', 25);

				case 25:
					value = _context2.t6;
					return _context2.abrupt('break', 73);

				case 27:
					return _context2.delegateYield(ref.getValue(), 't7', 28);

				case 28:
					cur = _context2.t7;
					return _context2.delegateYield(cur.multiply(argument, realm), 't8', 30);

				case 30:
					value = _context2.t8;
					return _context2.abrupt('break', 73);

				case 32:
					return _context2.delegateYield(ref.getValue(), 't9', 33);

				case 33:
					cur = _context2.t9;
					return _context2.delegateYield(cur.divide(argument, realm), 't10', 35);

				case 35:
					value = _context2.t10;
					return _context2.abrupt('break', 73);

				case 37:
					return _context2.delegateYield(ref.getValue(), 't11', 38);

				case 38:
					cur = _context2.t11;
					return _context2.delegateYield(cur.mod(argument, realm), 't12', 40);

				case 40:
					value = _context2.t12;
					return _context2.abrupt('break', 73);

				case 42:
					return _context2.delegateYield(ref.getValue(), 't13', 43);

				case 43:
					cur = _context2.t13;
					return _context2.delegateYield(cur.shiftLeft(argument, realm), 't14', 45);

				case 45:
					value = _context2.t14;
					return _context2.abrupt('break', 73);

				case 47:
					return _context2.delegateYield(ref.getValue(), 't15', 48);

				case 48:
					cur = _context2.t15;
					return _context2.delegateYield(cur.shiftRight(argument, realm), 't16', 50);

				case 50:
					value = _context2.t16;
					return _context2.abrupt('break', 73);

				case 52:
					return _context2.delegateYield(ref.getValue(), 't17', 53);

				case 53:
					cur = _context2.t17;
					return _context2.delegateYield(cur.shiftRightZF(argument, realm), 't18', 55);

				case 55:
					value = _context2.t18;
					return _context2.abrupt('break', 73);

				case 57:
					return _context2.delegateYield(ref.getValue(), 't19', 58);

				case 58:
					cur = _context2.t19;
					return _context2.delegateYield(cur.bitOr(argument, realm), 't20', 60);

				case 60:
					value = _context2.t20;
					return _context2.abrupt('break', 73);

				case 62:
					return _context2.delegateYield(ref.getValue(), 't21', 63);

				case 63:
					cur = _context2.t21;
					return _context2.delegateYield(cur.bitAnd(argument, realm), 't22', 65);

				case 65:
					value = _context2.t22;
					return _context2.abrupt('break', 73);

				case 67:
					return _context2.delegateYield(ref.getValue(), 't23', 68);

				case 68:
					cur = _context2.t23;
					return _context2.delegateYield(cur.bitXor(argument, realm), 't24', 70);

				case 70:
					value = _context2.t24;
					return _context2.abrupt('break', 73);

				case 72:
					throw new Error('Unknown assignment operator: ' + n.operator);

				case 73:
					if (!ref) {
						_context2.next = 77;
						break;
					}

					return _context2.delegateYield(ref.setValue(value, s), 't25', 75);

				case 75:
					_context2.next = 78;
					break;

				case 77:
					return _context2.delegateYield(s.put(n.left.name, value, s), 't26', 78);

				case 78:
					return _context2.abrupt('return', value);

				case 79:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked[1], this);
}

function evaluateBinaryExpression(e, n, s) {
	var left, right;
	return _regenerator2.default.wrap(function evaluateBinaryExpression$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					return _context3.delegateYield(e.branch(n.left, s), 't0', 1);

				case 1:
					left = _context3.t0;
					return _context3.delegateYield(e.branch(n.right, s), 't1', 3);

				case 3:
					right = _context3.t1;

					if (!(e.yieldPower >= 4)) {
						_context3.next = 7;
						break;
					}

					_context3.next = 7;
					return EvaluatorInstruction.stepMinor;

				case 7:
					return _context3.delegateYield(e.doBinaryEvaluation(n.operator, left, right, s), 't2', 8);

				case 8:
					return _context3.abrupt('return', _context3.t2);

				case 9:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked[2], this);
}

function evaluateBlockStatement(e, n, s) {
	var result, _iterator, _isArray, _i, _ref, statement;

	return _regenerator2.default.wrap(function evaluateBlockStatement$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					result = Value.undef;
					_iterator = n.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

				case 2:
					if (!_isArray) {
						_context4.next = 8;
						break;
					}

					if (!(_i >= _iterator.length)) {
						_context4.next = 5;
						break;
					}

					return _context4.abrupt('break', 17);

				case 5:
					_ref = _iterator[_i++];
					_context4.next = 12;
					break;

				case 8:
					_i = _iterator.next();

					if (!_i.done) {
						_context4.next = 11;
						break;
					}

					return _context4.abrupt('break', 17);

				case 11:
					_ref = _i.value;

				case 12:
					statement = _ref;
					return _context4.delegateYield(e.branch(statement, s), 't0', 14);

				case 14:
					result = _context4.t0;

				case 15:
					_context4.next = 2;
					break;

				case 17:
					return _context4.abrupt('return', result);

				case 18:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked[3], this);
}

function evaluateBreakStatement(e, n, s) {
	var label;
	return _regenerator2.default.wrap(function evaluateBreakStatement$(_context5) {
		while (1) {
			switch (_context5.prev = _context5.next) {
				case 0:
					label = n.label ? n.label.name : undefined;

					if (!(e.yieldPower >= 1)) {
						_context5.next = 4;
						break;
					}

					_context5.next = 4;
					return EvaluatorInstruction.stepMinor;

				case 4:
					return _context5.abrupt('return', new CompletionRecord(CompletionRecord.BREAK, Value.undef, label));

				case 5:
				case 'end':
					return _context5.stop();
			}
		}
	}, _marked[4], this);
}

function evaluateCallExpression(e, n, s) {
	var thiz, callee, base, args, i, name, err, callResult, result;
	return _regenerator2.default.wrap(function evaluateCallExpression$(_context6) {
		while (1) {
			switch (_context6.prev = _context6.next) {
				case 0:
					thiz = Value.undef;
					callee = void 0, base = void 0;

					if (!(n.callee.type === 'MemberExpression')) {
						_context6.next = 13;
						break;
					}

					return _context6.delegateYield(e.branch(n.callee.object, s), 't0', 4);

				case 4:
					thiz = base = _context6.t0;
					return _context6.delegateYield(e.partialMemberExpression(thiz, n.callee, s), 't1', 6);

				case 6:
					callee = _context6.t1;

					if (!(callee instanceof CompletionRecord)) {
						_context6.next = 11;
						break;
					}

					if (!(callee.type == CompletionRecord.THROW)) {
						_context6.next = 10;
						break;
					}

					return _context6.abrupt('return', callee);

				case 10:
					callee = callee.value;

				case 11:
					_context6.next = 15;
					break;

				case 13:
					return _context6.delegateYield(e.branch(n.callee, s), 't2', 14);

				case 14:
					callee = _context6.t2;

				case 15:
					if (!(n.type === 'NewExpression')) {
						_context6.next = 22;
						break;
					}

					return _context6.delegateYield(callee.makeThisForNew(s.realm), 't3', 17);

				case 17:
					thiz = _context6.t3;

					if (!(thiz instanceof CompletionRecord)) {
						_context6.next = 22;
						break;
					}

					if (!(thiz.type == CompletionRecord.THROW)) {
						_context6.next = 21;
						break;
					}

					return _context6.abrupt('return', thiz);

				case 21:
					thiz = thiz.value;

				case 22:
					if (!(typeof callee.rawCall === 'function')) {
						_context6.next = 25;
						break;
					}

					return _context6.delegateYield(callee.rawCall(n, e, s), 't4', 24);

				case 24:
					return _context6.abrupt('return', _context6.t4);

				case 25:

					//console.log("Calling", callee, callee.call);

					args = new Array(n.arguments.length);
					i = 0;

				case 27:
					if (!(i < n.arguments.length)) {
						_context6.next = 33;
						break;
					}

					return _context6.delegateYield(e.branch(n.arguments[i], s), 't5', 29);

				case 29:
					args[i] = _context6.t5;

				case 30:
					++i;
					_context6.next = 27;
					break;

				case 33:
					name = n.callee.srcName || callee.jsTypeName;

					if (!(e.yieldPower >= 1)) {
						_context6.next = 37;
						break;
					}

					_context6.next = 37;
					return EvaluatorInstruction.stepMajor;

				case 37:
					if (callee.isCallable) {
						_context6.next = 41;
						break;
					}

					err = CompletionRecord.makeTypeError(e.realm, '' + name + ' is not a function');
					return _context6.delegateYield(err.addExtra({
						code: 'CallNonFunction',
						target: callee,
						targetAst: n.callee,
						targetName: name,
						base: base
					}), 't6', 40);

				case 40:
					return _context6.abrupt('return', err);

				case 41:

					if (e.debug) {
						e.incrCtr('fxInvocationCount', n.callee.srcName);
					}

					callResult = callee.call(thiz, args, s, {
						asConstructor: n.type === 'NewExpression',
						callNode: n,
						evaluator: e
					});

					if (!(callResult instanceof CompletionRecord)) {
						_context6.next = 45;
						break;
					}

					return _context6.abrupt('return', callResult);

				case 45:
					if (!(typeof callResult.next !== 'function')) {
						_context6.next = 48;
						break;
					}

					console.log('Generator Failure', callResult);
					return _context6.abrupt('return', CompletionRecord.makeTypeError(e.realm, '' + name + ' didnt make a generator'));

				case 48:
					return _context6.delegateYield(callResult, 't7', 49);

				case 49:
					result = _context6.t7;

					if (!(n.type === 'NewExpression')) {
						_context6.next = 58;
						break;
					}

					if (!(result instanceof Value)) {
						_context6.next = 55;
						break;
					}

					if (!(result.specTypeName === 'undefined')) {
						_context6.next = 54;
						break;
					}

					return _context6.abrupt('return', thiz);

				case 54:
					return _context6.abrupt('return', result);

				case 55:
					return _context6.abrupt('return', thiz);

				case 58:
					return _context6.abrupt('return', result);

				case 59:
				case 'end':
					return _context6.stop();
			}
		}
	}, _marked[5], this);
}

function evaluateClassExpression(e, n, s) {
	var _this = this;

	var clazz, proto, _loop, _iterator2, _isArray2, _i2, _ref2, _ret;

	return _regenerator2.default.wrap(function evaluateClassExpression$(_context10) {
		while (1) {
			switch (_context10.prev = _context10.next) {
				case 0:
					clazz = new ObjectValue(e.realm);

					clazz.call = _regenerator2.default.mark(function _callee() {
						return _regenerator2.default.wrap(function _callee$(_context7) {
							while (1) {
								switch (_context7.prev = _context7.next) {
									case 0:
										return _context7.abrupt('return', Value.undef);

									case 1:
									case 'end':
										return _context7.stop();
								}
							}
						}, _callee, this);
					});

					proto = new ObjectValue(e.realm);
					return _context10.delegateYield(clazz.set('prototype', proto), 't0', 4);

				case 4:
					return _context10.delegateYield(proto.set('constructor', clazz), 't1', 5);

				case 5:
					if (!(e.yieldPower >= 3)) {
						_context10.next = 8;
						break;
					}

					_context10.next = 8;
					return EvaluatorInstruction.stepMinor;

				case 8:
					_loop = _regenerator2.default.mark(function _loop() {
						var m, fx, ks, k;
						return _regenerator2.default.wrap(function _loop$(_context9) {
							while (1) {
								switch (_context9.prev = _context9.next) {
									case 0:
										if (!_isArray2) {
											_context9.next = 6;
											break;
										}

										if (!(_i2 >= _iterator2.length)) {
											_context9.next = 3;
											break;
										}

										return _context9.abrupt('return', 'break');

									case 3:
										_ref2 = _iterator2[_i2++];
										_context9.next = 10;
										break;

									case 6:
										_i2 = _iterator2.next();

										if (!_i2.done) {
											_context9.next = 9;
											break;
										}

										return _context9.abrupt('return', 'break');

									case 9:
										_ref2 = _i2.value;

									case 10:
										m = _ref2;
										return _context9.delegateYield(e.branch(m.value, s), 't0', 12);

									case 12:
										fx = _context9.t0;

										if (!(m.kind == 'constructor')) {
											_context9.next = 17;
											break;
										}

										clazz.call = _regenerator2.default.mark(function _callee2(thiz, args, s) {
											return _regenerator2.default.wrap(function _callee2$(_context8) {
												while (1) {
													switch (_context8.prev = _context8.next) {
														case 0:
															return _context8.delegateYield(fx.call(thiz, args, s), 't0', 1);

														case 1:
															return _context8.abrupt('return', _context8.t0);

														case 2:
														case 'end':
															return _context8.stop();
													}
												}
											}, _callee2, this);
										});

										_context9.next = 27;
										break;

									case 17:
										ks = void 0;

										if (!m.computed) {
											_context9.next = 25;
											break;
										}

										return _context9.delegateYield(e.branch(m.key, s), 't1', 20);

									case 20:
										k = _context9.t1;
										return _context9.delegateYield(k.toStringNative(e.realm), 't2', 22);

									case 22:
										ks = _context9.t2;
										_context9.next = 26;
										break;

									case 25:
										ks = m.key.name;

									case 26:

										if (m.static) clazz.setImmediate(ks, fx);else proto.setImmediate(ks, fx);

									case 27:
									case 'end':
										return _context9.stop();
								}
							}
						}, _loop, _this);
					});
					_iterator2 = n.body.body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

				case 10:
					return _context10.delegateYield(_loop(), 't2', 11);

				case 11:
					_ret = _context10.t2;

					if (!(_ret === 'break')) {
						_context10.next = 14;
						break;
					}

					return _context10.abrupt('break', 16);

				case 14:
					_context10.next = 10;
					break;

				case 16:
					return _context10.abrupt('return', clazz);

				case 17:
				case 'end':
					return _context10.stop();
			}
		}
	}, _marked[6], this);
}

function evaluateClassDeclaration(e, n, s) {
	var clazz;
	return _regenerator2.default.wrap(function evaluateClassDeclaration$(_context11) {
		while (1) {
			switch (_context11.prev = _context11.next) {
				case 0:
					return _context11.delegateYield(evaluateClassExpression(e, n, s), 't0', 1);

				case 1:
					clazz = _context11.t0;
					return _context11.delegateYield(s.put(n.id.name, clazz), 't1', 3);

				case 3:
					return _context11.abrupt('return', clazz);

				case 4:
				case 'end':
					return _context11.stop();
			}
		}
	}, _marked[7], this);
}

function evaluateConditionalExpression(e, n, s) {
	var test;
	return _regenerator2.default.wrap(function evaluateConditionalExpression$(_context12) {
		while (1) {
			switch (_context12.prev = _context12.next) {
				case 0:
					return _context12.delegateYield(e.branch(n.test, s), 't0', 1);

				case 1:
					test = _context12.t0;

					if (!(e.yieldPower >= 4)) {
						_context12.next = 5;
						break;
					}

					_context12.next = 5;
					return EvaluatorInstruction.stepMinor;

				case 5:
					if (!test.truthy) {
						_context12.next = 10;
						break;
					}

					return _context12.delegateYield(e.branch(n.consequent, s), 't1', 7);

				case 7:
					return _context12.abrupt('return', _context12.t1);

				case 10:
					if (!n.alternate) {
						_context12.next = 13;
						break;
					}

					return _context12.delegateYield(e.branch(n.alternate, s), 't2', 12);

				case 12:
					return _context12.abrupt('return', _context12.t2);

				case 13:
					return _context12.abrupt('return', Value.undef);

				case 14:
				case 'end':
					return _context12.stop();
			}
		}
	}, _marked[8], this);
}

function evaluateContinueStatement(e, n, s) {
	var label, val;
	return _regenerator2.default.wrap(function evaluateContinueStatement$(_context13) {
		while (1) {
			switch (_context13.prev = _context13.next) {
				case 0:
					label = n.label ? n.label.name : undefined;
					val = new CompletionRecord(CompletionRecord.CONTINUE, Value.undef, label);

					if (!(e.yieldPower >= 1)) {
						_context13.next = 5;
						break;
					}

					_context13.next = 5;
					return EvaluatorInstruction.stepMinor;

				case 5:
					return _context13.abrupt('return', val);

				case 6:
				case 'end':
					return _context13.stop();
			}
		}
	}, _marked[9], this);
}

function evaluateDoWhileStatement(e, n, s) {
	var last, that, gen, finished;
	return _regenerator2.default.wrap(function evaluateDoWhileStatement$(_context15) {
		while (1) {
			switch (_context15.prev = _context15.next) {
				case 0:
					last = Value.undef;
					that = e;
					gen = _regenerator2.default.mark(function gen() {
						return _regenerator2.default.wrap(function gen$(_context14) {
							while (1) {
								switch (_context14.prev = _context14.next) {
									case 0:
										_context14.next = 2;
										return that.branchFrame('continue', n.body, s, { label: n.label });

									case 2:
										last = _context14.sent;

									case 3:
										return _context14.delegateYield(that.branch(n.test, s), 't0', 4);

									case 4:
										if (_context14.t0.truthy) {
											_context14.next = 0;
											break;
										}

									case 5:
									case 'end':
										return _context14.stop();
								}
							}
						}, gen, this);
					});

					if (!(e.yieldPower > 0)) {
						_context15.next = 6;
						break;
					}

					_context15.next = 6;
					return EvaluatorInstruction.stepMinor;

				case 6:
					e.pushFrame({ generator: gen(), type: 'loop', label: n.label, ast: n });

					_context15.next = 9;
					return EvaluatorInstruction.waitForFramePop;

				case 9:
					finished = _context15.sent;
					return _context15.abrupt('return', Value.undef);

				case 11:
				case 'end':
					return _context15.stop();
			}
		}
	}, _marked[10], this);
}

function evaluateEmptyStatement(e, n, s) {
	return _regenerator2.default.wrap(function evaluateEmptyStatement$(_context16) {
		while (1) {
			switch (_context16.prev = _context16.next) {
				case 0:
					if (!(e.yieldPower >= 5)) {
						_context16.next = 3;
						break;
					}

					_context16.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					return _context16.abrupt('return', Value.undef);

				case 4:
				case 'end':
					return _context16.stop();
			}
		}
	}, _marked[11], this);
}

function evaluateExpressionStatement(e, n, s) {
	return _regenerator2.default.wrap(function evaluateExpressionStatement$(_context17) {
		while (1) {
			switch (_context17.prev = _context17.next) {
				case 0:
					if (!(e.yieldPower > 4)) {
						_context17.next = 3;
						break;
					}

					_context17.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					return _context17.delegateYield(e.branch(n.expression, s), 't0', 4);

				case 4:
					return _context17.abrupt('return', _context17.t0);

				case 5:
				case 'end':
					return _context17.stop();
			}
		}
	}, _marked[12], this);
}

function evaluateIdentifier(e, n, s) {
	var err;
	return _regenerator2.default.wrap(function evaluateIdentifier$(_context18) {
		while (1) {
			switch (_context18.prev = _context18.next) {
				case 0:
					if (!(e.yieldPower >= 4)) {
						_context18.next = 3;
						break;
					}

					_context18.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					if (!(n.name === 'undefined')) {
						_context18.next = 5;
						break;
					}

					return _context18.abrupt('return', Value.undef);

				case 5:
					if (s.has(n.name)) {
						_context18.next = 13;
						break;
					}

					if (true) {
						_context18.next = 8;
						break;
					}

					return _context18.abrupt('return', Value.undef);

				case 8:
					err = CompletionRecord.makeReferenceError(e.realm, n.name + ' is not defined');
					return _context18.delegateYield(err.addExtra({ code: 'UndefinedVariable', when: 'read', ident: n.name, strict: s.strict }), 't0', 10);

				case 10:
					_context18.next = 12;
					return err;

				case 12:
					return _context18.abrupt('return', _context18.sent);

				case 13:
					return _context18.abrupt('return', s.get(n.name));

				case 14:
				case 'end':
					return _context18.stop();
			}
		}
	}, _marked[13], this);
}

function evaluateIfStatement(e, n, s) {
	var test;
	return _regenerator2.default.wrap(function evaluateIfStatement$(_context19) {
		while (1) {
			switch (_context19.prev = _context19.next) {
				case 0:
					if (!(e.yieldPower >= 2)) {
						_context19.next = 3;
						break;
					}

					_context19.next = 3;
					return EvaluatorInstruction.stepStatement;

				case 3:
					return _context19.delegateYield(e.branch(n.test, s), 't0', 4);

				case 4:
					test = _context19.t0;

					if (!test.truthy) {
						_context19.next = 10;
						break;
					}

					return _context19.delegateYield(e.branch(n.consequent, s), 't1', 7);

				case 7:
					return _context19.abrupt('return', _context19.t1);

				case 10:
					if (!n.alternate) {
						_context19.next = 13;
						break;
					}

					return _context19.delegateYield(e.branch(n.alternate, s), 't2', 12);

				case 12:
					return _context19.abrupt('return', _context19.t2);

				case 13:
					return _context19.abrupt('return', Value.undef);

				case 14:
				case 'end':
					return _context19.stop();
			}
		}
	}, _marked[14], this);
}

function genForLoop(e, n, s) {
	var test, last;
	return _regenerator2.default.wrap(function genForLoop$(_context20) {
		while (1) {
			switch (_context20.prev = _context20.next) {
				case 0:
					test = Value.true;

					if (!n.test) {
						_context20.next = 4;
						break;
					}

					return _context20.delegateYield(e.branch(n.test, s), 't0', 3);

				case 3:
					test = _context20.t0;

				case 4:
					last = Value.undef;

				case 5:
					if (!test.truthy) {
						_context20.next = 20;
						break;
					}

					e.topFrame.ast = n;

					if (!(e.yieldPower > 0)) {
						_context20.next = 10;
						break;
					}

					_context20.next = 10;
					return EvaluatorInstruction.eventLoopBodyStart;

				case 10:
					_context20.next = 12;
					return e.branchFrame('continue', n.body, s, { label: n.label });

				case 12:
					last = _context20.sent;

					if (!n.update) {
						_context20.next = 15;
						break;
					}

					return _context20.delegateYield(e.branch(n.update, s), 't1', 15);

				case 15:
					if (!n.test) {
						_context20.next = 18;
						break;
					}

					return _context20.delegateYield(e.branch(n.test, s), 't2', 17);

				case 17:
					test = _context20.t2;

				case 18:
					_context20.next = 5;
					break;

				case 20:
				case 'end':
					return _context20.stop();
			}
		}
	}, _marked[15], this);
};

function evaluateForStatement(e, n, s) {
	var finished;
	return _regenerator2.default.wrap(function evaluateForStatement$(_context21) {
		while (1) {
			switch (_context21.prev = _context21.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context21.next = 3;
						break;
					}

					_context21.next = 3;
					return EvaluatorInstruction.stepStatement;

				case 3:
					if (!n.init) {
						_context21.next = 5;
						break;
					}

					return _context21.delegateYield(e.branch(n.init, s), 't0', 5);

				case 5:

					e.pushFrame({ generator: genForLoop(e, n, s), type: 'loop', label: n.label, ast: n });

					_context21.next = 8;
					return EvaluatorInstruction.waitForFramePop;

				case 8:
					finished = _context21.sent;
					return _context21.abrupt('return', Value.undef);

				case 10:
				case 'end':
					return _context21.stop();
			}
		}
	}, _marked[16], this);
}

function evaluateForInStatement(e, n, s) {
	var last, object, names, that, ref, gen, finished;
	return _regenerator2.default.wrap(function evaluateForInStatement$(_context23) {
		while (1) {
			switch (_context23.prev = _context23.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context23.next = 3;
						break;
					}

					_context23.next = 3;
					return EvaluatorInstruction.stepStatement;

				case 3:
					last = Value.undef;
					return _context23.delegateYield(e.branch(n.right, s), 't0', 5);

				case 5:
					object = _context23.t0;
					names = object.observableProperties(s.realm);
					that = e;
					ref = void 0;


					if (n.left.type === 'VariableDeclaration') {
						s.add(n.left.declarations[0].id.name, Value.undef);
						ref = s.ref(n.left.declarations[0].id.name, s.realm);
					} else {
						ref = s.ref(n.left.name, s.realm);
					}

					if (ref) {
						_context23.next = 12;
						break;
					}

					throw new Error('Couldnt find anything to write to for:' + n.left.name);

				case 12:
					gen = _regenerator2.default.mark(function gen() {
						var _iterator3, _isArray3, _i3, _ref3, name;

						return _regenerator2.default.wrap(function gen$(_context22) {
							while (1) {
								switch (_context22.prev = _context22.next) {
									case 0:
										_iterator3 = names, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

									case 1:
										if (!_isArray3) {
											_context22.next = 7;
											break;
										}

										if (!(_i3 >= _iterator3.length)) {
											_context22.next = 4;
											break;
										}

										return _context22.abrupt('break', 18);

									case 4:
										_ref3 = _iterator3[_i3++];
										_context22.next = 11;
										break;

									case 7:
										_i3 = _iterator3.next();

										if (!_i3.done) {
											_context22.next = 10;
											break;
										}

										return _context22.abrupt('break', 18);

									case 10:
										_ref3 = _i3.value;

									case 11:
										name = _ref3;
										return _context22.delegateYield(ref.setValue(name), 't0', 13);

									case 13:
										_context22.next = 15;
										return that.branchFrame('continue', n.body, s, { label: n.label });

									case 15:
										last = _context22.sent;

									case 16:
										_context22.next = 1;
										break;

									case 18:
									case 'end':
										return _context22.stop();
								}
							}
						}, gen, this);
					});

					e.pushFrame({ generator: gen(), type: 'loop', label: n.label, ast: n });

					_context23.next = 16;
					return EvaluatorInstruction.waitForFramePop;

				case 16:
					finished = _context23.sent;
					return _context23.abrupt('return', Value.undef);

				case 18:
				case 'end':
					return _context23.stop();
			}
		}
	}, _marked[17], this);
}

//TODO: For of does more crazy Symbol iterator stuff
function evaluateForOfStatement(e, n, s) {
	var last, object, names, that, ref, gen, finished;
	return _regenerator2.default.wrap(function evaluateForOfStatement$(_context25) {
		while (1) {
			switch (_context25.prev = _context25.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context25.next = 3;
						break;
					}

					_context25.next = 3;
					return EvaluatorInstruction.stepStatement;

				case 3:
					last = Value.undef;
					return _context25.delegateYield(e.branch(n.right, s), 't0', 5);

				case 5:
					object = _context25.t0;
					names = object.observableProperties(s.realm);
					that = e;
					ref = void 0;

					if (!(n.left.type === 'VariableDeclaration')) {
						_context25.next = 14;
						break;
					}

					return _context25.delegateYield(s.put(n.left.declarations[0].id.name, Value.undef), 't1', 11);

				case 11:
					ref = s.ref(n.left.declarations[0].id.name, s.realm);
					_context25.next = 15;
					break;

				case 14:
					ref = s.ref(n.left.name, s.realm);

				case 15:
					gen = _regenerator2.default.mark(function gen() {
						var _iterator4, _isArray4, _i4, _ref4, name;

						return _regenerator2.default.wrap(function gen$(_context24) {
							while (1) {
								switch (_context24.prev = _context24.next) {
									case 0:
										_iterator4 = names, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

									case 1:
										if (!_isArray4) {
											_context24.next = 7;
											break;
										}

										if (!(_i4 >= _iterator4.length)) {
											_context24.next = 4;
											break;
										}

										return _context24.abrupt('break', 24);

									case 4:
										_ref4 = _iterator4[_i4++];
										_context24.next = 11;
										break;

									case 7:
										_i4 = _iterator4.next();

										if (!_i4.done) {
											_context24.next = 10;
											break;
										}

										return _context24.abrupt('break', 24);

									case 10:
										_ref4 = _i4.value;

									case 11:
										name = _ref4;
										_context24.t0 = ref;
										_context24.t1 = object;
										return _context24.delegateYield(name.toStringNative(), 't2', 15);

									case 15:
										_context24.t3 = _context24.t2;
										return _context24.delegateYield(_context24.t1.get.call(_context24.t1, _context24.t3), 't4', 17);

									case 17:
										_context24.t5 = _context24.t4;
										return _context24.delegateYield(_context24.t0.setValue.call(_context24.t0, _context24.t5), 't6', 19);

									case 19:
										_context24.next = 21;
										return that.branchFrame('continue', n.body, s, { label: n.label });

									case 21:
										last = _context24.sent;

									case 22:
										_context24.next = 1;
										break;

									case 24:
									case 'end':
										return _context24.stop();
								}
							}
						}, gen, this);
					});

					e.pushFrame({ generator: gen(), type: 'loop', label: n.label });

					_context25.next = 19;
					return EvaluatorInstruction.waitForFramePop;

				case 19:
					finished = _context25.sent;
					return _context25.abrupt('return', Value.undef);

				case 21:
				case 'end':
					return _context25.stop();
			}
		}
	}, _marked[18], this);
}

function evaluateFunctionDeclaration(e, n, s) {
	var closure;
	return _regenerator2.default.wrap(function evaluateFunctionDeclaration$(_context26) {
		while (1) {
			switch (_context26.prev = _context26.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context26.next = 3;
						break;
					}

					_context26.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					closure = new ClosureValue(n, s);

					s.add(n.id.name, closure);
					return _context26.abrupt('return', Value.undef);

				case 6:
				case 'end':
					return _context26.stop();
			}
		}
	}, _marked[19], this);
}

function evaluateFunctionExpression(e, n, s) {
	var value;
	return _regenerator2.default.wrap(function evaluateFunctionExpression$(_context27) {
		while (1) {
			switch (_context27.prev = _context27.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context27.next = 3;
						break;
					}

					_context27.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					value = new ClosureValue(n, s);

					if (n.type === 'ArrowFunctionExpression') {
						value.thiz = s.thiz;
						if (n.expression) value.returnLastValue = true;
					}
					return _context27.abrupt('return', value);

				case 6:
				case 'end':
					return _context27.stop();
			}
		}
	}, _marked[20], this);
}

function evaluateLabeledStatement(e, n, s) {
	return _regenerator2.default.wrap(function evaluateLabeledStatement$(_context28) {
		while (1) {
			switch (_context28.prev = _context28.next) {
				case 0:
					if (!(e.yieldPower >= 5)) {
						_context28.next = 3;
						break;
					}

					_context28.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					return _context28.delegateYield(e.branch(n.body, s), 't0', 4);

				case 4:
					return _context28.abrupt('return', _context28.t0);

				case 5:
				case 'end':
					return _context28.stop();
			}
		}
	}, _marked[21], this);
}

function evaluateLiteral(e, n, s) {
	var tryFloat;
	return _regenerator2.default.wrap(function evaluateLiteral$(_context29) {
		while (1) {
			switch (_context29.prev = _context29.next) {
				case 0:
					if (!(e.yieldPower >= 5)) {
						_context29.next = 3;
						break;
					}

					_context29.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					if (!n.regex) {
						_context29.next = 7;
						break;
					}

					return _context29.abrupt('return', RegExpValue.make(new RegExp(n.regex.pattern, n.regex.flags), s.realm));

				case 7:
					if (!(n.value === null)) {
						_context29.next = 16;
						break;
					}

					if (!(e.raw === 'null')) {
						_context29.next = 10;
						break;
					}

					return _context29.abrupt('return', Value.null);

				case 10:

					//Work around Esprima turning Infinity into null. =\
					tryFloat = parseFloat(n.raw);

					if (isNaN(tryFloat)) {
						_context29.next = 13;
						break;
					}

					return _context29.abrupt('return', e.fromNative(tryFloat));

				case 13:
					return _context29.abrupt('return', e.fromNative(null));

				case 16:
					return _context29.abrupt('return', e.fromNative(n.value));

				case 17:
				case 'end':
					return _context29.stop();
			}
		}
	}, _marked[22], this);
}

function evaluateLogicalExpression(e, n, s) {
	var left;
	return _regenerator2.default.wrap(function evaluateLogicalExpression$(_context30) {
		while (1) {
			switch (_context30.prev = _context30.next) {
				case 0:
					return _context30.delegateYield(e.branch(n.left, s), 't0', 1);

				case 1:
					left = _context30.t0;

					if (!(e.yieldPower >= 4)) {
						_context30.next = 5;
						break;
					}

					_context30.next = 5;
					return EvaluatorInstruction.stepMajor;

				case 5:
					_context30.t1 = n.operator;
					_context30.next = _context30.t1 === '&&' ? 8 : _context30.t1 === '||' ? 12 : 16;
					break;

				case 8:
					if (!left.truthy) {
						_context30.next = 11;
						break;
					}

					return _context30.delegateYield(e.branch(n.right, s), 't2', 10);

				case 10:
					return _context30.abrupt('return', _context30.t2);

				case 11:
					return _context30.abrupt('return', left);

				case 12:
					if (!left.truthy) {
						_context30.next = 14;
						break;
					}

					return _context30.abrupt('return', left);

				case 14:
					return _context30.delegateYield(e.branch(n.right, s), 't3', 15);

				case 15:
					return _context30.abrupt('return', _context30.t3);

				case 16:
					throw new Error('Unknown logical operator: ' + n.operator);

				case 17:
				case 'end':
					return _context30.stop();
			}
		}
	}, _marked[23], this);
}

function evaluateMemberExpression(e, n, s) {
	var left;
	return _regenerator2.default.wrap(function evaluateMemberExpression$(_context31) {
		while (1) {
			switch (_context31.prev = _context31.next) {
				case 0:
					if (!(e.yieldPower >= 4)) {
						_context31.next = 3;
						break;
					}

					_context31.next = 3;
					return EvaluatorInstruction.stepMinor;

				case 3:
					return _context31.delegateYield(e.branch(n.object, s), 't0', 4);

				case 4:
					left = _context31.t0;
					return _context31.delegateYield(e.partialMemberExpression(left, n, s), 't1', 6);

				case 6:
					return _context31.abrupt('return', _context31.t1);

				case 7:
				case 'end':
					return _context31.stop();
			}
		}
	}, _marked[24], this);
}

function evaluateObjectExpression(e, n, s) {
	var nat, i, prop, key, value, pd;
	return _regenerator2.default.wrap(function evaluateObjectExpression$(_context32) {
		while (1) {
			switch (_context32.prev = _context32.next) {
				case 0:
					//TODO: Need to wire up native prototype
					nat = new ObjectValue(s.realm);
					i = 0;

				case 2:
					if (!(i < n.properties.length)) {
						_context32.next = 27;
						break;
					}

					prop = n.properties[i];
					key = void 0;

					if (!n.computed) {
						_context32.next = 10;
						break;
					}

					return _context32.delegateYield(e.branch(prop.key, s), 't0', 7);

				case 7:
					key = _context32.t0.toNative().toString();
					_context32.next = 11;
					break;

				case 10:
					if (prop.key.type == 'Identifier') {
						key = prop.key.name;
					} else if (prop.key.type == 'Literal') {
						key = prop.key.value.toString();
					}

				case 11:
					return _context32.delegateYield(e.branch(prop.value, s), 't1', 12);

				case 12:
					value = _context32.t1;
					pd = void 0;


					if (Object.prototype.hasOwnProperty.call(nat.properties, key)) {
						pd = nat.properties[key];
					} else {
						pd = new PropertyDescriptor(Value.undef);
						nat.rawSetProperty(key, pd);
					}

					_context32.t2 = prop.kind;
					_context32.next = _context32.t2 === 'init' ? 18 : _context32.t2 === 'get' ? 20 : _context32.t2 === 'set' ? 22 : 18;
					break;

				case 18:
					pd.value = value;
					return _context32.abrupt('break', 24);

				case 20:
					pd.getter = value;
					return _context32.abrupt('break', 24);

				case 22:
					pd.setter = value;
					return _context32.abrupt('break', 24);

				case 24:
					++i;
					_context32.next = 2;
					break;

				case 27:
					if (!(e.yieldPower > 0)) {
						_context32.next = 30;
						break;
					}

					_context32.next = 30;
					return EvaluatorInstruction.stepMajor;

				case 30:
					return _context32.abrupt('return', nat);

				case 31:
				case 'end':
					return _context32.stop();
			}
		}
	}, _marked[25], this);
}

function evaluateProgram(e, n, s) {
	var result, v, _iterator5, _isArray5, _i5, _ref5, statement;

	return _regenerator2.default.wrap(function evaluateProgram$(_context33) {
		while (1) {
			switch (_context33.prev = _context33.next) {
				case 0:
					result = Value.undef;

					if (n.vars) for (v in n.vars) {
						s.add(v, Value.undef);
					}
					if (n.strict === true) s.strict = true;

					if (!(e.yieldPower >= 4)) {
						_context33.next = 6;
						break;
					}

					_context33.next = 6;
					return EvaluatorInstruction.stepMajor;

				case 6:
					_iterator5 = n.body, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);

				case 7:
					if (!_isArray5) {
						_context33.next = 13;
						break;
					}

					if (!(_i5 >= _iterator5.length)) {
						_context33.next = 10;
						break;
					}

					return _context33.abrupt('break', 22);

				case 10:
					_ref5 = _iterator5[_i5++];
					_context33.next = 17;
					break;

				case 13:
					_i5 = _iterator5.next();

					if (!_i5.done) {
						_context33.next = 16;
						break;
					}

					return _context33.abrupt('break', 22);

				case 16:
					_ref5 = _i5.value;

				case 17:
					statement = _ref5;
					return _context33.delegateYield(e.branch(statement, s), 't0', 19);

				case 19:
					result = _context33.t0;

				case 20:
					_context33.next = 7;
					break;

				case 22:
					return _context33.abrupt('return', result);

				case 23:
				case 'end':
					return _context33.stop();
			}
		}
	}, _marked[26], this);
}

function evaluateReturnStatement(e, n, s) {
	var retVal;
	return _regenerator2.default.wrap(function evaluateReturnStatement$(_context34) {
		while (1) {
			switch (_context34.prev = _context34.next) {
				case 0:
					retVal = Value.undef;

					if (!n.argument) {
						_context34.next = 4;
						break;
					}

					return _context34.delegateYield(e.branch(n.argument, s), 't0', 3);

				case 3:
					retVal = _context34.t0;

				case 4:
					if (!(e.yieldPower >= 2)) {
						_context34.next = 7;
						break;
					}

					_context34.next = 7;
					return EvaluatorInstruction.stepMajor;

				case 7:
					return _context34.abrupt('return', new CompletionRecord(CompletionRecord.RETURN, retVal));

				case 8:
				case 'end':
					return _context34.stop();
			}
		}
	}, _marked[27], this);
}

function evaluateSequenceExpression(e, n, s) {
	var last, _iterator6, _isArray6, _i6, _ref6, expr;

	return _regenerator2.default.wrap(function evaluateSequenceExpression$(_context35) {
		while (1) {
			switch (_context35.prev = _context35.next) {
				case 0:
					last = Value.undef;

					if (!(e.yieldPower >= 4)) {
						_context35.next = 4;
						break;
					}

					_context35.next = 4;
					return EvaluatorInstruction.stepMajor;

				case 4:
					_iterator6 = n.expressions, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);

				case 5:
					if (!_isArray6) {
						_context35.next = 11;
						break;
					}

					if (!(_i6 >= _iterator6.length)) {
						_context35.next = 8;
						break;
					}

					return _context35.abrupt('break', 20);

				case 8:
					_ref6 = _iterator6[_i6++];
					_context35.next = 15;
					break;

				case 11:
					_i6 = _iterator6.next();

					if (!_i6.done) {
						_context35.next = 14;
						break;
					}

					return _context35.abrupt('break', 20);

				case 14:
					_ref6 = _i6.value;

				case 15:
					expr = _ref6;
					return _context35.delegateYield(e.branch(expr, s), 't0', 17);

				case 17:
					last = _context35.t0;

				case 18:
					_context35.next = 5;
					break;

				case 20:
					return _context35.abrupt('return', last);

				case 21:
				case 'end':
					return _context35.stop();
			}
		}
	}, _marked[28], this);
}

function evaluateSwitchStatement(e, n, s) {
	var discriminant, last, matches, matchVals, matched, i, cas, testval, equality, genSwitch, finished;
	return _regenerator2.default.wrap(function evaluateSwitchStatement$(_context37) {
		while (1) {
			switch (_context37.prev = _context37.next) {
				case 0:
					if (!(e.yieldPower >= 2)) {
						_context37.next = 3;
						break;
					}

					_context37.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					return _context37.delegateYield(e.branch(n.discriminant, s), 't0', 4);

				case 4:
					discriminant = _context37.t0;
					last = Value.undef;
					matches = 0;
					matchVals = new Array(n.cases.length);
					matched = false;
					i = 0;

				case 10:
					if (!(i < n.cases.length)) {
						_context37.next = 22;
						break;
					}

					cas = n.cases[i];

					if (!cas.test) {
						_context37.next = 19;
						break;
					}

					return _context37.delegateYield(e.branch(cas.test, s), 't1', 14);

				case 14:
					testval = _context37.t1;
					return _context37.delegateYield(testval.tripleEquals(discriminant), 't2', 16);

				case 16:
					equality = _context37.t2;

					if (equality.truthy) ++matches;
					matchVals[i] = equality.truthy;

				case 19:
					++i;
					_context37.next = 10;
					break;

				case 22:
					genSwitch = _regenerator2.default.mark(function genSwitch(e, n) {
						var _i7, _cas, _iterator7, _isArray7, _i8, _ref7, statement;

						return _regenerator2.default.wrap(function genSwitch$(_context36) {
							while (1) {
								switch (_context36.prev = _context36.next) {
									case 0:
										_i7 = 0;

									case 1:
										if (!(_i7 < n.cases.length)) {
											_context36.next = 31;
											break;
										}

										_cas = n.cases[_i7];

										if (matched) {
											_context36.next = 12;
											break;
										}

										if (!_cas.test) {
											_context36.next = 9;
											break;
										}

										if (matchVals[_i7]) {
											_context36.next = 7;
											break;
										}

										return _context36.abrupt('continue', 28);

									case 7:
										_context36.next = 11;
										break;

									case 9:
										if (!(matches !== 0)) {
											_context36.next = 11;
											break;
										}

										return _context36.abrupt('continue', 28);

									case 11:
										matched = true;

									case 12:
										_iterator7 = _cas.consequent, _isArray7 = Array.isArray(_iterator7), _i8 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);

									case 13:
										if (!_isArray7) {
											_context36.next = 19;
											break;
										}

										if (!(_i8 >= _iterator7.length)) {
											_context36.next = 16;
											break;
										}

										return _context36.abrupt('break', 28);

									case 16:
										_ref7 = _iterator7[_i8++];
										_context36.next = 23;
										break;

									case 19:
										_i8 = _iterator7.next();

										if (!_i8.done) {
											_context36.next = 22;
											break;
										}

										return _context36.abrupt('break', 28);

									case 22:
										_ref7 = _i8.value;

									case 23:
										statement = _ref7;
										return _context36.delegateYield(e.branch(statement, s), 't0', 25);

									case 25:
										last = _context36.t0;

									case 26:
										_context36.next = 13;
										break;

									case 28:
										++_i7;
										_context36.next = 1;
										break;

									case 31:
									case 'end':
										return _context36.stop();
								}
							}
						}, genSwitch, this);
					});


					e.pushFrame({ generator: genSwitch(e, n), type: 'loop', label: n.label });
					_context37.next = 26;
					return EvaluatorInstruction.waitForFramePop;

				case 26:
					finished = _context37.sent;
					return _context37.abrupt('return', last);

				case 28:
				case 'end':
					return _context37.stop();
			}
		}
	}, _marked[29], this);
}

function evaluateThisExpression(e, n, s) {
	return _regenerator2.default.wrap(function evaluateThisExpression$(_context38) {
		while (1) {
			switch (_context38.prev = _context38.next) {
				case 0:
					if (!(e.yieldPower >= 4)) {
						_context38.next = 3;
						break;
					}

					_context38.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					if (!s.thiz) {
						_context38.next = 7;
						break;
					}

					return _context38.abrupt('return', s.thiz);

				case 7:
					return _context38.abrupt('return', Value.undef);

				case 8:
				case 'end':
					return _context38.stop();
			}
		}
	}, _marked[30], this);
}

function evaluateThrowStatement(e, n, s) {
	var value;
	return _regenerator2.default.wrap(function evaluateThrowStatement$(_context39) {
		while (1) {
			switch (_context39.prev = _context39.next) {
				case 0:
					return _context39.delegateYield(e.branch(n.argument, s), 't0', 1);

				case 1:
					value = _context39.t0;

					if (!(e.yieldPower >= 2)) {
						_context39.next = 5;
						break;
					}

					_context39.next = 5;
					return EvaluatorInstruction.stepMajor;

				case 5:
					return _context39.abrupt('return', new CompletionRecord(CompletionRecord.THROW, value));

				case 6:
				case 'end':
					return _context39.stop();
			}
		}
	}, _marked[31], this);
}

function evaluateTryStatement(e, n, s) {
	var result, handlerScope;
	return _regenerator2.default.wrap(function evaluateTryStatement$(_context40) {
		while (1) {
			switch (_context40.prev = _context40.next) {
				case 0:
					if (!(e.yieldPower >= 2)) {
						_context40.next = 3;
						break;
					}

					_context40.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					if (n.finalizer) e.pushFrame({ generator: e.branch(n.finalizer, s), type: 'finally', scope: s });
					_context40.next = 6;
					return e.branchFrame('catch', n.block, s);

				case 6:
					result = _context40.sent;

					if (!(result instanceof CompletionRecord && result.type == CompletionRecord.THROW)) {
						_context40.next = 14;
						break;
					}

					if (n.handler) {
						_context40.next = 10;
						break;
					}

					return _context40.abrupt('return', result);

				case 10:
					handlerScope = s.createChild();

					handlerScope.add(n.handler.param.name, result.value);
					return _context40.delegateYield(e.branch(n.handler.body, handlerScope), 't0', 13);

				case 13:
					return _context40.abrupt('return', _context40.t0);

				case 14:
					return _context40.abrupt('return', result);

				case 15:
				case 'end':
					return _context40.stop();
			}
		}
	}, _marked[32], this);
}

function evaluateUpdateExpression(e, n, s) {
	var nue, ref, old;
	return _regenerator2.default.wrap(function evaluateUpdateExpression$(_context41) {
		while (1) {
			switch (_context41.prev = _context41.next) {
				case 0:
					//TODO: Need to support something like ++x[1];
					nue = void 0;

					if (!(e.yieldPower >= 3)) {
						_context41.next = 4;
						break;
					}

					_context41.next = 4;
					return EvaluatorInstruction.stepMajor;

				case 4:
					return _context41.delegateYield(e.resolveRef(n.argument, s, true), 't0', 5);

				case 5:
					ref = _context41.t0;
					old = Value.nan;

					if (!ref) {
						_context41.next = 10;
						break;
					}

					return _context41.delegateYield(ref.getValue(), 't1', 9);

				case 9:
					old = _context41.t1;

				case 10:
					if (old === undefined) old = Value.nan;
					_context41.t2 = n.operator;
					_context41.next = _context41.t2 === '++' ? 14 : _context41.t2 === '--' ? 17 : 20;
					break;

				case 14:
					return _context41.delegateYield(old.add(e.fromNative(1)), 't3', 15);

				case 15:
					nue = _context41.t3;
					return _context41.abrupt('break', 21);

				case 17:
					return _context41.delegateYield(old.subtract(e.fromNative(1)), 't4', 18);

				case 18:
					nue = _context41.t4;
					return _context41.abrupt('break', 21);

				case 20:
					throw new Error('Unknown update expression type: ' + n.operator);

				case 21:
					if (!ref) {
						_context41.next = 23;
						break;
					}

					return _context41.delegateYield(ref.setValue(nue, s), 't5', 23);

				case 23:
					if (!n.prefix) {
						_context41.next = 25;
						break;
					}

					return _context41.abrupt('return', nue);

				case 25:
					return _context41.abrupt('return', old);

				case 26:
				case 'end':
					return _context41.stop();
			}
		}
	}, _marked[33], this);
}

function evaluateUnaryExpression(e, n, s) {
	var ref, worked, left;
	return _regenerator2.default.wrap(function evaluateUnaryExpression$(_context42) {
		while (1) {
			switch (_context42.prev = _context42.next) {
				case 0:
					if (!(e.yieldPower >= 4)) {
						_context42.next = 3;
						break;
					}

					_context42.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					if (!(n.operator === 'delete')) {
						_context42.next = 18;
						break;
					}

					if (!(n.argument.type !== 'MemberExpression' && n.argument.type !== 'Identifier')) {
						_context42.next = 6;
						break;
					}

					return _context42.abrupt('return', Value.true);

				case 6:
					return _context42.delegateYield(e.resolveRef(n.argument, s), 't0', 7);

				case 7:
					ref = _context42.t0;

					if (ref) {
						_context42.next = 10;
						break;
					}

					return _context42.abrupt('return', Value.false);

				case 10:
					if (!ref.isVariable) {
						_context42.next = 12;
						break;
					}

					return _context42.abrupt('return', Value.false);

				case 12:
					worked = ref.del(s);

					if (!(worked instanceof CompletionRecord)) {
						_context42.next = 17;
						break;
					}

					_context42.next = 16;
					return worked;

				case 16:
					return _context42.abrupt('return', _context42.sent);

				case 17:
					return _context42.abrupt('return', Value.fromNative(worked));

				case 18:
					if (!(n.operator === 'typeof')) {
						_context42.next = 23;
						break;
					}

					if (!(n.argument.type == 'Identifier')) {
						_context42.next = 23;
						break;
					}

					if (s.has(n.argument.name)) {
						_context42.next = 23;
						break;
					}

					return _context42.delegateYield(Value.undef.typeOf(), 't1', 22);

				case 22:
					return _context42.abrupt('return', _context42.t1);

				case 23:
					return _context42.delegateYield(e.branch(n.argument, s), 't2', 24);

				case 24:
					left = _context42.t2;
					_context42.t3 = n.operator;
					_context42.next = _context42.t3 === '-' ? 28 : _context42.t3 === '+' ? 30 : _context42.t3 === '!' ? 32 : _context42.t3 === '~' ? 34 : _context42.t3 === 'typeof' ? 36 : _context42.t3 === 'void' ? 38 : 39;
					break;

				case 28:
					return _context42.delegateYield(left.unaryMinus(), 't4', 29);

				case 29:
					return _context42.abrupt('return', _context42.t4);

				case 30:
					return _context42.delegateYield(left.unaryPlus(), 't5', 31);

				case 31:
					return _context42.abrupt('return', _context42.t5);

				case 32:
					return _context42.delegateYield(left.not(), 't6', 33);

				case 33:
					return _context42.abrupt('return', _context42.t6);

				case 34:
					return _context42.delegateYield(left.bitNot(), 't7', 35);

				case 35:
					return _context42.abrupt('return', _context42.t7);

				case 36:
					return _context42.delegateYield(left.typeOf(), 't8', 37);

				case 37:
					return _context42.abrupt('return', _context42.t8);

				case 38:
					return _context42.abrupt('return', Value.undef);

				case 39:
					throw new Error('Unknown binary operator: ' + n.operator);

				case 40:
				case 'end':
					return _context42.stop();
			}
		}
	}, _marked[34], this);
}

function evaluateVariableDeclaration(e, n, s) {
	var kind, _iterator8, _isArray8, _i9, _ref8, decl, value;

	return _regenerator2.default.wrap(function evaluateVariableDeclaration$(_context43) {
		while (1) {
			switch (_context43.prev = _context43.next) {
				case 0:
					kind = n.kind;

					if (!(e.yieldPower >= 3)) {
						_context43.next = 4;
						break;
					}

					_context43.next = 4;
					return EvaluatorInstruction.stepMajor;

				case 4:
					_iterator8 = n.declarations, _isArray8 = Array.isArray(_iterator8), _i9 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);

				case 5:
					if (!_isArray8) {
						_context43.next = 11;
						break;
					}

					if (!(_i9 >= _iterator8.length)) {
						_context43.next = 8;
						break;
					}

					return _context43.abrupt('break', 27);

				case 8:
					_ref8 = _iterator8[_i9++];
					_context43.next = 15;
					break;

				case 11:
					_i9 = _iterator8.next();

					if (!_i9.done) {
						_context43.next = 14;
						break;
					}

					return _context43.abrupt('break', 27);

				case 14:
					_ref8 = _i9.value;

				case 15:
					decl = _ref8;
					value = Value.undef;

					if (!decl.init) {
						_context43.next = 22;
						break;
					}

					return _context43.delegateYield(e.branch(decl.init, s), 't0', 19);

				case 19:
					value = _context43.t0;
					_context43.next = 24;
					break;

				case 22:
					if (!s.has(decl.id.name)) {
						_context43.next = 24;
						break;
					}

					return _context43.abrupt('continue', 25);

				case 24:

					if (kind === 'const') {
						s.addConst(decl.id.name, value);
					} else {
						s.add(decl.id.name, value);
					}

				case 25:
					_context43.next = 5;
					break;

				case 27:
					return _context43.abrupt('return', Value.undef);

				case 28:
				case 'end':
					return _context43.stop();
			}
		}
	}, _marked[35], this);
}

function genWhileLoop(e, n, s) {
	var last;
	return _regenerator2.default.wrap(function genWhileLoop$(_context44) {
		while (1) {
			switch (_context44.prev = _context44.next) {
				case 0:
					last = Value.undef;

				case 1:
					return _context44.delegateYield(e.branch(n.test, s), 't0', 2);

				case 2:
					if (!_context44.t0.truthy) {
						_context44.next = 12;
						break;
					}

					e.topFrame.ast = n;

					if (!(e.yieldPower > 0)) {
						_context44.next = 7;
						break;
					}

					_context44.next = 7;
					return EvaluatorInstruction.eventLoopBodyStart;

				case 7:
					_context44.next = 9;
					return e.branchFrame('continue', n.body, s);

				case 9:
					last = _context44.sent;
					_context44.next = 1;
					break;

				case 12:
				case 'end':
					return _context44.stop();
			}
		}
	}, _marked[36], this);
}

function evaluateWhileStatement(e, n, s) {
	var finished;
	return _regenerator2.default.wrap(function evaluateWhileStatement$(_context45) {
		while (1) {
			switch (_context45.prev = _context45.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context45.next = 3;
						break;
					}

					_context45.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					e.pushFrame({ generator: genWhileLoop(e, n, s), type: 'loop', label: n.label, ast: n });
					_context45.next = 6;
					return EvaluatorInstruction.waitForFramePop;

				case 6:
					finished = _context45.sent;
					return _context45.abrupt('return', Value.undef);

				case 8:
				case 'end':
					return _context45.stop();
			}
		}
	}, _marked[37], this);
}

function evaluateWithStatement(e, n, s) {
	return _regenerator2.default.wrap(function evaluateWithStatement$(_context46) {
		while (1) {
			switch (_context46.prev = _context46.next) {
				case 0:
					if (!(e.yieldPower > 0)) {
						_context46.next = 3;
						break;
					}

					_context46.next = 3;
					return EvaluatorInstruction.stepMajor;

				case 3:
					if (!s.strict) {
						_context46.next = 5;
						break;
					}

					return _context46.abrupt('return', CompletionRecord.makeSyntaxError(e.realm, 'Strict mode code may not include a with statement'));

				case 5:
					return _context46.abrupt('return', CompletionRecord.makeSyntaxError(e.realm, 'With statement not supported by esper'));

				case 6:
				case 'end':
					return _context46.stop();
			}
		}
	}, _marked[38], this);
}

function findNextStep(type) {
	switch (type) {
		case 'ArrayExpression':
			return evaluateArrayExpression;
		case 'ArrowFunctionExpression':
			return evaluateFunctionExpression;
		case 'AssignmentExpression':
			return evaluateAssignmentExpression;
		case 'BinaryExpression':
			return evaluateBinaryExpression;
		case 'BreakStatement':
			return evaluateBreakStatement;
		case 'BlockStatement':
			return evaluateBlockStatement;
		case 'CallExpression':
			return evaluateCallExpression;
		case 'ClassDeclaration':
			return evaluateClassDeclaration;
		case 'ClassExpression':
			return evaluateClassExpression;
		case 'ConditionalExpression':
			return evaluateConditionalExpression;
		case 'DebuggerStatement':
			return evaluateEmptyStatement;
		case 'DoWhileStatement':
			return evaluateDoWhileStatement;
		case 'ContinueStatement':
			return evaluateContinueStatement;
		case 'EmptyStatement':
			return evaluateEmptyStatement;
		case 'ExpressionStatement':
			return evaluateExpressionStatement;
		case 'ForStatement':
			return evaluateForStatement;
		case 'ForInStatement':
			return evaluateForInStatement;
		case 'ForOfStatement':
			return evaluateForOfStatement;
		case 'FunctionDeclaration':
			return evaluateFunctionDeclaration;
		case 'FunctionExpression':
			return evaluateFunctionExpression;
		case 'Identifier':
			return evaluateIdentifier;
		case 'IfStatement':
			return evaluateIfStatement;
		case 'LabeledStatement':
			return evaluateLabeledStatement;
		case 'Literal':
			return evaluateLiteral;
		case 'LogicalExpression':
			return evaluateLogicalExpression;
		case 'MemberExpression':
			return evaluateMemberExpression;
		case 'NewExpression':
			return evaluateCallExpression;
		case 'ObjectExpression':
			return evaluateObjectExpression;
		case 'Program':
			return evaluateProgram;
		case 'ReturnStatement':
			return evaluateReturnStatement;
		case 'SequenceExpression':
			return evaluateSequenceExpression;
		case 'SwitchStatement':
			return evaluateSwitchStatement;
		case 'ThisExpression':
			return evaluateThisExpression;
		case 'ThrowStatement':
			return evaluateThrowStatement;
		case 'TryStatement':
			return evaluateTryStatement;
		case 'UnaryExpression':
			return evaluateUnaryExpression;
		case 'UpdateExpression':
			return evaluateUpdateExpression;
		case 'VariableDeclaration':
			return evaluateVariableDeclaration;
		case 'WhileStatement':
			return evaluateWhileStatement;
		case 'WithStatement':
			return evaluateWithStatement;
		default:
			throw new Error('Unknown AST Node Type: ' + type);
	}
}

module.exports = {
	evaluateIdentifier: evaluateIdentifier,
	findNextStep: findNextStep
};

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var esprima = __webpack_require__(200);

module.exports = {
	name: 'lang-javascript',
	esprima: esprima,
	parser: function parser(code, options) {
		options = options || {};
		var opts = { loc: true, range: true };
		if (options.inFunctionBody) {
			opts.tolerant = true;
			opts.allowReturnOutsideFunction = true;
		}

		var ast = esprima.parse(code, opts);
		var errors = [];
		if (ast.errors) {
			errors = ast.errors.filter(function (x) {
				if (options.inFunctionBody && x.message === 'Illegal return statement') return false;
			});
		}
		delete ast.errors;
		if (errors.length > 0) throw errors[0];
		return ast;
	}
};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var ObjectValue = __webpack_require__(9);
var ArrayValue = __webpack_require__(14);

var ArrayObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(ArrayObject, _EasyObjectValue);

	function ArrayObject() {
		(0, _classCallCheck3.default)(this, ArrayObject);
		return (0, _possibleConstructorReturn3.default)(this, (ArrayObject.__proto__ || (0, _getPrototypeOf2.default)(ArrayObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(ArrayObject, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, s) {
			var result;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(args.length === 1 && args[0].jsTypeName === 'number')) {
								_context.next = 4;
								break;
							}

							result = ArrayValue.make([], s.realm);
							return _context.delegateYield(result.set('length', args[0]), 't0', 3);

						case 3:
							return _context.abrupt('return', result);

						case 4:
							return _context.abrupt('return', ArrayValue.make(args, s.realm));

						case 5:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.ArrayPrototype;
		}
		//objPrototype(realm) { return realm.Function; }


	}], [{
		key: 'isArray',
		value: _regenerator2.default.mark(function isArray(thiz, args) {
			return _regenerator2.default.wrap(function isArray$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(args.length < 1)) {
								_context2.next = 2;
								break;
							}

							return _context2.abrupt('return', EasyObjectValue.false);

						case 2:
							return _context2.abrupt('return', EasyObjectValue.fromNative(args[0] instanceof ArrayValue));

						case 3:
						case 'end':
							return _context2.stop();
					}
				}
			}, isArray, this);
		})
	}]);
	return ArrayObject;
}(EasyObjectValue);

module.exports = ArrayObject;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [forceArrayness, getLength, shiftRight, shiftLeft].map(_regenerator2.default.mark);

var EasyObjectValue = __webpack_require__(8);
var ObjectValue = __webpack_require__(9);
var ArrayValue = __webpack_require__(14);
var PrimitiveValue = __webpack_require__(12);
var CompletionRecord = __webpack_require__(7);
var Value = __webpack_require__(3);
var _g = __webpack_require__(33);

function forceArrayness(v) {
	return _regenerator2.default.wrap(function forceArrayness$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (v.has('length')) {
						_context.next = 2;
						break;
					}

					return _context.delegateYield(v.set('length', Value.zero), 't0', 2);

				case 2:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked[0], this);
}

function getLength(v) {
	var m;
	return _regenerator2.default.wrap(function getLength$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					return _context2.delegateYield(v.get('length'), 't0', 1);

				case 1:
					m = _context2.t0;
					return _context2.delegateYield(m.toUIntNative(), 't1', 3);

				case 3:
					return _context2.abrupt('return', _context2.t1);

				case 4:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked[1], this);
}

var defaultSeperator = Value.fromNative(',');

function shiftRight(arr, start, amt) {
	var len, i, cur;
	return _regenerator2.default.wrap(function shiftRight$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					amt = amt || 1;
					return _context3.delegateYield(getLength(arr), 't0', 2);

				case 2:
					len = _context3.t0;
					i = len - 1;

				case 4:
					if (!(i >= start)) {
						_context3.next = 11;
						break;
					}

					return _context3.delegateYield(arr.get(i), 't1', 6);

				case 6:
					cur = _context3.t1;
					return _context3.delegateYield(arr.set(i + amt, cur), 't2', 8);

				case 8:
					--i;
					_context3.next = 4;
					break;

				case 11:
					return _context3.delegateYield(arr.set(start, Value.undef), 't3', 12);

				case 12:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked[2], this);
}

function shiftLeft(arr, start, amt) {
	var len, i, cur, _i;

	return _regenerator2.default.wrap(function shiftLeft$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					return _context4.delegateYield(getLength(arr), 't0', 1);

				case 1:
					len = _context4.t0;
					i = start;

				case 3:
					if (!(i < len)) {
						_context4.next = 10;
						break;
					}

					return _context4.delegateYield(arr.get(i), 't1', 5);

				case 5:
					cur = _context4.t1;
					return _context4.delegateYield(arr.set(i - amt, cur), 't2', 7);

				case 7:
					++i;
					_context4.next = 3;
					break;

				case 10:
					for (_i = len - amt; _i < len; ++_i) {
						delete arr.properties[_i];
					}
					return _context4.delegateYield(arr.set('length', Value.fromNative(len - amt)), 't3', 12);

				case 12:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked[3], this);
}

var ArrayPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(ArrayPrototype, _EasyObjectValue);

	function ArrayPrototype() {
		(0, _classCallCheck3.default)(this, ArrayPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (ArrayPrototype.__proto__ || (0, _getPrototypeOf2.default)(ArrayPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(ArrayPrototype, null, [{
		key: 'concat$e',
		value: _regenerator2.default.mark(function concat$e(thiz, args, s) {
			var fx, targ, out, toCopy, idx, _iterator, _isArray, _i2, _ref, arr, l, i, tv;

			return _regenerator2.default.wrap(function concat$e$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							out = [];
							toCopy = [thiz].concat(args);
							idx = 0;
							_iterator = toCopy, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 8:
							if (!_isArray) {
								_context5.next = 14;
								break;
							}

							if (!(_i2 >= _iterator.length)) {
								_context5.next = 11;
								break;
							}

							return _context5.abrupt('break', 39);

						case 11:
							_ref = _iterator[_i2++];
							_context5.next = 18;
							break;

						case 14:
							_i2 = _iterator.next();

							if (!_i2.done) {
								_context5.next = 17;
								break;
							}

							return _context5.abrupt('break', 39);

						case 17:
							_ref = _i2.value;

						case 18:
							arr = _ref;

							if (!(arr instanceof PrimitiveValue)) {
								_context5.next = 23;
								break;
							}

							out[idx++] = arr;
							_context5.next = 37;
							break;

						case 23:
							if (arr.has('length')) {
								_context5.next = 27;
								break;
							}

							out[idx++] = arr;
							_context5.next = 37;
							break;

						case 27:
							return _context5.delegateYield(getLength(arr), 't0', 28);

						case 28:
							l = _context5.t0;
							i = 0;

						case 30:
							if (!(i < l)) {
								_context5.next = 37;
								break;
							}

							return _context5.delegateYield(arr.get(i, s.realm), 't1', 32);

						case 32:
							tv = _context5.t1;

							out[idx++] = tv;

						case 34:
							++i;
							_context5.next = 30;
							break;

						case 37:
							_context5.next = 8;
							break;

						case 39:
							return _context5.abrupt('return', ArrayValue.make(out, s.realm));

						case 40:
						case 'end':
							return _context5.stop();
					}
				}
			}, concat$e, this);
		})
	}, {
		key: 'filter$e',
		value: _regenerator2.default.mark(function filter$e(thiz, args, s) {
			var fx, targ, test, out, l, i, tv, tru;
			return _regenerator2.default.wrap(function filter$e$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							test = _regenerator2.default.mark(function test(v, i) {
								var res;
								return _regenerator2.default.wrap(function test$(_context6) {
									while (1) {
										switch (_context6.prev = _context6.next) {
											case 0:
												return _context6.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

											case 1:
												res = _context6.t0;
												return _context6.abrupt('return', res.truthy);

											case 3:
											case 'end':
												return _context6.stop();
										}
									}
								}, test, this);
							});
							out = [];
							return _context7.delegateYield(getLength(thiz), 't0', 7);

						case 7:
							l = _context7.t0;
							i = 0;

						case 9:
							if (!(i < l)) {
								_context7.next = 18;
								break;
							}

							return _context7.delegateYield(thiz.get(i), 't1', 11);

						case 11:
							tv = _context7.t1;
							return _context7.delegateYield(test(tv, i), 't2', 13);

						case 13:
							tru = _context7.t2;

							if (tru) out.push(tv);

						case 15:
							++i;
							_context7.next = 9;
							break;

						case 18:
							return _context7.abrupt('return', ArrayValue.make(out, s.realm));

						case 19:
						case 'end':
							return _context7.stop();
					}
				}
			}, filter$e, this);
		})
	}, {
		key: 'every$e',
		value: _regenerator2.default.mark(function every$e(thiz, args, s) {
			var fx, targ, test, l, i, tv, tru;
			return _regenerator2.default.wrap(function every$e$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							test = _regenerator2.default.mark(function test(v, i) {
								var res;
								return _regenerator2.default.wrap(function test$(_context8) {
									while (1) {
										switch (_context8.prev = _context8.next) {
											case 0:
												return _context8.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

											case 1:
												res = _context8.t0;
												return _context8.abrupt('return', res.truthy);

											case 3:
											case 'end':
												return _context8.stop();
										}
									}
								}, test, this);
							});
							return _context9.delegateYield(getLength(thiz), 't0', 6);

						case 6:
							l = _context9.t0;
							i = 0;

						case 8:
							if (!(i < l)) {
								_context9.next = 18;
								break;
							}

							return _context9.delegateYield(thiz.get(i), 't1', 10);

						case 10:
							tv = _context9.t1;
							return _context9.delegateYield(test(tv, i), 't2', 12);

						case 12:
							tru = _context9.t2;

							if (tru) {
								_context9.next = 15;
								break;
							}

							return _context9.abrupt('return', Value.false);

						case 15:
							++i;
							_context9.next = 8;
							break;

						case 18:
							return _context9.abrupt('return', Value.true);

						case 19:
						case 'end':
							return _context9.stop();
					}
				}
			}, every$e, this);
		})
	}, {
		key: 'some$e',
		value: _regenerator2.default.mark(function some$e(thiz, args, s) {
			var fx, targ, test, l, i, tv, tru;
			return _regenerator2.default.wrap(function some$e$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							test = _regenerator2.default.mark(function test(v, i) {
								var res;
								return _regenerator2.default.wrap(function test$(_context10) {
									while (1) {
										switch (_context10.prev = _context10.next) {
											case 0:
												return _context10.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't0', 1);

											case 1:
												res = _context10.t0;
												return _context10.abrupt('return', res.truthy);

											case 3:
											case 'end':
												return _context10.stop();
										}
									}
								}, test, this);
							});
							return _context11.delegateYield(getLength(thiz), 't0', 6);

						case 6:
							l = _context11.t0;
							i = 0;

						case 8:
							if (!(i < l)) {
								_context11.next = 18;
								break;
							}

							return _context11.delegateYield(thiz.get(i), 't1', 10);

						case 10:
							tv = _context11.t1;
							return _context11.delegateYield(test(tv, i), 't2', 12);

						case 12:
							tru = _context11.t2;

							if (!tru) {
								_context11.next = 15;
								break;
							}

							return _context11.abrupt('return', Value.true);

						case 15:
							++i;
							_context11.next = 8;
							break;

						case 18:
							return _context11.abrupt('return', Value.false);

						case 19:
						case 'end':
							return _context11.stop();
					}
				}
			}, some$e, this);
		})
	}, {
		key: 'map$e',
		value: _regenerator2.default.mark(function map$e(thiz, args, s) {
			var fx, targ, l, out, i, tv, v;
			return _regenerator2.default.wrap(function map$e$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];

							if (fx.isCallable) {
								_context12.next = 7;
								break;
							}

							_context12.next = 6;
							return CompletionRecord.makeTypeError(s.realm, 'Arg2 not calalble.');

						case 6:
							return _context12.abrupt('return', _context12.sent);

						case 7:

							if (args.length > 1) targ = args[1];

							return _context12.delegateYield(getLength(thiz), 't0', 9);

						case 9:
							l = _context12.t0;
							out = new Array(l);
							i = 0;

						case 12:
							if (!(i < l)) {
								_context12.next = 25;
								break;
							}

							if (thiz.has(i)) {
								_context12.next = 15;
								break;
							}

							return _context12.abrupt('continue', 22);

						case 15:
							return _context12.delegateYield(thiz.get(i), 't1', 16);

						case 16:
							tv = _context12.t1;
							return _context12.delegateYield(fx.call(targ, [tv, Value.fromNative(i), thiz], s), 't2', 18);

						case 18:
							_context12.next = 20;
							return _context12.t2;

						case 20:
							v = _context12.sent;

							out[i] = v;

						case 22:
							++i;
							_context12.next = 12;
							break;

						case 25:
							return _context12.abrupt('return', ArrayValue.make(out, s.realm));

						case 26:
						case 'end':
							return _context12.stop();
					}
				}
			}, map$e, this);
		})
	}, {
		key: 'forEach$e',
		value: _regenerator2.default.mark(function forEach$e(thiz, args, s) {
			var fx, targ, l, i, v, res;
			return _regenerator2.default.wrap(function forEach$e$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							fx = Value.undef;
							targ = Value.undef;

							if (args.length > 0) fx = args[0];
							if (args.length > 1) targ = args[1];

							return _context13.delegateYield(getLength(thiz), 't0', 5);

						case 5:
							l = _context13.t0;
							i = 0;

						case 7:
							if (!(i < l)) {
								_context13.next = 17;
								break;
							}

							if (thiz.has(i)) {
								_context13.next = 10;
								break;
							}

							return _context13.abrupt('continue', 14);

						case 10:
							return _context13.delegateYield(thiz.get(i), 't1', 11);

						case 11:
							v = _context13.t1;
							return _context13.delegateYield(fx.call(targ, [v, Value.fromNative(i), thiz], s), 't2', 13);

						case 13:
							res = _context13.t2;

						case 14:
							++i;
							_context13.next = 7;
							break;

						case 17:
							return _context13.abrupt('return', Value.undef);

						case 18:
						case 'end':
							return _context13.stop();
					}
				}
			}, forEach$e, this);
		})
	}, {
		key: 'indexOf$e',
		value: _regenerator2.default.mark(function indexOf$e(thiz, args) {
			var l, match, start, startn, i, v;
			return _regenerator2.default.wrap(function indexOf$e$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							return _context14.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context14.t0;
							match = args[0] || Value.undef;
							start = args[1] || Value.zero;
							return _context14.delegateYield(start.toNumberValue(), 't1', 5);

						case 5:
							startn = _context14.t1.native;


							if (isNaN(startn)) startn = 0;else if (startn < 0) startn = 0;

							if (!(l > startn)) {
								_context14.next = 19;
								break;
							}

							i = startn;

						case 9:
							if (!(i < l)) {
								_context14.next = 19;
								break;
							}

							return _context14.delegateYield(thiz.get(i), 't2', 11);

						case 11:
							v = _context14.t2;

							if (!v) v = Value.undef;
							return _context14.delegateYield(v.tripleEquals(match), 't3', 14);

						case 14:
							if (!_context14.t3.truthy) {
								_context14.next = 16;
								break;
							}

							return _context14.abrupt('return', Value.fromNative(i));

						case 16:
							++i;
							_context14.next = 9;
							break;

						case 19:
							return _context14.abrupt('return', Value.fromNative(-1));

						case 20:
						case 'end':
							return _context14.stop();
					}
				}
			}, indexOf$e, this);
		})
	}, {
		key: 'lastIndexOf$e',
		value: _regenerator2.default.mark(function lastIndexOf$e(thiz, args) {
			var l, match, startn, i, v;
			return _regenerator2.default.wrap(function lastIndexOf$e$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							return _context15.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context15.t0;
							match = args[0] || Value.undef;
							startn = l - 1;

							if (!(args.length > 1)) {
								_context15.next = 7;
								break;
							}

							return _context15.delegateYield(args[1].toIntNative(), 't1', 6);

						case 6:
							startn = _context15.t1;

						case 7:
							if (isNaN(startn)) startn = 0;
							if (startn < 0) startn += l;
							if (startn > l) startn = l;

							if (!(startn < 0)) {
								_context15.next = 12;
								break;
							}

							return _context15.abrupt('return', Value.fromNative(-1));

						case 12:
							i = startn;

						case 13:
							if (!(i >= 0)) {
								_context15.next = 25;
								break;
							}

							if (thiz.has(i)) {
								_context15.next = 16;
								break;
							}

							return _context15.abrupt('continue', 22);

						case 16:
							return _context15.delegateYield(thiz.get(i), 't2', 17);

						case 17:
							v = _context15.t2;

							if (!v) v = Value.undef;
							return _context15.delegateYield(v.tripleEquals(match), 't3', 20);

						case 20:
							if (!_context15.t3.truthy) {
								_context15.next = 22;
								break;
							}

							return _context15.abrupt('return', Value.fromNative(i));

						case 22:
							--i;
							_context15.next = 13;
							break;

						case 25:
							return _context15.abrupt('return', Value.fromNative(-1));

						case 26:
						case 'end':
							return _context15.stop();
					}
				}
			}, lastIndexOf$e, this);
		})
	}, {
		key: 'join$e',
		value: _regenerator2.default.mark(function join$e(thiz, args) {
			var l, seperator, sepstr, strings, i, v, sv;
			return _regenerator2.default.wrap(function join$e$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							return _context16.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context16.t0;
							seperator = args[0] || defaultSeperator;
							return _context16.delegateYield(seperator.toStringValue(), 't1', 4);

						case 4:
							sepstr = _context16.t1.native;
							strings = new Array(l);
							i = 0;

						case 7:
							if (!(i < l)) {
								_context16.next = 24;
								break;
							}

							if (thiz.has(i)) {
								_context16.next = 10;
								break;
							}

							return _context16.abrupt('continue', 21);

						case 10:
							return _context16.delegateYield(thiz.get(i), 't2', 11);

						case 11:
							v = _context16.t2;

							if (v) {
								_context16.next = 16;
								break;
							}

							strings[i] = '';
							_context16.next = 21;
							break;

						case 16:
							if (!(v.specTypeName == 'undefined' || v.specTypeName == 'null')) {
								_context16.next = 18;
								break;
							}

							return _context16.abrupt('continue', 21);

						case 18:
							return _context16.delegateYield(v.toStringValue(), 't3', 19);

						case 19:
							sv = _context16.t3;

							if (sv) strings[i] = sv.native;else strings[i] = undefined; //TODO: THROW HERE?

						case 21:
							++i;
							_context16.next = 7;
							break;

						case 24:
							return _context16.abrupt('return', Value.fromNative(strings.join(sepstr)));

						case 25:
						case 'end':
							return _context16.stop();
					}
				}
			}, join$e, this);
		})
	}, {
		key: 'push$e',
		value: _regenerator2.default.mark(function push$e(thiz, args) {
			var l, i, nl;
			return _regenerator2.default.wrap(function push$e$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							return _context17.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context17.t0;
							i = 0;

						case 3:
							if (!(i < args.length)) {
								_context17.next = 8;
								break;
							}

							return _context17.delegateYield(thiz.set(l + i, args[i]), 't1', 5);

						case 5:
							++i;
							_context17.next = 3;
							break;

						case 8:
							nl = Value.fromNative(l + args.length);
							return _context17.delegateYield(thiz.set('length', nl), 't2', 10);

						case 10:
							return _context17.abrupt('return', Value.fromNative(l + args.length));

						case 11:
						case 'end':
							return _context17.stop();
					}
				}
			}, push$e, this);
		})
	}, {
		key: 'pop$e',
		value: _regenerator2.default.mark(function pop$e(thiz, args) {
			var l, val;
			return _regenerator2.default.wrap(function pop$e$(_context18) {
				while (1) {
					switch (_context18.prev = _context18.next) {
						case 0:
							return _context18.delegateYield(forceArrayness(thiz), 't0', 1);

						case 1:
							return _context18.delegateYield(getLength(thiz), 't1', 2);

						case 2:
							l = _context18.t1;

							if (!(l < 1)) {
								_context18.next = 5;
								break;
							}

							return _context18.abrupt('return', Value.undef);

						case 5:
							return _context18.delegateYield(thiz.get(l - 1), 't2', 6);

						case 6:
							val = _context18.t2;
							return _context18.delegateYield(thiz.set('length', Value.fromNative(l - 1)), 't3', 8);

						case 8:
							return _context18.abrupt('return', val);

						case 9:
						case 'end':
							return _context18.stop();
					}
				}
			}, pop$e, this);
		})
	}, {
		key: 'reverse$e',
		value: _regenerator2.default.mark(function reverse$e(thiz, args, s) {
			var l, i, lv, rv;
			return _regenerator2.default.wrap(function reverse$e$(_context19) {
				while (1) {
					switch (_context19.prev = _context19.next) {
						case 0:
							return _context19.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context19.t0;
							i = 0;

						case 3:
							if (!(i < Math.floor(l / 2))) {
								_context19.next = 13;
								break;
							}

							return _context19.delegateYield(thiz.get(i), 't1', 5);

						case 5:
							lv = _context19.t1;
							return _context19.delegateYield(thiz.get(l - i - 1), 't2', 7);

						case 7:
							rv = _context19.t2;
							return _context19.delegateYield(thiz.set(l - i - 1, lv, s), 't3', 9);

						case 9:
							return _context19.delegateYield(thiz.set(i, rv, s), 't4', 10);

						case 10:
							++i;
							_context19.next = 3;
							break;

						case 13:
							return _context19.abrupt('return', thiz);

						case 14:
						case 'end':
							return _context19.stop();
					}
				}
			}, reverse$e, this);
		})
	}, {
		key: 'reduce$e',
		value: _regenerator2.default.mark(function reduce$e(thiz, args, s) {
			var l, acc, fx, i, lv;
			return _regenerator2.default.wrap(function reduce$e$(_context20) {
				while (1) {
					switch (_context20.prev = _context20.next) {
						case 0:
							return _context20.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context20.t0;
							acc = void 0;
							fx = args[0];

							if (!(args.length < 1 || !fx.isCallable)) {
								_context20.next = 8;
								break;
							}

							_context20.next = 7;
							return CompletionRecord.makeTypeError(s.realm, 'First argument to reduce must be a function.');

						case 7:
							return _context20.abrupt('return', _context20.sent);

						case 8:

							if (args.length > 1) {
								acc = args[1];
							}

							i = 0;

						case 10:
							if (!(i < l)) {
								_context20.next = 23;
								break;
							}

							if (thiz.has(i)) {
								_context20.next = 13;
								break;
							}

							return _context20.abrupt('continue', 20);

						case 13:
							return _context20.delegateYield(thiz.get(i), 't1', 14);

						case 14:
							lv = _context20.t1;

							if (acc) {
								_context20.next = 18;
								break;
							}

							acc = lv;
							return _context20.abrupt('continue', 20);

						case 18:
							return _context20.delegateYield(fx.call(thiz, [acc, lv], s), 't2', 19);

						case 19:
							acc = _context20.t2;

						case 20:
							++i;
							_context20.next = 10;
							break;

						case 23:
							if (acc) {
								_context20.next = 27;
								break;
							}

							_context20.next = 26;
							return CompletionRecord.makeTypeError(s.realm, 'Reduce an empty array with no initial value.');

						case 26:
							return _context20.abrupt('return', _context20.sent);

						case 27:
							return _context20.abrupt('return', acc);

						case 28:
						case 'end':
							return _context20.stop();
					}
				}
			}, reduce$e, this);
		})

		//TODO: Factor some stuff out of reduce and reduce right into a common function.

	}, {
		key: 'reduceRight$e',
		value: _regenerator2.default.mark(function reduceRight$e(thiz, args, s) {
			var l, acc, fx, i, lv;
			return _regenerator2.default.wrap(function reduceRight$e$(_context21) {
				while (1) {
					switch (_context21.prev = _context21.next) {
						case 0:
							return _context21.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							l = _context21.t0;
							acc = void 0;
							fx = args[0];

							if (!(args.length < 1 || !fx.isCallable)) {
								_context21.next = 8;
								break;
							}

							_context21.next = 7;
							return CompletionRecord.makeTypeError(s.realm, 'First argument to reduceRight must be a function.');

						case 7:
							return _context21.abrupt('return', _context21.sent);

						case 8:

							if (args.length > 1) {
								acc = args[1];
							}

							i = l - 1;

						case 10:
							if (!(i >= 0)) {
								_context21.next = 23;
								break;
							}

							if (thiz.has(i)) {
								_context21.next = 13;
								break;
							}

							return _context21.abrupt('continue', 20);

						case 13:
							return _context21.delegateYield(thiz.get(i), 't1', 14);

						case 14:
							lv = _context21.t1;

							if (acc) {
								_context21.next = 18;
								break;
							}

							acc = lv;
							return _context21.abrupt('continue', 20);

						case 18:
							return _context21.delegateYield(fx.call(thiz, [acc, lv], s), 't2', 19);

						case 19:
							acc = _context21.t2;

						case 20:
							--i;
							_context21.next = 10;
							break;

						case 23:
							if (acc) {
								_context21.next = 27;
								break;
							}

							_context21.next = 26;
							return CompletionRecord.makeTypeError(s.realm, 'Reduce an empty array with no initial value.');

						case 26:
							return _context21.abrupt('return', _context21.sent);

						case 27:
							return _context21.abrupt('return', acc);

						case 28:
						case 'end':
							return _context21.stop();
					}
				}
			}, reduceRight$e, this);
		})
	}, {
		key: 'shift$e',
		value: _regenerator2.default.mark(function shift$e(thiz, args) {
			var l, val;
			return _regenerator2.default.wrap(function shift$e$(_context22) {
				while (1) {
					switch (_context22.prev = _context22.next) {
						case 0:
							return _context22.delegateYield(forceArrayness(thiz), 't0', 1);

						case 1:
							return _context22.delegateYield(getLength(thiz), 't1', 2);

						case 2:
							l = _context22.t1;

							if (!(l < 1)) {
								_context22.next = 5;
								break;
							}

							return _context22.abrupt('return', Value.undef);

						case 5:
							return _context22.delegateYield(thiz.get(0), 't2', 6);

						case 6:
							val = _context22.t2;
							return _context22.delegateYield(shiftLeft(thiz, 1, 1), 't3', 8);

						case 8:
							return _context22.abrupt('return', val);

						case 9:
						case 'end':
							return _context22.stop();
					}
				}
			}, shift$e, this);
		})
	}, {
		key: 'slice$e',
		value: _regenerator2.default.mark(function slice$e(thiz, args, s) {
			var length, result, start, end, i;
			return _regenerator2.default.wrap(function slice$e$(_context23) {
				while (1) {
					switch (_context23.prev = _context23.next) {
						case 0:
							return _context23.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							length = _context23.t0;
							result = [];
							start = 0;
							end = length;

							if (!(args.length > 0)) {
								_context23.next = 8;
								break;
							}

							return _context23.delegateYield(args[0].toIntNative(), 't1', 7);

						case 7:
							start = _context23.t1;

						case 8:
							if (!(args.length > 1)) {
								_context23.next = 11;
								break;
							}

							return _context23.delegateYield(args[1].toIntNative(), 't2', 10);

						case 10:
							end = _context23.t2;

						case 11:

							if (start < 0) start = length + start;
							if (end < 0) end = length + end;

							if (end > length) end = length;
							if (start < 0) start = 0;

							i = start;

						case 16:
							if (!(i < end)) {
								_context23.next = 24;
								break;
							}

							_context23.t3 = result;
							return _context23.delegateYield(thiz.get('' + i), 't4', 19);

						case 19:
							_context23.t5 = _context23.t4;

							_context23.t3.push.call(_context23.t3, _context23.t5);

						case 21:
							++i;
							_context23.next = 16;
							break;

						case 24:
							return _context23.abrupt('return', ArrayValue.make(result, s.realm));

						case 25:
						case 'end':
							return _context23.stop();
					}
				}
			}, slice$e, this);
		})
	}, {
		key: 'splice$e',
		value: _regenerator2.default.mark(function splice$e(thiz, args, s) {
			var result, deleteCount, len, start, deleted, toAdd, delta, i, _i3;

			return _regenerator2.default.wrap(function splice$e$(_context24) {
				while (1) {
					switch (_context24.prev = _context24.next) {
						case 0:
							//TODO: Call ToObject() on thisz;


							result = [];
							deleteCount = void 0;
							return _context24.delegateYield(getLength(thiz), 't0', 3);

						case 3:
							len = _context24.t0;
							start = len;

							if (!isNaN(len)) {
								_context24.next = 7;
								break;
							}

							return _context24.abrupt('return', thiz);

						case 7:
							if (!(args.length > 0)) {
								_context24.next = 10;
								break;
							}

							return _context24.delegateYield(args[0].toIntNative(), 't1', 9);

						case 9:
							start = _context24.t1;

						case 10:

							if (start > len) start = len;else if (start < 0) start = len - start;

							if (!(args.length > 1)) {
								_context24.next = 16;
								break;
							}

							return _context24.delegateYield(args[1].toIntNative(), 't2', 13);

						case 13:
							deleteCount = _context24.t2;
							_context24.next = 17;
							break;

						case 16:
							deleteCount = len - start;

						case 17:
							if (deleteCount > len - start) deleteCount = len - start;
							if (deleteCount < 0) deleteCount = 0;

							deleted = [];
							toAdd = args.slice(2);
							delta = toAdd.length - deleteCount;
							i = start;

						case 23:
							if (!(i < start + deleteCount)) {
								_context24.next = 31;
								break;
							}

							_context24.t3 = deleted;
							return _context24.delegateYield(thiz.get(i), 't4', 26);

						case 26:
							_context24.t5 = _context24.t4;

							_context24.t3.push.call(_context24.t3, _context24.t5);

						case 28:
							++i;
							_context24.next = 23;
							break;

						case 31:
							if (!(delta > 0)) {
								_context24.next = 33;
								break;
							}

							return _context24.delegateYield(shiftRight(thiz, start, delta), 't6', 33);

						case 33:
							if (!(delta < 0)) {
								_context24.next = 35;
								break;
							}

							return _context24.delegateYield(shiftLeft(thiz, start - delta, -delta), 't7', 35);

						case 35:
							_i3 = 0;

						case 36:
							if (!(_i3 < toAdd.length)) {
								_context24.next = 41;
								break;
							}

							return _context24.delegateYield(thiz.set(start + _i3, toAdd[_i3]), 't8', 38);

						case 38:
							++_i3;
							_context24.next = 36;
							break;

						case 41:
							return _context24.delegateYield(thiz.set('length', Value.fromNative(len + delta)), 't9', 42);

						case 42:
							return _context24.abrupt('return', ArrayValue.make(deleted, s.realm));

						case 43:
						case 'end':
							return _context24.stop();
					}
				}
			}, splice$e, this);
		})
	}, {
		key: 'sort$e',
		value: _regenerator2.default.mark(function sort$e(thiz, args, s) {
			var length, vals, i, comp, fx, nue, _i4;

			return _regenerator2.default.wrap(function sort$e$(_context27) {
				while (1) {
					switch (_context27.prev = _context27.next) {
						case 0:
							return _context27.delegateYield(getLength(thiz), 't0', 1);

						case 1:
							length = _context27.t0;
							vals = new Array(length);
							i = 0;

						case 4:
							if (!(i < length)) {
								_context27.next = 10;
								break;
							}

							return _context27.delegateYield(thiz.get(i), 't1', 6);

						case 6:
							vals[i] = _context27.t1;

						case 7:
							++i;
							_context27.next = 4;
							break;

						case 10:
							comp = _regenerator2.default.mark(function comp(left, right) {
								var l, r;
								return _regenerator2.default.wrap(function comp$(_context25) {
									while (1) {
										switch (_context25.prev = _context25.next) {
											case 0:
												return _context25.delegateYield(left.toStringValue(), 't0', 1);

											case 1:
												l = _context25.t0;

												if (l) {
													_context25.next = 4;
													break;
												}

												return _context25.abrupt('return', false);

											case 4:
												return _context25.delegateYield(right.toStringValue(), 't1', 5);

											case 5:
												r = _context25.t1;

												if (r) {
													_context25.next = 8;
													break;
												}

												return _context25.abrupt('return', true);

											case 8:
												return _context25.delegateYield(l.lt(r), 't2', 9);

											case 9:
												return _context25.abrupt('return', _context25.t2.truthy);

											case 10:
											case 'end':
												return _context25.stop();
										}
									}
								}, comp, this);
							});

							if (!(args.length > 0)) {
								_context27.next = 18;
								break;
							}

							fx = args[0];

							if (fx.isCallable) {
								_context27.next = 17;
								break;
							}

							_context27.next = 16;
							return CompletionRecord.makeTypeError(s.realm, 'Arg2 not calalble.');

						case 16:
							return _context27.abrupt('return', _context27.sent);

						case 17:
							comp = _regenerator2.default.mark(function comp(left, right) {
								var res;
								return _regenerator2.default.wrap(function comp$(_context26) {
									while (1) {
										switch (_context26.prev = _context26.next) {
											case 0:
												return _context26.delegateYield(fx.call(Value.undef, [left, right], s), 't0', 1);

											case 1:
												res = _context26.t0;
												return _context26.delegateYield(res.lt(Value.fromNative(0)), 't1', 3);

											case 3:
												return _context26.abrupt('return', _context26.t1.truthy);

											case 4:
											case 'end':
												return _context26.stop();
										}
									}
								}, comp, this);
							});

						case 18:
							return _context27.delegateYield(_g.sort(vals, comp), 't2', 19);

						case 19:
							nue = _context27.t2;
							_i4 = 0;

						case 21:
							if (!(_i4 < length)) {
								_context27.next = 26;
								break;
							}

							return _context27.delegateYield(thiz.set(_i4, nue[_i4]), 't3', 23);

						case 23:
							++_i4;
							_context27.next = 21;
							break;

						case 26:
							return _context27.abrupt('return', thiz);

						case 27:
						case 'end':
							return _context27.stop();
					}
				}
			}, sort$e, this);
		})
	}, {
		key: 'toString$e',
		value: _regenerator2.default.mark(function toString$e(thiz, args, s) {
			var joinfn, ots;
			return _regenerator2.default.wrap(function toString$e$(_context28) {
				while (1) {
					switch (_context28.prev = _context28.next) {
						case 0:
							return _context28.delegateYield(thiz.get('join'), 't0', 1);

						case 1:
							joinfn = _context28.t0;

							if (!(!joinfn || !joinfn.isCallable)) {
								_context28.next = 9;
								break;
							}

							return _context28.delegateYield(s.realm.ObjectPrototype.get('toString'), 't1', 4);

						case 4:
							ots = _context28.t1;
							return _context28.delegateYield(ots.call(thiz, []), 't2', 6);

						case 6:
							return _context28.abrupt('return', _context28.t2);

						case 9:
							return _context28.delegateYield(joinfn.call(thiz, [defaultSeperator]), 't3', 10);

						case 10:
							return _context28.abrupt('return', _context28.t3);

						case 11:
						case 'end':
							return _context28.stop();
					}
				}
			}, toString$e, this);
		})
	}, {
		key: 'unshift$e',
		value: _regenerator2.default.mark(function unshift$e(thiz, args, s) {
			var amt, len, i, nl;
			return _regenerator2.default.wrap(function unshift$e$(_context29) {
				while (1) {
					switch (_context29.prev = _context29.next) {
						case 0:
							amt = args.length;
							return _context29.delegateYield(getLength(thiz), 't0', 2);

						case 2:
							len = _context29.t0;

							if (isNaN(len)) len = 0;
							return _context29.delegateYield(shiftRight(thiz, 0, amt), 't1', 5);

						case 5:
							i = 0;

						case 6:
							if (!(i < amt)) {
								_context29.next = 11;
								break;
							}

							return _context29.delegateYield(thiz.set(i, args[i]), 't2', 8);

						case 8:
							++i;
							_context29.next = 6;
							break;

						case 11:
							nl = Value.fromNative(len + amt);
							return _context29.delegateYield(thiz.set('length', nl, s), 't3', 13);

						case 13:
							return _context29.abrupt('return', nl);

						case 14:
						case 'end':
							return _context29.stop();
					}
				}
			}, unshift$e, this);
		})
	}]);
	return ArrayPrototype;
}(EasyObjectValue);

ArrayPrototype.prototype.wellKnownName = '%ArrayPrototype%';

module.exports = ArrayPrototype;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);

var ObjectValue = __webpack_require__(9);

var AssertFunction = function (_ObjectValue) {
	(0, _inherits3.default)(AssertFunction, _ObjectValue);

	function AssertFunction() {
		(0, _classCallCheck3.default)(this, AssertFunction);
		return (0, _possibleConstructorReturn3.default)(this, (AssertFunction.__proto__ || (0, _getPrototypeOf2.default)(AssertFunction)).apply(this, arguments));
	}

	(0, _createClass3.default)(AssertFunction, [{
		key: 'rawCall',
		value: _regenerator2.default.mark(function rawCall(n, evalu, scope) {
			var args, why, check, left, right, i, err;
			return _regenerator2.default.wrap(function rawCall$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(n.arguments.length == 0)) {
								_context.next = 2;
								break;
							}

							return _context.abrupt('return', Value.undef);

						case 2:
							args = new Array(n.arguments.length);
							why = '';
							check = n.arguments[0];
							_context.t0 = check.type;
							_context.next = _context.t0 === 'BinaryExpression' ? 8 : 16;
							break;

						case 8:
							return _context.delegateYield(evalu.branch(check.left, scope), 't1', 9);

						case 9:
							left = _context.t1;
							return _context.delegateYield(evalu.branch(check.right, scope), 't2', 11);

						case 11:
							right = _context.t2;
							return _context.delegateYield(evalu.doBinaryEvaluation(check.operator, left, right, scope), 't3', 13);

						case 13:
							args[0] = _context.t3;

							why = n.arguments[0].srcName + ' (' + left.debugString + ' ' + check.operator + ' ' + right.debugString + ')';
							return _context.abrupt('break', 19);

						case 16:
							why = n.arguments[0].srcName || '???';
							return _context.delegateYield(evalu.branch(n.arguments[0], scope), 't4', 18);

						case 18:
							args[0] = _context.t4;

						case 19:
							i = 1;

						case 20:
							if (!(i < args.length)) {
								_context.next = 26;
								break;
							}

							return _context.delegateYield(evalu.branch(n.arguments[i], scope), 't5', 22);

						case 22:
							args[i] = _context.t5;

						case 23:
							++i;
							_context.next = 20;
							break;

						case 26:
							if (!args[0].truthy) {
								_context.next = 28;
								break;
							}

							return _context.abrupt('return', Value.undef);

						case 28:
							if (!(args.length > 1)) {
								_context.next = 31;
								break;
							}

							return _context.delegateYield(args[1].toStringNative(), 't6', 30);

						case 30:
							why = _context.t6;

						case 31:
							err = scope.realm.Error.make(why, 'AssertionError');
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, err));

						case 33:
						case 'end':
							return _context.stop();
					}
				}
			}, rawCall, this);
		})
	}, {
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var val, reason, err;
			return _regenerator2.default.wrap(function call$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							val = Value.undef;

							if (!(args.length > 0)) {
								_context2.next = 3;
								break;
							}

							return _context2.abrupt('return', Value.undef);

						case 3:
							if (!val.truthy) {
								_context2.next = 5;
								break;
							}

							return _context2.abrupt('return', Value.undef);

						case 5:
							reason = '';

							if (!(args.length > 1)) {
								_context2.next = 11;
								break;
							}

							return _context2.delegateYield(args[1].toStringValue(), 't0', 8);

						case 8:
							reason = _context2.t0.toNative();
							_context2.next = 12;
							break;

						case 11:
							if (ext.callNode && ext.callNode.arguments[0]) {
								reason = ext.callNode.arguments[0].srcName || '???';
							}

						case 12:
							err = scope.realm.Error.make(reason, 'AssertionError');
							return _context2.abrupt('return', new CompletionRecord(CompletionRecord.THROW, err));

						case 14:
						case 'end':
							return _context2.stop();
					}
				}
			}, call, this);
		})
	}]);
	return AssertFunction;
}(ObjectValue);

module.exports = AssertFunction;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var EasyObjectValue = __webpack_require__(8);

var Boolean = function (_EasyObjectValue) {
	(0, _inherits3.default)(Boolean, _EasyObjectValue);

	function Boolean() {
		(0, _classCallCheck3.default)(this, Boolean);
		return (0, _possibleConstructorReturn3.default)(this, (Boolean.__proto__ || (0, _getPrototypeOf2.default)(Boolean)).apply(this, arguments));
	}

	(0, _createClass3.default)(Boolean, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var asConstructor, pv;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (asConstructor) {
								_context.next = 5;
								break;
							}

							if (!(args.length < 1)) {
								_context.next = 4;
								break;
							}

							return _context.abrupt('return', Value.false);

						case 4:
							return _context.abrupt('return', args[0].truthy ? Value.true : Value.false);

						case 5:
							if (args.length > 0) {
								pv = args[0].truthy ? Value.true : Value.false;

								thiz.primativeValue = pv;
							} else {
								thiz.primativeValue = false;
							}

						case 6:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.BooleanPrototype;
		}
	}, {
		key: 'constructorFor',
		value: function constructorFor(realm) {
			return realm.BooleanPrototype;
		}
	}]);
	return Boolean;
}(EasyObjectValue);

module.exports = Boolean;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimitiveValue = __webpack_require__(12);
var EasyObjectValue = __webpack_require__(8);
var Value = __webpack_require__(3);

var BooleanPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(BooleanPrototype, _EasyObjectValue);

	function BooleanPrototype() {
		(0, _classCallCheck3.default)(this, BooleanPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (BooleanPrototype.__proto__ || (0, _getPrototypeOf2.default)(BooleanPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(BooleanPrototype, null, [{
		key: 'toString$e',
		value: _regenerator2.default.mark(function toString$e(thiz, argz) {
			var pv;
			return _regenerator2.default.wrap(function toString$e$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							pv = thiz;

							if (thiz.specTypeName !== 'boolean') {
								pv = thiz.primativeValue;
							}

							if (!pv.truthy) {
								_context.next = 6;
								break;
							}

							return _context.abrupt('return', Value.fromNative('true'));

						case 6:
							return _context.abrupt('return', Value.fromNative('false'));

						case 7:
						case 'end':
							return _context.stop();
					}
				}
			}, toString$e, this);
		})
	}, {
		key: 'valueOf$e',
		value: _regenerator2.default.mark(function valueOf$e(thiz) {
			var pv;
			return _regenerator2.default.wrap(function valueOf$e$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(thiz.specTypeName === 'boolean')) {
								_context2.next = 2;
								break;
							}

							return _context2.abrupt('return', thiz);

						case 2:
							if (!(thiz.specTypeName === 'object')) {
								_context2.next = 6;
								break;
							}

							pv = thiz.primativeValue;

							if (!(pv.specTypeName === 'boolean')) {
								_context2.next = 6;
								break;
							}

							return _context2.abrupt('return', pv);

						case 6:
							throw new TypeError('Couldnt get there.');

						case 7:
						case 'end':
							return _context2.stop();
					}
				}
			}, valueOf$e, this);
		})
	}]);
	return BooleanPrototype;
}(EasyObjectValue);

module.exports = BooleanPrototype;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [proxy].map(_regenerator2.default.mark);

var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);

var EasyObjectValue = __webpack_require__(8);

function proxy(op, thiz, args, s) {
	var realm, printer, strings, i;
	return _regenerator2.default.wrap(function proxy$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					realm = s.realm;
					printer = realm.print;
					strings = new Array(args.length);
					i = 0;

				case 4:
					if (!(i < args.length)) {
						_context.next = 10;
						break;
					}

					return _context.delegateYield(args[i].toStringNative(), 't0', 6);

				case 6:
					strings[i] = _context.t0;

				case 7:
					++i;
					_context.next = 4;
					break;

				case 10:
					//console[op].apply(console, strings);
					printer.apply(realm, strings);
					return _context.abrupt('return', Value.undef);

				case 12:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked[0], this);
}

var Console = function (_EasyObjectValue) {
	(0, _inherits3.default)(Console, _EasyObjectValue);

	function Console() {
		(0, _classCallCheck3.default)(this, Console);
		return (0, _possibleConstructorReturn3.default)(this, (Console.__proto__ || (0, _getPrototypeOf2.default)(Console)).apply(this, arguments));
	}

	(0, _createClass3.default)(Console, null, [{
		key: 'log',
		value: _regenerator2.default.mark(function log(thiz, argz, s) {
			return _regenerator2.default.wrap(function log$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.delegateYield(proxy('log', thiz, argz, s), 't0', 1);

						case 1:
							return _context2.abrupt('return', _context2.t0);

						case 2:
						case 'end':
							return _context2.stop();
					}
				}
			}, log, this);
		})
	}, {
		key: 'info',
		value: _regenerator2.default.mark(function info(thiz, argz, s) {
			return _regenerator2.default.wrap(function info$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(proxy('info', thiz, argz, s), 't0', 1);

						case 1:
							return _context3.abrupt('return', _context3.t0);

						case 2:
						case 'end':
							return _context3.stop();
					}
				}
			}, info, this);
		})
	}, {
		key: 'warn',
		value: _regenerator2.default.mark(function warn(thiz, argz, s) {
			return _regenerator2.default.wrap(function warn$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(proxy('warn', thiz, argz, s), 't0', 1);

						case 1:
							return _context4.abrupt('return', _context4.t0);

						case 2:
						case 'end':
							return _context4.stop();
					}
				}
			}, warn, this);
		})
	}, {
		key: 'error',
		value: _regenerator2.default.mark(function error(thiz, argz, s) {
			return _regenerator2.default.wrap(function error$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.delegateYield(proxy('error', thiz, argz, s), 't0', 1);

						case 1:
							return _context5.abrupt('return', _context5.t0);

						case 2:
						case 'end':
							return _context5.stop();
					}
				}
			}, error, this);
		})
	}, {
		key: 'trace',
		value: _regenerator2.default.mark(function trace(thiz, argz, s) {
			return _regenerator2.default.wrap(function trace$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(proxy('trace', thiz, argz, s), 't0', 1);

						case 1:
							return _context6.abrupt('return', _context6.t0);

						case 2:
						case 'end':
							return _context6.stop();
					}
				}
			}, trace, this);
		})
	}]);
	return Console;
}(EasyObjectValue);

module.exports = Console;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var ObjectValue = __webpack_require__(9);
var ArrayValue = __webpack_require__(14);
var PrimitiveValue = __webpack_require__(12);
var EmptyValue = __webpack_require__(28);
var ErrorValue = __webpack_require__(59);
var CompletionRecord = __webpack_require__(7);
var PropertyDescriptor = __webpack_require__(15);
var Value = __webpack_require__(3);

var ErrorObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(ErrorObject, _EasyObjectValue);

	function ErrorObject(realm) {
		(0, _classCallCheck3.default)(this, ErrorObject);

		var _this = (0, _possibleConstructorReturn3.default)(this, (ErrorObject.__proto__ || (0, _getPrototypeOf2.default)(ErrorObject)).call(this, realm));

		_this.realm = realm;
		return _this;
	}

	(0, _createClass3.default)(ErrorObject, [{
		key: 'makeOne',
		value: function makeOne() {
			var nue = new ErrorValue(this.realm);
			var p = this.properties['prototype'];
			if (p) nue.setPrototype(p.value);
			return nue;
		}
	}, {
		key: 'make',
		value: function make(message, name) {
			var nue = this.makeOne();
			if (message) {
				nue.setImmediate('message', Value.fromNative(message));
				nue.properties['message'].enumerable = false;
				nue.createNativeAnalog().message = message;
			}

			if (name) {
				nue.setImmediate('name', Value.fromNative(name));
				nue.properties['name'].enumerable = false;
				nue.createNativeAnalog().name = name;
			}

			return nue;
		}
	}, {
		key: 'makeFrom',
		value: function makeFrom(err) {
			var nue = this.makeOne();
			if (err.message) nue.setImmediate('message', Value.fromNative(err.message));
			if (err.name) nue.setImmediate('name', Value.fromNative(err.name));
			err.native = err;
			return nue;
		}
	}, {
		key: 'makeThisForNew',
		value: _regenerator2.default.mark(function makeThisForNew() {
			return _regenerator2.default.wrap(function makeThisForNew$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.abrupt('return', this.makeOne());

						case 1:
						case 'end':
							return _context.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}, {
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, s, e) {
			return _regenerator2.default.wrap(function call$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:

							if (thiz instanceof EmptyValue) {
								thiz = this.makeOne();
							}

							if (!(args.length > 0)) {
								_context2.next = 3;
								break;
							}

							return _context2.delegateYield(thiz.set('message', args[0], s, { enumerable: false }), 't0', 3);

						case 3:
							if (!(args.length > 1)) {
								_context2.next = 5;
								break;
							}

							return _context2.delegateYield(thiz.set('fileName', args[1], s, { enumerable: false }), 't1', 5);

						case 5:
							if (!(args.length > 2)) {
								_context2.next = 7;
								break;
							}

							return _context2.delegateYield(thiz.set('lineNumber', args[2], s, { enumerable: false }), 't2', 7);

						case 7:
							return _context2.abrupt('return', thiz);

						case 8:
						case 'end':
							return _context2.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'makeErrorType',
		value: function makeErrorType(type) {
			var proto = new ObjectValue(this.realm);
			proto.setPrototype(this.realm.ErrorPrototype);
			proto.setImmediate('name', Value.fromNative(type.name));
			proto.properties.name.enumerable = false;
			proto.wellKnownName = '%' + type.name + 'Prototype%';
			proto.nativeClass = type;

			var obj = new ErrorObject(this.realm);
			obj.setPrototype(proto);
			obj.properties.prototype.value = proto;
			obj.wellKnownName = '%' + type.name + '%';
			proto.rawSetProperty('constructor', new PropertyDescriptor(obj, false));
			return obj;
		}
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.ErrorPrototype;
		}
	}]);
	return ErrorObject;
}(EasyObjectValue);

ErrorObject.prototype.wellKnownName = '%Error%';

module.exports = ErrorObject;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var ObjectValue = __webpack_require__(9);
var ArrayValue = __webpack_require__(14);
var PrimitiveValue = __webpack_require__(12);
var CompletionRecord = __webpack_require__(7);
var Value = __webpack_require__(3);

var ErrorPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(ErrorPrototype, _EasyObjectValue);

	function ErrorPrototype() {
		(0, _classCallCheck3.default)(this, ErrorPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (ErrorPrototype.__proto__ || (0, _getPrototypeOf2.default)(ErrorPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(ErrorPrototype, null, [{
		key: 'toString',
		value: _regenerator2.default.mark(function toString(thiz, argz, s) {
			var name, message;
			return _regenerator2.default.wrap(function toString$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.delegateYield(thiz.get('name'), 't0', 1);

						case 1:
							return _context.delegateYield(_context.t0.toStringNative(), 't1', 2);

						case 2:
							name = _context.t1;
							return _context.delegateYield(thiz.get('message'), 't2', 4);

						case 4:
							return _context.delegateYield(_context.t2.toStringNative(), 't3', 5);

						case 5:
							message = _context.t3;

							if (!(name && message)) {
								_context.next = 10;
								break;
							}

							return _context.abrupt('return', Value.fromNative(name + ': ' + message));

						case 10:
							if (!message) {
								_context.next = 14;
								break;
							}

							return _context.abrupt('return', Value.fromNative(message));

						case 14:
							return _context.abrupt('return', Value.fromNative(name));

						case 15:
						case 'end':
							return _context.stop();
					}
				}
			}, toString, this);
		})
	}, {
		key: 'message',
		get: function get() {
			return Value.emptyString;
		}
	}, {
		key: 'name$',
		get: function get() {
			return Value.fromNative('Error');
		}
	}]);
	return ErrorPrototype;
}(EasyObjectValue);

ErrorPrototype.prototype.wellKnownName = '%ErrorPrototype%';

module.exports = ErrorPrototype;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var EasyNativeFunction = __webpack_require__(35);
var Value = __webpack_require__(3);

var EsperObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(EsperObject, _EasyObjectValue);

	function EsperObject() {
		(0, _classCallCheck3.default)(this, EsperObject);
		return (0, _possibleConstructorReturn3.default)(this, (EsperObject.__proto__ || (0, _getPrototypeOf2.default)(EsperObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(EsperObject, null, [{
		key: 'dump$cew',
		value: _regenerator2.default.mark(function dump$cew(thiz, args) {
			return _regenerator2.default.wrap(function dump$cew$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							console.log('Esper#dump:', args);
							if (typeof window !== 'undefined') window.dumped = args[0];
							return _context.abrupt('return', Value.undef);

						case 3:
						case 'end':
							return _context.stop();
					}
				}
			}, dump$cew, this);
		})
	}, {
		key: 'str$cew',
		value: _regenerator2.default.mark(function str$cew(thiz, args) {
			var t;
			return _regenerator2.default.wrap(function str$cew$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							t = Value.undef;

							if (args.length > 0) t = args[0];
							return _context2.abrupt('return', this.fromNative(t.debugString));

						case 3:
						case 'end':
							return _context2.stop();
					}
				}
			}, str$cew, this);
		})
	}, {
		key: 'stack$cew',
		value: _regenerator2.default.mark(function stack$cew(thiz, args, scope, extra) {
			return _regenerator2.default.wrap(function stack$cew$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.abrupt('return', Value.fromNative(extra.evaluator.buildStacktrace().join('\n')));

						case 1:
						case 'end':
							return _context3.stop();
					}
				}
			}, stack$cew, this);
		})
	}, {
		key: 'globals$cew',
		value: _regenerator2.default.mark(function globals$cew(thiz, args, scope, extra) {
			return _regenerator2.default.wrap(function globals$cew$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', scope.global.object);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, globals$cew, this);
		})
	}, {
		key: 'scope$cew',
		value: _regenerator2.default.mark(function scope$cew(thiz, args, scope, extra) {
			return _regenerator2.default.wrap(function scope$cew$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.abrupt('return', scope.object);

						case 1:
						case 'end':
							return _context5.stop();
					}
				}
			}, scope$cew, this);
		})
	}]);
	return EsperObject;
}(EasyObjectValue);

module.exports = EsperObject;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(47);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var ClosureValue = __webpack_require__(34);
var CompletionRecord = __webpack_require__(7);
var ASTPreprocessor = __webpack_require__(43);
var PropertyDescriptor = __webpack_require__(15);

var FunctionObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(FunctionObject, _EasyObjectValue);

	function FunctionObject() {
		(0, _classCallCheck3.default)(this, FunctionObject);
		return (0, _possibleConstructorReturn3.default)(this, (FunctionObject.__proto__ || (0, _getPrototypeOf2.default)(FunctionObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(FunctionObject, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, scope) {
			var an, i, code, ast, oast, fn;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							an = new Array(args.length - 1);
							i = 0;

						case 2:
							if (!(i < args.length - 1)) {
								_context.next = 8;
								break;
							}

							return _context.delegateYield(args[i].toStringValue(), 't0', 4);

						case 4:
							an[i] = _context.t0.toNative();

						case 5:
							++i;
							_context.next = 2;
							break;

						case 8:
							code = 'function name(' + an.join(', ') + ') {\n' + args[args.length - 1].toNative().toString() + '\n}';
							ast = void 0;
							_context.prev = 10;
							oast = scope.realm.parser(code, { loc: true });

							ast = ASTPreprocessor.process(oast);
							_context.next = 18;
							break;

						case 15:
							_context.prev = 15;
							_context.t1 = _context['catch'](10);
							return _context.abrupt('return', new CompletionRecord(CompletionRecord.THROW, _context.t1));

						case 18:
							fn = new ClosureValue(ast.body[0], scope.global);

							fn.boundScope = scope.global;
							return _context.abrupt('return', fn);

						case 21:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this, [[10, 15]]);
		})
	}, {
		key: '_init',
		value: function _init(realm) {
			(0, _get3.default)(FunctionObject.prototype.__proto__ || (0, _getPrototypeOf2.default)(FunctionObject.prototype), '_init', this).call(this, realm);
			var cs = new PropertyDescriptor(this);
			cs.configurable = false;
			cs.enumerable = false;
			this.properties['constructor'] = cs;
		}
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.FunctionPrototype;
		}
	}, {
		key: 'callLength',
		get: function get() {
			return 1;
		}
		//objPrototype(realm) { return realm.Function; }

	}]);
	return FunctionObject;
}(EasyObjectValue);

module.exports = FunctionObject;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var ClosureValue = __webpack_require__(34);
var Value = __webpack_require__(3);
var ObjectValue = __webpack_require__(9);
var CompletionRecord = __webpack_require__(7);
var PropertyDescriptor = __webpack_require__(15);

var BoundFunction = function (_ObjectValue) {
	(0, _inherits3.default)(BoundFunction, _ObjectValue);

	function BoundFunction(func, realm) {
		(0, _classCallCheck3.default)(this, BoundFunction);

		var _this = (0, _possibleConstructorReturn3.default)(this, (BoundFunction.__proto__ || (0, _getPrototypeOf2.default)(BoundFunction)).call(this, realm));

		_this.setPrototype(realm.FunctionPrototype);
		_this.func = func;
		_this.boundArgs = [];
		return _this;
	}

	(0, _createClass3.default)(BoundFunction, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, s, ext) {
			var tt, asConstructor, rargs;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							tt = thiz;
							asConstructor = ext && ext.asConstructor;


							if (!asConstructor) {
								tt = this.boundThis;
							}

							rargs = [].concat(this.boundArgs, args);
							return _context.delegateYield(this.func.call(tt, rargs, s, ext), 't0', 5);

						case 5:
							return _context.abrupt('return', _context.t0);

						case 6:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'constructorOf',
		value: _regenerator2.default.mark(function constructorOf(other, realm) {
			return _regenerator2.default.wrap(function constructorOf$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.delegateYield(this.func.constructorOf(other, realm), 't0', 1);

						case 1:
							return _context2.abrupt('return', _context2.t0);

						case 2:
						case 'end':
							return _context2.stop();
					}
				}
			}, constructorOf, this);
		})
	}, {
		key: 'makeThisForNew',
		value: _regenerator2.default.mark(function makeThisForNew(realm) {
			return _regenerator2.default.wrap(function makeThisForNew$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(this.func.makeThisForNew(realm), 't0', 1);

						case 1:
							return _context3.abrupt('return', _context3.t0);

						case 2:
						case 'end':
							return _context3.stop();
					}
				}
			}, makeThisForNew, this);
		})
	}]);
	return BoundFunction;
}(ObjectValue);

var FunctionPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(FunctionPrototype, _EasyObjectValue);

	function FunctionPrototype() {
		(0, _classCallCheck3.default)(this, FunctionPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (FunctionPrototype.__proto__ || (0, _getPrototypeOf2.default)(FunctionPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(FunctionPrototype, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, s) {
			return _regenerator2.default.wrap(function call$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.abrupt('return', EasyObjectValue.undef);

						case 1:
						case 'end':
							return _context4.stop();
					}
				}
			}, call, this);
		})
	}], [{
		key: 'apply',
		value: _regenerator2.default.mark(function apply(thiz, args, s) {
			var vthis, arga, arr, length, i;
			return _regenerator2.default.wrap(function apply$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							vthis = args[0];
							arga = [];

							if (!(args.length > 1)) {
								_context5.next = 15;
								break;
							}

							arr = args[1];
							return _context5.delegateYield(arr.get('length'), 't0', 5);

						case 5:
							length = _context5.t0;
							return _context5.delegateYield(length.toNumberValue(), 't1', 7);

						case 7:
							length = _context5.t1.toNative();
							i = 0;

						case 9:
							if (!(i < length)) {
								_context5.next = 15;
								break;
							}

							return _context5.delegateYield(arr.get(i), 't2', 11);

						case 11:
							arga[i] = _context5.t2;

						case 12:
							++i;
							_context5.next = 9;
							break;

						case 15:
							return _context5.delegateYield(thiz.call(vthis, arga, s), 't3', 16);

						case 16:
							return _context5.abrupt('return', _context5.t3);

						case 17:
						case 'end':
							return _context5.stop();
					}
				}
			}, apply, this);
		})
	}, {
		key: 'bind',
		value: _regenerator2.default.mark(function bind(thiz, args, s) {
			var bthis, out, newlen;
			return _regenerator2.default.wrap(function bind$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							bthis = s.realm.globalScope.object; //TODO: is this actually null in scrict mode?

							if (args.length > 0) {
								if (args[0].jsTypeName !== 'undefined') bthis = args[0];
							}
							out = new BoundFunction(thiz, s.realm);

							if (args.length > 1) out.boundArgs = args.slice(1);
							out.boundThis = bthis;

							if (thiz.properties['length']) {
								newlen = thiz.properties['length'].value.toNative() - out.boundArgs.length;

								out.properties['length'] = new PropertyDescriptor(this.fromNative(newlen));
							}
							return _context6.abrupt('return', out);

						case 7:
						case 'end':
							return _context6.stop();
					}
				}
			}, bind, this);
		})
	}, {
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, s) {
			var vthis;
			return _regenerator2.default.wrap(function call$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							vthis = Value.undef;

							if (args.length > 0) vthis = args.shift();
							return _context7.delegateYield(thiz.call(vthis, args, s), 't0', 3);

						case 3:
							return _context7.abrupt('return', _context7.t0);

						case 4:
						case 'end':
							return _context7.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'toString',
		value: _regenerator2.default.mark(function toString(thiz, args, s) {
			var astsrc;
			return _regenerator2.default.wrap(function toString$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							if (!(thiz instanceof ClosureValue)) {
								_context8.next = 7;
								break;
							}

							astsrc = thiz.func.source();

							if (!astsrc) {
								_context8.next = 4;
								break;
							}

							return _context8.abrupt('return', this.fromNative(astsrc));

						case 4:
							return _context8.abrupt('return', this.fromNative('function() { [AST] }'));

						case 7:
							if (!(thiz instanceof BoundFunction)) {
								_context8.next = 11;
								break;
							}

							return _context8.abrupt('return', this.fromNative('function() { [bound function] }'));

						case 11:
							if (!(thiz instanceof EasyObjectValue.EasyNativeFunction)) {
								_context8.next = 13;
								break;
							}

							return _context8.abrupt('return', this.fromNative('function() { [native code] }'));

						case 13:
							return _context8.abrupt('return', CompletionRecord.makeTypeError(s.realm, 'Function.prototype.toString is not generic'));

						case 14:
						case 'end':
							return _context8.stop();
					}
				}
			}, toString, this);
		})
	}, {
		key: 'caller$cew',
		get: function get() {
			return null;
		}
	}, {
		key: 'length$ew',
		get: function get() {
			return '?';
		}
	}, {
		key: 'name$ew',
		get: function get() {
			return '';
		}
	}]);
	return FunctionPrototype;
}(EasyObjectValue);

FunctionPrototype.prototype.wellKnownName = '%FunctionPrototype%';

module.exports = FunctionPrototype;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _weakMap = __webpack_require__(64);

var _weakMap2 = _interopRequireDefault(_weakMap);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = __webpack_require__(37);

var _keys2 = _interopRequireDefault(_keys);

var _stringify = __webpack_require__(46);

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var EasyObjectValue = __webpack_require__(8);
var ObjectValue = __webpack_require__(9);
var PrimitiveValue = __webpack_require__(12);
var ArrayValue = __webpack_require__(14);
var CompletionRecord = __webpack_require__(7);

var JSONUtils = function () {
	function JSONUtils() {
		(0, _classCallCheck3.default)(this, JSONUtils);
	}

	(0, _createClass3.default)(JSONUtils, null, [{
		key: 'genJSONTokens',
		value: _regenerator2.default.mark(function genJSONTokens(arr, o, map, str, strincr) {
			var str2, length, i, m, first, _iterator, _isArray, _i, _ref, p, po, v;

			return _regenerator2.default.wrap(function genJSONTokens$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							str2 = str !== undefined ? str + strincr : undefined;

							if (!(o instanceof PrimitiveValue)) {
								_context.next = 3;
								break;
							}

							return _context.abrupt('return', arr.push((0, _stringify2.default)(o.native)));

						case 3:
							if (!map.has(o)) {
								_context.next = 5;
								break;
							}

							return _context.abrupt('return', arr.push('[Circular]'));

						case 5:
							map.set(o, true);

							if (!(o instanceof ArrayValue)) {
								_context.next = 31;
								break;
							}

							arr.push('[');
							return _context.delegateYield(o.get('length'), 't0', 9);

						case 9:
							return _context.delegateYield(_context.t0.toIntNative(), 't1', 10);

						case 10:
							length = _context.t1;
							i = 0;

						case 12:
							if (!(i < length)) {
								_context.next = 27;
								break;
							}

							if (i > 0) arr.push(',');
							if (str !== undefined) arr.push('\n');
							return _context.delegateYield(o.get(i), 't2', 16);

						case 16:
							m = _context.t2;

							if (str !== undefined) arr.push(str2);

							if (!m) {
								_context.next = 24;
								break;
							}

							if (!(m.jsTypeName == 'undefined')) {
								_context.next = 23;
								break;
							}

							arr.push('null');
							_context.next = 24;
							break;

						case 23:
							return _context.delegateYield(JSONUtils.genJSONTokens(arr, m, map, str2, strincr), 't3', 24);

						case 24:
							++i;
							_context.next = 12;
							break;

						case 27:
							if (str !== undefined) arr.push('\n');
							if (str !== undefined) arr.push(str);
							arr.push(']');
							return _context.abrupt('return');

						case 31:

							arr.push('{');

							first = true;
							_iterator = (0, _keys2.default)(o.properties), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 34:
							if (!_isArray) {
								_context.next = 40;
								break;
							}

							if (!(_i >= _iterator.length)) {
								_context.next = 37;
								break;
							}

							return _context.abrupt('break', 59);

						case 37:
							_ref = _iterator[_i++];
							_context.next = 44;
							break;

						case 40:
							_i = _iterator.next();

							if (!_i.done) {
								_context.next = 43;
								break;
							}

							return _context.abrupt('break', 59);

						case 43:
							_ref = _i.value;

						case 44:
							p = _ref;
							po = o.properties[p];

							if (po.enumerable) {
								_context.next = 48;
								break;
							}

							return _context.abrupt('continue', 57);

						case 48:
							return _context.delegateYield(o.get(p), 't4', 49);

						case 49:
							v = _context.t4;

							if (!(v.jsTypeName === 'function')) {
								_context.next = 52;
								break;
							}

							return _context.abrupt('continue', 57);

						case 52:

							if (first) first = false;else arr.push(',');
							if (str !== undefined) arr.push('\n', str2);

							arr.push((0, _stringify2.default)(p), ':');
							if (str !== undefined) arr.push(' ');
							return _context.delegateYield(JSONUtils.genJSONTokens(arr, v, map, str2, strincr), 't5', 57);

						case 57:
							_context.next = 34;
							break;

						case 59:
							if (str !== undefined) arr.push('\n');
							arr.push('}');

						case 61:
						case 'end':
							return _context.stop();
					}
				}
			}, genJSONTokens, this);
		})
	}]);
	return JSONUtils;
}();

var JSONObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(JSONObject, _EasyObjectValue);

	function JSONObject() {
		(0, _classCallCheck3.default)(this, JSONObject);
		return (0, _possibleConstructorReturn3.default)(this, (JSONObject.__proto__ || (0, _getPrototypeOf2.default)(JSONObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(JSONObject, null, [{
		key: 'parse',
		value: _regenerator2.default.mark(function parse(thiz, args, s) {
			var str, out;
			return _regenerator2.default.wrap(function parse$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							str = Value.emptyString;

							if (!(args.length > 0)) {
								_context2.next = 4;
								break;
							}

							return _context2.delegateYield(args[0].toStringNative(), 't0', 3);

						case 3:
							str = _context2.t0;

						case 4:
							_context2.prev = 4;
							out = JSON.parse(str, function (k, o) {
								if (o === undefined) return Value.undef;
								if (o === null) return Value.null;

								var prim = Value.fromPrimativeNative(o);
								if (prim) return prim;

								if (Array.isArray(o)) {
									return ArrayValue.make(o, s.realm);
								}

								var v = new ObjectValue(s.realm);
								for (var p in o) {
									v.setImmediate(p, o[p]);
								}
								return v;
							});
							return _context2.abrupt('return', out);

						case 9:
							_context2.prev = 9;
							_context2.t1 = _context2['catch'](4);
							_context2.next = 13;
							return new CompletionRecord(CompletionRecord.THROW, Value.fromNative(_context2.t1, s.realm));

						case 13:
						case 'end':
							return _context2.stop();
					}
				}
			}, parse, this, [[4, 9]]);
		})
	}, {
		key: 'stringify',
		value: _regenerator2.default.mark(function stringify(thiz, args, s) {
			var arr, v, replacer, str, strincr, len;
			return _regenerator2.default.wrap(function stringify$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							arr = [];
							v = Value.undef;
							replacer = null;
							str = void 0;
							strincr = void 0;


							if (args.length > 0) v = args[0];
							if (args.length > 1) replacer = args[1];

							if (!(args.length > 2)) {
								_context3.next = 17;
								break;
							}

							str = '';

							if (!(args[2].jsTypeName === 'number')) {
								_context3.next = 15;
								break;
							}

							return _context3.delegateYield(args[2].toIntNative(), 't0', 11);

						case 11:
							len = _context3.t0;

							strincr = new Array(1 + len).join(' ');
							_context3.next = 17;
							break;

						case 15:
							return _context3.delegateYield(args[2].toStringNative(), 't1', 16);

						case 16:
							strincr = _context3.t1;

						case 17:
							if (!(v.jsTypeName === 'undefined')) {
								_context3.next = 19;
								break;
							}

							return _context3.abrupt('return', Value.undef);

						case 19:
							return _context3.delegateYield(JSONUtils.genJSONTokens(arr, v, new _weakMap2.default(), str, strincr), 't2', 20);

						case 20:
							return _context3.abrupt('return', Value.fromNative(arr.join('')));

						case 21:
						case 'end':
							return _context3.stop();
					}
				}
			}, stringify, this);
		})
	}]);
	return JSONObject;
}(EasyObjectValue);

module.exports = JSONObject;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var Value = __webpack_require__(3);

function makeNumber(num) {
	return 0 + num.toNative();
}

function wrapMathFunction(name) {
	var fn = Math[name];
	return _regenerator2.default.mark(function _callee(thiz, args, realm) {
		var length, argz, i, result;
		return _regenerator2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						length = args.length;
						argz = new Array(length);

						for (i = 0; i < length; ++i) {
							if (i < args.length) argz[i] = args[i].toNative();else argz[i] = undefined;
						}

						result = fn.apply(Math, argz);
						return _context.abrupt('return', Value.fromPrimativeNative(result));

					case 5:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, this);
	});
}

var MathObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(MathObject, _EasyObjectValue);

	function MathObject() {
		(0, _classCallCheck3.default)(this, MathObject);
		return (0, _possibleConstructorReturn3.default)(this, (MathObject.__proto__ || (0, _getPrototypeOf2.default)(MathObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(MathObject, null, [{
		key: 'E$cew',
		get: function get() {
			return Math.E;
		}
	}, {
		key: 'LN10$cew',
		get: function get() {
			return Math.LN10;
		}
	}, {
		key: 'LN2$cew',
		get: function get() {
			return Math.LN2;
		}
	}, {
		key: 'LOG10E$cew',
		get: function get() {
			return Math.LOG10E;
		}
	}, {
		key: 'LOG2E$cew',
		get: function get() {
			return Math.LOG2E;
		}
	}, {
		key: 'PI$cew',
		get: function get() {
			return Math.PI;
		}
	}, {
		key: 'SQRT1_2$cew',
		get: function get() {
			return Math.SQRT1_2;
		}
	}, {
		key: 'SQRT2$cew',
		get: function get() {
			return Math.SQRT2;
		}
	}]);
	return MathObject;
}(EasyObjectValue);

MathObject.sqrt = wrapMathFunction('sqrt');
MathObject.atanh = wrapMathFunction('atanh');
MathObject.log2 = wrapMathFunction('log2');
MathObject.asinh = wrapMathFunction('asinh');
MathObject.log = wrapMathFunction('log');
MathObject.trunc = wrapMathFunction('trunc');
MathObject.max = wrapMathFunction('max');
MathObject.log10 = wrapMathFunction('log10');
MathObject.atan2 = wrapMathFunction('atan2');
MathObject.round = wrapMathFunction('round');
MathObject.exp = wrapMathFunction('exp');
MathObject.tan = wrapMathFunction('tan');
MathObject.floor = wrapMathFunction('floor');
MathObject.sign = wrapMathFunction('sign');
MathObject.fround = wrapMathFunction('fround');
MathObject.sin = wrapMathFunction('sin');
MathObject.tanh = wrapMathFunction('tanh');
MathObject.expm1 = wrapMathFunction('expm1');
MathObject.cbrt = wrapMathFunction('cbrt');
MathObject.cos = wrapMathFunction('cos');
MathObject.abs = wrapMathFunction('abs');
MathObject.acosh = wrapMathFunction('acosh');
MathObject.asin = wrapMathFunction('asin');
MathObject.ceil = wrapMathFunction('ceil');
MathObject.atan = wrapMathFunction('atan');
MathObject.cosh = wrapMathFunction('cosh');
MathObject.random = wrapMathFunction('random');
MathObject.log1p = wrapMathFunction('log1p');
MathObject.imul = wrapMathFunction('imul');
MathObject.hypot = wrapMathFunction('hypot');
MathObject.pow = wrapMathFunction('pow');
MathObject.sinh = wrapMathFunction('sinh');
MathObject.acos = wrapMathFunction('acos');
MathObject.min = wrapMathFunction('min');
MathObject.max = wrapMathFunction('max');

MathObject.prototype.clazz = 'Math';

module.exports = MathObject;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var CompletionRecord = __webpack_require__(7);

var NumberObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(NumberObject, _EasyObjectValue);

	function NumberObject() {
		(0, _classCallCheck3.default)(this, NumberObject);
		return (0, _possibleConstructorReturn3.default)(this, (NumberObject.__proto__ || (0, _getPrototypeOf2.default)(NumberObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(NumberObject, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var asConstructor, pv;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (asConstructor) {
								_context.next = 6;
								break;
							}

							if (!(args.length < 1)) {
								_context.next = 4;
								break;
							}

							return _context.abrupt('return', EasyObjectValue.zero);

						case 4:
							return _context.delegateYield(args[0].toNumberValue(), 't0', 5);

						case 5:
							return _context.abrupt('return', _context.t0);

						case 6:
							pv = EasyObjectValue.zero;

							if (!(args.length > 0)) {
								_context.next = 10;
								break;
							}

							return _context.delegateYield(args[0].toNumberValue(), 't1', 9);

						case 9:
							pv = _context.t1;

						case 10:
							thiz.primativeValue = pv;

						case 11:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.NumberPrototype;
		}
	}, {
		key: 'constructorFor',
		value: function constructorFor(realm) {
			return realm.NumberPrototype;
		}
	}], [{
		key: 'MAX_VALUE$cew',
		get: function get() {
			return Number.MAX_VALUE;
		}
	}, {
		key: 'MIN_VALUE$cew',
		get: function get() {
			return Number.MIN_VALUE;
		}
	}, {
		key: 'POSITIVE_INFINITY$cew',
		get: function get() {
			return Number.POSITIVE_INFINITY;
		}
	}, {
		key: 'NEGATIVE_INFINITY$cew',
		get: function get() {
			return Number.NEGATIVE_INFINITY;
		}
	}, {
		key: 'NaN$cew',
		get: function get() {
			return EasyObjectValue.nan;
		}
	}]);
	return NumberObject;
}(EasyObjectValue);

NumberObject.prototype.wellKnownName = '%Number%';
module.exports = NumberObject;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);

var NumberPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(NumberPrototype, _EasyObjectValue);

	function NumberPrototype() {
		(0, _classCallCheck3.default)(this, NumberPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (NumberPrototype.__proto__ || (0, _getPrototypeOf2.default)(NumberPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(NumberPrototype, null, [{
		key: 'valueOf$e',
		value: _regenerator2.default.mark(function valueOf$e(thiz) {
			var pv;
			return _regenerator2.default.wrap(function valueOf$e$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							if (!(thiz.specTypeName === 'number')) {
								_context.next = 2;
								break;
							}

							return _context.abrupt('return', thiz);

						case 2:
							if (!(thiz.specTypeName === 'object')) {
								_context.next = 6;
								break;
							}

							pv = thiz.primativeValue;

							if (!(pv.specTypeName === 'number')) {
								_context.next = 6;
								break;
							}

							return _context.abrupt('return', pv);

						case 6:
							throw new TypeError('Couldnt get there.');

						case 7:
						case 'end':
							return _context.stop();
					}
				}
			}, valueOf$e, this);
		})
	}, {
		key: 'toExponential$e',
		value: _regenerator2.default.mark(function toExponential$e(thiz, argz) {
			var a, num;
			return _regenerator2.default.wrap(function toExponential$e$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							a = void 0;

							if (!(argz.length > 0)) {
								_context2.next = 4;
								break;
							}

							return _context2.delegateYield(argz[0].toNumberNative(), 't0', 3);

						case 3:
							a = _context2.t0;

						case 4:
							return _context2.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

						case 5:
							num = _context2.t1;
							return _context2.abrupt('return', this.fromNative(num.toExponential(a)));

						case 7:
						case 'end':
							return _context2.stop();
					}
				}
			}, toExponential$e, this);
		})
	}, {
		key: 'toFixed$e',
		value: _regenerator2.default.mark(function toFixed$e(thiz, argz) {
			var a, num;
			return _regenerator2.default.wrap(function toFixed$e$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							a = void 0;

							if (!(argz.length > 0)) {
								_context3.next = 4;
								break;
							}

							return _context3.delegateYield(argz[0].toNumberNative(), 't0', 3);

						case 3:
							a = _context3.t0;

						case 4:
							return _context3.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

						case 5:
							num = _context3.t1;
							return _context3.abrupt('return', this.fromNative(num.toFixed(a)));

						case 7:
						case 'end':
							return _context3.stop();
					}
				}
			}, toFixed$e, this);
		})
	}, {
		key: 'toPrecision$e',
		value: _regenerator2.default.mark(function toPrecision$e(thiz, argz) {
			var a, num;
			return _regenerator2.default.wrap(function toPrecision$e$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							a = void 0;

							if (!(argz.length > 0)) {
								_context4.next = 4;
								break;
							}

							return _context4.delegateYield(argz[0].toNumberNative(), 't0', 3);

						case 3:
							a = _context4.t0;

						case 4:
							return _context4.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

						case 5:
							num = _context4.t1;
							return _context4.abrupt('return', this.fromNative(num.toPrecision(a)));

						case 7:
						case 'end':
							return _context4.stop();
					}
				}
			}, toPrecision$e, this);
		})
	}, {
		key: 'toString$e',
		value: _regenerator2.default.mark(function toString$e(thiz, argz) {
			var a, num;
			return _regenerator2.default.wrap(function toString$e$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							a = void 0;

							if (!(argz.length > 0)) {
								_context5.next = 4;
								break;
							}

							return _context5.delegateYield(argz[0].toNumberNative(), 't0', 3);

						case 3:
							a = _context5.t0;

						case 4:
							return _context5.delegateYield(thiz.toNumberNative(thiz), 't1', 5);

						case 5:
							num = _context5.t1;
							return _context5.abrupt('return', this.fromNative(num.toString(a)));

						case 7:
						case 'end':
							return _context5.stop();
					}
				}
			}, toString$e, this);
		})
	}]);
	return NumberPrototype;
}(EasyObjectValue);

NumberPrototype.prototype.wellKnownName = '%NumberPrototype%';
module.exports = NumberPrototype;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getOwnPropertyNames = __webpack_require__(94);

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _keys = __webpack_require__(37);

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = __webpack_require__(16);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [defObjectProperty, getDescriptor, objOrThrow].map(_regenerator2.default.mark);

var EasyObjectValue = __webpack_require__(8);
var ObjectValue = __webpack_require__(9);
var ArrayValue = __webpack_require__(14);
var CompletionRecord = __webpack_require__(7);
var Value = __webpack_require__(3);
var PropertyDescriptor = __webpack_require__(15);
var EmptyValue = __webpack_require__(28);

function defObjectProperty(obj, name, desc, realm) {
	var value, v, enu, wri, conf, get, set;
	return _regenerator2.default.wrap(function defObjectProperty$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (!(name instanceof Value)) {
						_context.next = 3;
						break;
					}

					return _context.delegateYield(name.toStringNative(), 't0', 2);

				case 2:
					name = _context.t0;

				case 3:
					return _context.delegateYield(desc.get('value', realm), 't1', 4);

				case 4:
					value = _context.t1;
					v = new PropertyDescriptor(value);

					if (!desc.has('enumerable')) {
						_context.next = 12;
						break;
					}

					return _context.delegateYield(desc.get('enumerable', realm), 't2', 8);

				case 8:
					enu = _context.t2;

					if (!(enu instanceof EmptyValue)) {
						v.enumerable = enu.truthy;
					}
					_context.next = 13;
					break;

				case 12:
					v.enumerable = false;

				case 13:
					if (!desc.has('writable')) {
						_context.next = 19;
						break;
					}

					return _context.delegateYield(desc.get('writable', realm), 't3', 15);

				case 15:
					wri = _context.t3;

					if (!(wri instanceof EmptyValue)) {
						v.writable = wri.truthy;
					}
					_context.next = 20;
					break;

				case 19:
					v.writable = false;

				case 20:
					if (!desc.has('configurable')) {
						_context.next = 26;
						break;
					}

					return _context.delegateYield(desc.get('configurable', realm), 't4', 22);

				case 22:
					conf = _context.t4;

					if (!(conf instanceof EmptyValue)) {
						v.writable = conf.truthy;
					}
					_context.next = 27;
					break;

				case 26:
					v.writable = false;

				case 27:
					if (!desc.has('get')) {
						_context.next = 31;
						break;
					}

					return _context.delegateYield(desc.get('get', realm), 't5', 29);

				case 29:
					get = _context.t5;

					if (!(get instanceof EmptyValue)) {
						v.getter = get;
					}

				case 31:
					if (!desc.has('set')) {
						_context.next = 35;
						break;
					}

					return _context.delegateYield(desc.get('set', realm), 't6', 33);

				case 33:
					set = _context.t6;

					if (!(set instanceof EmptyValue)) {
						v.setter = set;
					}

				case 35:

					obj.rawSetProperty(name, v);
					return _context.abrupt('return', true);

				case 37:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked[0], this);
}

function getDescriptor(target, name, realm) {
	var pdesc, out;
	return _regenerator2.default.wrap(function getDescriptor$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					if (Object.hasOwnProperty.call(target.properties, name)) {
						_context2.next = 2;
						break;
					}

					return _context2.abrupt('return', Value.undef);

				case 2:
					pdesc = target.properties[name];
					out = new ObjectValue(realm);

					if (!pdesc.value) {
						_context2.next = 6;
						break;
					}

					return _context2.delegateYield(out.set('value', pdesc.value), 't0', 6);

				case 6:
					if (!pdesc.getter) {
						_context2.next = 8;
						break;
					}

					return _context2.delegateYield(out.set('get', pdesc.getter), 't1', 8);

				case 8:
					if (!pdesc.setter) {
						_context2.next = 10;
						break;
					}

					return _context2.delegateYield(out.set('set', pdesc.setter), 't2', 10);

				case 10:
					return _context2.delegateYield(out.set('writable', Value.fromNative(pdesc.writable)), 't3', 11);

				case 11:
					return _context2.delegateYield(out.set('enumerable', Value.fromNative(pdesc.enumerable)), 't4', 12);

				case 12:
					return _context2.delegateYield(out.set('configurable', Value.fromNative(pdesc.configurable)), 't5', 13);

				case 13:
					return _context2.abrupt('return', out);

				case 14:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked[1], this);
}

function objOrThrow(i, realm) {
	var val;
	return _regenerator2.default.wrap(function objOrThrow$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					val = i ? i : Value.undef;

					if (!(val instanceof EmptyValue)) {
						_context3.next = 5;
						break;
					}

					_context3.next = 4;
					return CompletionRecord.makeTypeError(realm, 'Cannot convert undefined or null to object');

				case 4:
					return _context3.abrupt('return', _context3.sent);

				case 5:
					if (val instanceof ObjectValue) {
						_context3.next = 9;
						break;
					}

					_context3.next = 8;
					return CompletionRecord.makeTypeError(realm, 'Need an object');

				case 8:
					return _context3.abrupt('return', _context3.sent);

				case 9:
					return _context3.abrupt('return', val);

				case 10:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked[2], this);
}

var ObjectObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(ObjectObject, _EasyObjectValue);

	function ObjectObject() {
		(0, _classCallCheck3.default)(this, ObjectObject);
		return (0, _possibleConstructorReturn3.default)(this, (ObjectObject.__proto__ || (0, _getPrototypeOf2.default)(ObjectObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(ObjectObject, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, s, ext) {
			var asConstructor;
			return _regenerator2.default.wrap(function call$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (!asConstructor) {
								_context4.next = 3;
								break;
							}

							return _context4.abrupt('return', new ObjectValue(s.realm));

						case 3:
						case 'end':
							return _context4.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.ObjectPrototype;
		}
		//objPrototype(realm) { return realm.Function; }

	}, {
		key: 'toNativeCounterpart',
		value: function toNativeCounterpart() {
			return Object;
		}
	}], [{
		key: 'create$e',
		value: _regenerator2.default.mark(function create$e(thiz, args, s) {
			var v, p, propsobj, _iterator, _isArray, _i, _ref, _p, strval, podesc;

			return _regenerator2.default.wrap(function create$e$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							v = new ObjectValue(s.realm);
							p = Value.undef;

							if (args.length > 0) {
								p = args[0];
							}

							if (!(p.jsTypeName !== 'object' && p.jsTypeName !== 'function')) {
								_context5.next = 7;
								break;
							}

							_context5.next = 6;
							return CompletionRecord.makeTypeError(s.realm, 'Object prototype may only be an Object or null');

						case 6:
							return _context5.abrupt('return', _context5.sent);

						case 7:

							v.setPrototype(p);

							if (!(args.length > 1)) {
								_context5.next = 28;
								break;
							}

							propsobj = args[1];
							_iterator = propsobj.observableProperties(s.realm), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

						case 11:
							if (!_isArray) {
								_context5.next = 17;
								break;
							}

							if (!(_i >= _iterator.length)) {
								_context5.next = 14;
								break;
							}

							return _context5.abrupt('break', 28);

						case 14:
							_ref = _iterator[_i++];
							_context5.next = 21;
							break;

						case 17:
							_i = _iterator.next();

							if (!_i.done) {
								_context5.next = 20;
								break;
							}

							return _context5.abrupt('break', 28);

						case 20:
							_ref = _i.value;

						case 21:
							_p = _ref;
							strval = _p.native;
							return _context5.delegateYield(propsobj.get(strval, s.realm), 't0', 24);

						case 24:
							podesc = _context5.t0;
							return _context5.delegateYield(defObjectProperty(v, _p, podesc, s.realm), 't1', 26);

						case 26:
							_context5.next = 11;
							break;

						case 28:
							return _context5.abrupt('return', v);

						case 29:
						case 'end':
							return _context5.stop();
					}
				}
			}, create$e, this);
		})
	}, {
		key: 'defineProperty',
		value: _regenerator2.default.mark(function defineProperty(thiz, args, s) {
			var target, name, desc;
			return _regenerator2.default.wrap(function defineProperty$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context6.t0;
							return _context6.delegateYield(args[1].toStringNative(), 't1', 3);

						case 3:
							name = _context6.t1;
							desc = args[2];
							return _context6.delegateYield(defObjectProperty(target, name, desc, s.realm), 't2', 6);

						case 6:
							return _context6.abrupt('return', Value.true);

						case 7:
						case 'end':
							return _context6.stop();
					}
				}
			}, defineProperty, this);
		})
	}, {
		key: 'defineProperties',
		value: _regenerator2.default.mark(function defineProperties(thiz, args, s) {
			var target, propsobj, _iterator2, _isArray2, _i2, _ref2, p, strval, podesc;

			return _regenerator2.default.wrap(function defineProperties$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							return _context7.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context7.t0;
							return _context7.delegateYield(objOrThrow(args[1], s.realm), 't1', 3);

						case 3:
							propsobj = _context7.t1;
							_iterator2 = propsobj.observableProperties(s.realm), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

						case 5:
							if (!_isArray2) {
								_context7.next = 11;
								break;
							}

							if (!(_i2 >= _iterator2.length)) {
								_context7.next = 8;
								break;
							}

							return _context7.abrupt('break', 22);

						case 8:
							_ref2 = _iterator2[_i2++];
							_context7.next = 15;
							break;

						case 11:
							_i2 = _iterator2.next();

							if (!_i2.done) {
								_context7.next = 14;
								break;
							}

							return _context7.abrupt('break', 22);

						case 14:
							_ref2 = _i2.value;

						case 15:
							p = _ref2;
							strval = p.native;
							return _context7.delegateYield(propsobj.get(strval, s.realm), 't2', 18);

						case 18:
							podesc = _context7.t2;
							return _context7.delegateYield(defObjectProperty(target, p, podesc, s.realm), 't3', 20);

						case 20:
							_context7.next = 5;
							break;

						case 22:
							return _context7.abrupt('return', Value.true);

						case 23:
						case 'end':
							return _context7.stop();
					}
				}
			}, defineProperties, this);
		})
	}, {
		key: 'seal$e',
		value: _regenerator2.default.mark(function seal$e(thiz, args, s) {
			var target, _iterator3, _isArray3, _i3, _ref3, p;

			return _regenerator2.default.wrap(function seal$e$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							return _context8.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context8.t0;


							target.extensable = false;
							_iterator3 = (0, _keys2.default)(target.properties), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

						case 4:
							if (!_isArray3) {
								_context8.next = 10;
								break;
							}

							if (!(_i3 >= _iterator3.length)) {
								_context8.next = 7;
								break;
							}

							return _context8.abrupt('break', 18);

						case 7:
							_ref3 = _iterator3[_i3++];
							_context8.next = 14;
							break;

						case 10:
							_i3 = _iterator3.next();

							if (!_i3.done) {
								_context8.next = 13;
								break;
							}

							return _context8.abrupt('break', 18);

						case 13:
							_ref3 = _i3.value;

						case 14:
							p = _ref3;

							target.properties[p].configurable = false;

						case 16:
							_context8.next = 4;
							break;

						case 18:
							return _context8.abrupt('return', target);

						case 19:
						case 'end':
							return _context8.stop();
					}
				}
			}, seal$e, this);
		})
	}, {
		key: 'isSealed',
		value: _regenerator2.default.mark(function isSealed(thiz, args, s) {
			var target, _iterator4, _isArray4, _i4, _ref4, p, ps;

			return _regenerator2.default.wrap(function isSealed$(_context9) {
				while (1) {
					switch (_context9.prev = _context9.next) {
						case 0:
							return _context9.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context9.t0;

							if (!target.extensable) {
								_context9.next = 4;
								break;
							}

							return _context9.abrupt('return', Value.false);

						case 4:
							_iterator4 = (0, _keys2.default)(target.properties), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

						case 5:
							if (!_isArray4) {
								_context9.next = 11;
								break;
							}

							if (!(_i4 >= _iterator4.length)) {
								_context9.next = 8;
								break;
							}

							return _context9.abrupt('break', 21);

						case 8:
							_ref4 = _iterator4[_i4++];
							_context9.next = 15;
							break;

						case 11:
							_i4 = _iterator4.next();

							if (!_i4.done) {
								_context9.next = 14;
								break;
							}

							return _context9.abrupt('break', 21);

						case 14:
							_ref4 = _i4.value;

						case 15:
							p = _ref4;
							ps = target.properties[p];

							if (!ps.configurable) {
								_context9.next = 19;
								break;
							}

							return _context9.abrupt('return', Value.false);

						case 19:
							_context9.next = 5;
							break;

						case 21:
							return _context9.abrupt('return', Value.true);

						case 22:
						case 'end':
							return _context9.stop();
					}
				}
			}, isSealed, this);
		})
	}, {
		key: 'freeze$e',
		value: _regenerator2.default.mark(function freeze$e(thiz, args, s) {
			var target, p;
			return _regenerator2.default.wrap(function freeze$e$(_context10) {
				while (1) {
					switch (_context10.prev = _context10.next) {
						case 0:
							return _context10.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context10.t0;

							target.extensable = false;
							_context10.t1 = _regenerator2.default.keys(target.properties);

						case 4:
							if ((_context10.t2 = _context10.t1()).done) {
								_context10.next = 12;
								break;
							}

							p = _context10.t2.value;

							if (Object.prototype.hasOwnProperty.call(target.properties, p)) {
								_context10.next = 8;
								break;
							}

							return _context10.abrupt('continue', 4);

						case 8:
							target.properties[p].configurable = false;
							target.properties[p].writable = false;
							_context10.next = 4;
							break;

						case 12:
							return _context10.abrupt('return', target);

						case 13:
						case 'end':
							return _context10.stop();
					}
				}
			}, freeze$e, this);
		})
	}, {
		key: 'isFrozen',
		value: _regenerator2.default.mark(function isFrozen(thiz, args, s) {
			var target, _iterator5, _isArray5, _i5, _ref5, p, ps;

			return _regenerator2.default.wrap(function isFrozen$(_context11) {
				while (1) {
					switch (_context11.prev = _context11.next) {
						case 0:
							return _context11.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context11.t0;

							if (!target.extensable) {
								_context11.next = 4;
								break;
							}

							return _context11.abrupt('return', Value.false);

						case 4:
							_iterator5 = (0, _keys2.default)(target.properties), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);

						case 5:
							if (!_isArray5) {
								_context11.next = 11;
								break;
							}

							if (!(_i5 >= _iterator5.length)) {
								_context11.next = 8;
								break;
							}

							return _context11.abrupt('break', 23);

						case 8:
							_ref5 = _iterator5[_i5++];
							_context11.next = 15;
							break;

						case 11:
							_i5 = _iterator5.next();

							if (!_i5.done) {
								_context11.next = 14;
								break;
							}

							return _context11.abrupt('break', 23);

						case 14:
							_ref5 = _i5.value;

						case 15:
							p = _ref5;
							ps = target.properties[p];

							if (!ps.configurable) {
								_context11.next = 19;
								break;
							}

							return _context11.abrupt('return', Value.false);

						case 19:
							if (!ps.writable) {
								_context11.next = 21;
								break;
							}

							return _context11.abrupt('return', Value.false);

						case 21:
							_context11.next = 5;
							break;

						case 23:
							return _context11.abrupt('return', Value.true);

						case 24:
						case 'end':
							return _context11.stop();
					}
				}
			}, isFrozen, this);
		})
	}, {
		key: 'preventExtensions$e',
		value: _regenerator2.default.mark(function preventExtensions$e(thiz, args, s) {
			var target;
			return _regenerator2.default.wrap(function preventExtensions$e$(_context12) {
				while (1) {
					switch (_context12.prev = _context12.next) {
						case 0:
							return _context12.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context12.t0;

							target.extensable = false;
							return _context12.abrupt('return', target);

						case 4:
						case 'end':
							return _context12.stop();
					}
				}
			}, preventExtensions$e, this);
		})
	}, {
		key: 'isExtensible$e',
		value: _regenerator2.default.mark(function isExtensible$e(thiz, args, s) {
			var target;
			return _regenerator2.default.wrap(function isExtensible$e$(_context13) {
				while (1) {
					switch (_context13.prev = _context13.next) {
						case 0:
							return _context13.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context13.t0;
							return _context13.abrupt('return', this.fromNative(target.extensable));

						case 3:
						case 'end':
							return _context13.stop();
					}
				}
			}, isExtensible$e, this);
		})
	}, {
		key: 'keys$e',
		value: _regenerator2.default.mark(function keys$e(thiz, args, s) {
			var target, result, _iterator6, _isArray6, _i6, _ref6, p;

			return _regenerator2.default.wrap(function keys$e$(_context14) {
				while (1) {
					switch (_context14.prev = _context14.next) {
						case 0:
							return _context14.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context14.t0;
							result = [];
							_iterator6 = (0, _keys2.default)(target.properties), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);

						case 4:
							if (!_isArray6) {
								_context14.next = 10;
								break;
							}

							if (!(_i6 >= _iterator6.length)) {
								_context14.next = 7;
								break;
							}

							return _context14.abrupt('break', 20);

						case 7:
							_ref6 = _iterator6[_i6++];
							_context14.next = 14;
							break;

						case 10:
							_i6 = _iterator6.next();

							if (!_i6.done) {
								_context14.next = 13;
								break;
							}

							return _context14.abrupt('break', 20);

						case 13:
							_ref6 = _i6.value;

						case 14:
							p = _ref6;

							if (target.properties[p].enumerable) {
								_context14.next = 17;
								break;
							}

							return _context14.abrupt('continue', 18);

						case 17:
							result.push(p);

						case 18:
							_context14.next = 4;
							break;

						case 20:
							return _context14.abrupt('return', ArrayValue.make(result, s.realm));

						case 21:
						case 'end':
							return _context14.stop();
					}
				}
			}, keys$e, this);
		})
	}, {
		key: 'getOwnPropertyNames$e',
		value: _regenerator2.default.mark(function getOwnPropertyNames$e(thiz, args, s) {
			var target;
			return _regenerator2.default.wrap(function getOwnPropertyNames$e$(_context15) {
				while (1) {
					switch (_context15.prev = _context15.next) {
						case 0:
							return _context15.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context15.t0;
							return _context15.abrupt('return', ArrayValue.make((0, _getOwnPropertyNames2.default)(target.properties), s.realm));

						case 3:
						case 'end':
							return _context15.stop();
					}
				}
			}, getOwnPropertyNames$e, this);
		})
	}, {
		key: 'getOwnPropertyDescriptor',
		value: _regenerator2.default.mark(function getOwnPropertyDescriptor(thiz, args, s) {
			var target, name;
			return _regenerator2.default.wrap(function getOwnPropertyDescriptor$(_context16) {
				while (1) {
					switch (_context16.prev = _context16.next) {
						case 0:
							return _context16.delegateYield(objOrThrow(args[0], s.realm), 't0', 1);

						case 1:
							target = _context16.t0;
							return _context16.delegateYield(args[1].toStringNative(), 't1', 3);

						case 3:
							name = _context16.t1;
							return _context16.delegateYield(getDescriptor(target, name, s.realm), 't2', 5);

						case 5:
							return _context16.abrupt('return', _context16.t2);

						case 6:
						case 'end':
							return _context16.stop();
					}
				}
			}, getOwnPropertyDescriptor, this);
		})
	}, {
		key: 'getPrototypeOf',
		value: _regenerator2.default.mark(function getPrototypeOf(thiz, args, s) {
			var target, proto;
			return _regenerator2.default.wrap(function getPrototypeOf$(_context17) {
				while (1) {
					switch (_context17.prev = _context17.next) {
						case 0:
							target = EasyObjectValue.undef;

							if (args.length > 0) target = args[0];

							if (target.getPrototype) {
								_context17.next = 6;
								break;
							}

							_context17.next = 5;
							return CompletionRecord.makeTypeError(s.realm, 'No prototype.');

						case 5:
							return _context17.abrupt('return', _context17.sent);

						case 6:
							proto = target.getPrototype(s.realm);

							if (!proto) {
								_context17.next = 9;
								break;
							}

							return _context17.abrupt('return', proto);

						case 9:
							return _context17.abrupt('return', EasyObjectValue.null);

						case 10:
						case 'end':
							return _context17.stop();
					}
				}
			}, getPrototypeOf, this);
		})
	}]);
	return ObjectObject;
}(EasyObjectValue);

ObjectObject.prototype.wellKnownName = '%Object%';

module.exports = ObjectObject;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ObjectValue = __webpack_require__(9);
var EasyObjectValue = __webpack_require__(8);
var Value = __webpack_require__(3);
var NullValue = __webpack_require__(60);
var UndefinedValue = __webpack_require__(92);

var ObjectPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(ObjectPrototype, _EasyObjectValue);

	function ObjectPrototype(realm) {
		(0, _classCallCheck3.default)(this, ObjectPrototype);

		var _this = (0, _possibleConstructorReturn3.default)(this, (ObjectPrototype.__proto__ || (0, _getPrototypeOf2.default)(ObjectPrototype)).call(this, realm));

		_this.setPrototype(null);
		return _this;
	}

	(0, _createClass3.default)(ObjectPrototype, null, [{
		key: 'hasOwnProperty$e',
		value: _regenerator2.default.mark(function hasOwnProperty$e(thiz, args) {
			var name;
			return _regenerator2.default.wrap(function hasOwnProperty$e$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							return _context.delegateYield(args[0].toStringNative(), 't0', 1);

						case 1:
							name = _context.t0;

							if (thiz instanceof ObjectValue) {
								_context.next = 6;
								break;
							}

							return _context.abrupt('return', Value.false);

						case 6:
							if (!thiz.hasOwnProperty(name)) {
								_context.next = 8;
								break;
							}

							return _context.abrupt('return', Value.true);

						case 8:
							return _context.abrupt('return', Value.false);

						case 9:
						case 'end':
							return _context.stop();
					}
				}
			}, hasOwnProperty$e, this);
		})
	}, {
		key: 'isPrototypeOf$e',
		value: _regenerator2.default.mark(function isPrototypeOf$e(thiz, args, s) {
			var target, pt, checked;
			return _regenerator2.default.wrap(function isPrototypeOf$e$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(args.length < 1)) {
								_context2.next = 2;
								break;
							}

							return _context2.abrupt('return', Value.false);

						case 2:
							target = args[0]; //TODO: Call ToObject();

							if (target.getPrototype) {
								_context2.next = 7;
								break;
							}

							_context2.next = 6;
							return CompletionRecord.makeTypeError(s.realm, 'No prototype.');

						case 6:
							return _context2.abrupt('return', _context2.sent);

						case 7:
							pt = target.getPrototype(s.realm);
							checked = [pt];

						case 9:
							if (!pt) {
								_context2.next = 18;
								break;
							}

							if (!(pt === thiz)) {
								_context2.next = 12;
								break;
							}

							return _context2.abrupt('return', Value.true);

						case 12:
							pt = pt.getPrototype(s.realm);

							if (!(checked.indexOf(pt) !== -1)) {
								_context2.next = 15;
								break;
							}

							return _context2.abrupt('break', 18);

						case 15:
							checked.push(pt);
							_context2.next = 9;
							break;

						case 18:
							return _context2.abrupt('return', Value.false);

						case 19:
						case 'end':
							return _context2.stop();
					}
				}
			}, isPrototypeOf$e, this);
		})
	}, {
		key: 'propertyIsEnumerable$e',
		value: _regenerator2.default.mark(function propertyIsEnumerable$e(thiz, args) {
			var nam, pd;
			return _regenerator2.default.wrap(function propertyIsEnumerable$e$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							return _context3.delegateYield(args[0].toStringNative(), 't0', 1);

						case 1:
							nam = _context3.t0;
							pd = thiz.properties[nam];
							return _context3.abrupt('return', this.fromNative(pd.enumerable));

						case 4:
						case 'end':
							return _context3.stop();
					}
				}
			}, propertyIsEnumerable$e, this);
		})
	}, {
		key: 'toLocaleString$e',
		value: _regenerator2.default.mark(function toLocaleString$e(thiz, args) {
			return _regenerator2.default.wrap(function toLocaleString$e$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(ObjectPrototype.toString$e(thiz, args), 't0', 1);

						case 1:
							return _context4.abrupt('return', _context4.t0);

						case 2:
						case 'end':
							return _context4.stop();
					}
				}
			}, toLocaleString$e, this);
		})
	}, {
		key: 'toString$e',
		value: _regenerator2.default.mark(function toString$e(thiz, args) {
			return _regenerator2.default.wrap(function toString$e$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							if (!(thiz instanceof UndefinedValue)) {
								_context5.next = 2;
								break;
							}

							return _context5.abrupt('return', this.fromNative('[object Undefined]'));

						case 2:
							if (!(thiz instanceof NullValue)) {
								_context5.next = 4;
								break;
							}

							return _context5.abrupt('return', this.fromNative('[object Null]'));

						case 4:
							return _context5.abrupt('return', this.fromNative('[object ' + thiz.clazz + ']'));

						case 5:
						case 'end':
							return _context5.stop();
					}
				}
			}, toString$e, this);
		})
	}, {
		key: 'valueOf$e',
		value: _regenerator2.default.mark(function valueOf$e(thiz, args) {
			return _regenerator2.default.wrap(function valueOf$e$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							if (!(thiz.specTypeName === 'object')) {
								_context6.next = 2;
								break;
							}

							return _context6.abrupt('return', thiz);

						case 2:
							return _context6.abrupt('return', thiz);

						case 3:
						case 'end':
							return _context6.stop();
					}
				}
			}, valueOf$e, this);
		})
	}]);
	return ObjectPrototype;
}(EasyObjectValue);

ObjectPrototype.prototype.wellKnownName = '%ObjectPrototype%';

module.exports = ObjectPrototype;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = __webpack_require__(3);
var CompletionRecord = __webpack_require__(7);

var EasyObjectValue = __webpack_require__(8);
var RegExpValue = __webpack_require__(62);

var RegExpObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(RegExpObject, _EasyObjectValue);

	function RegExpObject() {
		(0, _classCallCheck3.default)(this, RegExpObject);
		return (0, _possibleConstructorReturn3.default)(this, (RegExpObject.__proto__ || (0, _getPrototypeOf2.default)(RegExpObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(RegExpObject, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, s) {
			var pattern, flags, rx;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							pattern = '';
							flags = '';

							if (!(args.length > 0 && args[0] instanceof RegExpValue)) {
								_context.next = 8;
								break;
							}

							if (!(args.length > 1 && args[1].truthy)) {
								_context.next = 7;
								break;
							}

							_context.next = 6;
							return CompletionRecord.makeTypeError(s.realm, 'Cannot supply flags when constructing one RegExp from another');

						case 6:
							return _context.abrupt('return', _context.sent);

						case 7:
							return _context.abrupt('return', RegExpValue.make(new RegExp(args[0].regexp), s.realm));

						case 8:
							if (!(args.length > 0 && args[0].jsTypeName !== 'undefined')) {
								_context.next = 11;
								break;
							}

							return _context.delegateYield(args[0].toStringNative(), 't0', 10);

						case 10:
							pattern = _context.t0;

						case 11:
							if (!(args.length > 1 && args[1].jsTypeName !== 'undefined')) {
								_context.next = 14;
								break;
							}

							return _context.delegateYield(args[1].toStringNative(), 't1', 13);

						case 13:
							flags = _context.t1;

						case 14:
							rx = void 0;
							_context.prev = 15;

							rx = new RegExp(pattern, flags);
							_context.next = 24;
							break;

						case 19:
							_context.prev = 19;
							_context.t2 = _context['catch'](15);
							_context.next = 23;
							return new CompletionRecord(CompletionRecord.THROW, Value.fromNative(_context.t2, s.realm));

						case 23:
							return _context.abrupt('return', _context.sent);

						case 24:
							return _context.abrupt('return', RegExpValue.make(rx, s.realm));

						case 25:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this, [[15, 19]]);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.RegExpPrototype;
		}
	}, {
		key: 'callLength',
		get: function get() {
			return 2;
		}
	}]);
	return RegExpObject;
}(EasyObjectValue);

RegExpObject.prototype.wellKnownName = '%RegExp%';

module.exports = RegExpObject;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [toRegexp].map(_regenerator2.default.mark);

var Value = __webpack_require__(3);
var ArrayValue = __webpack_require__(14);

var CompletionRecord = __webpack_require__(7);

var EasyObjectValue = __webpack_require__(8);
var _g = __webpack_require__(33);

function toRegexp(x, realm) {
	return _regenerator2.default.wrap(function toRegexp$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (x.regexp) {
						_context.next = 4;
						break;
					}

					_context.next = 3;
					return CompletionRecord.makeTypeError(realm, 'Calling regex method on non regex.');

				case 3:
					return _context.abrupt('return', _context.sent);

				case 4:
					return _context.abrupt('return', x.regexp);

				case 5:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked[0], this);
}

var RegExpProtoype = function (_EasyObjectValue) {
	(0, _inherits3.default)(RegExpProtoype, _EasyObjectValue);

	function RegExpProtoype(realm) {
		(0, _classCallCheck3.default)(this, RegExpProtoype);

		var _this = (0, _possibleConstructorReturn3.default)(this, (RegExpProtoype.__proto__ || (0, _getPrototypeOf2.default)(RegExpProtoype)).call(this, realm));

		_this.regexp = new RegExp();
		return _this;
	}

	(0, _createClass3.default)(RegExpProtoype, null, [{
		key: 'test',
		value: _regenerator2.default.mark(function test(thiz, args, s) {
			var rx, str;
			return _regenerator2.default.wrap(function test$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							return _context2.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

						case 1:
							rx = _context2.t0;
							str = undefined;

							if (!(args.length > 0)) {
								_context2.next = 6;
								break;
							}

							return _context2.delegateYield(args[0].toStringNative(), 't1', 5);

						case 5:
							str = _context2.t1;

						case 6:
							return _context2.abrupt('return', this.fromNative(rx.test(str)));

						case 7:
						case 'end':
							return _context2.stop();
					}
				}
			}, test, this);
		})
	}, {
		key: 'exec',
		value: _regenerator2.default.mark(function exec(thiz, args, s) {
			var rx, li, str, result, wraped, out;
			return _regenerator2.default.wrap(function exec$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

						case 1:
							rx = _context4.t0;
							return _context4.delegateYield(thiz.get('lastIndex'), 't1', 3);

						case 3:
							li = _context4.t1;
							return _context4.delegateYield(li.toIntNative(), 't2', 5);

						case 5:
							li = _context4.t2;

							if (li < 0) li = 0; //Work around incorrect V8 behavior.
							rx.lastIndex = li;
							str = undefined;

							if (!(args.length > 0)) {
								_context4.next = 12;
								break;
							}

							return _context4.delegateYield(args[0].toStringNative(), 't3', 11);

						case 11:
							str = _context4.t3;

						case 12:
							result = rx.exec(str);
							return _context4.delegateYield(thiz.set('lastIndex', Value.fromNative(rx.lastIndex)), 't4', 14);

						case 14:
							if (!(result === null)) {
								_context4.next = 16;
								break;
							}

							return _context4.abrupt('return', Value.null);

						case 16:
							return _context4.delegateYield(_g.map(result, _regenerator2.default.mark(function _callee(c) {
								return _regenerator2.default.wrap(function _callee$(_context3) {
									while (1) {
										switch (_context3.prev = _context3.next) {
											case 0:
												return _context3.abrupt('return', Value.fromNative(c, s.realm));

											case 1:
											case 'end':
												return _context3.stop();
										}
									}
								}, _callee, this);
							})), 't5', 17);

						case 17:
							wraped = _context4.t5;
							out = ArrayValue.make(wraped, s.realm);
							return _context4.delegateYield(out.set('index', Value.fromNative(result.index)), 't6', 20);

						case 20:
							return _context4.delegateYield(out.set('input', Value.fromNative(result.input)), 't7', 21);

						case 21:
							return _context4.abrupt('return', out);

						case 22:
						case 'end':
							return _context4.stop();
					}
				}
			}, exec, this);
		})
	}, {
		key: 'compile',
		value: _regenerator2.default.mark(function compile(thiz, args, s) {
			var rv, regexp;
			return _regenerator2.default.wrap(function compile$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

						case 1:
							return _context5.delegateYield(s.realm.RegExp.call(Value.null, args, s), 't1', 2);

						case 2:
							rv = _context5.t1;
							regexp = rv.regexp;

							thiz.regexp = regexp;
							return _context5.delegateYield(thiz.set('source', Value.fromNative(regexp.source)), 't2', 6);

						case 6:
							return _context5.delegateYield(thiz.set('global', Value.fromNative(regexp.global)), 't3', 7);

						case 7:
							return _context5.delegateYield(thiz.set('ignoreCase', Value.fromNative(regexp.ignoreCase)), 't4', 8);

						case 8:
							return _context5.delegateYield(thiz.set('multiline', Value.fromNative(regexp.multiline)), 't5', 9);

						case 9:
							return _context5.delegateYield(thiz.set('lastIndex', Value.zero), 't6', 10);

						case 10:
							return _context5.abrupt('return', Value.undef);

						case 11:
						case 'end':
							return _context5.stop();
					}
				}
			}, compile, this);
		})
	}, {
		key: 'toString',
		value: _regenerator2.default.mark(function toString(thiz, args, s) {
			var rx;
			return _regenerator2.default.wrap(function toString$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							return _context6.delegateYield(toRegexp(thiz, s.realm), 't0', 1);

						case 1:
							rx = _context6.t0;
							return _context6.abrupt('return', Value.fromNative(rx.toString()));

						case 3:
						case 'end':
							return _context6.stop();
					}
				}
			}, toString, this);
		})
	}, {
		key: 'source$cw',
		get: function get() {
			return Value.fromNative('(?:)');
		}
	}, {
		key: 'global$cw',
		get: function get() {
			return Value.fromNative(false);
		}
	}, {
		key: 'ignoreCase$cw',
		get: function get() {
			return Value.fromNative(false);
		}
	}, {
		key: 'multiline$cw',
		get: function get() {
			return Value.fromNative(false);
		}
	}, {
		key: 'lastIndex',
		get: function get() {
			return Value.fromNative(0);
		}
	}]);
	return RegExpProtoype;
}(EasyObjectValue);

RegExpProtoype.prototype.wellKnownName = '%RegExpProtoype%';
RegExpProtoype.prototype.clazz = 'RegExp';

module.exports = RegExpProtoype;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var CompletionRecord = __webpack_require__(7);
var PropertyDescriptor = __webpack_require__(15);

var StringObject = function (_EasyObjectValue) {
	(0, _inherits3.default)(StringObject, _EasyObjectValue);

	function StringObject() {
		(0, _classCallCheck3.default)(this, StringObject);
		return (0, _possibleConstructorReturn3.default)(this, (StringObject.__proto__ || (0, _getPrototypeOf2.default)(StringObject)).apply(this, arguments));
	}

	(0, _createClass3.default)(StringObject, [{
		key: 'call',
		value: _regenerator2.default.mark(function call(thiz, args, scope, ext) {
			var asConstructor, len, pv, plen;
			return _regenerator2.default.wrap(function call$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							asConstructor = ext && ext.asConstructor;

							if (asConstructor) {
								_context.next = 4;
								break;
							}

							return _context.delegateYield(args[0].toStringValue(), 't0', 3);

						case 3:
							return _context.abrupt('return', _context.t0);

						case 4:
							len = 0;

							if (!(args.length > 0)) {
								_context.next = 12;
								break;
							}

							return _context.delegateYield(args[0].toStringValue(), 't1', 7);

						case 7:
							pv = _context.t1;

							len = pv.native.length;
							thiz.primativeValue = pv;
							_context.next = 13;
							break;

						case 12:
							thiz.primativeValue = EasyObjectValue.emptyString;

						case 13:
							plen = new PropertyDescriptor(scope.realm.fromNative(len));

							plen.enumerable = false;
							plen.configurable = false;
							plen.writable = false;
							thiz.rawSetProperty('length', plen);
							return _context.abrupt('return', thiz);

						case 19:
						case 'end':
							return _context.stop();
					}
				}
			}, call, this);
		})
	}, {
		key: 'callPrototype',
		value: function callPrototype(realm) {
			return realm.StringPrototype;
		}
	}, {
		key: 'constructorFor',
		value: function constructorFor(realm) {
			return realm.StringPrototype;
		}
	}], [{
		key: 'fromCharCode',
		value: _regenerator2.default.mark(function fromCharCode(thiz, args) {
			var argz, i;
			return _regenerator2.default.wrap(function fromCharCode$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							argz = new Array(args.length);
							i = 0;

						case 2:
							if (!(i < args.length)) {
								_context2.next = 8;
								break;
							}

							return _context2.delegateYield(args[i].toNumberValue(), 't0', 4);

						case 4:
							argz[i] = _context2.t0.toNative();

						case 5:
							++i;
							_context2.next = 2;
							break;

						case 8:
							return _context2.abrupt('return', this.fromNative(String.fromCharCode.apply(String, argz)));

						case 9:
						case 'end':
							return _context2.stop();
					}
				}
			}, fromCharCode, this);
		})
	}]);
	return StringObject;
}(EasyObjectValue);

module.exports = StringObject;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getPrototypeOf = __webpack_require__(4);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(0);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(1);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(6);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(5);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(2);

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EasyObjectValue = __webpack_require__(8);
var CompletionRecord = __webpack_require__(7);
var EmptyValue = __webpack_require__(28);
var ArrayValue = __webpack_require__(14);
var _g = __webpack_require__(33);

function wrapStringPrototype(name) {
	var fx = String.prototype[name];
	var genfx = _regenerator2.default.mark(function genfx(thiz, args, s) {
		var sv, argz, i, result, vals, _i, nv;

		return _regenerator2.default.wrap(function genfx$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						if (!(thiz instanceof EmptyValue)) {
							_context.next = 4;
							break;
						}

						_context.next = 3;
						return CompletionRecord.makeTypeError(s.realm, 'called String function on null or undefined?');

					case 3:
						return _context.abrupt('return', _context.sent);

					case 4:
						return _context.delegateYield(thiz.toStringValue(s.realm), 't0', 5);

					case 5:
						sv = _context.t0;
						argz = new Array(args.length);

						for (i = 0; i < args.length; ++i) {
							argz[i] = args[i].toNative();
						}

						result = fx.apply(sv.toNative(), argz);

						if (!Array.isArray(result)) {
							_context.next = 15;
							break;
						}

						vals = new Array(result.length);

						for (_i = 0; _i < vals.length; ++_i) {
							vals[_i] = s.realm.fromNative(result[_i]);
						}
						return _context.abrupt('return', ArrayValue.make(vals, s.realm));

					case 15:
						nv = s.realm.fromNative(result);
						return _context.abrupt('return', nv);

					case 17:
					case 'end':
						return _context.stop();
				}
			}
		}, genfx, this);
	});
	genfx.esperLength = fx.length;
	return genfx;
}

var StringPrototype = function (_EasyObjectValue) {
	(0, _inherits3.default)(StringPrototype, _EasyObjectValue);

	function StringPrototype() {
		(0, _classCallCheck3.default)(this, StringPrototype);
		return (0, _possibleConstructorReturn3.default)(this, (StringPrototype.__proto__ || (0, _getPrototypeOf2.default)(StringPrototype)).apply(this, arguments));
	}

	(0, _createClass3.default)(StringPrototype, null, [{
		key: 'valueOf$e',
		value: _regenerator2.default.mark(function valueOf$e(thiz) {
			var pv;
			return _regenerator2.default.wrap(function valueOf$e$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							if (!(thiz.specTypeName === 'string')) {
								_context2.next = 2;
								break;
							}

							return _context2.abrupt('return', thiz);

						case 2:
							if (!(thiz.specTypeName === 'object')) {
								_context2.next = 6;
								break;
							}

							pv = thiz.primativeValue;

							if (!(pv.specTypeName == 'string')) {
								_context2.next = 6;
								break;
							}

							return _context2.abrupt('return', pv);

						case 6:
							throw new TypeError('Couldnt get there.');

						case 7:
						case 'end':
							return _context2.stop();
					}
				}
			}, valueOf$e, this);
		})
	}, {
		key: 'concat$e',
		value: _regenerator2.default.mark(function concat$e(thiz, args, realm) {
			var base, realArgs, out;
			return _regenerator2.default.wrap(function concat$e$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							return _context4.delegateYield(thiz.toStringNative(), 't0', 1);

						case 1:
							base = _context4.t0;
							return _context4.delegateYield(_g.map(args, _regenerator2.default.mark(function _callee(v) {
								return _regenerator2.default.wrap(function _callee$(_context3) {
									while (1) {
										switch (_context3.prev = _context3.next) {
											case 0:
												return _context3.delegateYield(v.toStringNative(), 't0', 1);

											case 1:
												return _context3.abrupt('return', _context3.t0);

											case 2:
											case 'end':
												return _context3.stop();
										}
									}
								}, _callee, this);
							})), 't1', 3);

						case 3:
							realArgs = _context4.t1;
							out = String.prototype.concat.apply(base, realArgs);
							return _context4.abrupt('return', realm.fromNative(out));

						case 6:
						case 'end':
							return _context4.stop();
					}
				}
			}, concat$e, this);
		})
	}, {
		key: 'toString$e',
		value: _regenerator2.default.mark(function toString$e(thiz) {
			return _regenerator2.default.wrap(function toString$e$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							return _context5.delegateYield(StringPrototype.valueOf$e(thiz), 't0', 1);

						case 1:
							return _context5.abrupt('return', _context5.t0);

						case 2:
						case 'end':
							return _context5.stop();
					}
				}
			}, toString$e, this);
		})
	}, {
		key: 'length$cew',
		get: function get() {
			return StringPrototype.fromNative(0);
		}
	}]);
	return StringPrototype;
}(EasyObjectValue);

StringPrototype.prototype.wellKnownName = '%StringProtoype%';
StringPrototype.prototype.clazz = 'String';

StringPrototype.charAt$e = wrapStringPrototype('charAt');
StringPrototype.charCodeAt$e = wrapStringPrototype('charCodeAt');
StringPrototype.substring$e = wrapStringPrototype('substring');
StringPrototype.substr$e = wrapStringPrototype('substr');
StringPrototype.split$e = wrapStringPrototype('split');
StringPrototype.slice$e = wrapStringPrototype('slice');
StringPrototype.lastIndexOf$e = wrapStringPrototype('lastIndexOf');
StringPrototype.indexOf$e = wrapStringPrototype('indexOf');
StringPrototype.search$e = wrapStringPrototype('search');
StringPrototype.trim$e = wrapStringPrototype('trim');
StringPrototype.toUpperCase$e = wrapStringPrototype('toUpperCase');
StringPrototype.toLocaleUpperCase$e = wrapStringPrototype('toLocaleUpperCase');
StringPrototype.toLowerCase$e = wrapStringPrototype('toLowerCase');
StringPrototype.toLocaleLowerCase$e = wrapStringPrototype('toLocaleLowerCase');
StringPrototype.localeCompare$e = wrapStringPrototype('localeCompare');

module.exports = StringPrototype;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(153), __esModule: true };

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(161), __esModule: true };

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(162), __esModule: true };

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(164), __esModule: true };

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(42);
__webpack_require__(85);
module.exports = __webpack_require__(184);

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var core  = __webpack_require__(10)
  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(186);
var $Object = __webpack_require__(10).Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(187);
var $Object = __webpack_require__(10).Object;
module.exports = function defineProperties(T, D){
  return $Object.defineProperties(T, D);
};

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(188);
var $Object = __webpack_require__(10).Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(189);
var $Object = __webpack_require__(10).Object;
module.exports = function getOwnPropertyDescriptor(it, key){
  return $Object.getOwnPropertyDescriptor(it, key);
};

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(190);
var $Object = __webpack_require__(10).Object;
module.exports = function getOwnPropertyNames(it){
  return $Object.getOwnPropertyNames(it);
};

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(191);
module.exports = __webpack_require__(10).Object.getPrototypeOf;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(192);
module.exports = __webpack_require__(10).Object.keys;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(193);
module.exports = __webpack_require__(10).Object.setPrototypeOf;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(54);
__webpack_require__(85);
__webpack_require__(42);
__webpack_require__(194);
module.exports = __webpack_require__(10).Promise;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(195);
__webpack_require__(54);
__webpack_require__(198);
__webpack_require__(199);
module.exports = __webpack_require__(10).Symbol;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(85);
__webpack_require__(42);
module.exports = __webpack_require__(84).f('iterator');

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(54);
__webpack_require__(42);
__webpack_require__(196);
module.exports = __webpack_require__(10).WeakMap;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(54);
__webpack_require__(42);
__webpack_require__(197);
module.exports = __webpack_require__(10).WeakSet;

/***/ }),
/* 165 */
/***/ (function(module, exports) {

module.exports = function(){ /* empty */ };

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(24)
  , toLength  = __webpack_require__(81)
  , toIndex   = __webpack_require__(183);
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(19)
  , isArray  = __webpack_require__(102)
  , SPECIES  = __webpack_require__(11)('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(167);

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(31)
  , gOPS    = __webpack_require__(75)
  , pIE     = __webpack_require__(50);
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};

/***/ }),
/* 170 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators  = __webpack_require__(39)
  , ITERATOR   = __webpack_require__(11)('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(17);
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create         = __webpack_require__(73)
  , descriptor     = __webpack_require__(52)
  , setToStringTag = __webpack_require__(40)
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(23)(IteratorPrototype, __webpack_require__(11)('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR     = __webpack_require__(11)('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};

/***/ }),
/* 175 */
/***/ (function(module, exports) {

module.exports = function(done, value){
  return {value: value, done: !!done};
};

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(31)
  , toIObject = __webpack_require__(24);
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(13)
  , macrotask = __webpack_require__(109).set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = __webpack_require__(38)(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = __webpack_require__(31)
  , gOPS     = __webpack_require__(75)
  , pIE      = __webpack_require__(50)
  , toObject = __webpack_require__(41)
  , IObject  = __webpack_require__(72)
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(26)(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(19)
  , anObject = __webpack_require__(17);
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = __webpack_require__(30)(Function.call, __webpack_require__(74).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global      = __webpack_require__(13)
  , core        = __webpack_require__(10)
  , dP          = __webpack_require__(21)
  , DESCRIPTORS = __webpack_require__(18)
  , SPECIES     = __webpack_require__(11)('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = __webpack_require__(17)
  , aFunction = __webpack_require__(65)
  , SPECIES   = __webpack_require__(11)('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(80)
  , defined   = __webpack_require__(68);
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(80)
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(17)
  , get      = __webpack_require__(110);
module.exports = __webpack_require__(10).getIterator = function(it){
  var iterFn = get(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(165)
  , step             = __webpack_require__(175)
  , Iterators        = __webpack_require__(39)
  , toIObject        = __webpack_require__(24);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(103)(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(20)
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: __webpack_require__(73)});

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(20);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(18), 'Object', {defineProperties: __webpack_require__(104)});

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(20);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(18), 'Object', {defineProperty: __webpack_require__(21).f});

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = __webpack_require__(24)
  , $getOwnPropertyDescriptor = __webpack_require__(74).f;

__webpack_require__(51)('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(51)('getOwnPropertyNames', function(){
  return __webpack_require__(105).f;
});

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = __webpack_require__(41)
  , $getPrototypeOf = __webpack_require__(107);

__webpack_require__(51)('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(41)
  , $keys    = __webpack_require__(31);

__webpack_require__(51)('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(20);
$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(179).set});

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY            = __webpack_require__(48)
  , global             = __webpack_require__(13)
  , ctx                = __webpack_require__(30)
  , classof            = __webpack_require__(97)
  , $export            = __webpack_require__(20)
  , isObject           = __webpack_require__(19)
  , aFunction          = __webpack_require__(65)
  , anInstance         = __webpack_require__(66)
  , forOf              = __webpack_require__(71)
  , speciesConstructor = __webpack_require__(181)
  , task               = __webpack_require__(109).set
  , microtask          = __webpack_require__(177)()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[__webpack_require__(11)('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(76)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
__webpack_require__(40)($Promise, PROMISE);
__webpack_require__(180)(PROMISE);
Wrapper = __webpack_require__(10)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(174)(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global         = __webpack_require__(13)
  , has            = __webpack_require__(22)
  , DESCRIPTORS    = __webpack_require__(18)
  , $export        = __webpack_require__(20)
  , redefine       = __webpack_require__(77)
  , META           = __webpack_require__(49).KEY
  , $fails         = __webpack_require__(26)
  , shared         = __webpack_require__(79)
  , setToStringTag = __webpack_require__(40)
  , uid            = __webpack_require__(53)
  , wks            = __webpack_require__(11)
  , wksExt         = __webpack_require__(84)
  , wksDefine      = __webpack_require__(83)
  , keyOf          = __webpack_require__(176)
  , enumKeys       = __webpack_require__(169)
  , isArray        = __webpack_require__(102)
  , anObject       = __webpack_require__(17)
  , toIObject      = __webpack_require__(24)
  , toPrimitive    = __webpack_require__(82)
  , createDesc     = __webpack_require__(52)
  , _create        = __webpack_require__(73)
  , gOPNExt        = __webpack_require__(105)
  , $GOPD          = __webpack_require__(74)
  , $DP            = __webpack_require__(21)
  , $keys          = __webpack_require__(31)
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  __webpack_require__(106).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(50).f  = $propertyIsEnumerable;
  __webpack_require__(75).f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !__webpack_require__(48)){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(23)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each         = __webpack_require__(67)(0)
  , redefine     = __webpack_require__(77)
  , meta         = __webpack_require__(49)
  , assign       = __webpack_require__(178)
  , weak         = __webpack_require__(98)
  , isObject     = __webpack_require__(19)
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(99)('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(98);

// 23.4 WeakSet Objects
__webpack_require__(99)('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(83)('asyncIterator');

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(83)('observable');

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
/* istanbul ignore next */
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
/* istanbul ignore next */
	else if(typeof exports === 'object')
		exports["esprima"] = factory();
	else
		root["esprima"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/* istanbul ignore if */
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/*
	  Copyright JS Foundation and other contributors, https://js.foundation/

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	"use strict";
	var comment_handler_1 = __webpack_require__(1);
	var parser_1 = __webpack_require__(3);
	var jsx_parser_1 = __webpack_require__(11);
	var tokenizer_1 = __webpack_require__(15);
	function parse(code, options, delegate) {
	    var commentHandler = null;
	    var proxyDelegate = function (node, metadata) {
	        if (delegate) {
	            delegate(node, metadata);
	        }
	        if (commentHandler) {
	            commentHandler.visit(node, metadata);
	        }
	    };
	    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
	    var collectComment = false;
	    if (options) {
	        collectComment = (typeof options.comment === 'boolean' && options.comment);
	        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
	        if (collectComment || attachComment) {
	            commentHandler = new comment_handler_1.CommentHandler();
	            commentHandler.attach = attachComment;
	            options.comment = true;
	            parserDelegate = proxyDelegate;
	        }
	    }
	    var parser;
	    if (options && typeof options.jsx === 'boolean' && options.jsx) {
	        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
	    }
	    else {
	        parser = new parser_1.Parser(code, options, parserDelegate);
	    }
	    var ast = (parser.parseProgram());
	    if (collectComment) {
	        ast.comments = commentHandler.comments;
	    }
	    if (parser.config.tokens) {
	        ast.tokens = parser.tokens;
	    }
	    if (parser.config.tolerant) {
	        ast.errors = parser.errorHandler.errors;
	    }
	    return ast;
	}
	exports.parse = parse;
	function tokenize(code, options, delegate) {
	    var tokenizer = new tokenizer_1.Tokenizer(code, options);
	    var tokens;
	    tokens = [];
	    try {
	        while (true) {
	            var token = tokenizer.getNextToken();
	            if (!token) {
	                break;
	            }
	            if (delegate) {
	                token = delegate(token);
	            }
	            tokens.push(token);
	        }
	    }
	    catch (e) {
	        tokenizer.errorHandler.tolerate(e);
	    }
	    if (tokenizer.errorHandler.tolerant) {
	        tokens.errors = tokenizer.errors();
	    }
	    return tokens;
	}
	exports.tokenize = tokenize;
	var syntax_1 = __webpack_require__(2);
	exports.Syntax = syntax_1.Syntax;
	// Sync with *.json manifests.
	exports.version = '3.1.3';


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var syntax_1 = __webpack_require__(2);
	var CommentHandler = (function () {
	    function CommentHandler() {
	        this.attach = false;
	        this.comments = [];
	        this.stack = [];
	        this.leading = [];
	        this.trailing = [];
	    }
	    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
	        //  innnerComments for properties empty block
	        //  `function a() {/** comments **\/}`
	        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
	            var innerComments = [];
	            for (var i = this.leading.length - 1; i >= 0; --i) {
	                var entry = this.leading[i];
	                if (metadata.end.offset >= entry.start) {
	                    innerComments.unshift(entry.comment);
	                    this.leading.splice(i, 1);
	                    this.trailing.splice(i, 1);
	                }
	            }
	            if (innerComments.length) {
	                node.innerComments = innerComments;
	            }
	        }
	    };
	    CommentHandler.prototype.findTrailingComments = function (node, metadata) {
	        var trailingComments = [];
	        if (this.trailing.length > 0) {
	            for (var i = this.trailing.length - 1; i >= 0; --i) {
	                var entry_1 = this.trailing[i];
	                if (entry_1.start >= metadata.end.offset) {
	                    trailingComments.unshift(entry_1.comment);
	                }
	            }
	            this.trailing.length = 0;
	            return trailingComments;
	        }
	        var entry = this.stack[this.stack.length - 1];
	        if (entry && entry.node.trailingComments) {
	            var firstComment = entry.node.trailingComments[0];
	            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
	                trailingComments = entry.node.trailingComments;
	                delete entry.node.trailingComments;
	            }
	        }
	        return trailingComments;
	    };
	    CommentHandler.prototype.findLeadingComments = function (node, metadata) {
	        var leadingComments = [];
	        var target;
	        while (this.stack.length > 0) {
	            var entry = this.stack[this.stack.length - 1];
	            if (entry && entry.start >= metadata.start.offset) {
	                target = this.stack.pop().node;
	            }
	            else {
	                break;
	            }
	        }
	        if (target) {
	            var count = target.leadingComments ? target.leadingComments.length : 0;
	            for (var i = count - 1; i >= 0; --i) {
	                var comment = target.leadingComments[i];
	                if (comment.range[1] <= metadata.start.offset) {
	                    leadingComments.unshift(comment);
	                    target.leadingComments.splice(i, 1);
	                }
	            }
	            if (target.leadingComments && target.leadingComments.length === 0) {
	                delete target.leadingComments;
	            }
	            return leadingComments;
	        }
	        for (var i = this.leading.length - 1; i >= 0; --i) {
	            var entry = this.leading[i];
	            if (entry.start <= metadata.start.offset) {
	                leadingComments.unshift(entry.comment);
	                this.leading.splice(i, 1);
	            }
	        }
	        return leadingComments;
	    };
	    CommentHandler.prototype.visitNode = function (node, metadata) {
	        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
	            return;
	        }
	        this.insertInnerComments(node, metadata);
	        var trailingComments = this.findTrailingComments(node, metadata);
	        var leadingComments = this.findLeadingComments(node, metadata);
	        if (leadingComments.length > 0) {
	            node.leadingComments = leadingComments;
	        }
	        if (trailingComments.length > 0) {
	            node.trailingComments = trailingComments;
	        }
	        this.stack.push({
	            node: node,
	            start: metadata.start.offset
	        });
	    };
	    CommentHandler.prototype.visitComment = function (node, metadata) {
	        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
	        var comment = {
	            type: type,
	            value: node.value
	        };
	        if (node.range) {
	            comment.range = node.range;
	        }
	        if (node.loc) {
	            comment.loc = node.loc;
	        }
	        this.comments.push(comment);
	        if (this.attach) {
	            var entry = {
	                comment: {
	                    type: type,
	                    value: node.value,
	                    range: [metadata.start.offset, metadata.end.offset]
	                },
	                start: metadata.start.offset
	            };
	            if (node.loc) {
	                entry.comment.loc = node.loc;
	            }
	            node.type = type;
	            this.leading.push(entry);
	            this.trailing.push(entry);
	        }
	    };
	    CommentHandler.prototype.visit = function (node, metadata) {
	        if (node.type === 'LineComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (node.type === 'BlockComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (this.attach) {
	            this.visitNode(node, metadata);
	        }
	    };
	    return CommentHandler;
	}());
	exports.CommentHandler = CommentHandler;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	exports.Syntax = {
	    AssignmentExpression: 'AssignmentExpression',
	    AssignmentPattern: 'AssignmentPattern',
	    ArrayExpression: 'ArrayExpression',
	    ArrayPattern: 'ArrayPattern',
	    ArrowFunctionExpression: 'ArrowFunctionExpression',
	    BlockStatement: 'BlockStatement',
	    BinaryExpression: 'BinaryExpression',
	    BreakStatement: 'BreakStatement',
	    CallExpression: 'CallExpression',
	    CatchClause: 'CatchClause',
	    ClassBody: 'ClassBody',
	    ClassDeclaration: 'ClassDeclaration',
	    ClassExpression: 'ClassExpression',
	    ConditionalExpression: 'ConditionalExpression',
	    ContinueStatement: 'ContinueStatement',
	    DoWhileStatement: 'DoWhileStatement',
	    DebuggerStatement: 'DebuggerStatement',
	    EmptyStatement: 'EmptyStatement',
	    ExportAllDeclaration: 'ExportAllDeclaration',
	    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	    ExportNamedDeclaration: 'ExportNamedDeclaration',
	    ExportSpecifier: 'ExportSpecifier',
	    ExpressionStatement: 'ExpressionStatement',
	    ForStatement: 'ForStatement',
	    ForOfStatement: 'ForOfStatement',
	    ForInStatement: 'ForInStatement',
	    FunctionDeclaration: 'FunctionDeclaration',
	    FunctionExpression: 'FunctionExpression',
	    Identifier: 'Identifier',
	    IfStatement: 'IfStatement',
	    ImportDeclaration: 'ImportDeclaration',
	    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	    ImportSpecifier: 'ImportSpecifier',
	    Literal: 'Literal',
	    LabeledStatement: 'LabeledStatement',
	    LogicalExpression: 'LogicalExpression',
	    MemberExpression: 'MemberExpression',
	    MetaProperty: 'MetaProperty',
	    MethodDefinition: 'MethodDefinition',
	    NewExpression: 'NewExpression',
	    ObjectExpression: 'ObjectExpression',
	    ObjectPattern: 'ObjectPattern',
	    Program: 'Program',
	    Property: 'Property',
	    RestElement: 'RestElement',
	    ReturnStatement: 'ReturnStatement',
	    SequenceExpression: 'SequenceExpression',
	    SpreadElement: 'SpreadElement',
	    Super: 'Super',
	    SwitchCase: 'SwitchCase',
	    SwitchStatement: 'SwitchStatement',
	    TaggedTemplateExpression: 'TaggedTemplateExpression',
	    TemplateElement: 'TemplateElement',
	    TemplateLiteral: 'TemplateLiteral',
	    ThisExpression: 'ThisExpression',
	    ThrowStatement: 'ThrowStatement',
	    TryStatement: 'TryStatement',
	    UnaryExpression: 'UnaryExpression',
	    UpdateExpression: 'UpdateExpression',
	    VariableDeclaration: 'VariableDeclaration',
	    VariableDeclarator: 'VariableDeclarator',
	    WhileStatement: 'WhileStatement',
	    WithStatement: 'WithStatement',
	    YieldExpression: 'YieldExpression'
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var assert_1 = __webpack_require__(4);
	var messages_1 = __webpack_require__(5);
	var error_handler_1 = __webpack_require__(6);
	var token_1 = __webpack_require__(7);
	var scanner_1 = __webpack_require__(8);
	var syntax_1 = __webpack_require__(2);
	var Node = __webpack_require__(10);
	var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
	var Parser = (function () {
	    function Parser(code, options, delegate) {
	        if (options === void 0) { options = {}; }
	        this.config = {
	            range: (typeof options.range === 'boolean') && options.range,
	            loc: (typeof options.loc === 'boolean') && options.loc,
	            source: null,
	            tokens: (typeof options.tokens === 'boolean') && options.tokens,
	            comment: (typeof options.comment === 'boolean') && options.comment,
	            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
	        };
	        if (this.config.loc && options.source && options.source !== null) {
	            this.config.source = String(options.source);
	        }
	        this.delegate = delegate;
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = this.config.tolerant;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = this.config.comment;
	        this.operatorPrecedence = {
	            ')': 0,
	            ';': 0,
	            ',': 0,
	            '=': 0,
	            ']': 0,
	            '||': 1,
	            '&&': 2,
	            '|': 3,
	            '^': 4,
	            '&': 5,
	            '==': 6,
	            '!=': 6,
	            '===': 6,
	            '!==': 6,
	            '<': 7,
	            '>': 7,
	            '<=': 7,
	            '>=': 7,
	            '<<': 8,
	            '>>': 8,
	            '>>>': 8,
	            '+': 9,
	            '-': 9,
	            '*': 11,
	            '/': 11,
	            '%': 11
	        };
	        this.sourceType = (options && options.sourceType === 'module') ? 'module' : 'script';
	        this.lookahead = null;
	        this.hasLineTerminator = false;
	        this.context = {
	            allowIn: true,
	            allowYield: true,
	            firstCoverInitializedNameError: null,
	            isAssignmentTarget: false,
	            isBindingElement: false,
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            labelSet: {},
	            strict: (this.sourceType === 'module')
	        };
	        this.tokens = [];
	        this.startMarker = {
	            index: 0,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0
	        };
	        this.lastMarker = {
	            index: 0,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0
	        };
	        this.nextToken();
	        this.lastMarker = {
	            index: this.scanner.index,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart
	        };
	    }
	    Parser.prototype.throwError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.lastMarker.lineNumber;
	        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;
	        throw this.errorHandler.createError(index, line, column, msg);
	    };
	    Parser.prototype.tolerateError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.scanner.lineNumber;
	        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;
	        this.errorHandler.tolerateError(index, line, column, msg);
	    };
	    // Throw an exception because of the token.
	    Parser.prototype.unexpectedTokenError = function (token, message) {
	        var msg = message || messages_1.Messages.UnexpectedToken;
	        var value;
	        if (token) {
	            if (!message) {
	                msg = (token.type === token_1.Token.EOF) ? messages_1.Messages.UnexpectedEOS :
	                    (token.type === token_1.Token.Identifier) ? messages_1.Messages.UnexpectedIdentifier :
	                        (token.type === token_1.Token.NumericLiteral) ? messages_1.Messages.UnexpectedNumber :
	                            (token.type === token_1.Token.StringLiteral) ? messages_1.Messages.UnexpectedString :
	                                (token.type === token_1.Token.Template) ? messages_1.Messages.UnexpectedTemplate :
	                                    messages_1.Messages.UnexpectedToken;
	                if (token.type === token_1.Token.Keyword) {
	                    if (this.scanner.isFutureReservedWord(token.value)) {
	                        msg = messages_1.Messages.UnexpectedReserved;
	                    }
	                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
	                        msg = messages_1.Messages.StrictReservedWord;
	                    }
	                }
	            }
	            value = (token.type === token_1.Token.Template) ? token.value.raw : token.value;
	        }
	        else {
	            value = 'ILLEGAL';
	        }
	        msg = msg.replace('%0', value);
	        if (token && typeof token.lineNumber === 'number') {
	            var index = token.start;
	            var line = token.lineNumber;
	            var column = token.start - this.lastMarker.lineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	        else {
	            var index = this.lastMarker.index;
	            var line = this.lastMarker.lineNumber;
	            var column = index - this.lastMarker.lineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	    };
	    Parser.prototype.throwUnexpectedToken = function (token, message) {
	        throw this.unexpectedTokenError(token, message);
	    };
	    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
	        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
	    };
	    Parser.prototype.collectComments = function () {
	        if (!this.config.comment) {
	            this.scanner.scanComments();
	        }
	        else {
	            var comments = this.scanner.scanComments();
	            if (comments.length > 0 && this.delegate) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var node = void 0;
	                    node = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
	                    };
	                    if (this.config.range) {
	                        node.range = e.range;
	                    }
	                    if (this.config.loc) {
	                        node.loc = e.loc;
	                    }
	                    var metadata = {
	                        start: {
	                            line: e.loc.start.line,
	                            column: e.loc.start.column,
	                            offset: e.range[0]
	                        },
	                        end: {
	                            line: e.loc.end.line,
	                            column: e.loc.end.column,
	                            offset: e.range[1]
	                        }
	                    };
	                    this.delegate(node, metadata);
	                }
	            }
	        }
	    };
	    // From internal representation to an external structure
	    Parser.prototype.getTokenRaw = function (token) {
	        return this.scanner.source.slice(token.start, token.end);
	    };
	    Parser.prototype.convertToken = function (token) {
	        var t;
	        t = {
	            type: token_1.TokenName[token.type],
	            value: this.getTokenRaw(token)
	        };
	        if (this.config.range) {
	            t.range = [token.start, token.end];
	        }
	        if (this.config.loc) {
	            t.loc = {
	                start: {
	                    line: this.startMarker.lineNumber,
	                    column: this.startMarker.index - this.startMarker.lineStart
	                },
	                end: {
	                    line: this.scanner.lineNumber,
	                    column: this.scanner.index - this.scanner.lineStart
	                }
	            };
	        }
	        if (token.regex) {
	            t.regex = token.regex;
	        }
	        return t;
	    };
	    Parser.prototype.nextToken = function () {
	        var token = this.lookahead;
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.lineNumber = this.scanner.lineNumber;
	        this.lastMarker.lineStart = this.scanner.lineStart;
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.lineNumber = this.scanner.lineNumber;
	        this.startMarker.lineStart = this.scanner.lineStart;
	        var next;
	        next = this.scanner.lex();
	        this.hasLineTerminator = (token && next) ? (token.lineNumber !== next.lineNumber) : false;
	        if (next && this.context.strict && next.type === token_1.Token.Identifier) {
	            if (this.scanner.isStrictModeReservedWord(next.value)) {
	                next.type = token_1.Token.Keyword;
	            }
	        }
	        this.lookahead = next;
	        if (this.config.tokens && next.type !== token_1.Token.EOF) {
	            this.tokens.push(this.convertToken(next));
	        }
	        return token;
	    };
	    Parser.prototype.nextRegexToken = function () {
	        this.collectComments();
	        var token = this.scanner.scanRegExp();
	        if (this.config.tokens) {
	            // Pop the previous token, '/' or '/='
	            // This is added from the lookahead token.
	            this.tokens.pop();
	            this.tokens.push(this.convertToken(token));
	        }
	        // Prime the next lookahead.
	        this.lookahead = token;
	        this.nextToken();
	        return token;
	    };
	    Parser.prototype.createNode = function () {
	        return {
	            index: this.startMarker.index,
	            line: this.startMarker.lineNumber,
	            column: this.startMarker.index - this.startMarker.lineStart
	        };
	    };
	    Parser.prototype.startNode = function (token) {
	        return {
	            index: token.start,
	            line: token.lineNumber,
	            column: token.start - token.lineStart
	        };
	    };
	    Parser.prototype.finalize = function (meta, node) {
	        if (this.config.range) {
	            node.range = [meta.index, this.lastMarker.index];
	        }
	        if (this.config.loc) {
	            node.loc = {
	                start: {
	                    line: meta.line,
	                    column: meta.column
	                },
	                end: {
	                    line: this.lastMarker.lineNumber,
	                    column: this.lastMarker.index - this.lastMarker.lineStart
	                }
	            };
	            if (this.config.source) {
	                node.loc.source = this.config.source;
	            }
	        }
	        if (this.delegate) {
	            var metadata = {
	                start: {
	                    line: meta.line,
	                    column: meta.column,
	                    offset: meta.index
	                },
	                end: {
	                    line: this.lastMarker.lineNumber,
	                    column: this.lastMarker.index - this.lastMarker.lineStart,
	                    offset: this.lastMarker.index
	                }
	            };
	            this.delegate(node, metadata);
	        }
	        return node;
	    };
	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    Parser.prototype.expect = function (value) {
	        var token = this.nextToken();
	        if (token.type !== token_1.Token.Punctuator || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
	    Parser.prototype.expectCommaSeparator = function () {
	        if (this.config.tolerant) {
	            var token = this.lookahead;
	            if (token.type === token_1.Token.Punctuator && token.value === ',') {
	                this.nextToken();
	            }
	            else if (token.type === token_1.Token.Punctuator && token.value === ';') {
	                this.nextToken();
	                this.tolerateUnexpectedToken(token);
	            }
	            else {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
	            }
	        }
	        else {
	            this.expect(',');
	        }
	    };
	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.
	    Parser.prototype.expectKeyword = function (keyword) {
	        var token = this.nextToken();
	        if (token.type !== token_1.Token.Keyword || token.value !== keyword) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next token matches the specified punctuator.
	    Parser.prototype.match = function (value) {
	        return this.lookahead.type === token_1.Token.Punctuator && this.lookahead.value === value;
	    };
	    // Return true if the next token matches the specified keyword
	    Parser.prototype.matchKeyword = function (keyword) {
	        return this.lookahead.type === token_1.Token.Keyword && this.lookahead.value === keyword;
	    };
	    // Return true if the next token matches the specified contextual keyword
	    // (where an identifier is sometimes a keyword depending on the context)
	    Parser.prototype.matchContextualKeyword = function (keyword) {
	        return this.lookahead.type === token_1.Token.Identifier && this.lookahead.value === keyword;
	    };
	    // Return true if the next token is an assignment operator
	    Parser.prototype.matchAssign = function () {
	        if (this.lookahead.type !== token_1.Token.Punctuator) {
	            return false;
	        }
	        var op = this.lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '**=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    };
	    // Cover grammar support.
	    //
	    // When an assignment expression position starts with an left parenthesis, the determination of the type
	    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
	    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
	    //
	    // There are three productions that can be parsed in a parentheses pair that needs to be determined
	    // after the outermost pair is closed. They are:
	    //
	    //   1. AssignmentExpression
	    //   2. BindingElements
	    //   3. AssignmentTargets
	    //
	    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
	    // binding element or assignment target.
	    //
	    // The three productions have the relationship:
	    //
	    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
	    //
	    // with a single exception that CoverInitializedName when used directly in an Expression, generates
	    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
	    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
	    //
	    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
	    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
	    // the CoverInitializedName check is conducted.
	    //
	    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
	    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
	    // pattern. The CoverInitializedName check is deferred.
	    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        if (this.context.firstCoverInitializedNameError !== null) {
	            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
	        }
	        this.context.isBindingElement = previousIsBindingElement;
	        this.context.isAssignmentTarget = previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
	        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.consumeSemicolon = function () {
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else if (!this.hasLineTerminator) {
	            if (this.lookahead.type !== token_1.Token.EOF && !this.match('}')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.lastMarker.index = this.startMarker.index;
	            this.lastMarker.lineNumber = this.startMarker.lineNumber;
	            this.lastMarker.lineStart = this.startMarker.lineStart;
	        }
	    };
	    // ECMA-262 12.2 Primary Expressions
	    Parser.prototype.parsePrimaryExpression = function () {
	        var node = this.createNode();
	        var expr;
	        var value, token, raw;
	        switch (this.lookahead.type) {
	            case token_1.Token.Identifier:
	                if (this.sourceType === 'module' && this.lookahead.value === 'await') {
	                    this.tolerateUnexpectedToken(this.lookahead);
	                }
	                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                break;
	            case token_1.Token.NumericLiteral:
	            case token_1.Token.StringLiteral:
	                if (this.context.strict && this.lookahead.octal) {
	                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
	                }
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case token_1.Token.BooleanLiteral:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                token.value = (token.value === 'true');
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case token_1.Token.NullLiteral:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                token.value = null;
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case token_1.Token.Template:
	                expr = this.parseTemplateLiteral();
	                break;
	            case token_1.Token.Punctuator:
	                value = this.lookahead.value;
	                switch (value) {
	                    case '(':
	                        this.context.isBindingElement = false;
	                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
	                        break;
	                    case '[':
	                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
	                        break;
	                    case '{':
	                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
	                        break;
	                    case '/':
	                    case '/=':
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                        this.scanner.index = this.startMarker.index;
	                        token = this.nextRegexToken();
	                        raw = this.getTokenRaw(token);
	                        expr = this.finalize(node, new Node.RegexLiteral(token.value, raw, token.regex));
	                        break;
	                    default:
	                        this.throwUnexpectedToken(this.nextToken());
	                }
	                break;
	            case token_1.Token.Keyword:
	                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
	                    expr = this.parseIdentifierName();
	                }
	                else if (!this.context.strict && this.matchKeyword('let')) {
	                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                }
	                else {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    if (this.matchKeyword('function')) {
	                        expr = this.parseFunctionExpression();
	                    }
	                    else if (this.matchKeyword('this')) {
	                        this.nextToken();
	                        expr = this.finalize(node, new Node.ThisExpression());
	                    }
	                    else if (this.matchKeyword('class')) {
	                        expr = this.parseClassExpression();
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.nextToken());
	                    }
	                }
	                break;
	            default:
	                this.throwUnexpectedToken(this.nextToken());
	        }
	        return expr;
	    };
	    // ECMA-262 12.2.5 Array Initializer
	    Parser.prototype.parseSpreadElement = function () {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
	        return this.finalize(node, new Node.SpreadElement(arg));
	    };
	    Parser.prototype.parseArrayInitializer = function () {
	        var node = this.createNode();
	        var elements = [];
	        this.expect('[');
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else if (this.match('...')) {
	                var element = this.parseSpreadElement();
	                if (!this.match(']')) {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    this.expect(',');
	                }
	                elements.push(element);
	            }
	            else {
	                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayExpression(elements));
	    };
	    // ECMA-262 12.2.6 Object Initializer
	    Parser.prototype.parsePropertyMethod = function (params) {
	        this.context.isAssignmentTarget = false;
	        this.context.isBindingElement = false;
	        var previousStrict = this.context.strict;
	        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
	        if (this.context.strict && params.firstRestricted) {
	            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
	        }
	        if (this.context.strict && params.stricted) {
	            this.tolerateUnexpectedToken(params.stricted, params.message);
	        }
	        this.context.strict = previousStrict;
	        return body;
	    };
	    Parser.prototype.parsePropertyMethodFunction = function () {
	        var isGenerator = false;
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = false;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parseObjectPropertyKey = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        var key = null;
	        switch (token.type) {
	            case token_1.Token.StringLiteral:
	            case token_1.Token.NumericLiteral:
	                if (this.context.strict && token.octal) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
	                }
	                var raw = this.getTokenRaw(token);
	                key = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case token_1.Token.Identifier:
	            case token_1.Token.BooleanLiteral:
	            case token_1.Token.NullLiteral:
	            case token_1.Token.Keyword:
	                key = this.finalize(node, new Node.Identifier(token.value));
	                break;
	            case token_1.Token.Punctuator:
	                if (token.value === '[') {
	                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    this.expect(']');
	                }
	                else {
	                    this.throwUnexpectedToken(token);
	                }
	                break;
	            default:
	                this.throwUnexpectedToken(token);
	        }
	        return key;
	    };
	    Parser.prototype.isPropertyKey = function (key, value) {
	        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
	            (key.type === syntax_1.Syntax.Literal && key.value === value);
	    };
	    Parser.prototype.parseObjectProperty = function (hasProto) {
	        var node = this.createNode();
	        var token = this.lookahead;
	        var kind;
	        var key;
	        var value;
	        var computed = false;
	        var method = false;
	        var shorthand = false;
	        if (token.type === token_1.Token.Identifier) {
	            this.nextToken();
	            key = this.finalize(node, new Node.Identifier(token.value));
	        }
	        else if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === token_1.Token.Identifier && token.value === 'get' && lookaheadPropertyKey) {
	            kind = 'get';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.context.allowYield = false;
	            value = this.parseGetterMethod();
	        }
	        else if (token.type === token_1.Token.Identifier && token.value === 'set' && lookaheadPropertyKey) {
	            kind = 'set';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseSetterMethod();
	        }
	        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        else {
	            if (!key) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            kind = 'init';
	            if (this.match(':')) {
	                if (!computed && this.isPropertyKey(key, '__proto__')) {
	                    if (hasProto.value) {
	                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
	                    }
	                    hasProto.value = true;
	                }
	                this.nextToken();
	                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
	            }
	            else if (this.match('(')) {
	                value = this.parsePropertyMethodFunction();
	                method = true;
	            }
	            else if (token.type === token_1.Token.Identifier) {
	                var id = this.finalize(node, new Node.Identifier(token.value));
	                if (this.match('=')) {
	                    this.context.firstCoverInitializedNameError = this.lookahead;
	                    this.nextToken();
	                    shorthand = true;
	                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
	                }
	                else {
	                    shorthand = true;
	                    value = id;
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectInitializer = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var properties = [];
	        var hasProto = { value: false };
	        while (!this.match('}')) {
	            properties.push(this.parseObjectProperty(hasProto));
	            if (!this.match('}')) {
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectExpression(properties));
	    };
	    // ECMA-262 12.2.9 Template Literals
	    Parser.prototype.parseTemplateHead = function () {
	        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
	        var node = this.createNode();
	        var token = this.nextToken();
	        var value = {
	            raw: token.value.raw,
	            cooked: token.value.cooked
	        };
	        return this.finalize(node, new Node.TemplateElement(value, token.tail));
	    };
	    Parser.prototype.parseTemplateElement = function () {
	        if (this.lookahead.type !== token_1.Token.Template) {
	            this.throwUnexpectedToken();
	        }
	        var node = this.createNode();
	        var token = this.nextToken();
	        var value = {
	            raw: token.value.raw,
	            cooked: token.value.cooked
	        };
	        return this.finalize(node, new Node.TemplateElement(value, token.tail));
	    };
	    Parser.prototype.parseTemplateLiteral = function () {
	        var node = this.createNode();
	        var expressions = [];
	        var quasis = [];
	        var quasi = this.parseTemplateHead();
	        quasis.push(quasi);
	        while (!quasi.tail) {
	            expressions.push(this.parseExpression());
	            quasi = this.parseTemplateElement();
	            quasis.push(quasi);
	        }
	        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
	    };
	    // ECMA-262 12.2.10 The Grouping Operator
	    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	            case syntax_1.Syntax.MemberExpression:
	            case syntax_1.Syntax.RestElement:
	            case syntax_1.Syntax.AssignmentPattern:
	                break;
	            case syntax_1.Syntax.SpreadElement:
	                expr.type = syntax_1.Syntax.RestElement;
	                this.reinterpretExpressionAsPattern(expr.argument);
	                break;
	            case syntax_1.Syntax.ArrayExpression:
	                expr.type = syntax_1.Syntax.ArrayPattern;
	                for (var i = 0; i < expr.elements.length; i++) {
	                    if (expr.elements[i] !== null) {
	                        this.reinterpretExpressionAsPattern(expr.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectExpression:
	                expr.type = syntax_1.Syntax.ObjectPattern;
	                for (var i = 0; i < expr.properties.length; i++) {
	                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
	                }
	                break;
	            case syntax_1.Syntax.AssignmentExpression:
	                expr.type = syntax_1.Syntax.AssignmentPattern;
	                delete expr.operator;
	                this.reinterpretExpressionAsPattern(expr.left);
	                break;
	            default:
	                // Allow other node type for tolerant parsing.
	                break;
	        }
	    };
	    Parser.prototype.parseGroupExpression = function () {
	        var expr;
	        this.expect('(');
	        if (this.match(')')) {
	            this.nextToken();
	            if (!this.match('=>')) {
	                this.expect('=>');
	            }
	            expr = {
	                type: ArrowParameterPlaceHolder,
	                params: []
	            };
	        }
	        else {
	            var startToken = this.lookahead;
	            var params = [];
	            if (this.match('...')) {
	                expr = this.parseRestElement(params);
	                this.expect(')');
	                if (!this.match('=>')) {
	                    this.expect('=>');
	                }
	                expr = {
	                    type: ArrowParameterPlaceHolder,
	                    params: [expr]
	                };
	            }
	            else {
	                var arrow = false;
	                this.context.isBindingElement = true;
	                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                if (this.match(',')) {
	                    var expressions = [];
	                    this.context.isAssignmentTarget = false;
	                    expressions.push(expr);
	                    while (this.startMarker.index < this.scanner.length) {
	                        if (!this.match(',')) {
	                            break;
	                        }
	                        this.nextToken();
	                        if (this.match('...')) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            expressions.push(this.parseRestElement(params));
	                            this.expect(')');
	                            if (!this.match('=>')) {
	                                this.expect('=>');
	                            }
	                            this.context.isBindingElement = false;
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions
	                            };
	                        }
	                        else {
	                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        if (arrow) {
	                            break;
	                        }
	                    }
	                    if (!arrow) {
	                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	                    }
	                }
	                if (!arrow) {
	                    this.expect(')');
	                    if (this.match('=>')) {
	                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: [expr]
	                            };
	                        }
	                        if (!arrow) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
	                                for (var i = 0; i < expr.expressions.length; i++) {
	                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
	                                }
	                            }
	                            else {
	                                this.reinterpretExpressionAsPattern(expr);
	                            }
	                            var params_1 = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: params_1
	                            };
	                        }
	                    }
	                    this.context.isBindingElement = false;
	                }
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.3 Left-Hand-Side Expressions
	    Parser.prototype.parseArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAssignmentExpression);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.isIdentifierName = function (token) {
	        return token.type === token_1.Token.Identifier ||
	            token.type === token_1.Token.Keyword ||
	            token.type === token_1.Token.BooleanLiteral ||
	            token.type === token_1.Token.NullLiteral;
	    };
	    Parser.prototype.parseIdentifierName = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (!this.isIdentifierName(token)) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseNewExpression = function () {
	        var node = this.createNode();
	        var id = this.parseIdentifierName();
	        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
	        var expr;
	        if (this.match('.')) {
	            this.nextToken();
	            if (this.lookahead.type === token_1.Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {
	                var property = this.parseIdentifierName();
	                expr = new Node.MetaProperty(id, property);
	            }
	            else {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
	            var args = this.match('(') ? this.parseArguments() : [];
	            expr = new Node.NewExpression(callee, args);
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return this.finalize(node, expr);
	    };
	    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
	        var startToken = this.lookahead;
	        var previousAllowIn = this.context.allowIn;
	        this.context.allowIn = true;
	        var expr;
	        if (this.matchKeyword('super') && this.context.inFunctionBody) {
	            expr = this.createNode();
	            this.nextToken();
	            expr = this.finalize(expr, new Node.Super());
	            if (!this.match('(') && !this.match('.') && !this.match('[')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        }
	        while (true) {
	            if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.match('(')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = false;
	                var args = this.parseArguments();
	                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
	            }
	            else if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        this.context.allowIn = previousAllowIn;
	        return expr;
	    };
	    Parser.prototype.parseSuper = function () {
	        var node = this.createNode();
	        this.expectKeyword('super');
	        if (!this.match('[') && !this.match('.')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        return this.finalize(node, new Node.Super());
	    };
	    Parser.prototype.parseLeftHandSideExpression = function () {
	        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
	        var node = this.startNode(this.lookahead);
	        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
	            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        while (true) {
	            if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.4 Update Expressions
	    Parser.prototype.parseUpdateExpression = function () {
	        var expr;
	        var startToken = this.lookahead;
	        if (this.match('++') || this.match('--')) {
	            var node = this.startNode(startToken);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
	            }
	            if (!this.context.isAssignmentTarget) {
	                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	            }
	            var prefix = true;
	            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	            if (!this.hasLineTerminator && this.lookahead.type === token_1.Token.Punctuator) {
	                if (this.match('++') || this.match('--')) {
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
	                    }
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    var operator = this.nextToken().value;
	                    var prefix = false;
	                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
	                }
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.5 Unary Operators
	    Parser.prototype.parseUnaryExpression = function () {
	        var expr;
	        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
	            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
	            var node = this.startNode(this.lookahead);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
	            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
	                this.tolerateError(messages_1.Messages.StrictDelete);
	            }
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.parseUpdateExpression();
	        }
	        return expr;
	    };
	    Parser.prototype.parseExponentiationExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
	        }
	        return expr;
	    };
	    // ECMA-262 12.6 Exponentiation Operators
	    // ECMA-262 12.7 Multiplicative Operators
	    // ECMA-262 12.8 Additive Operators
	    // ECMA-262 12.9 Bitwise Shift Operators
	    // ECMA-262 12.10 Relational Operators
	    // ECMA-262 12.11 Equality Operators
	    // ECMA-262 12.12 Binary Bitwise Operators
	    // ECMA-262 12.13 Binary Logical Operators
	    Parser.prototype.binaryPrecedence = function (token) {
	        var op = token.value;
	        var precedence;
	        if (token.type === token_1.Token.Punctuator) {
	            precedence = this.operatorPrecedence[op] || 0;
	        }
	        else if (token.type === token_1.Token.Keyword) {
	            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
	        }
	        else {
	            precedence = 0;
	        }
	        return precedence;
	    };
	    Parser.prototype.parseBinaryExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
	        var token = this.lookahead;
	        var prec = this.binaryPrecedence(token);
	        if (prec > 0) {
	            this.nextToken();
	            token.prec = prec;
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var markers = [startToken, this.lookahead];
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            var stack = [left, token, right];
	            while (true) {
	                prec = this.binaryPrecedence(this.lookahead);
	                if (prec <= 0) {
	                    break;
	                }
	                // Reduce: make a binary expression from the three topmost entries.
	                while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
	                    right = stack.pop();
	                    var operator = stack.pop().value;
	                    left = stack.pop();
	                    markers.pop();
	                    var node = this.startNode(markers[markers.length - 1]);
	                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
	                }
	                // Shift.
	                token = this.nextToken();
	                token.prec = prec;
	                stack.push(token);
	                markers.push(this.lookahead);
	                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
	            }
	            // Final reduce to clean-up the stack.
	            var i = stack.length - 1;
	            expr = stack[i];
	            markers.pop();
	            while (i > 1) {
	                var node = this.startNode(markers.pop());
	                expr = this.finalize(node, new Node.BinaryExpression(stack[i - 1].value, stack[i - 2], expr));
	                i -= 2;
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.14 Conditional Operator
	    Parser.prototype.parseConditionalExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
	        if (this.match('?')) {
	            this.nextToken();
	            var previousAllowIn = this.context.allowIn;
	            this.context.allowIn = true;
	            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowIn = previousAllowIn;
	            this.expect(':');
	            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return expr;
	    };
	    // ECMA-262 12.15 Assignment Operators
	    Parser.prototype.checkPatternParam = function (options, param) {
	        switch (param.type) {
	            case syntax_1.Syntax.Identifier:
	                this.validateParam(options, param, param.name);
	                break;
	            case syntax_1.Syntax.RestElement:
	                this.checkPatternParam(options, param.argument);
	                break;
	            case syntax_1.Syntax.AssignmentPattern:
	                this.checkPatternParam(options, param.left);
	                break;
	            case syntax_1.Syntax.ArrayPattern:
	                for (var i = 0; i < param.elements.length; i++) {
	                    if (param.elements[i] !== null) {
	                        this.checkPatternParam(options, param.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.YieldExpression:
	                break;
	            default:
	                assert_1.assert(param.type === syntax_1.Syntax.ObjectPattern, 'Invalid type');
	                for (var i = 0; i < param.properties.length; i++) {
	                    this.checkPatternParam(options, param.properties[i].value);
	                }
	                break;
	        }
	    };
	    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
	        var params = [expr];
	        var options;
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	                break;
	            case ArrowParameterPlaceHolder:
	                params = expr.params;
	                break;
	            default:
	                return null;
	        }
	        options = {
	            paramSet: {}
	        };
	        for (var i = 0; i < params.length; ++i) {
	            var param = params[i];
	            if (param.type === syntax_1.Syntax.AssignmentPattern) {
	                if (param.right.type === syntax_1.Syntax.YieldExpression) {
	                    if (param.right.argument) {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                    param.right.type = syntax_1.Syntax.Identifier;
	                    param.right.name = 'yield';
	                    delete param.right.argument;
	                    delete param.right.delegate;
	                }
	            }
	            this.checkPatternParam(options, param);
	            params[i] = param;
	        }
	        if (this.context.strict || !this.context.allowYield) {
	            for (var i = 0; i < params.length; ++i) {
	                var param = params[i];
	                if (param.type === syntax_1.Syntax.YieldExpression) {
	                    this.throwUnexpectedToken(this.lookahead);
	                }
	            }
	        }
	        if (options.message === messages_1.Messages.StrictParamDupe) {
	            var token = this.context.strict ? options.stricted : options.firstRestricted;
	            this.throwUnexpectedToken(token, options.message);
	        }
	        return {
	            params: params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseAssignmentExpression = function () {
	        var expr;
	        if (!this.context.allowYield && this.matchKeyword('yield')) {
	            expr = this.parseYieldExpression();
	        }
	        else {
	            var startToken = this.lookahead;
	            var token = startToken;
	            expr = this.parseConditionalExpression();
	            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
	                // ECMA-262 14.2 Arrow Function Definitions
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                var list = this.reinterpretAsCoverFormalsList(expr);
	                if (list) {
	                    if (this.hasLineTerminator) {
	                        this.tolerateUnexpectedToken(this.lookahead);
	                    }
	                    this.context.firstCoverInitializedNameError = null;
	                    var previousStrict = this.context.strict;
	                    var previousAllowYield = this.context.allowYield;
	                    this.context.allowYield = true;
	                    var node = this.startNode(startToken);
	                    this.expect('=>');
	                    var body = this.match('{') ? this.parseFunctionSourceElements() :
	                        this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
	                    if (this.context.strict && list.firstRestricted) {
	                        this.throwUnexpectedToken(list.firstRestricted, list.message);
	                    }
	                    if (this.context.strict && list.stricted) {
	                        this.tolerateUnexpectedToken(list.stricted, list.message);
	                    }
	                    expr = this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
	                    this.context.strict = previousStrict;
	                    this.context.allowYield = previousAllowYield;
	                }
	            }
	            else {
	                if (this.matchAssign()) {
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
	                        var id = (expr);
	                        if (this.scanner.isRestrictedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
	                        }
	                        if (this.scanner.isStrictModeReservedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	                        }
	                    }
	                    if (!this.match('=')) {
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                    }
	                    else {
	                        this.reinterpretExpressionAsPattern(expr);
	                    }
	                    token = this.nextToken();
	                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(token.value, expr, right));
	                    this.context.firstCoverInitializedNameError = null;
	                }
	            }
	        }
	        return expr;
	    };
	    // ECMA-262 12.16 Comma Operator
	    Parser.prototype.parseExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        if (this.match(',')) {
	            var expressions = [];
	            expressions.push(expr);
	            while (this.startMarker.index < this.scanner.length) {
	                if (!this.match(',')) {
	                    break;
	                }
	                this.nextToken();
	                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	            }
	            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	        }
	        return expr;
	    };
	    // ECMA-262 13.2 Block
	    Parser.prototype.parseStatementListItem = function () {
	        var statement = null;
	        this.context.isAssignmentTarget = true;
	        this.context.isBindingElement = true;
	        if (this.lookahead.type === token_1.Token.Keyword) {
	            switch (this.lookahead.value) {
	                case 'export':
	                    if (this.sourceType !== 'module') {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
	                    }
	                    statement = this.parseExportDeclaration();
	                    break;
	                case 'import':
	                    if (this.sourceType !== 'module') {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
	                    }
	                    statement = this.parseImportDeclaration();
	                    break;
	                case 'const':
	                    statement = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'function':
	                    statement = this.parseFunctionDeclaration();
	                    break;
	                case 'class':
	                    statement = this.parseClassDeclaration();
	                    break;
	                case 'let':
	                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
	                    break;
	                default:
	                    statement = this.parseStatement();
	                    break;
	            }
	        }
	        else {
	            statement = this.parseStatement();
	        }
	        return statement;
	    };
	    Parser.prototype.parseBlock = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var block = [];
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            block.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.BlockStatement(block));
	    };
	    // ECMA-262 13.3.1 Let and Const Declarations
	    Parser.prototype.parseLexicalBinding = function (kind, options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, kind);
	        // ECMA-262 12.2.1
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord((id).name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (kind === 'const') {
	            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
	                this.expect('=');
	                init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            }
	        }
	        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
	            this.expect('=');
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseBindingList = function (kind, options) {
	        var list = [this.parseLexicalBinding(kind, options)];
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseLexicalBinding(kind, options));
	        }
	        return list;
	    };
	    Parser.prototype.isLexicalDeclaration = function () {
	        var previousIndex = this.scanner.index;
	        var previousLineNumber = this.scanner.lineNumber;
	        var previousLineStart = this.scanner.lineStart;
	        this.collectComments();
	        var next = this.scanner.lex();
	        this.scanner.index = previousIndex;
	        this.scanner.lineNumber = previousLineNumber;
	        this.scanner.lineStart = previousLineStart;
	        return (next.type === token_1.Token.Identifier) ||
	            (next.type === token_1.Token.Punctuator && next.value === '[') ||
	            (next.type === token_1.Token.Punctuator && next.value === '{') ||
	            (next.type === token_1.Token.Keyword && next.value === 'let') ||
	            (next.type === token_1.Token.Keyword && next.value === 'yield');
	    };
	    Parser.prototype.parseLexicalDeclaration = function (options) {
	        var node = this.createNode();
	        var kind = this.nextToken().value;
	        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
	        var declarations = this.parseBindingList(kind, options);
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
	    };
	    // ECMA-262 13.3.3 Destructuring Binding Patterns
	    Parser.prototype.parseBindingRestElement = function (params, kind) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params, kind);
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseArrayPattern = function (params, kind) {
	        var node = this.createNode();
	        this.expect('[');
	        var elements = [];
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else {
	                if (this.match('...')) {
	                    elements.push(this.parseBindingRestElement(params, kind));
	                    break;
	                }
	                else {
	                    elements.push(this.parsePatternWithDefault(params, kind));
	                }
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayPattern(elements));
	    };
	    Parser.prototype.parsePropertyPattern = function (params, kind) {
	        var node = this.createNode();
	        var computed = false;
	        var shorthand = false;
	        var method = false;
	        var key;
	        var value;
	        if (this.lookahead.type === token_1.Token.Identifier) {
	            var keyToken = this.lookahead;
	            key = this.parseVariableIdentifier();
	            var init = this.finalize(node, new Node.Identifier(keyToken.value));
	            if (this.match('=')) {
	                params.push(keyToken);
	                shorthand = true;
	                this.nextToken();
	                var expr = this.parseAssignmentExpression();
	                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
	            }
	            else if (!this.match(':')) {
	                params.push(keyToken);
	                shorthand = true;
	                value = init;
	            }
	            else {
	                this.expect(':');
	                value = this.parsePatternWithDefault(params, kind);
	            }
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.expect(':');
	            value = this.parsePatternWithDefault(params, kind);
	        }
	        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectPattern = function (params, kind) {
	        var node = this.createNode();
	        var properties = [];
	        this.expect('{');
	        while (!this.match('}')) {
	            properties.push(this.parsePropertyPattern(params, kind));
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectPattern(properties));
	    };
	    Parser.prototype.parsePattern = function (params, kind) {
	        var pattern;
	        if (this.match('[')) {
	            pattern = this.parseArrayPattern(params, kind);
	        }
	        else if (this.match('{')) {
	            pattern = this.parseObjectPattern(params, kind);
	        }
	        else {
	            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
	                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.UnexpectedToken);
	            }
	            params.push(this.lookahead);
	            pattern = this.parseVariableIdentifier(kind);
	        }
	        return pattern;
	    };
	    Parser.prototype.parsePatternWithDefault = function (params, kind) {
	        var startToken = this.lookahead;
	        var pattern = this.parsePattern(params, kind);
	        if (this.match('=')) {
	            this.nextToken();
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = true;
	            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowYield = previousAllowYield;
	            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
	        }
	        return pattern;
	    };
	    // ECMA-262 13.3.2 Variable Statement
	    Parser.prototype.parseVariableIdentifier = function (kind) {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (token.type === token_1.Token.Keyword && token.value === 'yield') {
	            if (this.context.strict) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            if (!this.context.allowYield) {
	                this.throwUnexpectedToken(token);
	            }
	        }
	        else if (token.type !== token_1.Token.Identifier) {
	            if (this.context.strict && token.type === token_1.Token.Keyword && this.scanner.isStrictModeReservedWord(token.value)) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else {
	                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
	                    this.throwUnexpectedToken(token);
	                }
	            }
	        }
	        else if (this.sourceType === 'module' && token.type === token_1.Token.Identifier && token.value === 'await') {
	            this.tolerateUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseVariableDeclaration = function (options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, 'var');
	        // ECMA-262 12.2.1
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord((id).name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (this.match('=')) {
	            this.nextToken();
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
	            this.expect('=');
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseVariableDeclarationList = function (options) {
	        var opt = { inFor: options.inFor };
	        var list = [];
	        list.push(this.parseVariableDeclaration(opt));
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseVariableDeclaration(opt));
	        }
	        return list;
	    };
	    Parser.prototype.parseVariableStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('var');
	        var declarations = this.parseVariableDeclarationList({ inFor: false });
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
	    };
	    // ECMA-262 13.4 Empty Statement
	    Parser.prototype.parseEmptyStatement = function () {
	        var node = this.createNode();
	        this.expect(';');
	        return this.finalize(node, new Node.EmptyStatement());
	    };
	    // ECMA-262 13.5 Expression Statement
	    Parser.prototype.parseExpressionStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ExpressionStatement(expr));
	    };
	    // ECMA-262 13.6 If statement
	    Parser.prototype.parseIfStatement = function () {
	        var node = this.createNode();
	        var consequent;
	        var alternate = null;
	        this.expectKeyword('if');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            consequent = this.parseStatement();
	            if (this.matchKeyword('else')) {
	                this.nextToken();
	                alternate = this.parseStatement();
	            }
	        }
	        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
	    };
	    // ECMA-262 13.7.2 The do-while Statement
	    Parser.prototype.parseDoWhileStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('do');
	        var previousInIteration = this.context.inIteration;
	        this.context.inIteration = true;
	        var body = this.parseStatement();
	        this.context.inIteration = previousInIteration;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        this.expect(')');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        return this.finalize(node, new Node.DoWhileStatement(body, test));
	    };
	    // ECMA-262 13.7.3 The while Statement
	    Parser.prototype.parseWhileStatement = function () {
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.parseStatement();
	            this.context.inIteration = previousInIteration;
	        }
	        return this.finalize(node, new Node.WhileStatement(test, body));
	    };
	    // ECMA-262 13.7.4 The for Statement
	    // ECMA-262 13.7.5 The for-in and for-of Statements
	    Parser.prototype.parseForStatement = function () {
	        var init = null;
	        var test = null;
	        var update = null;
	        var forIn = true;
	        var left, right;
	        var node = this.createNode();
	        this.expectKeyword('for');
	        this.expect('(');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else {
	            if (this.matchKeyword('var')) {
	                init = this.createNode();
	                this.nextToken();
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                var declarations = this.parseVariableDeclarationList({ inFor: true });
	                this.context.allowIn = previousAllowIn;
	                if (declarations.length === 1 && this.matchKeyword('in')) {
	                    var decl = declarations[0];
	                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
	                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
	                    }
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.expect(';');
	                }
	            }
	            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
	                init = this.createNode();
	                var kind = this.nextToken().value;
	                if (!this.context.strict && this.lookahead.value === 'in') {
	                    init = this.finalize(init, new Node.Identifier(kind));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else {
	                    var previousAllowIn = this.context.allowIn;
	                    this.context.allowIn = false;
	                    var declarations = this.parseBindingList(kind, { inFor: true });
	                    this.context.allowIn = previousAllowIn;
	                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseExpression();
	                        init = null;
	                    }
	                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseAssignmentExpression();
	                        init = null;
	                        forIn = false;
	                    }
	                    else {
	                        this.consumeSemicolon();
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                    }
	                }
	            }
	            else {
	                var initStartToken = this.lookahead;
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                this.context.allowIn = previousAllowIn;
	                if (this.matchKeyword('in')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (this.matchContextualKeyword('of')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    if (this.match(',')) {
	                        var initSeq = [init];
	                        while (this.match(',')) {
	                            this.nextToken();
	                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
	                    }
	                    this.expect(';');
	                }
	            }
	        }
	        if (typeof left === 'undefined') {
	            if (!this.match(';')) {
	                test = this.parseExpression();
	            }
	            this.expect(';');
	            if (!this.match(')')) {
	                update = this.parseExpression();
	            }
	        }
	        var body;
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.isolateCoverGrammar(this.parseStatement);
	            this.context.inIteration = previousInIteration;
	        }
	        return (typeof left === 'undefined') ?
	            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
	            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
	                this.finalize(node, new Node.ForOfStatement(left, right, body));
	    };
	    // ECMA-262 13.8 The continue statement
	    Parser.prototype.parseContinueStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('continue');
	        var label = null;
	        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {
	            label = this.parseVariableIdentifier();
	            var key = '$' + label.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, label.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration) {
	            this.throwError(messages_1.Messages.IllegalContinue);
	        }
	        return this.finalize(node, new Node.ContinueStatement(label));
	    };
	    // ECMA-262 13.9 The break statement
	    Parser.prototype.parseBreakStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('break');
	        var label = null;
	        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {
	            label = this.parseVariableIdentifier();
	            var key = '$' + label.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, label.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
	            this.throwError(messages_1.Messages.IllegalBreak);
	        }
	        return this.finalize(node, new Node.BreakStatement(label));
	    };
	    // ECMA-262 13.10 The return statement
	    Parser.prototype.parseReturnStatement = function () {
	        if (!this.context.inFunctionBody) {
	            this.tolerateError(messages_1.Messages.IllegalReturn);
	        }
	        var node = this.createNode();
	        this.expectKeyword('return');
	        var hasArgument = !this.match(';') && !this.match('}') &&
	            !this.hasLineTerminator && this.lookahead.type !== token_1.Token.EOF;
	        var argument = hasArgument ? this.parseExpression() : null;
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ReturnStatement(argument));
	    };
	    // ECMA-262 13.11 The with statement
	    Parser.prototype.parseWithStatement = function () {
	        if (this.context.strict) {
	            this.tolerateError(messages_1.Messages.StrictModeWith);
	        }
	        var node = this.createNode();
	        this.expectKeyword('with');
	        this.expect('(');
	        var object = this.parseExpression();
	        this.expect(')');
	        var body = this.parseStatement();
	        return this.finalize(node, new Node.WithStatement(object, body));
	    };
	    // ECMA-262 13.12 The switch statement
	    Parser.prototype.parseSwitchCase = function () {
	        var node = this.createNode();
	        var test;
	        if (this.matchKeyword('default')) {
	            this.nextToken();
	            test = null;
	        }
	        else {
	            this.expectKeyword('case');
	            test = this.parseExpression();
	        }
	        this.expect(':');
	        var consequent = [];
	        while (true) {
	            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
	                break;
	            }
	            consequent.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.SwitchCase(test, consequent));
	    };
	    Parser.prototype.parseSwitchStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('switch');
	        this.expect('(');
	        var discriminant = this.parseExpression();
	        this.expect(')');
	        var previousInSwitch = this.context.inSwitch;
	        this.context.inSwitch = true;
	        var cases = [];
	        var defaultFound = false;
	        this.expect('{');
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            var clause = this.parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }
	        this.expect('}');
	        this.context.inSwitch = previousInSwitch;
	        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
	    };
	    // ECMA-262 13.13 Labelled Statements
	    Parser.prototype.parseLabelledStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var statement;
	        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
	            this.nextToken();
	            var id = (expr);
	            var key = '$' + id.name;
	            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
	            }
	            this.context.labelSet[key] = true;
	            var labeledBody = this.parseStatement();
	            delete this.context.labelSet[key];
	            statement = new Node.LabeledStatement(id, labeledBody);
	        }
	        else {
	            this.consumeSemicolon();
	            statement = new Node.ExpressionStatement(expr);
	        }
	        return this.finalize(node, statement);
	    };
	    // ECMA-262 13.14 The throw statement
	    Parser.prototype.parseThrowStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('throw');
	        if (this.hasLineTerminator) {
	            this.throwError(messages_1.Messages.NewlineAfterThrow);
	        }
	        var argument = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ThrowStatement(argument));
	    };
	    // ECMA-262 13.15 The try statement
	    Parser.prototype.parseCatchClause = function () {
	        var node = this.createNode();
	        this.expectKeyword('catch');
	        this.expect('(');
	        if (this.match(')')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        var params = [];
	        var param = this.parsePattern(params);
	        var paramMap = {};
	        for (var i = 0; i < params.length; i++) {
	            var key = '$' + params[i].value;
	            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
	                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
	            }
	            paramMap[key] = true;
	        }
	        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord((param).name)) {
	                this.tolerateError(messages_1.Messages.StrictCatchVariable);
	            }
	        }
	        this.expect(')');
	        var body = this.parseBlock();
	        return this.finalize(node, new Node.CatchClause(param, body));
	    };
	    Parser.prototype.parseFinallyClause = function () {
	        this.expectKeyword('finally');
	        return this.parseBlock();
	    };
	    Parser.prototype.parseTryStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('try');
	        var block = this.parseBlock();
	        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
	        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
	        if (!handler && !finalizer) {
	            this.throwError(messages_1.Messages.NoCatchOrFinally);
	        }
	        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
	    };
	    // ECMA-262 13.16 The debugger statement
	    Parser.prototype.parseDebuggerStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('debugger');
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.DebuggerStatement());
	    };
	    // ECMA-262 13 Statements
	    Parser.prototype.parseStatement = function () {
	        var statement = null;
	        switch (this.lookahead.type) {
	            case token_1.Token.BooleanLiteral:
	            case token_1.Token.NullLiteral:
	            case token_1.Token.NumericLiteral:
	            case token_1.Token.StringLiteral:
	            case token_1.Token.Template:
	            case token_1.Token.RegularExpression:
	                statement = this.parseExpressionStatement();
	                break;
	            case token_1.Token.Punctuator:
	                var value = this.lookahead.value;
	                if (value === '{') {
	                    statement = this.parseBlock();
	                }
	                else if (value === '(') {
	                    statement = this.parseExpressionStatement();
	                }
	                else if (value === ';') {
	                    statement = this.parseEmptyStatement();
	                }
	                else {
	                    statement = this.parseExpressionStatement();
	                }
	                break;
	            case token_1.Token.Identifier:
	                statement = this.parseLabelledStatement();
	                break;
	            case token_1.Token.Keyword:
	                switch (this.lookahead.value) {
	                    case 'break':
	                        statement = this.parseBreakStatement();
	                        break;
	                    case 'continue':
	                        statement = this.parseContinueStatement();
	                        break;
	                    case 'debugger':
	                        statement = this.parseDebuggerStatement();
	                        break;
	                    case 'do':
	                        statement = this.parseDoWhileStatement();
	                        break;
	                    case 'for':
	                        statement = this.parseForStatement();
	                        break;
	                    case 'function':
	                        statement = this.parseFunctionDeclaration();
	                        break;
	                    case 'if':
	                        statement = this.parseIfStatement();
	                        break;
	                    case 'return':
	                        statement = this.parseReturnStatement();
	                        break;
	                    case 'switch':
	                        statement = this.parseSwitchStatement();
	                        break;
	                    case 'throw':
	                        statement = this.parseThrowStatement();
	                        break;
	                    case 'try':
	                        statement = this.parseTryStatement();
	                        break;
	                    case 'var':
	                        statement = this.parseVariableStatement();
	                        break;
	                    case 'while':
	                        statement = this.parseWhileStatement();
	                        break;
	                    case 'with':
	                        statement = this.parseWithStatement();
	                        break;
	                    default:
	                        statement = this.parseExpressionStatement();
	                        break;
	                }
	                break;
	            default:
	                this.throwUnexpectedToken(this.lookahead);
	        }
	        return statement;
	    };
	    // ECMA-262 14.1 Function Definition
	    Parser.prototype.parseFunctionSourceElements = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var body = this.parseDirectivePrologues();
	        var previousLabelSet = this.context.labelSet;
	        var previousInIteration = this.context.inIteration;
	        var previousInSwitch = this.context.inSwitch;
	        var previousInFunctionBody = this.context.inFunctionBody;
	        this.context.labelSet = {};
	        this.context.inIteration = false;
	        this.context.inSwitch = false;
	        this.context.inFunctionBody = true;
	        while (this.startMarker.index < this.scanner.length) {
	            if (this.match('}')) {
	                break;
	            }
	            body.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        this.context.labelSet = previousLabelSet;
	        this.context.inIteration = previousInIteration;
	        this.context.inSwitch = previousInSwitch;
	        this.context.inFunctionBody = previousInFunctionBody;
	        return this.finalize(node, new Node.BlockStatement(body));
	    };
	    Parser.prototype.validateParam = function (options, param, name) {
	        var key = '$' + name;
	        if (this.context.strict) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        else if (!options.firstRestricted) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            else if (this.scanner.isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictReservedWord;
	            }
	            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        /* istanbul ignore next */
	        if (typeof Object.defineProperty === 'function') {
	            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
	        }
	        else {
	            options.paramSet[key] = true;
	        }
	    };
	    Parser.prototype.parseRestElement = function (params) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params);
	        if (this.match('=')) {
	            this.throwError(messages_1.Messages.DefaultRestParameter);
	        }
	        if (!this.match(')')) {
	            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
	        }
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseFormalParameter = function (options) {
	        var params = [];
	        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
	        for (var i = 0; i < params.length; i++) {
	            this.validateParam(options, params[i], params[i].value);
	        }
	        options.params.push(param);
	        return !this.match(')');
	    };
	    Parser.prototype.parseFormalParameters = function (firstRestricted) {
	        var options;
	        options = {
	            params: [],
	            firstRestricted: firstRestricted
	        };
	        this.expect('(');
	        if (!this.match(')')) {
	            options.paramSet = {};
	            while (this.startMarker.index < this.scanner.length) {
	                if (!this.parseFormalParameter(options)) {
	                    break;
	                }
	                this.expect(',');
	            }
	        }
	        this.expect(')');
	        return {
	            params: options.params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        this.expectKeyword('function');
	        var isGenerator = this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted = null;
	        if (!identifierIsOptional || !this.match('(')) {
	            var token = this.lookahead;
	            id = this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
	    };
	    Parser.prototype.parseFunctionExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('function');
	        var isGenerator = this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        if (!this.match('(')) {
	            var token = this.lookahead;
	            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
	    };
	    // ECMA-262 14.1.1 Directive Prologues
	    Parser.prototype.parseDirective = function () {
	        var token = this.lookahead;
	        var directive = null;
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        if (expr.type === syntax_1.Syntax.Literal) {
	            directive = this.getTokenRaw(token).slice(1, -1);
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, directive ? new Node.Directive(expr, directive) :
	            new Node.ExpressionStatement(expr));
	    };
	    Parser.prototype.parseDirectivePrologues = function () {
	        var firstRestricted = null;
	        var body = [];
	        while (true) {
	            var token = this.lookahead;
	            if (token.type !== token_1.Token.StringLiteral) {
	                break;
	            }
	            var statement = this.parseDirective();
	            body.push(statement);
	            var directive = statement.directive;
	            if (typeof directive !== 'string') {
	                break;
	            }
	            if (directive === 'use strict') {
	                this.context.strict = true;
	                if (firstRestricted) {
	                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
	                }
	            }
	            else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	        return body;
	    };
	    // ECMA-262 14.3 Method Definitions
	    Parser.prototype.qualifiedPropertyName = function (token) {
	        switch (token.type) {
	            case token_1.Token.Identifier:
	            case token_1.Token.StringLiteral:
	            case token_1.Token.BooleanLiteral:
	            case token_1.Token.NullLiteral:
	            case token_1.Token.NumericLiteral:
	            case token_1.Token.Keyword:
	                return true;
	            case token_1.Token.Punctuator:
	                return token.value === '[';
	        }
	        return false;
	    };
	    Parser.prototype.parseGetterMethod = function () {
	        var node = this.createNode();
	        this.expect('(');
	        this.expect(')');
	        var isGenerator = false;
	        var params = {
	            params: [],
	            stricted: null,
	            firstRestricted: null,
	            message: null
	        };
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parseSetterMethod = function () {
	        var node = this.createNode();
	        var options = {
	            params: [],
	            firstRestricted: null,
	            paramSet: {}
	        };
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = false;
	        this.expect('(');
	        if (this.match(')')) {
	            this.tolerateUnexpectedToken(this.lookahead);
	        }
	        else {
	            this.parseFormalParameter(options);
	        }
	        this.expect(')');
	        var method = this.parsePropertyMethod(options);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, options.params, method, isGenerator));
	    };
	    Parser.prototype.parseGeneratorMethod = function () {
	        var node = this.createNode();
	        var isGenerator = true;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    // ECMA-262 14.4 Generator Function Definitions
	    Parser.prototype.isStartOfExpression = function () {
	        var start = true;
	        var value = this.lookahead.value;
	        switch (this.lookahead.type) {
	            case token_1.Token.Punctuator:
	                start = (value === '[') || (value === '(') || (value === '{') ||
	                    (value === '+') || (value === '-') ||
	                    (value === '!') || (value === '~') ||
	                    (value === '++') || (value === '--') ||
	                    (value === '/') || (value === '/='); // regular expression literal
	                break;
	            case token_1.Token.Keyword:
	                start = (value === 'class') || (value === 'delete') ||
	                    (value === 'function') || (value === 'let') || (value === 'new') ||
	                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
	                    (value === 'void') || (value === 'yield');
	                break;
	            default:
	                break;
	        }
	        return start;
	    };
	    Parser.prototype.parseYieldExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('yield');
	        var argument = null;
	        var delegate = false;
	        if (!this.hasLineTerminator) {
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = false;
	            delegate = this.match('*');
	            if (delegate) {
	                this.nextToken();
	                argument = this.parseAssignmentExpression();
	            }
	            else if (this.isStartOfExpression()) {
	                argument = this.parseAssignmentExpression();
	            }
	            this.context.allowYield = previousAllowYield;
	        }
	        return this.finalize(node, new Node.YieldExpression(argument, delegate));
	    };
	    // ECMA-262 14.5 Class Definitions
	    Parser.prototype.parseClassElement = function (hasConstructor) {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var kind;
	        var key;
	        var value;
	        var computed = false;
	        var method = false;
	        var isStatic = false;
	        if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            var id = key;
	            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
	                token = this.lookahead;
	                isStatic = true;
	                computed = this.match('[');
	                if (this.match('*')) {
	                    this.nextToken();
	                }
	                else {
	                    key = this.parseObjectPropertyKey();
	                }
	            }
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === token_1.Token.Identifier) {
	            if (token.value === 'get' && lookaheadPropertyKey) {
	                kind = 'get';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                this.context.allowYield = false;
	                value = this.parseGetterMethod();
	            }
	            else if (token.value === 'set' && lookaheadPropertyKey) {
	                kind = 'set';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                value = this.parseSetterMethod();
	            }
	        }
	        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        if (!kind && key && this.match('(')) {
	            kind = 'init';
	            value = this.parsePropertyMethodFunction();
	            method = true;
	        }
	        if (!kind) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        if (kind === 'init') {
	            kind = 'method';
	        }
	        if (!computed) {
	            if (isStatic && this.isPropertyKey(key, 'prototype')) {
	                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
	            }
	            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
	                if (kind !== 'method' || !method || value.generator) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
	                }
	                if (hasConstructor.value) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
	                }
	                else {
	                    hasConstructor.value = true;
	                }
	                kind = 'constructor';
	            }
	        }
	        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
	    };
	    Parser.prototype.parseClassElementList = function () {
	        var body = [];
	        var hasConstructor = { value: false };
	        this.expect('{');
	        while (!this.match('}')) {
	            if (this.match(';')) {
	                this.nextToken();
	            }
	            else {
	                body.push(this.parseClassElement(hasConstructor));
	            }
	        }
	        this.expect('}');
	        return body;
	    };
	    Parser.prototype.parseClassBody = function () {
	        var node = this.createNode();
	        var elementList = this.parseClassElementList();
	        return this.finalize(node, new Node.ClassBody(elementList));
	    };
	    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (identifierIsOptional && (this.lookahead.type !== token_1.Token.Identifier)) ? null : this.parseVariableIdentifier();
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
	    };
	    Parser.prototype.parseClassExpression = function () {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (this.lookahead.type === token_1.Token.Identifier) ? this.parseVariableIdentifier() : null;
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
	    };
	    // ECMA-262 15.1 Scripts
	    // ECMA-262 15.2 Modules
	    Parser.prototype.parseProgram = function () {
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.startMarker.index < this.scanner.length) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Program(body, this.sourceType));
	    };
	    // ECMA-262 15.2.2 Imports
	    Parser.prototype.parseModuleSpecifier = function () {
	        var node = this.createNode();
	        if (this.lookahead.type !== token_1.Token.StringLiteral) {
	            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
	        }
	        var token = this.nextToken();
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    // import {<foo as bar>} ...;
	    Parser.prototype.parseImportSpecifier = function () {
	        var node = this.createNode();
	        var imported;
	        var local;
	        if (this.lookahead.type === token_1.Token.Identifier) {
	            imported = this.parseVariableIdentifier();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	        }
	        else {
	            imported = this.parseIdentifierName();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.ImportSpecifier(local, imported));
	    };
	    // {foo, bar as bas}
	    Parser.prototype.parseNamedImports = function () {
	        this.expect('{');
	        var specifiers = [];
	        while (!this.match('}')) {
	            specifiers.push(this.parseImportSpecifier());
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return specifiers;
	    };
	    // import <foo> ...;
	    Parser.prototype.parseImportDefaultSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
	    };
	    // import <* as foo> ...;
	    Parser.prototype.parseImportNamespaceSpecifier = function () {
	        var node = this.createNode();
	        this.expect('*');
	        if (!this.matchContextualKeyword('as')) {
	            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
	        }
	        this.nextToken();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
	    };
	    Parser.prototype.parseImportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalImportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('import');
	        var src;
	        var specifiers = [];
	        if (this.lookahead.type === token_1.Token.StringLiteral) {
	            // import 'foo';
	            src = this.parseModuleSpecifier();
	        }
	        else {
	            if (this.match('{')) {
	                // import {bar}
	                specifiers = specifiers.concat(this.parseNamedImports());
	            }
	            else if (this.match('*')) {
	                // import * as foo
	                specifiers.push(this.parseImportNamespaceSpecifier());
	            }
	            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
	                // import foo
	                specifiers.push(this.parseImportDefaultSpecifier());
	                if (this.match(',')) {
	                    this.nextToken();
	                    if (this.match('*')) {
	                        // import foo, * as foo
	                        specifiers.push(this.parseImportNamespaceSpecifier());
	                    }
	                    else if (this.match('{')) {
	                        // import foo, {bar}
	                        specifiers = specifiers.concat(this.parseNamedImports());
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            src = this.parseModuleSpecifier();
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
	    };
	    // ECMA-262 15.2.3 Exports
	    Parser.prototype.parseExportSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        var exported = local;
	        if (this.matchContextualKeyword('as')) {
	            this.nextToken();
	            exported = this.parseIdentifierName();
	        }
	        return this.finalize(node, new Node.ExportSpecifier(local, exported));
	    };
	    Parser.prototype.parseExportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalExportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('export');
	        var exportDeclaration;
	        if (this.matchKeyword('default')) {
	            // export default ...
	            this.nextToken();
	            if (this.matchKeyword('function')) {
	                // export default function foo () {}
	                // export default function () {}
	                var declaration = this.parseFunctionDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchKeyword('class')) {
	                // export default class foo {}
	                var declaration = this.parseClassDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else {
	                if (this.matchContextualKeyword('from')) {
	                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
	                }
	                // export default {};
	                // export default [];
	                // export default (1 + 2);
	                var declaration = this.match('{') ? this.parseObjectInitializer() :
	                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
	                this.consumeSemicolon();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	        }
	        else if (this.match('*')) {
	            // export * from 'foo';
	            this.nextToken();
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            var src = this.parseModuleSpecifier();
	            this.consumeSemicolon();
	            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
	        }
	        else if (this.lookahead.type === token_1.Token.Keyword) {
	            // export var f = 1;
	            var declaration = void 0;
	            switch (this.lookahead.value) {
	                case 'let':
	                case 'const':
	                    declaration = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'var':
	                case 'class':
	                case 'function':
	                    declaration = this.parseStatementListItem();
	                    break;
	                default:
	                    this.throwUnexpectedToken(this.lookahead);
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else {
	            var specifiers = [];
	            var source = null;
	            var isExportFromIdentifier = false;
	            this.expect('{');
	            while (!this.match('}')) {
	                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
	                specifiers.push(this.parseExportSpecifier());
	                if (!this.match('}')) {
	                    this.expect(',');
	                }
	            }
	            this.expect('}');
	            if (this.matchContextualKeyword('from')) {
	                // export {default} from 'foo';
	                // export {foo} from 'foo';
	                this.nextToken();
	                source = this.parseModuleSpecifier();
	                this.consumeSemicolon();
	            }
	            else if (isExportFromIdentifier) {
	                // export {default}; // missing fromClause
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            else {
	                // export {foo};
	                this.consumeSemicolon();
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
	        }
	        return exportDeclaration;
	    };
	    return Parser;
	}());
	exports.Parser = Parser;


/***/ },
/* 4 */
/***/ function(module, exports) {

	// Ensure the condition is true, otherwise throw an error.
	// This is only to have a better contract semantic, i.e. another safety net
	// to catch a logic error. The condition shall be fulfilled in normal case.
	// Do NOT use this to enforce a certain condition on any user input.
	"use strict";
	function assert(condition, message) {
	    /* istanbul ignore if */
	    if (!condition) {
	        throw new Error('ASSERT: ' + message);
	    }
	}
	exports.assert = assert;


/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	// Error messages should be identical to V8.
	exports.Messages = {
	    UnexpectedToken: 'Unexpected token %0',
	    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
	    UnexpectedNumber: 'Unexpected number',
	    UnexpectedString: 'Unexpected string',
	    UnexpectedIdentifier: 'Unexpected identifier',
	    UnexpectedReserved: 'Unexpected reserved word',
	    UnexpectedTemplate: 'Unexpected quasi %0',
	    UnexpectedEOS: 'Unexpected end of input',
	    NewlineAfterThrow: 'Illegal newline after throw',
	    InvalidRegExp: 'Invalid regular expression',
	    UnterminatedRegExp: 'Invalid regular expression: missing /',
	    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
	    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
	    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
	    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	    NoCatchOrFinally: 'Missing catch or finally after try',
	    UnknownLabel: 'Undefined label \'%0\'',
	    Redeclaration: '%0 \'%1\' has already been declared',
	    IllegalContinue: 'Illegal continue statement',
	    IllegalBreak: 'Illegal break statement',
	    IllegalReturn: 'Illegal return statement',
	    StrictModeWith: 'Strict mode code may not include a with statement',
	    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
	    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
	    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
	    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
	    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
	    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
	    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
	    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictReservedWord: 'Use of future reserved word in strict mode',
	    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
	    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
	    DefaultRestParameter: 'Unexpected token =',
	    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
	    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
	    DuplicateConstructor: 'A class may only have one constructor',
	    StaticPrototype: 'Classes may not have static property named prototype',
	    MissingFromClause: 'Unexpected token',
	    NoAsAfterImportNamespace: 'Unexpected token',
	    InvalidModuleSpecifier: 'Unexpected token',
	    IllegalImportDeclaration: 'Unexpected token',
	    IllegalExportDeclaration: 'Unexpected token',
	    DuplicateBinding: 'Duplicate binding %0',
	    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer'
	};


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	var ErrorHandler = (function () {
	    function ErrorHandler() {
	        this.errors = [];
	        this.tolerant = false;
	    }
	    ;
	    ErrorHandler.prototype.recordError = function (error) {
	        this.errors.push(error);
	    };
	    ;
	    ErrorHandler.prototype.tolerate = function (error) {
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ;
	    ErrorHandler.prototype.constructError = function (msg, column) {
	        var error = new Error(msg);
	        try {
	            throw error;
	        }
	        catch (base) {
	            /* istanbul ignore else */
	            if (Object.create && Object.defineProperty) {
	                error = Object.create(base);
	                Object.defineProperty(error, 'column', { value: column });
	            }
	        }
	        finally {
	            return error;
	        }
	    };
	    ;
	    ErrorHandler.prototype.createError = function (index, line, col, description) {
	        var msg = 'Line ' + line + ': ' + description;
	        var error = this.constructError(msg, col);
	        error.index = index;
	        error.lineNumber = line;
	        error.description = description;
	        return error;
	    };
	    ;
	    ErrorHandler.prototype.throwError = function (index, line, col, description) {
	        throw this.createError(index, line, col, description);
	    };
	    ;
	    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
	        var error = this.createError(index, line, col, description);
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ;
	    return ErrorHandler;
	}());
	exports.ErrorHandler = ErrorHandler;


/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";
	(function (Token) {
	    Token[Token["BooleanLiteral"] = 1] = "BooleanLiteral";
	    Token[Token["EOF"] = 2] = "EOF";
	    Token[Token["Identifier"] = 3] = "Identifier";
	    Token[Token["Keyword"] = 4] = "Keyword";
	    Token[Token["NullLiteral"] = 5] = "NullLiteral";
	    Token[Token["NumericLiteral"] = 6] = "NumericLiteral";
	    Token[Token["Punctuator"] = 7] = "Punctuator";
	    Token[Token["StringLiteral"] = 8] = "StringLiteral";
	    Token[Token["RegularExpression"] = 9] = "RegularExpression";
	    Token[Token["Template"] = 10] = "Template";
	})(exports.Token || (exports.Token = {}));
	var Token = exports.Token;
	;
	exports.TokenName = {};
	exports.TokenName[Token.BooleanLiteral] = 'Boolean';
	exports.TokenName[Token.EOF] = '<end>';
	exports.TokenName[Token.Identifier] = 'Identifier';
	exports.TokenName[Token.Keyword] = 'Keyword';
	exports.TokenName[Token.NullLiteral] = 'Null';
	exports.TokenName[Token.NumericLiteral] = 'Numeric';
	exports.TokenName[Token.Punctuator] = 'Punctuator';
	exports.TokenName[Token.StringLiteral] = 'String';
	exports.TokenName[Token.RegularExpression] = 'RegularExpression';
	exports.TokenName[Token.Template] = 'Template';


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var assert_1 = __webpack_require__(4);
	var messages_1 = __webpack_require__(5);
	var character_1 = __webpack_require__(9);
	var token_1 = __webpack_require__(7);
	function hexValue(ch) {
	    return '0123456789abcdef'.indexOf(ch.toLowerCase());
	}
	function octalValue(ch) {
	    return '01234567'.indexOf(ch);
	}
	var Scanner = (function () {
	    function Scanner(code, handler) {
	        this.source = code;
	        this.errorHandler = handler;
	        this.trackComment = false;
	        this.length = code.length;
	        this.index = 0;
	        this.lineNumber = (code.length > 0) ? 1 : 0;
	        this.lineStart = 0;
	        this.curlyStack = [];
	    }
	    ;
	    Scanner.prototype.eof = function () {
	        return this.index >= this.length;
	    };
	    ;
	    Scanner.prototype.throwUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    ;
	    Scanner.prototype.tolerateUnexpectedToken = function () {
	        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, messages_1.Messages.UnexpectedTokenIllegal);
	    };
	    ;
	    // ECMA-262 11.4 Comments
	    Scanner.prototype.skipSingleLineComment = function (offset) {
	        var comments;
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - offset;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - offset
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            ++this.index;
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (this.trackComment) {
	                    loc.end = {
	                        line: this.lineNumber,
	                        column: this.index - this.lineStart - 1
	                    };
	                    var entry = {
	                        multiLine: false,
	                        slice: [start + offset, this.index - 1],
	                        range: [start, this.index - 1],
	                        loc: loc
	                    };
	                    comments.push(entry);
	                }
	                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                return comments;
	            }
	        }
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: false,
	                slice: [start + offset, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        return comments;
	    };
	    ;
	    Scanner.prototype.skipMultiLineComment = function () {
	        var comments;
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - 2;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - 2
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                ++this.index;
	                this.lineStart = this.index;
	            }
	            else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
	                    this.index += 2;
	                    if (this.trackComment) {
	                        loc.end = {
	                            line: this.lineNumber,
	                            column: this.index - this.lineStart
	                        };
	                        var entry = {
	                            multiLine: true,
	                            slice: [start + 2, this.index - 2],
	                            range: [start, this.index],
	                            loc: loc
	                        };
	                        comments.push(entry);
	                    }
	                    return comments;
	                }
	                ++this.index;
	            }
	            else {
	                ++this.index;
	            }
	        }
	        // Ran off the end of the file - the whole thing is a comment
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: true,
	                slice: [start + 2, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        this.tolerateUnexpectedToken();
	        return comments;
	    };
	    ;
	    Scanner.prototype.scanComments = function () {
	        var comments;
	        if (this.trackComment) {
	            comments = [];
	        }
	        var start = (this.index === 0);
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isWhiteSpace(ch)) {
	                ++this.index;
	            }
	            else if (character_1.Character.isLineTerminator(ch)) {
	                ++this.index;
	                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                start = true;
	            }
	            else if (ch === 0x2F) {
	                ch = this.source.charCodeAt(this.index + 1);
	                if (ch === 0x2F) {
	                    this.index += 2;
	                    var comment = this.skipSingleLineComment(2);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                    start = true;
	                }
	                else if (ch === 0x2A) {
	                    this.index += 2;
	                    var comment = this.skipMultiLineComment();
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (start && ch === 0x2D) {
	                // U+003E is '>'
	                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    this.index += 3;
	                    var comment = this.skipSingleLineComment(3);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (ch === 0x3C) {
	                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
	                    this.index += 4; // `<!--`
	                    var comment = this.skipSingleLineComment(4);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        return comments;
	    };
	    ;
	    // ECMA-262 11.6.2.2 Future Reserved Words
	    Scanner.prototype.isFutureReservedWord = function (id) {
	        switch (id) {
	            case 'enum':
	            case 'export':
	            case 'import':
	            case 'super':
	                return true;
	            default:
	                return false;
	        }
	    };
	    ;
	    Scanner.prototype.isStrictModeReservedWord = function (id) {
	        switch (id) {
	            case 'implements':
	            case 'interface':
	            case 'package':
	            case 'private':
	            case 'protected':
	            case 'public':
	            case 'static':
	            case 'yield':
	            case 'let':
	                return true;
	            default:
	                return false;
	        }
	    };
	    ;
	    Scanner.prototype.isRestrictedWord = function (id) {
	        return id === 'eval' || id === 'arguments';
	    };
	    ;
	    // ECMA-262 11.6.2.1 Keywords
	    Scanner.prototype.isKeyword = function (id) {
	        switch (id.length) {
	            case 2:
	                return (id === 'if') || (id === 'in') || (id === 'do');
	            case 3:
	                return (id === 'var') || (id === 'for') || (id === 'new') ||
	                    (id === 'try') || (id === 'let');
	            case 4:
	                return (id === 'this') || (id === 'else') || (id === 'case') ||
	                    (id === 'void') || (id === 'with') || (id === 'enum');
	            case 5:
	                return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                    (id === 'class') || (id === 'super');
	            case 6:
	                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                    (id === 'switch') || (id === 'export') || (id === 'import');
	            case 7:
	                return (id === 'default') || (id === 'finally') || (id === 'extends');
	            case 8:
	                return (id === 'function') || (id === 'continue') || (id === 'debugger');
	            case 10:
	                return (id === 'instanceof');
	            default:
	                return false;
	        }
	    };
	    ;
	    Scanner.prototype.codePointAt = function (i) {
	        var cp = this.source.charCodeAt(i);
	        if (cp >= 0xD800 && cp <= 0xDBFF) {
	            var second = this.source.charCodeAt(i + 1);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	                var first = cp;
	                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            }
	        }
	        return cp;
	    };
	    ;
	    Scanner.prototype.scanHexEscape = function (prefix) {
	        var len = (prefix === 'u') ? 4 : 2;
	        var code = 0;
	        for (var i = 0; i < len; ++i) {
	            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                code = code * 16 + hexValue(this.source[this.index++]);
	            }
	            else {
	                return '';
	            }
	        }
	        return String.fromCharCode(code);
	    };
	    ;
	    Scanner.prototype.scanUnicodeCodePointEscape = function () {
	        var ch = this.source[this.index];
	        var code = 0;
	        // At least, one hex digit is required.
	        if (ch === '}') {
	            this.throwUnexpectedToken();
	        }
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
	                break;
	            }
	            code = code * 16 + hexValue(ch);
	        }
	        if (code > 0x10FFFF || ch !== '}') {
	            this.throwUnexpectedToken();
	        }
	        return character_1.Character.fromCodePoint(code);
	    };
	    ;
	    Scanner.prototype.getIdentifier = function () {
	        var start = this.index++;
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            else if (ch >= 0xD800 && ch < 0xDFFF) {
	                // Need to handle surrogate pairs.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            if (character_1.Character.isIdentifierPart(ch)) {
	                ++this.index;
	            }
	            else {
	                break;
	            }
	        }
	        return this.source.slice(start, this.index);
	    };
	    ;
	    Scanner.prototype.getComplexIdentifier = function () {
	        var cp = this.codePointAt(this.index);
	        var id = character_1.Character.fromCodePoint(cp);
	        this.index += id.length;
	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        var ch;
	        if (cp === 0x5C) {
	            if (this.source.charCodeAt(this.index) !== 0x75) {
	                this.throwUnexpectedToken();
	            }
	            ++this.index;
	            if (this.source[this.index] === '{') {
	                ++this.index;
	                ch = this.scanUnicodeCodePointEscape();
	            }
	            else {
	                ch = this.scanHexEscape('u');
	                cp = ch.charCodeAt(0);
	                if (!ch || ch === '\\' || !character_1.Character.isIdentifierStart(cp)) {
	                    this.throwUnexpectedToken();
	                }
	            }
	            id = ch;
	        }
	        while (!this.eof()) {
	            cp = this.codePointAt(this.index);
	            if (!character_1.Character.isIdentifierPart(cp)) {
	                break;
	            }
	            ch = character_1.Character.fromCodePoint(cp);
	            id += ch;
	            this.index += ch.length;
	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (cp === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (this.source.charCodeAt(this.index) !== 0x75) {
	                    this.throwUnexpectedToken();
	                }
	                ++this.index;
	                if (this.source[this.index] === '{') {
	                    ++this.index;
	                    ch = this.scanUnicodeCodePointEscape();
	                }
	                else {
	                    ch = this.scanHexEscape('u');
	                    cp = ch.charCodeAt(0);
	                    if (!ch || ch === '\\' || !character_1.Character.isIdentifierPart(cp)) {
	                        this.throwUnexpectedToken();
	                    }
	                }
	                id += ch;
	            }
	        }
	        return id;
	    };
	    ;
	    Scanner.prototype.octalToDecimal = function (ch) {
	        // \0 is not octal escape sequence
	        var octal = (ch !== '0');
	        var code = octalValue(ch);
	        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	            octal = true;
	            code = code * 8 + octalValue(this.source[this.index++]);
	            // 3 digits are only allowed when string starts
	            // with 0, 1, 2, 3
	            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                code = code * 8 + octalValue(this.source[this.index++]);
	            }
	        }
	        return {
	            code: code,
	            octal: octal
	        };
	    };
	    ;
	    // ECMA-262 11.6 Names and Keywords
	    Scanner.prototype.scanIdentifier = function () {
	        var type;
	        var start = this.index;
	        // Backslash (U+005C) starts an escaped character.
	        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = token_1.Token.Identifier;
	        }
	        else if (this.isKeyword(id)) {
	            type = token_1.Token.Keyword;
	        }
	        else if (id === 'null') {
	            type = token_1.Token.NullLiteral;
	        }
	        else if (id === 'true' || id === 'false') {
	            type = token_1.Token.BooleanLiteral;
	        }
	        else {
	            type = token_1.Token.Identifier;
	        }
	        return {
	            type: type,
	            value: id,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    // ECMA-262 11.7 Punctuators
	    Scanner.prototype.scanPunctuator = function () {
	        var token = {
	            type: token_1.Token.Punctuator,
	            value: '',
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: this.index,
	            end: this.index
	        };
	        // Check for most common single-character punctuators.
	        var str = this.source[this.index];
	        switch (str) {
	            case '(':
	            case '{':
	                if (str === '{') {
	                    this.curlyStack.push('{');
	                }
	                ++this.index;
	                break;
	            case '.':
	                ++this.index;
	                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
	                    // Spread operator: ...
	                    this.index += 2;
	                    str = '...';
	                }
	                break;
	            case '}':
	                ++this.index;
	                this.curlyStack.pop();
	                break;
	            case ')':
	            case ';':
	            case ',':
	            case '[':
	            case ']':
	            case ':':
	            case '?':
	            case '~':
	                ++this.index;
	                break;
	            default:
	                // 4-character punctuator.
	                str = this.source.substr(this.index, 4);
	                if (str === '>>>=') {
	                    this.index += 4;
	                }
	                else {
	                    // 3-character punctuators.
	                    str = str.substr(0, 3);
	                    if (str === '===' || str === '!==' || str === '>>>' ||
	                        str === '<<=' || str === '>>=' || str === '**=') {
	                        this.index += 3;
	                    }
	                    else {
	                        // 2-character punctuators.
	                        str = str.substr(0, 2);
	                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
	                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
	                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
	                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
	                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
	                            this.index += 2;
	                        }
	                        else {
	                            // 1-character punctuators.
	                            str = this.source[this.index];
	                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
	                                ++this.index;
	                            }
	                        }
	                    }
	                }
	        }
	        if (this.index === token.start) {
	            this.throwUnexpectedToken();
	        }
	        token.end = this.index;
	        token.value = str;
	        return token;
	    };
	    ;
	    // ECMA-262 11.8.3 Numeric Literals
	    Scanner.prototype.scanHexLiteral = function (start) {
	        var number = '';
	        while (!this.eof()) {
	            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            number += this.source[this.index++];
	        }
	        if (number.length === 0) {
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: token_1.Token.NumericLiteral,
	            value: parseInt('0x' + number, 16),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    Scanner.prototype.scanBinaryLiteral = function (start) {
	        var number = '';
	        var ch;
	        while (!this.eof()) {
	            ch = this.source[this.index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            number += this.source[this.index++];
	        }
	        if (number.length === 0) {
	            // only 0b or 0B
	            this.throwUnexpectedToken();
	        }
	        if (!this.eof()) {
	            ch = this.source.charCodeAt(this.index);
	            /* istanbul ignore else */
	            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
	                this.throwUnexpectedToken();
	            }
	        }
	        return {
	            type: token_1.Token.NumericLiteral,
	            value: parseInt(number, 2),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
	        var number = '';
	        var octal = false;
	        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
	            octal = true;
	            number = '0' + this.source[this.index++];
	        }
	        else {
	            ++this.index;
	        }
	        while (!this.eof()) {
	            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            number += this.source[this.index++];
	        }
	        if (!octal && number.length === 0) {
	            // only 0o or 0O
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: token_1.Token.NumericLiteral,
	            value: parseInt(number, 8),
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    Scanner.prototype.isImplicitOctalLiteral = function () {
	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (var i = this.index + 1; i < this.length; ++i) {
	            var ch = this.source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                return true;
	            }
	        }
	        return true;
	    };
	    ;
	    Scanner.prototype.scanNumericLiteral = function () {
	        var start = this.index;
	        var ch = this.source[start];
	        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
	        var number = '';
	        if (ch !== '.') {
	            number = this.source[this.index++];
	            ch = this.source[this.index];
	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (number === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++this.index;
	                    return this.scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++this.index;
	                    return this.scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return this.scanOctalLiteral(ch, start);
	                }
	                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                    if (this.isImplicitOctalLiteral()) {
	                        return this.scanOctalLiteral(ch, start);
	                    }
	                }
	            }
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                number += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === '.') {
	            number += this.source[this.index++];
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                number += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === 'e' || ch === 'E') {
	            number += this.source[this.index++];
	            ch = this.source[this.index];
	            if (ch === '+' || ch === '-') {
	                number += this.source[this.index++];
	            }
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                    number += this.source[this.index++];
	                }
	            }
	            else {
	                this.throwUnexpectedToken();
	            }
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: token_1.Token.NumericLiteral,
	            value: parseFloat(number),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    // ECMA-262 11.8.4 String Literals
	    Scanner.prototype.scanStringLiteral = function () {
	        var start = this.index;
	        var quote = this.source[start];
	        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
	        ++this.index;
	        var octal = false;
	        var str = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === quote) {
	                quote = '';
	                break;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'u':
	                        case 'x':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                str += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var unescaped = this.scanHexEscape(ch);
	                                if (!unescaped) {
	                                    this.throwUnexpectedToken();
	                                }
	                                str += unescaped;
	                            }
	                            break;
	                        case 'n':
	                            str += '\n';
	                            break;
	                        case 'r':
	                            str += '\r';
	                            break;
	                        case 't':
	                            str += '\t';
	                            break;
	                        case 'b':
	                            str += '\b';
	                            break;
	                        case 'f':
	                            str += '\f';
	                            break;
	                        case 'v':
	                            str += '\x0B';
	                            break;
	                        case '8':
	                        case '9':
	                            str += ch;
	                            this.tolerateUnexpectedToken();
	                            break;
	                        default:
	                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                var octToDec = this.octalToDecimal(ch);
	                                octal = octToDec.octal || octal;
	                                str += String.fromCharCode(octToDec.code);
	                            }
	                            else {
	                                str += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            }
	            else {
	                str += ch;
	            }
	        }
	        if (quote !== '') {
	            this.index = start;
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: token_1.Token.StringLiteral,
	            value: str,
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    // ECMA-262 11.8.6 Template Literal Lexical Components
	    Scanner.prototype.scanTemplate = function () {
	        var cooked = '';
	        var terminated = false;
	        var start = this.index;
	        var head = (this.source[start] === '`');
	        var tail = false;
	        var rawOffset = 2;
	        ++this.index;
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === '`') {
	                rawOffset = 1;
	                tail = true;
	                terminated = true;
	                break;
	            }
	            else if (ch === '$') {
	                if (this.source[this.index] === '{') {
	                    this.curlyStack.push('${');
	                    ++this.index;
	                    terminated = true;
	                    break;
	                }
	                cooked += ch;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'n':
	                            cooked += '\n';
	                            break;
	                        case 'r':
	                            cooked += '\r';
	                            break;
	                        case 't':
	                            cooked += '\t';
	                            break;
	                        case 'u':
	                        case 'x':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                cooked += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var restore = this.index;
	                                var unescaped = this.scanHexEscape(ch);
	                                if (unescaped) {
	                                    cooked += unescaped;
	                                }
	                                else {
	                                    this.index = restore;
	                                    cooked += ch;
	                                }
	                            }
	                            break;
	                        case 'b':
	                            cooked += '\b';
	                            break;
	                        case 'f':
	                            cooked += '\f';
	                            break;
	                        case 'v':
	                            cooked += '\v';
	                            break;
	                        default:
	                            if (ch === '0') {
	                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                                    // Illegal: \01 \02 and so on
	                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                                }
	                                cooked += '\0';
	                            }
	                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                // Illegal: \1 \2
	                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                            }
	                            else {
	                                cooked += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.lineNumber;
	                if (ch === '\r' && this.source[this.index] === '\n') {
	                    ++this.index;
	                }
	                this.lineStart = this.index;
	                cooked += '\n';
	            }
	            else {
	                cooked += ch;
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken();
	        }
	        if (!head) {
	            this.curlyStack.pop();
	        }
	        return {
	            type: token_1.Token.Template,
	            value: {
	                cooked: cooked,
	                raw: this.source.slice(start + 1, this.index - rawOffset)
	            },
	            head: head,
	            tail: tail,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    // ECMA-262 11.8.5 Regular Expression Literals
	    Scanner.prototype.testRegExp = function (pattern, flags) {
	        // The BMP character to use as a replacement for astral symbols when
	        // translating an ES6 "u"-flagged pattern to an ES5-compatible
	        // approximation.
	        // Note: replacing with '\uFFFF' enables false positives in unlikely
	        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
	        // pattern that would not be detected by this substitution.
	        var astralSubstitute = '\uFFFF';
	        var tmp = pattern;
	        var self = this;
	        if (flags.indexOf('u') >= 0) {
	            tmp = tmp
	                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
	                var codePoint = parseInt($1 || $2, 16);
	                if (codePoint > 0x10FFFF) {
	                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	                }
	                if (codePoint <= 0xFFFF) {
	                    return String.fromCharCode(codePoint);
	                }
	                return astralSubstitute;
	            })
	                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
	        }
	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        }
	        catch (e) {
	            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	        }
	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        }
	        catch (exception) {
	            /* istanbul ignore next */
	            return null;
	        }
	    };
	    ;
	    Scanner.prototype.scanRegExpBody = function () {
	        var ch = this.source[this.index];
	        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
	        var str = this.source[this.index++];
	        var classMarker = false;
	        var terminated = false;
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = this.source[this.index++];
	                // ECMA-262 7.8.5
	                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	            }
	            else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            }
	            else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                }
	                else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	        }
	        // Exclude leading and trailing slash.
	        var body = str.substr(1, str.length - 2);
	        return {
	            value: body,
	            literal: str
	        };
	    };
	    ;
	    Scanner.prototype.scanRegExpFlags = function () {
	        var str = '';
	        var flags = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index];
	            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }
	            ++this.index;
	            if (ch === '\\' && !this.eof()) {
	                ch = this.source[this.index];
	                if (ch === 'u') {
	                    ++this.index;
	                    var restore = this.index;
	                    ch = this.scanHexEscape('u');
	                    if (ch) {
	                        flags += ch;
	                        for (str += '\\u'; restore < this.index; ++restore) {
	                            str += this.source[restore];
	                        }
	                    }
	                    else {
	                        this.index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    this.tolerateUnexpectedToken();
	                }
	                else {
	                    str += '\\';
	                    this.tolerateUnexpectedToken();
	                }
	            }
	            else {
	                flags += ch;
	                str += ch;
	            }
	        }
	        return {
	            value: flags,
	            literal: str
	        };
	    };
	    ;
	    Scanner.prototype.scanRegExp = function () {
	        var start = this.index;
	        var body = this.scanRegExpBody();
	        var flags = this.scanRegExpFlags();
	        var value = this.testRegExp(body.value, flags.value);
	        return {
	            type: token_1.Token.RegularExpression,
	            value: value,
	            literal: body.literal + flags.literal,
	            regex: {
	                pattern: body.value,
	                flags: flags.value
	            },
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    ;
	    Scanner.prototype.lex = function () {
	        if (this.eof()) {
	            return {
	                type: token_1.Token.EOF,
	                lineNumber: this.lineNumber,
	                lineStart: this.lineStart,
	                start: this.index,
	                end: this.index
	            };
	        }
	        var cp = this.source.charCodeAt(this.index);
	        if (character_1.Character.isIdentifierStart(cp)) {
	            return this.scanIdentifier();
	        }
	        // Very common: ( and ) and ;
	        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
	            return this.scanPunctuator();
	        }
	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (cp === 0x27 || cp === 0x22) {
	            return this.scanStringLiteral();
	        }
	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (cp === 0x2E) {
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
	                return this.scanNumericLiteral();
	            }
	            return this.scanPunctuator();
	        }
	        if (character_1.Character.isDecimalDigit(cp)) {
	            return this.scanNumericLiteral();
	        }
	        // Template literals start with ` (U+0060) for template head
	        // or } (U+007D) for template middle or template tail.
	        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
	            return this.scanTemplate();
	        }
	        // Possible identifier start in a surrogate pair.
	        if (cp >= 0xD800 && cp < 0xDFFF) {
	            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
	                return this.scanIdentifier();
	            }
	        }
	        return this.scanPunctuator();
	    };
	    ;
	    return Scanner;
	}());
	exports.Scanner = Scanner;


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	// See also tools/generate-unicode-regex.js.
	var Regex = {
	    // Unicode v8.0.0 NonAsciiIdentifierStart:
	    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
	    // Unicode v8.0.0 NonAsciiIdentifierPart:
	    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	};
	exports.Character = {
	    fromCodePoint: function (cp) {
	        return (cp < 0x10000) ? String.fromCharCode(cp) :
	            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
	                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
	    },
	    // ECMA-262 11.2 White Space
	    isWhiteSpace: function (cp) {
	        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
	            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
	    },
	    // ECMA-262 11.3 Line Terminators
	    isLineTerminator: function (cp) {
	        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
	    },
	    // ECMA-262 11.6 Identifier Names and Identifiers
	    isIdentifierStart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
	    },
	    isIdentifierPart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp >= 0x30 && cp <= 0x39) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
	    },
	    // ECMA-262 11.8.3 Numeric Literals
	    isDecimalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39); // 0..9
	    },
	    isHexDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39) ||
	            (cp >= 0x41 && cp <= 0x46) ||
	            (cp >= 0x61 && cp <= 0x66); // a..f
	    },
	    isOctalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x37); // 0..7
	    }
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var syntax_1 = __webpack_require__(2);
	var ArrayExpression = (function () {
	    function ArrayExpression(elements) {
	        this.type = syntax_1.Syntax.ArrayExpression;
	        this.elements = elements;
	    }
	    return ArrayExpression;
	}());
	exports.ArrayExpression = ArrayExpression;
	var ArrayPattern = (function () {
	    function ArrayPattern(elements) {
	        this.type = syntax_1.Syntax.ArrayPattern;
	        this.elements = elements;
	    }
	    return ArrayPattern;
	}());
	exports.ArrayPattern = ArrayPattern;
	var ArrowFunctionExpression = (function () {
	    function ArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	    }
	    return ArrowFunctionExpression;
	}());
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	var AssignmentExpression = (function () {
	    function AssignmentExpression(operator, left, right) {
	        this.type = syntax_1.Syntax.AssignmentExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentExpression;
	}());
	exports.AssignmentExpression = AssignmentExpression;
	var AssignmentPattern = (function () {
	    function AssignmentPattern(left, right) {
	        this.type = syntax_1.Syntax.AssignmentPattern;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentPattern;
	}());
	exports.AssignmentPattern = AssignmentPattern;
	var BinaryExpression = (function () {
	    function BinaryExpression(operator, left, right) {
	        var logical = (operator === '||' || operator === '&&');
	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return BinaryExpression;
	}());
	exports.BinaryExpression = BinaryExpression;
	var BlockStatement = (function () {
	    function BlockStatement(body) {
	        this.type = syntax_1.Syntax.BlockStatement;
	        this.body = body;
	    }
	    return BlockStatement;
	}());
	exports.BlockStatement = BlockStatement;
	var BreakStatement = (function () {
	    function BreakStatement(label) {
	        this.type = syntax_1.Syntax.BreakStatement;
	        this.label = label;
	    }
	    return BreakStatement;
	}());
	exports.BreakStatement = BreakStatement;
	var CallExpression = (function () {
	    function CallExpression(callee, args) {
	        this.type = syntax_1.Syntax.CallExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return CallExpression;
	}());
	exports.CallExpression = CallExpression;
	var CatchClause = (function () {
	    function CatchClause(param, body) {
	        this.type = syntax_1.Syntax.CatchClause;
	        this.param = param;
	        this.body = body;
	    }
	    return CatchClause;
	}());
	exports.CatchClause = CatchClause;
	var ClassBody = (function () {
	    function ClassBody(body) {
	        this.type = syntax_1.Syntax.ClassBody;
	        this.body = body;
	    }
	    return ClassBody;
	}());
	exports.ClassBody = ClassBody;
	var ClassDeclaration = (function () {
	    function ClassDeclaration(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassDeclaration;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassDeclaration;
	}());
	exports.ClassDeclaration = ClassDeclaration;
	var ClassExpression = (function () {
	    function ClassExpression(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassExpression;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassExpression;
	}());
	exports.ClassExpression = ClassExpression;
	var ComputedMemberExpression = (function () {
	    function ComputedMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = true;
	        this.object = object;
	        this.property = property;
	    }
	    return ComputedMemberExpression;
	}());
	exports.ComputedMemberExpression = ComputedMemberExpression;
	var ConditionalExpression = (function () {
	    function ConditionalExpression(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.ConditionalExpression;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return ConditionalExpression;
	}());
	exports.ConditionalExpression = ConditionalExpression;
	var ContinueStatement = (function () {
	    function ContinueStatement(label) {
	        this.type = syntax_1.Syntax.ContinueStatement;
	        this.label = label;
	    }
	    return ContinueStatement;
	}());
	exports.ContinueStatement = ContinueStatement;
	var DebuggerStatement = (function () {
	    function DebuggerStatement() {
	        this.type = syntax_1.Syntax.DebuggerStatement;
	    }
	    return DebuggerStatement;
	}());
	exports.DebuggerStatement = DebuggerStatement;
	var Directive = (function () {
	    function Directive(expression, directive) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	        this.directive = directive;
	    }
	    return Directive;
	}());
	exports.Directive = Directive;
	var DoWhileStatement = (function () {
	    function DoWhileStatement(body, test) {
	        this.type = syntax_1.Syntax.DoWhileStatement;
	        this.body = body;
	        this.test = test;
	    }
	    return DoWhileStatement;
	}());
	exports.DoWhileStatement = DoWhileStatement;
	var EmptyStatement = (function () {
	    function EmptyStatement() {
	        this.type = syntax_1.Syntax.EmptyStatement;
	    }
	    return EmptyStatement;
	}());
	exports.EmptyStatement = EmptyStatement;
	var ExportAllDeclaration = (function () {
	    function ExportAllDeclaration(source) {
	        this.type = syntax_1.Syntax.ExportAllDeclaration;
	        this.source = source;
	    }
	    return ExportAllDeclaration;
	}());
	exports.ExportAllDeclaration = ExportAllDeclaration;
	var ExportDefaultDeclaration = (function () {
	    function ExportDefaultDeclaration(declaration) {
	        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
	        this.declaration = declaration;
	    }
	    return ExportDefaultDeclaration;
	}());
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	var ExportNamedDeclaration = (function () {
	    function ExportNamedDeclaration(declaration, specifiers, source) {
	        this.type = syntax_1.Syntax.ExportNamedDeclaration;
	        this.declaration = declaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ExportNamedDeclaration;
	}());
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	var ExportSpecifier = (function () {
	    function ExportSpecifier(local, exported) {
	        this.type = syntax_1.Syntax.ExportSpecifier;
	        this.exported = exported;
	        this.local = local;
	    }
	    return ExportSpecifier;
	}());
	exports.ExportSpecifier = ExportSpecifier;
	var ExpressionStatement = (function () {
	    function ExpressionStatement(expression) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	    }
	    return ExpressionStatement;
	}());
	exports.ExpressionStatement = ExpressionStatement;
	var ForInStatement = (function () {
	    function ForInStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForInStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	        this.each = false;
	    }
	    return ForInStatement;
	}());
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = (function () {
	    function ForOfStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForOfStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	    }
	    return ForOfStatement;
	}());
	exports.ForOfStatement = ForOfStatement;
	var ForStatement = (function () {
	    function ForStatement(init, test, update, body) {
	        this.type = syntax_1.Syntax.ForStatement;
	        this.init = init;
	        this.test = test;
	        this.update = update;
	        this.body = body;
	    }
	    return ForStatement;
	}());
	exports.ForStatement = ForStatement;
	var FunctionDeclaration = (function () {
	    function FunctionDeclaration(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	    }
	    return FunctionDeclaration;
	}());
	exports.FunctionDeclaration = FunctionDeclaration;
	var FunctionExpression = (function () {
	    function FunctionExpression(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	    }
	    return FunctionExpression;
	}());
	exports.FunctionExpression = FunctionExpression;
	var Identifier = (function () {
	    function Identifier(name) {
	        this.type = syntax_1.Syntax.Identifier;
	        this.name = name;
	    }
	    return Identifier;
	}());
	exports.Identifier = Identifier;
	var IfStatement = (function () {
	    function IfStatement(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.IfStatement;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return IfStatement;
	}());
	exports.IfStatement = IfStatement;
	var ImportDeclaration = (function () {
	    function ImportDeclaration(specifiers, source) {
	        this.type = syntax_1.Syntax.ImportDeclaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ImportDeclaration;
	}());
	exports.ImportDeclaration = ImportDeclaration;
	var ImportDefaultSpecifier = (function () {
	    function ImportDefaultSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
	        this.local = local;
	    }
	    return ImportDefaultSpecifier;
	}());
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	var ImportNamespaceSpecifier = (function () {
	    function ImportNamespaceSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
	        this.local = local;
	    }
	    return ImportNamespaceSpecifier;
	}());
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	var ImportSpecifier = (function () {
	    function ImportSpecifier(local, imported) {
	        this.type = syntax_1.Syntax.ImportSpecifier;
	        this.local = local;
	        this.imported = imported;
	    }
	    return ImportSpecifier;
	}());
	exports.ImportSpecifier = ImportSpecifier;
	var LabeledStatement = (function () {
	    function LabeledStatement(label, body) {
	        this.type = syntax_1.Syntax.LabeledStatement;
	        this.label = label;
	        this.body = body;
	    }
	    return LabeledStatement;
	}());
	exports.LabeledStatement = LabeledStatement;
	var Literal = (function () {
	    function Literal(value, raw) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	    }
	    return Literal;
	}());
	exports.Literal = Literal;
	var MetaProperty = (function () {
	    function MetaProperty(meta, property) {
	        this.type = syntax_1.Syntax.MetaProperty;
	        this.meta = meta;
	        this.property = property;
	    }
	    return MetaProperty;
	}());
	exports.MetaProperty = MetaProperty;
	var MethodDefinition = (function () {
	    function MethodDefinition(key, computed, value, kind, isStatic) {
	        this.type = syntax_1.Syntax.MethodDefinition;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.static = isStatic;
	    }
	    return MethodDefinition;
	}());
	exports.MethodDefinition = MethodDefinition;
	var NewExpression = (function () {
	    function NewExpression(callee, args) {
	        this.type = syntax_1.Syntax.NewExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return NewExpression;
	}());
	exports.NewExpression = NewExpression;
	var ObjectExpression = (function () {
	    function ObjectExpression(properties) {
	        this.type = syntax_1.Syntax.ObjectExpression;
	        this.properties = properties;
	    }
	    return ObjectExpression;
	}());
	exports.ObjectExpression = ObjectExpression;
	var ObjectPattern = (function () {
	    function ObjectPattern(properties) {
	        this.type = syntax_1.Syntax.ObjectPattern;
	        this.properties = properties;
	    }
	    return ObjectPattern;
	}());
	exports.ObjectPattern = ObjectPattern;
	var Program = (function () {
	    function Program(body, sourceType) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = sourceType;
	    }
	    return Program;
	}());
	exports.Program = Program;
	var Property = (function () {
	    function Property(kind, key, computed, value, method, shorthand) {
	        this.type = syntax_1.Syntax.Property;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.method = method;
	        this.shorthand = shorthand;
	    }
	    return Property;
	}());
	exports.Property = Property;
	var RegexLiteral = (function () {
	    function RegexLiteral(value, raw, regex) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	        this.regex = regex;
	    }
	    return RegexLiteral;
	}());
	exports.RegexLiteral = RegexLiteral;
	var RestElement = (function () {
	    function RestElement(argument) {
	        this.type = syntax_1.Syntax.RestElement;
	        this.argument = argument;
	    }
	    return RestElement;
	}());
	exports.RestElement = RestElement;
	var ReturnStatement = (function () {
	    function ReturnStatement(argument) {
	        this.type = syntax_1.Syntax.ReturnStatement;
	        this.argument = argument;
	    }
	    return ReturnStatement;
	}());
	exports.ReturnStatement = ReturnStatement;
	var SequenceExpression = (function () {
	    function SequenceExpression(expressions) {
	        this.type = syntax_1.Syntax.SequenceExpression;
	        this.expressions = expressions;
	    }
	    return SequenceExpression;
	}());
	exports.SequenceExpression = SequenceExpression;
	var SpreadElement = (function () {
	    function SpreadElement(argument) {
	        this.type = syntax_1.Syntax.SpreadElement;
	        this.argument = argument;
	    }
	    return SpreadElement;
	}());
	exports.SpreadElement = SpreadElement;
	var StaticMemberExpression = (function () {
	    function StaticMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = false;
	        this.object = object;
	        this.property = property;
	    }
	    return StaticMemberExpression;
	}());
	exports.StaticMemberExpression = StaticMemberExpression;
	var Super = (function () {
	    function Super() {
	        this.type = syntax_1.Syntax.Super;
	    }
	    return Super;
	}());
	exports.Super = Super;
	var SwitchCase = (function () {
	    function SwitchCase(test, consequent) {
	        this.type = syntax_1.Syntax.SwitchCase;
	        this.test = test;
	        this.consequent = consequent;
	    }
	    return SwitchCase;
	}());
	exports.SwitchCase = SwitchCase;
	var SwitchStatement = (function () {
	    function SwitchStatement(discriminant, cases) {
	        this.type = syntax_1.Syntax.SwitchStatement;
	        this.discriminant = discriminant;
	        this.cases = cases;
	    }
	    return SwitchStatement;
	}());
	exports.SwitchStatement = SwitchStatement;
	var TaggedTemplateExpression = (function () {
	    function TaggedTemplateExpression(tag, quasi) {
	        this.type = syntax_1.Syntax.TaggedTemplateExpression;
	        this.tag = tag;
	        this.quasi = quasi;
	    }
	    return TaggedTemplateExpression;
	}());
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	var TemplateElement = (function () {
	    function TemplateElement(value, tail) {
	        this.type = syntax_1.Syntax.TemplateElement;
	        this.value = value;
	        this.tail = tail;
	    }
	    return TemplateElement;
	}());
	exports.TemplateElement = TemplateElement;
	var TemplateLiteral = (function () {
	    function TemplateLiteral(quasis, expressions) {
	        this.type = syntax_1.Syntax.TemplateLiteral;
	        this.quasis = quasis;
	        this.expressions = expressions;
	    }
	    return TemplateLiteral;
	}());
	exports.TemplateLiteral = TemplateLiteral;
	var ThisExpression = (function () {
	    function ThisExpression() {
	        this.type = syntax_1.Syntax.ThisExpression;
	    }
	    return ThisExpression;
	}());
	exports.ThisExpression = ThisExpression;
	var ThrowStatement = (function () {
	    function ThrowStatement(argument) {
	        this.type = syntax_1.Syntax.ThrowStatement;
	        this.argument = argument;
	    }
	    return ThrowStatement;
	}());
	exports.ThrowStatement = ThrowStatement;
	var TryStatement = (function () {
	    function TryStatement(block, handler, finalizer) {
	        this.type = syntax_1.Syntax.TryStatement;
	        this.block = block;
	        this.handler = handler;
	        this.finalizer = finalizer;
	    }
	    return TryStatement;
	}());
	exports.TryStatement = TryStatement;
	var UnaryExpression = (function () {
	    function UnaryExpression(operator, argument) {
	        this.type = syntax_1.Syntax.UnaryExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = true;
	    }
	    return UnaryExpression;
	}());
	exports.UnaryExpression = UnaryExpression;
	var UpdateExpression = (function () {
	    function UpdateExpression(operator, argument, prefix) {
	        this.type = syntax_1.Syntax.UpdateExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = prefix;
	    }
	    return UpdateExpression;
	}());
	exports.UpdateExpression = UpdateExpression;
	var VariableDeclaration = (function () {
	    function VariableDeclaration(declarations, kind) {
	        this.type = syntax_1.Syntax.VariableDeclaration;
	        this.declarations = declarations;
	        this.kind = kind;
	    }
	    return VariableDeclaration;
	}());
	exports.VariableDeclaration = VariableDeclaration;
	var VariableDeclarator = (function () {
	    function VariableDeclarator(id, init) {
	        this.type = syntax_1.Syntax.VariableDeclarator;
	        this.id = id;
	        this.init = init;
	    }
	    return VariableDeclarator;
	}());
	exports.VariableDeclarator = VariableDeclarator;
	var WhileStatement = (function () {
	    function WhileStatement(test, body) {
	        this.type = syntax_1.Syntax.WhileStatement;
	        this.test = test;
	        this.body = body;
	    }
	    return WhileStatement;
	}());
	exports.WhileStatement = WhileStatement;
	var WithStatement = (function () {
	    function WithStatement(object, body) {
	        this.type = syntax_1.Syntax.WithStatement;
	        this.object = object;
	        this.body = body;
	    }
	    return WithStatement;
	}());
	exports.WithStatement = WithStatement;
	var YieldExpression = (function () {
	    function YieldExpression(argument, delegate) {
	        this.type = syntax_1.Syntax.YieldExpression;
	        this.argument = argument;
	        this.delegate = delegate;
	    }
	    return YieldExpression;
	}());
	exports.YieldExpression = YieldExpression;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
/* istanbul ignore next */
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var character_1 = __webpack_require__(9);
	var token_1 = __webpack_require__(7);
	var parser_1 = __webpack_require__(3);
	var xhtml_entities_1 = __webpack_require__(12);
	var jsx_syntax_1 = __webpack_require__(13);
	var Node = __webpack_require__(10);
	var JSXNode = __webpack_require__(14);
	var JSXToken;
	(function (JSXToken) {
	    JSXToken[JSXToken["Identifier"] = 100] = "Identifier";
	    JSXToken[JSXToken["Text"] = 101] = "Text";
	})(JSXToken || (JSXToken = {}));
	token_1.TokenName[JSXToken.Identifier] = 'JSXIdentifier';
	token_1.TokenName[JSXToken.Text] = 'JSXText';
	// Fully qualified element name, e.g. <svg:path> returns "svg:path"
	function getQualifiedElementName(elementName) {
	    var qualifiedName;
	    switch (elementName.type) {
	        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
	            var id = (elementName);
	            qualifiedName = id.name;
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
	            var ns = (elementName);
	            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
	                getQualifiedElementName(ns.name);
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
	            var expr = (elementName);
	            qualifiedName = getQualifiedElementName(expr.object) + '.' +
	                getQualifiedElementName(expr.property);
	            break;
	    }
	    return qualifiedName;
	}
	var JSXParser = (function (_super) {
	    __extends(JSXParser, _super);
	    function JSXParser(code, options, delegate) {
	        _super.call(this, code, options, delegate);
	    }
	    JSXParser.prototype.parsePrimaryExpression = function () {
	        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
	    };
	    JSXParser.prototype.startJSX = function () {
	        // Unwind the scanner before the lookahead token.
	        this.scanner.index = this.startMarker.index;
	        this.scanner.lineNumber = this.startMarker.lineNumber;
	        this.scanner.lineStart = this.startMarker.lineStart;
	    };
	    JSXParser.prototype.finishJSX = function () {
	        // Prime the next lookahead.
	        this.nextToken();
	    };
	    JSXParser.prototype.reenterJSX = function () {
	        this.startJSX();
	        this.expectJSX('}');
	        // Pop the closing '}' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	    };
	    JSXParser.prototype.createJSXNode = function () {
	        this.collectComments();
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.createJSXChildNode = function () {
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.scanXHTMLEntity = function (quote) {
	        var result = '&';
	        var valid = true;
	        var terminated = false;
	        var numeric = false;
	        var hex = false;
	        while (!this.scanner.eof() && valid && !terminated) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === quote) {
	                break;
	            }
	            terminated = (ch === ';');
	            result += ch;
	            ++this.scanner.index;
	            if (!terminated) {
	                switch (result.length) {
	                    case 2:
	                        // e.g. '&#123;'
	                        numeric = (ch === '#');
	                        break;
	                    case 3:
	                        if (numeric) {
	                            // e.g. '&#x41;'
	                            hex = (ch === 'x');
	                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
	                            numeric = numeric && !hex;
	                        }
	                        break;
	                    default:
	                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
	                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
	                        break;
	                }
	            }
	        }
	        if (valid && terminated && result.length > 2) {
	            // e.g. '&#x41;' becomes just '#x41'
	            var str = result.substr(1, result.length - 2);
	            if (numeric && str.length > 1) {
	                result = String.fromCharCode(parseInt(str.substr(1), 10));
	            }
	            else if (hex && str.length > 2) {
	                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
	            }
	            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
	                result = xhtml_entities_1.XHTMLEntities[str];
	            }
	        }
	        return result;
	    };
	    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
	    JSXParser.prototype.lexJSX = function () {
	        var cp = this.scanner.source.charCodeAt(this.scanner.index);
	        // < > / : = { }
	        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
	            var value = this.scanner.source[this.scanner.index++];
	            return {
	                type: token_1.Token.Punctuator,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index - 1,
	                end: this.scanner.index
	            };
	        }
	        // " '
	        if (cp === 34 || cp === 39) {
	            var start = this.scanner.index;
	            var quote = this.scanner.source[this.scanner.index++];
	            var str = '';
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source[this.scanner.index++];
	                if (ch === quote) {
	                    break;
	                }
	                else if (ch === '&') {
	                    str += this.scanXHTMLEntity(quote);
	                }
	                else {
	                    str += ch;
	                }
	            }
	            return {
	                type: token_1.Token.StringLiteral,
	                value: str,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // ... or .
	        if (cp === 46) {
	            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
	            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
	            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
	            var start = this.scanner.index;
	            this.scanner.index += value.length;
	            return {
	                type: token_1.Token.Punctuator,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // `
	        if (cp === 96) {
	            // Only placeholder, since it will be rescanned as a real assignment expression.
	            return {
	                type: token_1.Token.Template,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index,
	                end: this.scanner.index
	            };
	        }
	        // Identifer can not contain backslash (char code 92).
	        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
	            var start = this.scanner.index;
	            ++this.scanner.index;
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source.charCodeAt(this.scanner.index);
	                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
	                    ++this.scanner.index;
	                }
	                else if (ch === 45) {
	                    // Hyphen (char code 45) can be part of an identifier.
	                    ++this.scanner.index;
	                }
	                else {
	                    break;
	                }
	            }
	            var id = this.scanner.source.slice(start, this.scanner.index);
	            return {
	                type: JSXToken.Identifier,
	                value: id,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        this.scanner.throwUnexpectedToken();
	    };
	    JSXParser.prototype.nextJSXToken = function () {
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.lineNumber = this.scanner.lineNumber;
	        this.startMarker.lineStart = this.scanner.lineStart;
	        var token = this.lexJSX();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.lineNumber = this.scanner.lineNumber;
	        this.lastMarker.lineStart = this.scanner.lineStart;
	        if (this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.nextJSXText = function () {
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.lineNumber = this.scanner.lineNumber;
	        this.startMarker.lineStart = this.scanner.lineStart;
	        var start = this.scanner.index;
	        var text = '';
	        while (!this.scanner.eof()) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === '{' || ch === '<') {
	                break;
	            }
	            ++this.scanner.index;
	            text += ch;
	            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.scanner.lineNumber;
	                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
	                    ++this.scanner.index;
	                }
	                this.scanner.lineStart = this.scanner.index;
	            }
	        }
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.lineNumber = this.scanner.lineNumber;
	        this.lastMarker.lineStart = this.scanner.lineStart;
	        var token = {
	            type: JSXToken.Text,
	            value: text,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart,
	            start: start,
	            end: this.scanner.index
	        };
	        if ((text.length > 0) && this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.peekJSXToken = function () {
	        var previousIndex = this.scanner.index;
	        var previousLineNumber = this.scanner.lineNumber;
	        var previousLineStart = this.scanner.lineStart;
	        this.scanner.scanComments();
	        var next = this.lexJSX();
	        this.scanner.index = previousIndex;
	        this.scanner.lineNumber = previousLineNumber;
	        this.scanner.lineStart = previousLineStart;
	        return next;
	    };
	    // Expect the next JSX token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    JSXParser.prototype.expectJSX = function (value) {
	        var token = this.nextJSXToken();
	        if (token.type !== token_1.Token.Punctuator || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next JSX token matches the specified punctuator.
	    JSXParser.prototype.matchJSX = function (value) {
	        var next = this.peekJSXToken();
	        return next.type === token_1.Token.Punctuator && next.value === value;
	    };
	    JSXParser.prototype.parseJSXIdentifier = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== JSXToken.Identifier) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
	    };
	    JSXParser.prototype.parseJSXElementName = function () {
	        var node = this.createJSXNode();
	        var elementName = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = elementName;
	            this.expectJSX(':');
	            var name_1 = this.parseJSXIdentifier();
	            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
	        }
	        else if (this.matchJSX('.')) {
	            while (this.matchJSX('.')) {
	                var object = elementName;
	                this.expectJSX('.');
	                var property = this.parseJSXIdentifier();
	                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
	            }
	        }
	        return elementName;
	    };
	    JSXParser.prototype.parseJSXAttributeName = function () {
	        var node = this.createJSXNode();
	        var attributeName;
	        var identifier = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = identifier;
	            this.expectJSX(':');
	            var name_2 = this.parseJSXIdentifier();
	            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
	        }
	        else {
	            attributeName = identifier;
	        }
	        return attributeName;
	    };
	    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== token_1.Token.StringLiteral) {
	            this.throwUnexpectedToken(token);
	        }
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    JSXParser.prototype.parseJSXExpressionAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.finishJSX();
	        if (this.match('}')) {
	            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
	        }
	        var expression = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXAttributeValue = function () {
	        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
	            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
	    };
	    JSXParser.prototype.parseJSXNameValueAttribute = function () {
	        var node = this.createJSXNode();
	        var name = this.parseJSXAttributeName();
	        var value = null;
	        if (this.matchJSX('=')) {
	            this.expectJSX('=');
	            value = this.parseJSXAttributeValue();
	        }
	        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
	    };
	    JSXParser.prototype.parseJSXSpreadAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.expectJSX('...');
	        this.finishJSX();
	        var argument = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
	    };
	    JSXParser.prototype.parseJSXAttributes = function () {
	        var attributes = [];
	        while (!this.matchJSX('/') && !this.matchJSX('>')) {
	            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
	                this.parseJSXNameValueAttribute();
	            attributes.push(attribute);
	        }
	        return attributes;
	    };
	    JSXParser.prototype.parseJSXOpeningElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXBoundaryElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        if (this.matchJSX('/')) {
	            this.expectJSX('/');
	            var name_3 = this.parseJSXElementName();
	            this.expectJSX('>');
	            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
	        }
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXEmptyExpression = function () {
	        var node = this.createJSXChildNode();
	        this.collectComments();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.lineNumber = this.scanner.lineNumber;
	        this.lastMarker.lineStart = this.scanner.lineStart;
	        return this.finalize(node, new JSXNode.JSXEmptyExpression());
	    };
	    JSXParser.prototype.parseJSXExpressionContainer = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        var expression;
	        if (this.matchJSX('}')) {
	            expression = this.parseJSXEmptyExpression();
	            this.expectJSX('}');
	        }
	        else {
	            this.finishJSX();
	            expression = this.parseAssignmentExpression();
	            this.reenterJSX();
	        }
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXChildren = function () {
	        var children = [];
	        while (!this.scanner.eof()) {
	            var node = this.createJSXChildNode();
	            var token = this.nextJSXText();
	            if (token.start < token.end) {
	                var raw = this.getTokenRaw(token);
	                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
	                children.push(child);
	            }
	            if (this.scanner.source[this.scanner.index] === '{') {
	                var container = this.parseJSXExpressionContainer();
	                children.push(container);
	            }
	            else {
	                break;
	            }
	        }
	        return children;
	    };
	    JSXParser.prototype.parseComplexJSXElement = function (el) {
	        var stack = [];
	        while (!this.scanner.eof()) {
	            el.children = el.children.concat(this.parseJSXChildren());
	            var node = this.createJSXChildNode();
	            var element = this.parseJSXBoundaryElement();
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
	                var opening = (element);
	                if (opening.selfClosing) {
	                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
	                    el.children.push(child);
	                }
	                else {
	                    stack.push(el);
	                    el = { node: node, opening: opening, closing: null, children: [] };
	                }
	            }
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
	                el.closing = (element);
	                var open_1 = getQualifiedElementName(el.opening.name);
	                var close_1 = getQualifiedElementName(el.closing.name);
	                if (open_1 !== close_1) {
	                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
	                }
	                if (stack.length > 0) {
	                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
	                    el = stack.pop();
	                    el.children.push(child);
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        return el;
	    };
	    JSXParser.prototype.parseJSXElement = function () {
	        var node = this.createJSXNode();
	        var opening = this.parseJSXOpeningElement();
	        var children = [];
	        var closing = null;
	        if (!opening.selfClosing) {
	            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
	            children = el.children;
	            closing = el.closing;
	        }
	        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
	    };
	    JSXParser.prototype.parseJSXRoot = function () {
	        // Pop the opening '<' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	        this.startJSX();
	        var element = this.parseJSXElement();
	        this.finishJSX();
	        return element;
	    };
	    return JSXParser;
	}(parser_1.Parser));
	exports.JSXParser = JSXParser;


/***/ },
/* 12 */
/***/ function(module, exports) {

	// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
	"use strict";
	exports.XHTMLEntities = {
	    quot: '\u0022',
	    amp: '\u0026',
	    apos: '\u0027',
	    gt: '\u003E',
	    nbsp: '\u00A0',
	    iexcl: '\u00A1',
	    cent: '\u00A2',
	    pound: '\u00A3',
	    curren: '\u00A4',
	    yen: '\u00A5',
	    brvbar: '\u00A6',
	    sect: '\u00A7',
	    uml: '\u00A8',
	    copy: '\u00A9',
	    ordf: '\u00AA',
	    laquo: '\u00AB',
	    not: '\u00AC',
	    shy: '\u00AD',
	    reg: '\u00AE',
	    macr: '\u00AF',
	    deg: '\u00B0',
	    plusmn: '\u00B1',
	    sup2: '\u00B2',
	    sup3: '\u00B3',
	    acute: '\u00B4',
	    micro: '\u00B5',
	    para: '\u00B6',
	    middot: '\u00B7',
	    cedil: '\u00B8',
	    sup1: '\u00B9',
	    ordm: '\u00BA',
	    raquo: '\u00BB',
	    frac14: '\u00BC',
	    frac12: '\u00BD',
	    frac34: '\u00BE',
	    iquest: '\u00BF',
	    Agrave: '\u00C0',
	    Aacute: '\u00C1',
	    Acirc: '\u00C2',
	    Atilde: '\u00C3',
	    Auml: '\u00C4',
	    Aring: '\u00C5',
	    AElig: '\u00C6',
	    Ccedil: '\u00C7',
	    Egrave: '\u00C8',
	    Eacute: '\u00C9',
	    Ecirc: '\u00CA',
	    Euml: '\u00CB',
	    Igrave: '\u00CC',
	    Iacute: '\u00CD',
	    Icirc: '\u00CE',
	    Iuml: '\u00CF',
	    ETH: '\u00D0',
	    Ntilde: '\u00D1',
	    Ograve: '\u00D2',
	    Oacute: '\u00D3',
	    Ocirc: '\u00D4',
	    Otilde: '\u00D5',
	    Ouml: '\u00D6',
	    times: '\u00D7',
	    Oslash: '\u00D8',
	    Ugrave: '\u00D9',
	    Uacute: '\u00DA',
	    Ucirc: '\u00DB',
	    Uuml: '\u00DC',
	    Yacute: '\u00DD',
	    THORN: '\u00DE',
	    szlig: '\u00DF',
	    agrave: '\u00E0',
	    aacute: '\u00E1',
	    acirc: '\u00E2',
	    atilde: '\u00E3',
	    auml: '\u00E4',
	    aring: '\u00E5',
	    aelig: '\u00E6',
	    ccedil: '\u00E7',
	    egrave: '\u00E8',
	    eacute: '\u00E9',
	    ecirc: '\u00EA',
	    euml: '\u00EB',
	    igrave: '\u00EC',
	    iacute: '\u00ED',
	    icirc: '\u00EE',
	    iuml: '\u00EF',
	    eth: '\u00F0',
	    ntilde: '\u00F1',
	    ograve: '\u00F2',
	    oacute: '\u00F3',
	    ocirc: '\u00F4',
	    otilde: '\u00F5',
	    ouml: '\u00F6',
	    divide: '\u00F7',
	    oslash: '\u00F8',
	    ugrave: '\u00F9',
	    uacute: '\u00FA',
	    ucirc: '\u00FB',
	    uuml: '\u00FC',
	    yacute: '\u00FD',
	    thorn: '\u00FE',
	    yuml: '\u00FF',
	    OElig: '\u0152',
	    oelig: '\u0153',
	    Scaron: '\u0160',
	    scaron: '\u0161',
	    Yuml: '\u0178',
	    fnof: '\u0192',
	    circ: '\u02C6',
	    tilde: '\u02DC',
	    Alpha: '\u0391',
	    Beta: '\u0392',
	    Gamma: '\u0393',
	    Delta: '\u0394',
	    Epsilon: '\u0395',
	    Zeta: '\u0396',
	    Eta: '\u0397',
	    Theta: '\u0398',
	    Iota: '\u0399',
	    Kappa: '\u039A',
	    Lambda: '\u039B',
	    Mu: '\u039C',
	    Nu: '\u039D',
	    Xi: '\u039E',
	    Omicron: '\u039F',
	    Pi: '\u03A0',
	    Rho: '\u03A1',
	    Sigma: '\u03A3',
	    Tau: '\u03A4',
	    Upsilon: '\u03A5',
	    Phi: '\u03A6',
	    Chi: '\u03A7',
	    Psi: '\u03A8',
	    Omega: '\u03A9',
	    alpha: '\u03B1',
	    beta: '\u03B2',
	    gamma: '\u03B3',
	    delta: '\u03B4',
	    epsilon: '\u03B5',
	    zeta: '\u03B6',
	    eta: '\u03B7',
	    theta: '\u03B8',
	    iota: '\u03B9',
	    kappa: '\u03BA',
	    lambda: '\u03BB',
	    mu: '\u03BC',
	    nu: '\u03BD',
	    xi: '\u03BE',
	    omicron: '\u03BF',
	    pi: '\u03C0',
	    rho: '\u03C1',
	    sigmaf: '\u03C2',
	    sigma: '\u03C3',
	    tau: '\u03C4',
	    upsilon: '\u03C5',
	    phi: '\u03C6',
	    chi: '\u03C7',
	    psi: '\u03C8',
	    omega: '\u03C9',
	    thetasym: '\u03D1',
	    upsih: '\u03D2',
	    piv: '\u03D6',
	    ensp: '\u2002',
	    emsp: '\u2003',
	    thinsp: '\u2009',
	    zwnj: '\u200C',
	    zwj: '\u200D',
	    lrm: '\u200E',
	    rlm: '\u200F',
	    ndash: '\u2013',
	    mdash: '\u2014',
	    lsquo: '\u2018',
	    rsquo: '\u2019',
	    sbquo: '\u201A',
	    ldquo: '\u201C',
	    rdquo: '\u201D',
	    bdquo: '\u201E',
	    dagger: '\u2020',
	    Dagger: '\u2021',
	    bull: '\u2022',
	    hellip: '\u2026',
	    permil: '\u2030',
	    prime: '\u2032',
	    Prime: '\u2033',
	    lsaquo: '\u2039',
	    rsaquo: '\u203A',
	    oline: '\u203E',
	    frasl: '\u2044',
	    euro: '\u20AC',
	    image: '\u2111',
	    weierp: '\u2118',
	    real: '\u211C',
	    trade: '\u2122',
	    alefsym: '\u2135',
	    larr: '\u2190',
	    uarr: '\u2191',
	    rarr: '\u2192',
	    darr: '\u2193',
	    harr: '\u2194',
	    crarr: '\u21B5',
	    lArr: '\u21D0',
	    uArr: '\u21D1',
	    rArr: '\u21D2',
	    dArr: '\u21D3',
	    hArr: '\u21D4',
	    forall: '\u2200',
	    part: '\u2202',
	    exist: '\u2203',
	    empty: '\u2205',
	    nabla: '\u2207',
	    isin: '\u2208',
	    notin: '\u2209',
	    ni: '\u220B',
	    prod: '\u220F',
	    sum: '\u2211',
	    minus: '\u2212',
	    lowast: '\u2217',
	    radic: '\u221A',
	    prop: '\u221D',
	    infin: '\u221E',
	    ang: '\u2220',
	    and: '\u2227',
	    or: '\u2228',
	    cap: '\u2229',
	    cup: '\u222A',
	    int: '\u222B',
	    there4: '\u2234',
	    sim: '\u223C',
	    cong: '\u2245',
	    asymp: '\u2248',
	    ne: '\u2260',
	    equiv: '\u2261',
	    le: '\u2264',
	    ge: '\u2265',
	    sub: '\u2282',
	    sup: '\u2283',
	    nsub: '\u2284',
	    sube: '\u2286',
	    supe: '\u2287',
	    oplus: '\u2295',
	    otimes: '\u2297',
	    perp: '\u22A5',
	    sdot: '\u22C5',
	    lceil: '\u2308',
	    rceil: '\u2309',
	    lfloor: '\u230A',
	    rfloor: '\u230B',
	    loz: '\u25CA',
	    spades: '\u2660',
	    clubs: '\u2663',
	    hearts: '\u2665',
	    diams: '\u2666',
	    lang: '\u27E8',
	    rang: '\u27E9'
	};


/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	exports.JSXSyntax = {
	    JSXAttribute: 'JSXAttribute',
	    JSXClosingElement: 'JSXClosingElement',
	    JSXElement: 'JSXElement',
	    JSXEmptyExpression: 'JSXEmptyExpression',
	    JSXExpressionContainer: 'JSXExpressionContainer',
	    JSXIdentifier: 'JSXIdentifier',
	    JSXMemberExpression: 'JSXMemberExpression',
	    JSXNamespacedName: 'JSXNamespacedName',
	    JSXOpeningElement: 'JSXOpeningElement',
	    JSXSpreadAttribute: 'JSXSpreadAttribute',
	    JSXText: 'JSXText'
	};


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var jsx_syntax_1 = __webpack_require__(13);
	var JSXClosingElement = (function () {
	    function JSXClosingElement(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
	        this.name = name;
	    }
	    return JSXClosingElement;
	}());
	exports.JSXClosingElement = JSXClosingElement;
	var JSXElement = (function () {
	    function JSXElement(openingElement, children, closingElement) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
	        this.openingElement = openingElement;
	        this.children = children;
	        this.closingElement = closingElement;
	    }
	    return JSXElement;
	}());
	exports.JSXElement = JSXElement;
	var JSXEmptyExpression = (function () {
	    function JSXEmptyExpression() {
	        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
	    }
	    return JSXEmptyExpression;
	}());
	exports.JSXEmptyExpression = JSXEmptyExpression;
	var JSXExpressionContainer = (function () {
	    function JSXExpressionContainer(expression) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
	        this.expression = expression;
	    }
	    return JSXExpressionContainer;
	}());
	exports.JSXExpressionContainer = JSXExpressionContainer;
	var JSXIdentifier = (function () {
	    function JSXIdentifier(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
	        this.name = name;
	    }
	    return JSXIdentifier;
	}());
	exports.JSXIdentifier = JSXIdentifier;
	var JSXMemberExpression = (function () {
	    function JSXMemberExpression(object, property) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
	        this.object = object;
	        this.property = property;
	    }
	    return JSXMemberExpression;
	}());
	exports.JSXMemberExpression = JSXMemberExpression;
	var JSXAttribute = (function () {
	    function JSXAttribute(name, value) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
	        this.name = name;
	        this.value = value;
	    }
	    return JSXAttribute;
	}());
	exports.JSXAttribute = JSXAttribute;
	var JSXNamespacedName = (function () {
	    function JSXNamespacedName(namespace, name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
	        this.namespace = namespace;
	        this.name = name;
	    }
	    return JSXNamespacedName;
	}());
	exports.JSXNamespacedName = JSXNamespacedName;
	var JSXOpeningElement = (function () {
	    function JSXOpeningElement(name, selfClosing, attributes) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
	        this.name = name;
	        this.selfClosing = selfClosing;
	        this.attributes = attributes;
	    }
	    return JSXOpeningElement;
	}());
	exports.JSXOpeningElement = JSXOpeningElement;
	var JSXSpreadAttribute = (function () {
	    function JSXSpreadAttribute(argument) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
	        this.argument = argument;
	    }
	    return JSXSpreadAttribute;
	}());
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	var JSXText = (function () {
	    function JSXText(value, raw) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXText;
	        this.value = value;
	        this.raw = raw;
	    }
	    return JSXText;
	}());
	exports.JSXText = JSXText;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var scanner_1 = __webpack_require__(8);
	var error_handler_1 = __webpack_require__(6);
	var token_1 = __webpack_require__(7);
	var Reader = (function () {
	    function Reader() {
	        this.values = [];
	        this.curly = this.paren = -1;
	    }
	    ;
	    // A function following one of those tokens is an expression.
	    Reader.prototype.beforeFunctionExpression = function (t) {
	        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	            'return', 'case', 'delete', 'throw', 'void',
	            // assignment operators
	            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
	            '&=', '|=', '^=', ',',
	            // binary/unary operators
	            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
	    };
	    ;
	    // Determine if forward slash (/) is an operator or part of a regular expression
	    // https://github.com/mozilla/sweet.js/wiki/design
	    Reader.prototype.isRegexStart = function () {
	        var previous = this.values[this.values.length - 1];
	        var regex = (previous !== null);
	        switch (previous) {
	            case 'this':
	            case ']':
	                regex = false;
	                break;
	            case ')':
	                var check = this.values[this.paren - 1];
	                regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');
	                break;
	            case '}':
	                // Dividing a function by anything makes little sense,
	                // but we have to check for that.
	                regex = false;
	                if (this.values[this.curly - 3] === 'function') {
	                    // Anonymous function, e.g. function(){} /42
	                    var check_1 = this.values[this.curly - 4];
	                    regex = check_1 ? !this.beforeFunctionExpression(check_1) : false;
	                }
	                else if (this.values[this.curly - 4] === 'function') {
	                    // Named function, e.g. function f(){} /42/
	                    var check_2 = this.values[this.curly - 5];
	                    regex = check_2 ? !this.beforeFunctionExpression(check_2) : true;
	                }
	        }
	        return regex;
	    };
	    ;
	    Reader.prototype.push = function (token) {
	        if (token.type === token_1.Token.Punctuator || token.type === token_1.Token.Keyword) {
	            if (token.value === '{') {
	                this.curly = this.values.length;
	            }
	            else if (token.value === '(') {
	                this.paren = this.values.length;
	            }
	            this.values.push(token.value);
	        }
	        else {
	            this.values.push(null);
	        }
	    };
	    ;
	    return Reader;
	}());
	var Tokenizer = (function () {
	    function Tokenizer(code, config) {
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
	        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
	        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
	        this.buffer = [];
	        this.reader = new Reader();
	    }
	    ;
	    Tokenizer.prototype.errors = function () {
	        return this.errorHandler.errors;
	    };
	    ;
	    Tokenizer.prototype.getNextToken = function () {
	        if (this.buffer.length === 0) {
	            var comments = this.scanner.scanComments();
	            if (this.scanner.trackComment) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var comment = void 0;
	                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
	                    comment = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: value
	                    };
	                    if (this.trackRange) {
	                        comment.range = e.range;
	                    }
	                    if (this.trackLoc) {
	                        comment.loc = e.loc;
	                    }
	                    this.buffer.push(comment);
	                }
	            }
	            if (!this.scanner.eof()) {
	                var loc = void 0;
	                if (this.trackLoc) {
	                    loc = {
	                        start: {
	                            line: this.scanner.lineNumber,
	                            column: this.scanner.index - this.scanner.lineStart
	                        },
	                        end: {}
	                    };
	                }
	                var token = void 0;
	                if (this.scanner.source[this.scanner.index] === '/') {
	                    token = this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.scanPunctuator();
	                }
	                else {
	                    token = this.scanner.lex();
	                }
	                this.reader.push(token);
	                var entry = void 0;
	                entry = {
	                    type: token_1.TokenName[token.type],
	                    value: this.scanner.source.slice(token.start, token.end)
	                };
	                if (this.trackRange) {
	                    entry.range = [token.start, token.end];
	                }
	                if (this.trackLoc) {
	                    loc.end = {
	                        line: this.scanner.lineNumber,
	                        column: this.scanner.index - this.scanner.lineStart
	                    };
	                    entry.loc = loc;
	                }
	                if (token.regex) {
	                    entry.regex = token.regex;
	                }
	                this.buffer.push(entry);
	            }
	        }
	        return this.buffer.shift();
	    };
	    ;
	    return Tokenizer;
	}());
	exports.Tokenizer = Tokenizer;


/***/ }
/******/ ])
});
;

/***/ }),
/* 201 */
/***/ (function(module, exports) {

module.exports = {
	"name": "esper.js",
	"version": "0.3.0-dev",
	"description": "Esper javascript interperter.",
	"main": "src/index.js",
	"scripts": {
		"doc": "esdoc -c esdoc.json",
		"lint": "jshint src --show-non-errors",
		"test": "mocha",
		"repl": "node contrib/cli.js -i",
		"webpack": "webpack",
		"demo": "esdoc -c esdoc.json && node contrib/examine-corpus.js && webpack && webpack --env.test && webpack --env.test --env.profile=modern && node contrib/ui.js",
		"cover": "./node_modules/istanbul/lib/cli.js cover node_modules/.bin/_mocha -- --reporter dot",
		"dev-server": "webpack-dev-server src/index.js --content-base contrib/ui",
		"preinstall": "node contrib/install-plugin-deps.js",
		"prepublish": "node contrib/build.js",
		"style": "jscs src plugins/*/*.js"
	},
	"bin": {
		"esper": "./contrib/cli.js"
	},
	"repository": {
		"type": "git",
		"url": "git+ssh://git@github.com/codecombat/esper.js.git"
	},
	"keywords": [
		"esper",
		"javascript",
		"interperter",
		"ast",
		"eval"
	],
	"author": "Rob Blanckaert",
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/codecombat/esper.js/issues"
	},
	"homepage": "https://github.com/codecombat/esper.js#readme",
	"files": [
		"dist/esper.js",
		"dist/esper.min.js",
		"dist/esper.modern.js",
		"src",
		"plugins",
		"contrib/cli.js",
		"contrib/install-plugin-deps.js",
		"plugin-list.js"
	],
	"devDependencies": {
		"babel-core": "^6.24.1",
		"babel-loader": "^6.4.1",
		"babel-plugin-check-es2015-constants": "^6.22.0",
		"babel-plugin-transform-es2015-arrow-functions": "^6.22.0",
		"babel-plugin-transform-es2015-block-scoped-functions": "^6.22.0",
		"babel-plugin-transform-es2015-block-scoping": "^6.24.1",
		"babel-plugin-transform-es2015-classes": "^6.24.1",
		"babel-plugin-transform-es2015-computed-properties": "^6.24.1",
		"babel-plugin-transform-es2015-destructuring": "^6.23.0",
		"babel-plugin-transform-es2015-for-of": "^6.23.0",
		"babel-plugin-transform-es2015-function-name": "^6.24.1",
		"babel-plugin-transform-es2015-literals": "^6.22.0",
		"babel-plugin-transform-es2015-modules-commonjs": "^6.24.1",
		"babel-plugin-transform-es2015-object-super": "^6.24.1",
		"babel-plugin-transform-es2015-parameters": "^6.24.1",
		"babel-plugin-transform-es2015-shorthand-properties": "^6.24.1",
		"babel-plugin-transform-es2015-spread": "^6.22.0",
		"babel-plugin-transform-es2015-sticky-regex": "^6.24.1",
		"babel-plugin-transform-es2015-template-literals": "^6.22.0",
		"babel-plugin-transform-es2015-typeof-symbol": "^6.23.0",
		"babel-plugin-transform-es2015-unicode-regex": "^6.24.1",
		"babel-plugin-transform-regenerator": "^6.24.1",
		"babel-plugin-transform-runtime": "^6.23.0",
		"babel-polyfill": "^6.23.0",
		"babel-regenerator-runtime": "^6.5.0",
		"babel-register": "^6.24.1",
		"babel-runtime": "^6.23.0",
		"babili-webpack-plugin": "0.0.11",
		"chai": "^3.5.0",
		"core-js": "^2.4.1",
		"esdoc": "^0.5.2",
		"istanbul": "^1.0.0-alpha.2",
		"json-loader": "^0.5.4",
		"lodash": "^4.17.4",
		"lua2js": "^0.0.11",
		"mocha": "^3.2.0",
		"mocha-loader": "^1.1.1",
		"raw-loader": "^0.5.1",
		"v8-profiler": "^5.7.0",
		"webpack": "^2.3.3",
		"webpack-dev-server": "^2.4.2"
	},
	"dependencies": {
		"commander": "^2.9.0",
		"esprima": "^3.1.3"
	}
};

/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = "var env = {};\nvar __lua = (function() {\n\n\t// Yoinked from underscore.\n\tvar isJSArray = Array.isArray || function(obj) { return toString.call(obj) === '[object Array]'; };\n\n\tfunction type(what) {\n\t\tif ( what === null || what === undefined ) return \"nil\";\n\t\tif ( isNaN(what) ) return \"number\";\n\t\tvar t = typeof what;\n\t\tif ( t == \"object\" ) return \"table\";\n\t\treturn t;\n\t}\n\n\tfunction numberForArith(n) {\n\t\tif ( type(n) == \"number\" ) return n;\n\t\telse if ( typeof n == \"string\" ) {\n\t\t\tn = parseInt(n);\n\t\t\tif ( !isNaN(n) ) return n;\n\n\t\t}\n\n\t\tthrow \"attempt to perform arithmetic on a \" +  type(n) + \" value: \" + n;\n\t}\n\n\tfunction makeString(a) { \n\t\ta = oneValue(a);\n\n\t\tvar mtf = lookupMetaTable(a, \"__tostring\");\n\t\tif ( mtf !== null ) return mtf(a);\n\n\t\tif ( a === undefined || a === null ) return \"nil\";\n\t\tif ( a instanceof LuaTable ) {\n\t\t\treturn \"table: 0x\" + a.id;\n\t\t} else if ( typeof a == \"number\" ) {\n\t\t\tif ( ~~a == a ) return a.toString();\n\t\t\tvar rep = a.toPrecision();\n\t\t\tif ( rep.length > 14 ) return a.toPrecision(14);\n\t\t\treturn rep;\n\t\t}\n\t\treturn \"\" + a;\n\t}\n\n\tfunction add(a,b) {\n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__add\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) + numberForArith(b); \n\t}\n\n\tfunction sub(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__sub\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) - numberForArith(b);\n\t}\n\n\tfunction mul(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__mul\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) * numberForArith(b);\n\t}\n\n\tfunction div(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__div\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) / numberForArith(b);\n\t}\n\n\tfunction intdiv(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__idiv\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn ~~(numberForArith(a) / numberForArith(b));\n\t}\n\n\tfunction mod(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__mod\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn numberForArith(a) % numberForArith(b);\n\t}\n\n\tfunction pow(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__pow\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn Math.pow(numberForArith(a),numberForArith(b)); \n\t}\n\n\tfunction concat(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__concat\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\t\tif ( a === null || a === undefined || b === null || b === undefined ) throw \"attempt to concatenate a nil value\";\n\n\t\treturn  makeString(a) + makeString(b); \n\t}\n\n\tfunction lte(a,b) {\n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__le\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn a <= b; \n\t}\n\n\tfunction lt(a,b) {\n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__lt\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\t\treturn a < b; \n\t}\n\n\tfunction gte(a,b) { return lte(b,a); }\n\tfunction gt(a,b) { return lt(b,a); }\n\n\n\tfunction forcomp(d,a,b) { \n\t\tif ( d > 0 ) return a <= b; \n\t\telse if ( d < 0 ) return b <= a;\n\t\telse return false;\n\t}\n\n\t\n\tfunction eq(a,b) { \n\t\ta = oneValue(a); b = oneValue(b);\n\n\t\tvar mtf = lookupMetaTableBin(a, b, \"__eq\");\n\t\tif ( mtf !== null ) return mtf(a,b);\n\n\n\t\tif ( a === null || a === undefined ) {\n\t\t\treturn ( b === null || b === undefined );\n\t\t}\n\t\tif ( a === b ) return true;\n\t\treturn false;\n\t}\n\t\n\tfunction ne(a,b) { return !eq(a,b); }\n\n\tfunction count(a) { \n\t\tif ( a instanceof LuaTable ) {\n\t\t\tvar cnt = 0;\n\t\t\twhile ( a.numeric[cnt] !== undefined ) ++cnt;\n\t\t\treturn cnt;\n\t\t}\n\t\treturn a.length;\n\t}\n\n\tfunction and(a,b) { return a && b; }\n\tfunction or(a,b) { return a || b; }\n\n\tfunction call(flags, what, that, helper /*, args... */ ) {\n\t\tvar injectSelf = !!(flags & 1); \n\t\tvar detectLua = !!(flags & 2); \n\n\t\tif ( what === null || what === undefined ) {\n\t\t\tif ( helper === undefined ) throw \"attempt to call a \" + type(what) + \" value\";\n\t\t\telse throw \"attempt to call '\" + helper + \"' (a \" + type(what) + \" value)\"; \n\t\t}\n\n\t\tvar args = expand(Array.prototype.slice.call(arguments, 4), true);\n\n\t\tvar doInject = true;\n\n\t\tif ( detectLua ) {\n\t\t\tdoInject = what.__luaType == \"function\";\n\t\t}\n\n\t\tif ( injectSelf && doInject ) {\n\t\t\targs.unshift(that);\n\t\t}\n\n\t\tif ( detectLua && what.__luaType != \"function\" ) {\n\t\t\tvar args2 = [];\n\t\t\tfor ( var i = 0; i < args.length; ++i ) {\n\t\t\t\tvar a = args[i];\n\t\t\t\tif ( a instanceof LuaTable ) {\n\t\t\t\t\tif ( a.numeric.length == 0 ) args2[i] = a.hash;\n\t\t\t\t\telse if ( Object.keys(a.hash).length == 0 ) args2[i] = a.numeric;\n\t\t\t\t\telse args2[i] = a;\n\t\t\t\t} else {\n\t\t\t\t\targs2[i] = a;\n\t\t\t\t}\n\t\t\t}\n\t\t\targs = args2;\n\t\t}\n\n\t\treturn what.apply(that, args);\n\t}\n\n\tfunction rest(args, cnt) {\n\t\tvar out = Object.create(LuaReturnValues.prototype, {});\n\t\tout.values = Array.prototype.slice.call(args, cnt);\n\t\treturn out;\n\t}\n\n\tvar id = 0;\n\tfunction LuaTable() {\n\t\tthis.id = ++id;\n\t\tthis.numeric = [];\n\t\tthis.hash = {};\n\t}\n\n\tObject.defineProperty(LuaTable.prototype, \"__luaType\",  {value: \"table\",  enumerable: false});\n\tObject.defineProperty(LuaTable.prototype, \"toString\",  {value: function() {\n\t\treturn makeString(this);\n\t},  enumerable: false});\n\n\tfunction makeTable(t, allowExpand /*, numeric ... */) {\n\t\tvar out = new LuaTable();\n\n\t\tout.numeric = expand(Array.prototype.slice.call(arguments, 2), allowExpand);\n\t\tif ( !t ) return out;\n\n\t\tif ( isJSArray(t) ) {\n\t\t\tfor ( var i = 0; i < t.length; ++i ) {\n\t\t\t\tvar pair = t[i];\n\t\t\t\tvar key = pair[0];\n\t\t\t\tvar val = pair[1];\n\t\t\t\tif ( typeof key == \"number\" ) {\n\t\t\t\t\tout.numeric[key - 1] = val;\n\t\t\t\t} else {\n\t\t\t\t\tout.hash[key] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( var k in t ) {\n\t\t\t\tout.hash[k] = t[k];\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction makeFunction(f) {\n\t\tf.__luaType = \"function\";\n\t\treturn f;\n\t}\n\n\tfunction LuaReturnValues(v) {\n\t\tthis.values = v;\n\t}\n\n\tObject.defineProperty(LuaReturnValues.prototype, \"__luaType\",  {value: \"returnValues\",  enumerable: false});\n\n\tfunction lookupMetaTable(table, entry) {\n\t\tif ( table instanceof LuaTable ) {\n\t\t\tif ( table.__metatable === undefined ) return null;\n\n\t\t\tvar idx = table.__metatable.hash[entry];\n\t\t\tif ( idx === null || idx === undefined ) return null;\n\n\t\t\treturn idx;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfunction lookupMetaTableBin(a, b, entry) {\n\t\tvar mt = lookupMetaTable(a, entry);\n\t\tif ( mt == null ) return lookupMetaTable(b, entry);\n\t\treturn mt;\n\t}\n\n\tfunction index(table, prop, helper) {\n\t\tif ( table === null || table === undefined || typeof table == \"number\" ) {\n\t\t\tif ( helper == undefined ) {\n\t\t\t\tthrow \"attempt to index a \" + type(table) + \" value\";\n\t\t\t} else {\n\t\t\t\tthrow \"attempt to index '\" + helper + \"' (a \" + type(table) + \" value)\";\n\t\t\t}\n\t\t} else if ( table instanceof LuaTable ) {\n\t\t\tvar val;\n\t\t\tif ( typeof prop == \"number\") val = table.numeric[prop-1];\n\t\t\telse val = table.hash[prop];\n\n\t\t\tif ( val !== null & val !== undefined ) return val;\n\n\t\t\tvar idxfx = lookupMetaTable(table, \"__index\");\n\t\t\tif ( idxfx == null ) return null;\n\n\t\t\tif ( typeof idxfx == \"function\" ) return oneValue(idxfx(table, prop));\n\t\t\treturn index(idxfx, prop);\n\t\t} else if ( isJSArray(table) ) {\n\t\t\treturn table[prop - 1];\n\t\t} else if ( typeof table == \"string\" ) {\n\t\t\tvar sidx = tonumber(prop);\n\t\t\tif ( sidx < 0 ) sidx += (table.length + 1);\n\t\t\treturn table[sidx-1];\n\t\t} else {\n\t\t\treturn table[prop];\n\t\t}\n\t}\n\n\tfunction indexAssign(table, prop, value, helper) {\n\n\t\tif ( table === null || table === undefined || typeof table == \"number\" ) {\n\t\t\tif ( helper == undefined ) {\n\t\t\t\tthrow \"attempt to index a \" + type(table) + \" value\";\n\t\t\t} else {\n\t\t\t\tthrow \"attempt to index '\" + helper + \"' (a \" + type(table) + \" value)\";\n\t\t\t}\n\t\t}\n\n\t\tif ( table instanceof LuaTable ) {\n\t\t\tvar val;\n\n\t\t\tif ( prop === undefined || prop === null ) throw \"table index is nil\";\n\n\t\t\tif ( typeof prop == \"number\" ) val = table.numeric[prop-1];\n\t\t\telse val = table.hash[prop];\n\n\t\t\tif ( val !== null & val !== undefined ) {\n\t\t\t\tif ( typeof prop == \"number\") table.numeric[prop-1] = value;\n\t\t\t\telse table.hash[prop] = value;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( table.__metatable === undefined ) {\n\t\t\t\tif ( typeof prop == \"number\") table.numeric[prop-1] = value;\n\t\t\t\telse table.hash[prop] = value;\n\t\t\t\treturn true;\n\t\t\t}\n\n\n\n\t\t\tvar idx = table.__metatable.__newindex;\n\t\t\tif ( idx === null || idx === undefined ) {\n\t\t\t\tif ( typeof pop == \"number\") table.numeric[prop] = value;\n\t\t\t\telse table.hash[prop] = value;\n\t\t\t\treturn true;\t\n\t\t\t}\n\n\t\t\tif ( typeof idx == \"function\" ) idx(table, prop, value);\n\t\t\telse indexAssign(idx, prop, value);\n\n\t\t\treturn true;\n\n\n\t\t} else if ( typeof table == \"string\" ) { \n\t\t\tthrow \"attempt to index string value\";\n\t\t} else if ( isJSArray(table) ) {\n\t\t\ttable[prop-1] = value;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction oneValue(v) {\n\t\tif ( v instanceof LuaReturnValues ) return v.values[0];\n\t\treturn v;\n\t}\n\n\tfunction makeMultiReturn() {\n\t\treturn new LuaReturnValues(expand(arguments, true));\n\t}\n\n\tfunction expand(what, allowExpand) {\n\t\tif ( allowExpand === undefined ) allowExpand = false;\n\n\t\tvar out = [];\n\t\tfor ( var idx in what ) {\n\t\t\tvar v = what[idx];\n\t\t\tif ( v instanceof LuaReturnValues ) {\n\t\t\t\tfor ( var i in v.values ) {\n\t\t\t\t\tout.push(v.values[i]);\n\t\t\t\t\tif ( idx < what.length - 1 || !allowExpand) break;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tout.push(v);\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\tfunction expandReturnValues() {\n\t\treturn expand(arguments, true);\n\t}\n\n\tfunction pcall(what /*, args... */ ) {\n\t\ttry {\n\t\t\tvar result = expand([what.apply(this, Array.prototype.slice.call(arguments, 1))], true);\n\t\t\tresult.unshift(true);\n\t\t\treturn makeMultiReturn.apply(__lua, result);\n\t\t} catch ( e ) {\n\t\t\treturn makeMultiReturn(false, e);\n\t\t}\n\t}\n\n\tfunction isTable(a) { return a instanceof LuaTable; }\n\n\tfunction mark(o) {\n\t\tvar seen = [];\n\t\tfunction domark(o) {\n\t\t\tif ( o in seen ) return;\n\t\t\tseen.push(o);\n\t\t\tif ( typeof o == \"object\" ) for ( var idx in o ) domark(o[idx]);\n\t\t\telse if ( typeof o == \"function\" ) o.__luaType = \"function\";\n\t\t\t\n\t\t}\n\t\tdomark(o);\n\t}\n\n\treturn {\n\t\tadd: add,\n\t\tsub: sub,\n\t\tmul: mul,\n\t\tdiv: div,\n\t\tintdiv: intdiv,\n\t\tmod: mod,\n\t\tcall: call,\n\t\tlte: lte,\n\t\tlt: lt,\n\t\tne: ne,\n\t\tgt: gt,\n\t\tgte: gte,\n\t\teq: eq,\n\t\tindex: index,\n\t\tindexAssign: indexAssign,\n\t\tconcat: concat,\n\t\tmakeTable: makeTable,\n\t\tmakeFunction: makeFunction,\n\t\texpandReturnValues: expandReturnValues,\n\t\tmakeMultiReturn: makeMultiReturn,\n\t\tcount: count,\n\t\tand: and,\n\t\tor: or,\n\t\texpand: expand,\n\t\trest: rest,\n\t\tpcall: pcall,\n\t\ttype: type,\n\t\tpow: pow,\n\t\tisTable: isTable,\n\t\tmark: mark,\n\t\tforcomp: forcomp,\n\t\tmakeString: makeString,\n\t\toneValue: oneValue,\n\t\tlookupMetaTable: lookupMetaTable,\n\t\tisJSArray: isJSArray\n\t};\n\n})();\n\n\nthis.__lua = __lua;\n\nenv.string = {\n\tbyte: function byte(s,i,j) {\n\t\tvar chars = env.string.sub(s,i,j);\n\t\tvar out = [];\n\t\tfor ( var i = 0; i < chars.length; ++i ) out[i] = chars.charCodeAt(i);\n\t\treturn __lua.makeMultiReturn.apply(__lua, out);\n\t},\n\tchar: function char(/* arguments */) {\n\t\tvar out = \"\";\n\t\tfor ( var i = 0; i < arguments.length; ++i ) {\n\t\t\tout += String.fromCharCode(arguments[i]|0); \n\t\t}\n\t\treturn out;\n\n\t},\n\tdump: null,\n\tfind: null,\n\tgmatch: null,\n\tgsub: null,\n\tlen: function len(s) { return (\"\" + s).length; },\n\tlower: function lower(s) { return (\"\" + s).toLowerCase(); },\n\tmatch: null,\n\treverse: function(s) {\n\t\treturn (\"\" + s).split(\"\").reverse().join(\"\");\n\t},\n\tsub: function(s, i, j) {\n\t\tif ( i === undefined || i === null ) i = 1;\n\t\tif ( j === undefined || j === null ) j = s.length;\n\t\tif ( i < 0 ) i += (s.length+1);\n\t\tif ( j < 0 ) j += (s.length+1);\n\n\t\treturn __lua.makeString(s).substring(i-1,j);\n\n\t},\n\tupper: function lower(s) { return (\"\" + s).toUpperCase(); },\n\tformat: function format(format, etc) {\n\t\tvar arg = arguments;\n\t\tvar i = 1;\n\t\treturn format.replace(/%([0-9.]+)?([%sfdgi])/g, function (m, w, t) {\n\t\t\tvar r = null;\n\t\t\tif ( t == \"%\" ) return \"%\";\n\t\t\telse if ( t == \"s\") r = arg[i++];\n\t\t\telse if ( t == \"d\") r = parseInt(arg[i++]);\n\t\t\telse if ( t == \"i\") r = parseInt(arg[i++]);\n\t\t\telse if ( t == \"f\" ) r = arg[i++].toFixed(parseFloat(m[1]) || 6);\n\t\t\telse r = arg[i++]; \n\t\t\tr = \"\" + r;\n\t\t\tif ( parseInt(w) ) {\n\t\t\t\tvar extra = parseInt(w) - r.length;\n\t\t\t\tif ( extra > 0 ) r = new Array(extra).join(\" \") + r;\n\t\t\t}\n\t\t\treturn r;\n\t\t});\n\t}\n\n};\n\nenv.table = {\n\tconcat: null,\n\tinsert: null,\n\tpack: function(/* arguments */) {\n\t\tvar obj = {}\n\t\tfor ( var i = 0; i < arguments.length; ++i) {\n\t\t\tobj[(\"\" + (i + 1))] = arguments[i];\n\t\t}\n\t\treturn __lua.makeTable(obj);\n\t},\n\tremove: null,\n\tsort: function sort(table) { return table; },\n\tunpack: function(table,i,j) {\n\t\tif ( i === undefined || i === null ) i = 1;\n\t\tif ( j === undefined || j === null ) j = __lua.count(table);\n\n\t\tvar arr = [];\n\t\tif ( __lua.isTable(table) ) {\n\t\t\tfor ( var a = i; a <= j; ++a ) {\n\t\t\t\tarr.push(table.numeric[a]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( var a = i; a <= j; ++a ) {\n\t\t\t\tarr.push(table[a]);\n\t\t\t}\t\t\t\n\t\t}\n\n\t\treturn __lua.makeMultiReturn.apply(__lua, arr);\n\n\n\t}\n\n};\n\nenv.unpack = env.table.unpack;\n\nenv.tonumber = function(n) {\n\treturn parseInt(n);\n};\n\nenv.tostring = function(n) {\n\treturn __lua.makeString(n);\n};\n\nenv.os = {\n\tclock: null,\n\tdate: null,\n\tdifftime: function difftime(t1,t2) { return t2 - t1; },\n\texecute: null,\n\texit: null,\n\ttime: function time(table) {\n\t\tif ( table == null ) return new Date().getTime();\n\t\tthrow \"Time given a table not implemented yet.\";\n\t}\n};\n\nenv.io = {\n\twrite: function() { env.print(arguments); }\n};\n\nenv.error = function error(s) { throw s; };\n\nenv.assert = function assert(what, msg, code) {\n\tif ( code === undefined ) {\n\t\tcode = msg;\n\t\tmsg = undefined;\n\t}\n\n\tif ( !!what ) return what;\n\n\tthrow(\"Assert Failed!! \" + code);\n};\n\nenv.type = function type(what) {\n\treturn __lua.type(what);\n};\n\n\nenv.pairs = function pairs(table) {\n\n\tvar mtf = __lua.lookupMetaTable(table, \"__pairs\");\n\tif ( mtf !== null ) return mtf(table);\n\n\tvar list = [];\n\tif ( __lua.isTable(table) ) {\n\t\tfor ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, i, table.numeric]);\n\t\tfor ( var idx in table.hash ) list.push([idx, idx, table.hash]);\n\t} else if ( __lua.isJSArray(table) ) {\n\t\tfor ( var i = 0; i < table.length; ++i ) list.push([i + 1, i, table]);\n\t} else {\n\t\tvar keys = Object.keys(table);\n\t\tfor ( var idx in keys ) list.push([keys[idx], keys[idx], table]);\n\t}\n\n\treturn __lua.makeMultiReturn(function(handle, cur) {\n\t\tif ( handle.length < 1 ) return null;\n\t\tvar nfo = handle.shift();\n\t\tvar k = nfo[0];\n\t\tvar v = nfo[2][nfo[1]];\n\t\treturn __lua.makeMultiReturn(k,v);\n\t}, list, null);\n};\n\nenv.ipairs = function ipairs(table) {\n\n\tvar mtf = __lua.lookupMetaTable(table, \"__ipairs\");\n\tif ( mtf !== null ) return mtf(table);\n\n\treturn __lua.makeMultiReturn(function ipairsitr(table, cur) {\n\t\tcur = cur + 1;\n\t\tif ( __lua.isJSArray(table) ) {\n\t\t\tif ( table.length < cur ) return null;\n\t\t\treturn __lua.makeMultiReturn(cur, table[cur-1]);\n\t\t} else if ( __lua.isTable(table) ) {\n\t\t\tif ( table.numeric[cur-1] === null || table.numeric[cur-1] === undefined ) return null;\n\t\t\treturn __lua.makeMultiReturn(cur, table.numeric[cur-1]);\n\t\t} else {\n\t\t\treturn table[cur-1];\n\t\t}\n\t}, table, 0);\n};\n\nenv.next = function next(table, cur) {\n\tif ( __lua.isTable(table) ) {\n\t\tvar list = [];\n\t\tfor ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, table.numeric[i]]);\n\t\tfor ( var tidx in table.hash ) list.push([tidx, table.hash[tidx]]);\n\t\tvar trigger = false;\n\t\tfor ( var i = 0; i < list.length; ++i ) {\n\t\t\tvar itm = list[i];\n\t\t\tif ( cur === null || cur === undefined || trigger ) {\n\t\t\t\tif ( itm[1] !== undefined && itm[1] !== null )\n\t\t\t\t\treturn __lua.makeMultiReturn(itm[0], itm[1]);\n\t\t\t}\n\t\t\tif ( cur === itm[0] ) trigger = true;\n\t\t}\n\n\t\treturn null;\n\t} else {\n\t\tvar listk = Object.keys(table);\n\t\tvar trigger = false;\n\t\tfor ( var i = 0; i < listk.length; ++i ) {\n\t\t\tvar idx = listk[i];\n\t\t\tvar sidx = idx;\n\t\t\tif ( typeof sidx == \"number\" ) sidx = sidx = 1;\n\t\t\tif ( cur === null || cur === undefined || trigger ) return __lua.makeMultiReturn(idx, table[sidx]);\n\t\t\tif ( cur === idx ) trigger = true;\n\t\t}\n\t\treturn null;\n\t}\n};\n\nenv.print = function print() { console.log.apply(console, arguments); };\nenv.pcall = this.__lua.pcall;\n\nenv.rawequals = function rawequals(a,b) { return a == b; };\nenv.rawget = function rawget(table, prop) { \n\tif ( table instanceof LuaTable ) {\n\t\tif ( typeof prop == \"number\" ) return table.numeric[prop - 1];\n\t\telse return table.hash[prop];\n\t}\n\treturn table[prop]; \n};\nenv.rawset = function rawset(table, prop, val) { \n\tif ( table instanceof LuaTable ) {\n\t\tif ( typeof prop == \"number\" ) return table.numeric[prop - 1] = val;\n\t\telse return table.hash[prop] = val;\n\t}\n\treturn table[prop] = val; \n};\n\nenv.something = function something(table) {\n\tvar array = [];\n\tvar idx = 1;\n\twhile ( table[idx] !== undefined ) {\n\t\tarray.push(table[idx]);\n\t\t++idx;\n\t}\n\treturn __lua.makeMultiReturn.apply(__lua, array);\n};\nenv.math = Math;\n\nenv.setmetatable = function setmetatable(target, meta) {\n\n\tObject.defineProperty(target, \"__metatable\", {value: meta, enumerable: false, configurable: true });\n\treturn target;\n};\n\nenv.getmetatable = function getmetatable(taget, meta) {\n\treturn taget.__metatable;\n};\n\nvar reduce = function reduce(arr, op) {\n\tif ( arr.length < 1 ) return undefined;\n\tvar val = arr[0];\n\tfor ( var i = 1; i < arr.length; ++i ) {\n\t\tval = op(val, arr[i]);\n\t}\n\treturn val;\n};\n\nenv.bit32 = {\n\tband: function band() { return reduce(arguments, function(a,b) { return a & b; }); },\n\tbor: function bor() { return reduce(arguments, function(a,b) { return a | b; }); },\n\tbxor: function bxor() { return reduce(arguments, function(a,b) { return a | b; }); },\n\n\trshift: function rshift(b, disp) { return b >> disp; }\n};\n\nenv.require = function require(what) {\n\tif ( what == \"bit\" ) return env.bit32;\n\tif ( what == \"bit32\" ) return env.bit32;\n\tthrow \"Module \" + waht + \" not found\";\n};\n\n__lua.mark(env);\n__lua.env = env;\nfor ( var idx in env ) this[idx] = env[idx];\n\n"

/***/ }),
/* 203 */
/***/ (function(module, exports) {

module.exports = "(function (root, factory) {\n  'use strict';\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = factory();\n  else if(typeof define === 'function' && define.amd)\n    define([], factory);\n  else if(typeof exports === 'object')\n    exports[\"__pythonRuntime\"] = factory();\n  else\n    root[\"__pythonRuntime\"] = factory();\n}(this, function() {\n  'use strict';\n  var pythonRuntime = {\n    internal: {\n      // Only used within runtime\n      isSeq: function (a) { return a && (a._type === \"list\" || a._type === \"tuple\"); },\n      slice: function (obj, start, end, step) {\n        var slice;\n        if ( typeof obj === 'string' ) slice = function(x,y) { return obj.substring(x,y); }\n        else slice = obj.slice.bind(obj);\n        if (!step) step = 1; // TODO: step === 0 is a runtime error\n        if (start == undefined) {\n          if (step < 0) start = obj.length - 1;\n          else start = 0;\n        } else if (start < 0) start += obj.length;\n        if (end == undefined) {\n          if (step < 0) end = -1;\n          else end = obj.length;\n        } else if (end < 0) end += obj.length;\n\n        var ret = new pythonRuntime.objects.list(), tmp, i;\n        if (step < 0) {\n          tmp = slice(end + 1, start + 1);\n          for (i = tmp.length - 1; i >= 0; i += step) ret.append(tmp[i]);\n        } else {\n          tmp = slice(start, end);\n          if (step === 1 && typeof tmp !== 'string') ret = pythonRuntime.utils.createList(tmp);\n          else for (i = 0; i < tmp.length; i += step) ret.append(tmp[i]);\n        }\n        if ( typeof obj === 'string' ) return ret.join('');\n        return ret;\n      },\n      isJSArray: Array.isArray || function(obj) {\n        return toString.call(obj) === '[object Array]';\n      }\n    },\n\n    utils: {\n      createDict: function () {\n        var ret = new pythonRuntime.objects.dict();\n        if (arguments.length === 1 && arguments[0] instanceof Object)\n          for (var k in arguments[0]) ret[k] = arguments[0][k];\n        else\n          throw TypeError(\"createDict expects a single JavaScript object\");\n        return ret;\n      },\n      createParamsObj: function () {\n        // In: expr, expr, ..., {id:expr, __kwp:true}, {id:expr, __kwp:true}, ...\n        // Out: {formals:[expr, expr, ...], keywords:{id:expr, id:expr, ...}}\n        var params = { formals: new pythonRuntime.objects.list(), keywords: new PythonDict() };\n        for (var i = 0; i < arguments.length; i++) {\n          if (arguments[i] && arguments[i].__kwp === true) {\n            for (var k in arguments[i])\n              if (k !== '__kwp') params.keywords[k] = arguments[i][k];\n          }\n          else params.formals.push(arguments[i]);\n        }\n        return params;\n      },\n      convertToList: function (list) {\n        Object.defineProperties(list, pythonRuntime.utils.listPropertyDescriptor);\n        return list;\n      },\n      convertToDict: function (dict) {\n        Object.defineProperties(dict, pythonRuntime.utils.dictPropertyDescriptor);\n        return dict;\n      }, \n      listPropertyDescriptor: {\n          \"_type\": {\n            value: 'list',\n            writable: false,\n            enumerable: false\n          },\n          \"_isPython\": {\n            value: true,\n            writable: false,\n            enumerable: false\n          },\n          \"append\": {\n            value: function (x) {\n              this.push(x);\n            },\n            enumerable: false\n          },\n          \"clear\": {\n            value: function () {\n              this.splice(0, this.length);\n            },\n            enumerable: false\n          },\n          \"copy\": {\n            value: function () {\n              return this.slice(0);\n            },\n            enumerable: false\n          },\n          \"count\": {\n            value: function (x) {\n              var c = 0;\n              for (var i = 0; i < this.length; i++)\n                if (this[i] === x) c++;\n              return c;\n            },\n            enumerable: false\n          },\n          \"equals\": {\n            value: function (x) {\n              try {\n                if (this.length !== x.length) return false;\n                for (var i = 0; i < this.length; i++) {\n                  if (this[i].hasOwnProperty(\"equals\")) {\n                    if (!this[i].equals(x[i])) return false;\n                  } else if (this[i] !== x[i]) return false;\n                }\n                return true;\n              }\n              catch (e) { }\n              return false;\n            },\n            enumerable: false\n          },\n          \"extend\": {\n            value: function (L) {\n              for (var i = 0; i < L.length; i++) this.push(L[i]);\n            },\n            enumerable: false\n          },\n          \"index\": {\n            value: function (x) {\n              return this.indexOf(x);\n            },\n            enumerable: false\n          },\n          \"indexOf\": {\n            value: function (x, fromIndex) {\n              try {\n                for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {\n                  if (this[i].hasOwnProperty(\"equals\")) {\n                    if (this[i].equals(x)) return i;\n                  } else if (this[i] === x) return i;\n                }\n              }\n              catch (e) { }\n              return -1;\n            },\n            enumerable: false\n          },\n          \"insert\": {\n            value: function (i, x) {\n              this.splice(i, 0, x);\n            },\n            enumerable: false\n          },\n          \"pop\": {\n            value: function (i) {\n              if (arguments.length<1) i = this.length - 1;\n              var item = this[i];\n              this.splice(i, 1);\n              return item;\n            },\n            enumerable: false\n          },\n          \"_pySlice\": {\n            value: function (start, end, step) {\n              return pythonRuntime.internal.slice(this, start, end, step);\n            },\n            enumerable: false\n          },\n          \"remove\": {\n            value: function (x) {\n              this.splice(this.indexOf(x), 1);\n            },\n            enumerable: false\n          },\n          \"sort\": {\n            value: function(x, reverse) {\n              var list2 = this.slice(0);\n              var apply_key = function(a, numerical) {\n                var list3 = list2.map(x);\n                // construct a dict that maps the listay before and after the map\n                var mapping = {};\n                for(var i in list3) mapping[list3[i]] = list2[i];\n                if(numerical)\n                  list3.sort(function(a, b) { return a - b; });\n                else\n                  list3.sort();\n                for(var i in a) a[i] = mapping[list3[i]];\n              };\n              for(var i in this) {\n                if(typeof this[i] !== 'number' || !isFinite(this[i])) {\n                  if(typeof x != 'undefined') {\n                    apply_key(this, false);\n                  }\n                  else {\n                    list2.sort();\n                    for (var j in this) this[j] = list2[j];\n                  }\n                  if(reverse)\n                    this.reverse();\n                  return;\n                }\n              }\n              if(typeof x != 'undefined') {\n                apply_key(this, true);\n              }\n              else {\n                list2.sort(function(a, b) { return a - b; });\n                for(var i in this) this[i] = list2[i];\n              }\n              if(reverse)\n                this.reverse();\n            },\n            enumerable: false\n          },\n          \"toString\": {\n            value: function () {\n              return '[' + this.join(', ') + ']';\n            },\n            enumerable: false\n          }\n      },\n      createList: function () {\n        var ret = new pythonRuntime.objects.list();\n        if (arguments.length === 1 && arguments[0] instanceof Array)\n          for (var i in arguments[0]) ret.push(arguments[0][i]);\n        else\n          for (var i in arguments) ret.push(arguments[i]);\n        return ret;\n      },\n      dictPropertyDescriptor: {\n        \"_type\": {\n          value: 'dict',\n          writable: false\n        },\n        \"_isPython\": {\n          value: true,\n          enumerable: false\n        },\n        \"items\": {\n          value: function () {\n            var items = new pythonRuntime.objects.list();\n            for (var k in this) items.append(new pythonRuntime.objects.tuple(k, this[k]));\n            return items;\n          },\n          enumerable: false\n        },\n        \"length\": {\n          get: function () {\n            return Object.keys(this).length;\n          },\n          enumerable: false\n        },\n        \"clear\": {\n          value: function () {\n            for (var i in this) delete this[i];\n          },\n          enumerable: false\n        },\n        \"get\": {\n          value: function (key, def) {\n            if (key in this) return this[key];\n            else if (def !== undefined) return def;\n            return null;\n          },\n          enumerable: false\n        },\n        \"keys\": {\n          value: function () {\n            return Object.keys(this);\n          },\n          enumerable: false\n        },\n        \"pop\": {\n          value: function (key, def) {\n            var value;\n            if (key in this) {\n              value = this[key];\n              delete this[key];\n            } else if (def !== undefined) value = def;\n            else return new Error(\"KeyError\");\n            return value;\n          },\n          enumerable: false\n        }, \"values\": {\n          value: function () {\n            var values = new pythonRuntime.objects.list();\n            for (var key in this) values.append(this[key]);\n            return values;\n          },\n          enumerable: false\n        }\n      }\n    },\n    ops: {\n      add: function (a, b) {\n        if (typeof a === 'object' && pythonRuntime.internal.isSeq(a) && pythonRuntime.internal.isSeq(b)) {\n          if (a._type !== b._type)\n            throw TypeError(\"can only concatenate \" + a._type + \" (not '\" + b._type + \"') to \" + a._type);\n          var ret;\n          if (a._type === 'list') ret = new pythonRuntime.objects.list();\n          else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();\n          if (ret) {\n            for (var i = 0; i < a.length; i++) ret.push(a[i]);\n            for (var i = 0; i < b.length; i++) ret.push(b[i]);\n            return ret;\n          }\n        }\n        return a + b;\n      },\n      in: function (a, b, n) {\n        var r = b.hasOwnProperty('indexOf') ? b.indexOf(a) >= 0 : a in b;\n        return n ? !r : r;\n      },\n      multiply: function (a, b) {\n        // TODO: non-sequence operand must be an integer\n        if ( typeof a === 'object' ) {\n          if (pythonRuntime.internal.isSeq(a) && !isNaN(parseInt(b))) {\n            var ret;\n            if (a._type === 'list') ret = new pythonRuntime.objects.list();\n            else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();\n            if (ret) {\n              for (var i = 0; i < b; i++)\n                for (var j = 0; j < a.length; j++) ret.push(a[j]);\n              return ret;\n            }\n          } else if (pythonRuntime.internal.isSeq(b) && !isNaN(parseInt(a))) {\n            var ret;\n            if (b._type === 'list') ret = new pythonRuntime.objects.list();\n            else if (b._type === 'tuple') ret = new pythonRuntime.objects.tuple();\n            if (ret) {\n              for (var i = 0; i < a; i++)\n                for (var j = 0; j < b.length; j++) ret.push(b[j]);\n              return ret;\n            }\n          }\n        }\n        return a * b;\n      },\n      subscriptIndex: function (o, i) {\n        if ( i >= 0 ) return i;\n        if ( pythonRuntime.internal.isSeq(o) ) return o.length + i;\n        if ( pythonRuntime.internal.isJSArray(o) ) return o.length + i;\n        if ( typeof o === \"string\" ) return o.length + i;\n        return i;\n      }\n    },\n\n    objects: {\n      dict: function () {\n        var obj = new PythonDict();\n        for (var i = 0; i < arguments.length; ++i ) obj[arguments[i][0]] = arguments[i][1];\n        return obj;\n      },\n      list: function () {\n        var arr = [];\n        arr.push.apply(arr, arguments);\n        pythonRuntime.utils.convertToList(arr);\n        return arr;\n      },\n      tuple: function () {\n        var arr = [];\n        arr.push.apply(arr, arguments);\n        Object.defineProperty(arr, \"_type\",\n        {\n          get: function () { return 'tuple'; },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"_isPython\",\n        {\n          get: function () { return true; },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"count\",\n        {\n          value: function (x) {\n            var c = 0;\n            for (var i = 0; i < this.length; i++)\n              if (this[i] === x) c++;\n            return c;\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"equals\",\n        {\n          value: function (x) {\n            try {\n              if (this.length !== x.length) return false;\n              for (var i = 0; i < this.length; i++) {\n                if (this[i].hasOwnProperty(\"equals\")) {\n                  if (!this[i].equals(x[i])) return false;\n                } else if (this[i] !== x[i]) return false;\n              }\n              return true;\n            }\n            catch (e) { }\n            return false;\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"index\",\n        {\n          value: function (x) {\n            return this.indexOf(x);\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"indexOf\",\n        {\n          value: function (x, fromIndex) {\n            try {\n              for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {\n                if (this[i].hasOwnProperty(\"equals\")) {\n                  if (this[i].equals(x)) return i;\n                } else if (this[i] === x) return i;\n              }\n            }\n            catch (e) { }\n            return -1;\n          },\n          enumerable: false\n        });\n        Object.defineProperty(arr, \"_pySlice\",\n        {\n          value: function (start, end, step) { \n            return pythonRuntime.internal.slice(this, start, end, step);\n          },\n            enumerable: false\n        });\n        Object.defineProperty(arr, \"toString\",\n        {\n          value: function () {\n            var s = '(' + this.join(', ');\n            if (this.length === 1) s += ',';\n            s += ')';\n            return s;\n          },\n          enumerable: false\n        });\n        return arr;\n      }\n    },\n\n    // Python built-in functions\n\n    functions: {\n      abs: function(x) {\n        return Math.abs(x);\n      },\n      all: function(iterable) {\n        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) !== true) return false;\n        return true;\n      },\n      any: function(iterable) {\n        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) === true) return true;\n        return false;\n      },\n      ascii: function(obj) {\n        var s = pythonRuntime.functions.repr(obj),\n            asc = \"\",\n            code;\n        for (var i = 0; i < s.length; i++) {\n          code = s.charCodeAt(i);\n          if (code <= 127) asc += s[i];\n          else if (code <= 0xFF) asc += \"\\\\x\" + code.toString(16);\n          else if (0xD800 <= code && code <= 0xDBFF) { // UCS-2 for the astral chars\n            // if (i+1 >= s.length) throw \"High surrogate not followed by low surrogate\"; // Is this needed?\n            code = ((code-0xD800)*0x400)+(s.charCodeAt(++i)-0xDC00)+0x10000;\n            asc += \"\\\\U\" + (\"000\"+code.toString(16)).slice(-8);\n          } else if (code <= 0xFFFF) asc += \"\\\\u\" + (\"0\"+code.toString(16)).slice(-4);\n          else if (code <= 0x10FFFF) asc += \"\\\\U\" + (\"000\"+code.toString(16)).slice(-8);\n          else; // Invalid value, should probably throw something. It should never get here though as strings shouldn't contain them in the first place\n        }\n        return asc;\n      },\n      bool: function(x) {\n        return !(x === undefined || // No argument\n                 x === null || // None\n                 x === false || // False\n                 x === 0 || // Zero\n                 x.length === 0 || // Empty Sequence\n                 // TODO: Empty Mapping, needs more support for python mappings first\n                 (x.__bool__ !== undefined && x.__bool__() === false) || // If it has bool conversion defined\n                 (x.__len__ !== undefined && (x.__len__() === false || x.__len__() === 0))); // If it has length conversion defined\n      },\n      chr: function(i) {\n        return String.fromCharCode(i); // TODO: Error code for not 0 <= i <= 1114111\n      },\n      divmod: function(a, b) {\n        return pythonRuntime.objects.tuple(Math.floor(a/b), a%b);\n      },\n      enumerate: function(iterable, start) {\n        start = start || 0;\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) ret.push(new pythonRuntime.objects.tuple(start++, iterable[i]));\n        return ret;\n      },\n      filter: function(fn, iterable) {\n        fn = fn || function () { return true; };\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) if (fn(iterable[i])) ret.push(iterable[i]);\n        return ret;\n      },\n      float: function(x) {\n        if (x === undefined) return 0.0;\n        else if (typeof x == \"string\") { // TODO: Fix type check\n          x = x.trim().toLowerCase();\n          if ((/^[+-]?inf(inity)?$/i).exec(x) !== null) return Infinity*(x[0]===\"-\"?-1:1);\n          else if ((/^nan$/i).exec(x) !== null) return NaN;\n          else return parseFloat(x);\n        } else if (typeof x == \"number\") { // TODO: Fix type check\n          return x; // TODO: Get python types working right so we can return an actual float\n        } else {\n          if (x.__float__ !== undefined) return x.__float__();\n          else return null; // TODO: Throw TypeError: float() argument must be a string or a number, not '<type of x>'\n        }\n      },\n      hex: function(x) {\n        return x.toString(16);\n      },\n      int: function (s) {\n        return parseInt(s);\n      },\n      len: function (o) {\n        return o.length;\n      },\n      list: function (iterable) {\n        var ret = new pythonRuntime.objects.list();\n        if ( arguments.length == 0 ) return ret;\n        if ( arguments.length > 1 ) throw new TypeError('list() takes at most 1 argument (' + arguments.length + ' given)');\n        if (iterable instanceof Array) for (var i in iterable) ret.push(iterable[i]);\n        else for (var i in iterable) ret.push(i);\n        return ret;\n      },\n      map: function(fn, iterable) {\n        // TODO: support additional iterables passed\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) ret.push(fn(iterable[i]));\n        return ret;\n      },\n      max: function(arg1, arg2) {\n        // TODO: support optional keyword-only arguments\n        // TODO: empty iterable raises Python ValueError\n        if (!arg2) { // iterable\n          var max = null;\n          for (var i in arg1) if (max === null || arg1[i] > max) max = arg1[i];\n          return max;\n        } else return arg1 >= arg2 ? arg1 : arg2;\n      },\n      min: function(arg1, arg2) {\n        // TODO: support optional keyword-only arguments\n        // TODO: empty iterable raises Python ValueError\n        if (!arg2) { // iterable\n          var max = null;\n          for (var i in arg1) if (max === null || arg1[i] < max) max = arg1[i];\n          return max;\n        } else return arg1 <= arg2 ? arg1 : arg2;\n      },\n      oct: function(x) {\n        return x.toString(8);\n      },\n      ord: function(c) {\n        return c.charCodeAt(0);\n      },\n      pow: function(x, y, z) {\n        return z ? Math.pow(x, y) % z : Math.pow(x, y);\n      },\n      print: function () {\n        var s = \"\";\n        for (var i = 0; i < arguments.length; i++)\n          s += i === 0 ? arguments[i] : \" \" + arguments[i];\n        console.log(s);\n      },\n      range: function (start, stop, step) {\n        if (stop === undefined) {\n          stop = start;\n          start = 0;\n          step = 1;\n        }\n        else if (step === undefined) step = 1;\n        var len = ~~((stop - start) / step); //~~ is a fast floor\n        if ( len < 0 ) return pythonRuntime.utils.convertToList([]);\n        var r = new Array(len);\n        var element = 0;\n\n        var i = start;\n        while (i < stop && step > 0 || i > stop && step < 0) {\n          r[element++] = i;\n          i += step;\n        }\n\n        pythonRuntime.utils.convertToList(r);\n        return r;\n      },\n      repr: function (obj) {\n        if (typeof obj === 'string') return \"'\" + obj + \"'\"; // TODO: Patch until typesystem comes up.\n        if (obj.__repr__ !== undefined) return obj.__repr__();\n        else if (obj.__class__ !== undefined && obj.__class__.module !== undefined && obj.__class__.__name__) {\n          return '<'+obj.__class__.__module__+'.'+obj.__class__.__name__+' object>';\n        } else return obj.toString(); // Raise a please report warning here, we should never reach this piece of code\n      },\n      reversed: function (seq) {\n        var ret = new pythonRuntime.objects.list();\n        for (var i in seq) ret.push(seq[i]);\n        return ret.reverse();\n      },\n      round: function (num, ndigits) {\n        if (ndigits) {\n          var scale = Math.pow(10, ndigits);\n          return Math.round(num * scale) / scale;\n        }\n        return Math.round(num);\n      },\n      sorted: function (iterable, key, reverse) {\n        var ret = new pythonRuntime.objects.list();\n        for (var i in iterable) ret.push(iterable[i]);\n        if(key) ret.sort(key); else ret.sort();\n        if (reverse) ret.reverse();\n        return ret;\n      },\n      str: function (obj) {\n        return obj.toString();\n      },\n      sum: function (iterable, start) {\n        // TODO: start can't be a string\n        var ret = start || 0;\n        for (var i in iterable) ret += iterable[i];\n        return ret;\n      },\n      tuple: function (iterable) {\n        var ret = new pythonRuntime.objects.tuple();\n        for (var i in iterable) ret.push(iterable[i]);\n        return ret;\n      }\n    },\n\n    // Python imports\n    // TODO: from x import y, z\n\n    imports: {\n      random: {\n        random: function () { return Math.random(); }\n      }\n    }\n  };\n\n  function PythonDict() {\n\n  }\n\n  Object.defineProperties(PythonDict.prototype, pythonRuntime.utils.dictPropertyDescriptor);\n  return pythonRuntime;\n}));\n\n"

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g =
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this;

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(205);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86), __webpack_require__(55)))

/***/ }),
/* 206 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(207);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(206);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86), __webpack_require__(55)))

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./ast-css/index.js": 116,
	"./lang-coffeescript/index.js": 117,
	"./lang-lua/index.js": 118,
	"./lang-python/index.js": 120
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 209;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = parse;

var re_name = /^(?:\\.|[\w\-\u00c0-\uFFFF])+/,
    re_escape = /\\([\da-f]{1,6}\s?|(\s)|.)/ig,
    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87
    re_attr = /^\s*((?:\\.|[\w\u00c0-\uFFFF\-])+)\s*(?:(\S?)=\s*(?:(['"])(.*?)\3|(#?(?:\\.|[\w\u00c0-\uFFFF\-])*)|)|)\s*(i)?\]/;

var actionTypes = {
	__proto__: null,
	"undefined": "exists",
	"":  "equals",
	"~": "element",
	"^": "start",
	"$": "end",
	"*": "any",
	"!": "not",
	"|": "hyphen"
};

var simpleSelectors = {
	__proto__: null,
	">": "child",
	"<": "parent",
	"~": "sibling",
	"+": "adjacent"
};

var attribSelectors = {
	__proto__: null,
	"#": ["id", "equals"],
	".": ["class", "element"]
};

//pseudos, whose data-property is parsed as well
var unpackPseudos = {
	__proto__: null,
	"has": true,
	"not": true,
	"matches": true
};

var stripQuotesFromPseudos = {
	__proto__: null,
	"contains": true,
	"icontains": true
};

var quotes = {
	__proto__: null,
	"\"": true,
	"'": true
};

//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139
function funescape( _, escaped, escapedWhitespace ) {
	var high = "0x" + escaped - 0x10000;
	// NaN means non-codepoint
	// Support: Firefox
	// Workaround erroneous numeric interpretation of +"0x"
	return high !== high || escapedWhitespace ?
		escaped :
		// BMP codepoint
		high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
}

function unescapeCSS(str){
	return str.replace(re_escape, funescape);
}

function isWhitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function parse(selector, options){
	var subselects = [];

	selector = parseSelector(subselects, selector + "", options);

	if(selector !== ""){
		throw new SyntaxError("Unmatched selector: " + selector);
	}

	return subselects;
}

function parseSelector(subselects, selector, options){
	var tokens = [],
		sawWS = false,
		data, firstChar, name, quot;

	function getName(){
		var sub = selector.match(re_name)[0];
		selector = selector.substr(sub.length);
		return unescapeCSS(sub);
	}

	function stripWhitespace(start){
		while(isWhitespace(selector.charAt(start))) start++;
		selector = selector.substr(start);
	}

	stripWhitespace(0);

	while(selector !== ""){
		firstChar = selector.charAt(0);

		if(isWhitespace(firstChar)){
			sawWS = true;
			stripWhitespace(1);
		} else if(firstChar in simpleSelectors){
			tokens.push({type: simpleSelectors[firstChar]});
			sawWS = false;

			stripWhitespace(1);
		} else if(firstChar === ","){
			if(tokens.length === 0){
				throw new SyntaxError("empty sub-selector");
			}
			subselects.push(tokens);
			tokens = [];
			sawWS = false;
			stripWhitespace(1);
		} else {
			if(sawWS){
				if(tokens.length > 0){
					tokens.push({type: "descendant"});
				}
				sawWS = false;
			}

			if(firstChar === "*"){
				selector = selector.substr(1);
				tokens.push({type: "universal"});
			} else if(firstChar in attribSelectors){
				selector = selector.substr(1);
				tokens.push({
					type: "attribute",
					name: attribSelectors[firstChar][0],
					action: attribSelectors[firstChar][1],
					value: getName(),
					ignoreCase: false
				});
			} else if(firstChar === "["){
				selector = selector.substr(1);
				data = selector.match(re_attr);
				if(!data){
					throw new SyntaxError("Malformed attribute selector: " + selector);
				}
				selector = selector.substr(data[0].length);
				name = unescapeCSS(data[1]);

				if(
					!options || (
						"lowerCaseAttributeNames" in options ?
							options.lowerCaseAttributeNames :
							!options.xmlMode
					)
				){
					name = name.toLowerCase();
				}

				tokens.push({
					type: "attribute",
					name: name,
					action: actionTypes[data[2]],
					value: unescapeCSS(data[4] || data[5] || ""),
					ignoreCase: !!data[6]
				});

			} else if(firstChar === ":"){
				if(selector.charAt(1) === ":"){
					selector = selector.substr(2);
					tokens.push({type: "pseudo-element", name: getName().toLowerCase()});
					continue;
				}

				selector = selector.substr(1);

				name = getName().toLowerCase();
				data = null;

				if(selector.charAt(0) === "("){
					if(name in unpackPseudos){
						quot = selector.charAt(1);
						var quoted = quot in quotes;

						selector = selector.substr(quoted + 1);

						data = [];
						selector = parseSelector(data, selector, options);

						if(quoted){
							if(selector.charAt(0) !== quot){
								throw new SyntaxError("unmatched quotes in :" + name);
							} else {
								selector = selector.substr(1);
							}
						}

						if(selector.charAt(0) !== ")"){
							throw new SyntaxError("missing closing parenthesis in :" + name + " " + selector);
						}

						selector = selector.substr(1);
					} else {
						var pos = 1, counter = 1;

						for(; counter > 0 && pos < selector.length; pos++){
							if(selector.charAt(pos) === "(") counter++;
							else if(selector.charAt(pos) === ")") counter--;
						}

						if(counter){
							throw new SyntaxError("parenthesis not matched");
						}

						data = selector.substr(1, pos - 2);
						selector = selector.substr(pos);

						if(name in stripQuotesFromPseudos){
							quot = data.charAt(0);

							if(quot === data.slice(-1) && quot in quotes){
								data = data.slice(1, -1);
							}

							data = unescapeCSS(data);
						}
					}
				}

				tokens.push({type: "pseudo", name: name, data: data});
			} else if(re_name.test(selector)){
				name = getName();

				if(!options || ("lowerCaseTags" in options ? options.lowerCaseTags : !options.xmlMode)){
					name = name.toLowerCase();
				}

				tokens.push({type: "tag", name: name});
			} else {
				if(tokens.length && tokens[tokens.length - 1].type === "descendant"){
					tokens.pop();
				}
				addToken(subselects, tokens);
				return selector;
			}
		}
	}

	addToken(subselects, tokens);

	return selector;
}

function addToken(subselects, tokens){
	if(subselects.length > 0 && tokens.length === 0){
		throw new SyntaxError("empty sub-selector");
	}

	subselects.push(tokens);
}


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {// Generated by CoffeeScript 2.0.0-beta9-dev
var any, assignment, beingDeclared, cache$, cache$1, collectIdentifiers, concat, concatMap, CS, declarationsNeeded, declarationsNeededRecursive, defaultRules, difference, divMod, dynamicMemberAccess, enabledHelpers, envEnrichments, exports, expr, extractNumber, extractStaticRange, fn, foldl, foldl1, forceBlock, generateMutatingWalker, generateSoak, genSym, h, hasSoak, helperNames, helpers, inlineHelpers, intersect, isIdentifierName, isScopeBoundary, JS, jsReserved, makeReturn, makeVarDeclaration, map, mapChildNodes, memberAccess, needsCaching, nub, owns, partition, span, stmt, union, usedAsExpression, variableDeclarations;
cache$ = __webpack_require__(56);
any = cache$.any;
concat = cache$.concat;
concatMap = cache$.concatMap;
difference = cache$.difference;
divMod = cache$.divMod;
foldl = cache$.foldl;
foldl1 = cache$.foldl1;
intersect = cache$.intersect;
map = cache$.map;
nub = cache$.nub;
owns = cache$.owns;
partition = cache$.partition;
span = cache$.span;
union = cache$.union;
cache$1 = __webpack_require__(114);
beingDeclared = cache$1.beingDeclared;
usedAsExpression = cache$1.usedAsExpression;
envEnrichments = cache$1.envEnrichments;
CS = __webpack_require__(57);
JS = __webpack_require__(212);
exports = null != ('undefined' !== typeof module && null != module ? module.exports : void 0) ? 'undefined' !== typeof module && null != module ? module.exports : void 0 : this;
jsReserved = [
  'break',
  'case',
  'catch',
  'class',
  'const',
  'continue',
  'debugger',
  'default',
  'delete',
  'do',
  'else',
  'enum',
  'export',
  'extends',
  'false',
  'finally',
  'for',
  'function',
  'if',
  'implements',
  'import',
  'in',
  'instanceof',
  'interface',
  'let',
  'native',
  'new',
  'null',
  'package',
  'private',
  'protected',
  'public',
  'return',
  'static',
  'super',
  'switch',
  'this',
  'throw',
  'true',
  'try',
  'typeof',
  'var',
  'void',
  'while',
  'with',
  'yield',
  'arguments',
  'eval'
];
mapChildNodes = function (node, mapper, reducer, identity, opts) {
  var child, childName;
  if (null == opts)
    opts = {};
  if (null != opts.listReducer)
    opts.listReducer;
  else
    opts.listReducer = reducer;
  if (null != opts.listIdentity)
    opts.listIdentity;
  else
    opts.listIdentity = identity;
  return foldl(identity, function (accum$) {
    for (var i$ = 0, length$ = node.childNodes.length; i$ < length$; ++i$) {
      childName = node.childNodes[i$];
      if (!(null != node[childName]))
        continue;
      accum$.push(in$(childName, node.listMembers) ? foldl(opts.listIdentity, function (accum$1) {
        for (var i$1 = 0, length$1 = node[childName].length; i$1 < length$1; ++i$1) {
          child = node[childName][i$1];
          if (!('undefined' !== typeof child && null != child))
            continue;
          accum$1.push(mapper(child, childName));
        }
        return accum$1;
      }.call(this, []), opts.listReducer) : mapper(node[childName], childName));
    }
    return accum$;
  }.call(this, []), reducer);
};
genSym = function () {
  var genSymCounter;
  genSymCounter = 0;
  return function (pre) {
    return new JS.GenSym(pre, ++genSymCounter);
  };
}();
stmt = function (e) {
  var walk;
  if (!(null != e))
    return e;
  if (e.isStatement) {
    return e;
  } else if (e['instanceof'](JS.SequenceExpression)) {
    walk = function (seq) {
      return concatMap(seq.expressions, function (e) {
        if (e['instanceof'](JS.SequenceExpression)) {
          return walk(e);
        } else {
          return [stmt(e)];
        }
      });
    };
    return new JS.BlockStatement(walk(e));
  } else if (e['instanceof'](JS.ConditionalExpression)) {
    return new JS.IfStatement(expr(e.test), stmt(e.consequent), stmt(e.alternate));
  } else {
    return new JS.ExpressionStatement(e);
  }
};
expr = function (s) {
  var accum, alternate, block, consequent, iife, lastExpression, push;
  if (!(null != s))
    return s;
  if (s.isExpression) {
    return s;
  } else if (s['instanceof'](JS.BlockStatement)) {
    switch (s.body.length) {
    case 0:
      return helpers.undef();
    case 1:
      return expr(s.body[0]);
    default:
      return new JS.SequenceExpression(map(s.body, expr));
    }
  } else if (s['instanceof'](JS.ExpressionStatement)) {
    return s.expression;
  } else if (s['instanceof'](JS.ThrowStatement)) {
    return new JS.CallExpression(new JS.FunctionExpression(null, [], forceBlock(s)), []);
  } else if (s['instanceof'](JS.IfStatement)) {
    consequent = expr(null != s.consequent ? s.consequent : helpers.undef());
    alternate = expr(null != s.alternate ? s.alternate : helpers.undef());
    return new JS.ConditionalExpression(s.test, consequent, alternate);
  } else if (s['instanceof'](JS.ForInStatement, JS.ForStatement, JS.WhileStatement)) {
    accum = genSym('accum');
    push = function (x) {
      return stmt(new JS.CallExpression(memberAccess(accum, 'push'), [x]));
    };
    s.body = forceBlock(s.body);
    if (s.body.body.length) {
      lastExpression = s.body.body.slice(-1)[0];
      if (!lastExpression['instanceof'](JS.ThrowStatement))
        s.body.body[s.body.body.length - 1] = push(expr(lastExpression));
    } else {
      s.body.body.push(push(helpers.undef()));
    }
    block = new JS.BlockStatement([
      s,
      new JS.ReturnStatement(accum)
    ]);
    iife = new JS.FunctionExpression(null, [accum], block);
    return new JS.CallExpression(memberAccess(iife.g(), 'call'), [
      new JS.ThisExpression,
      new JS.ArrayExpression([])
    ]);
  } else if (s['instanceof'](JS.SwitchStatement, JS.TryStatement)) {
    block = new JS.BlockStatement([makeReturn(s)]);
    iife = new JS.FunctionExpression(null, [], block);
    return new JS.CallExpression(memberAccess(iife.g(), 'call'), [new JS.ThisExpression]);
  } else {
    throw new Error('expr: Cannot use a ' + s.type + ' as a value');
  }
};
isScopeBoundary = function (node) {
  return node['instanceof'](JS.FunctionExpression, JS.FunctionDeclaration) && !node.generated;
};
makeReturn = function (node) {
  var stmts;
  if (!(null != node))
    return new JS.ReturnStatement;
  if (node['instanceof'](JS.BlockStatement)) {
    return new JS.BlockStatement([].slice.call(node.body.slice(0, -1)).concat([makeReturn(node.body.slice(-1)[0])]));
  } else if (node['instanceof'](JS.SequenceExpression)) {
    return new JS.SequenceExpression([].slice.call(node.expressions.slice(0, -1)).concat([makeReturn(node.expressions.slice(-1)[0])]));
  } else if (node['instanceof'](JS.IfStatement)) {
    return new JS.IfStatement(node.test, makeReturn(node.consequent), null != node.alternate ? makeReturn(node.alternate) : null);
  } else if (node['instanceof'](JS.SwitchStatement)) {
    return new JS.SwitchStatement(node.discriminant, map(node.cases, makeReturn));
  } else if (node['instanceof'](JS.SwitchCase)) {
    if (!node.consequent.length)
      return node;
    stmts = node.consequent.slice(-1)[0]['instanceof'](JS.BreakStatement) ? node.consequent.slice(0, -1) : node.consequent;
    return new JS.SwitchCase(node.test, [].slice.call(stmts.slice(0, -1)).concat([makeReturn(stmts.slice(-1)[0])]));
  } else if (node['instanceof'](JS.TryStatement)) {
    return new JS.TryStatement(makeReturn(node.block), map(node.handlers, makeReturn), null != node.finalizer ? makeReturn(node.finalizer) : null);
  } else if (node['instanceof'](JS.CatchClause)) {
    return new JS.CatchClause(node.param, makeReturn(node.body));
  } else if (node['instanceof'](JS.ThrowStatement, JS.ReturnStatement, JS.BreakStatement, JS.ContinueStatement, JS.DebuggerStatement)) {
    return node;
  } else if (node['instanceof'](JS.UnaryExpression) && node.operator === 'void') {
    return new JS.ReturnStatement;
  } else {
    return new JS.ReturnStatement(expr(node));
  }
};
generateMutatingWalker = function (fn) {
  return function (node) {
    var args, mapper, reducer;
    args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
    mapper = function (child, nameInParent) {
      return [
        nameInParent,
        fn.apply(child, args)
      ];
    };
    reducer = function (parent, param$) {
      var cache$2, name, newChild;
      {
        cache$2 = param$;
        name = cache$2[0];
        newChild = cache$2[1];
      }
      parent[name] = newChild;
      return parent;
    };
    return mapChildNodes(node, mapper, reducer, node, {
      listReducer: function (param$, param$1) {
        var _, accum, cache$2, cache$3, name, newChild;
        {
          cache$2 = param$;
          _ = cache$2[0];
          accum = cache$2[1];
        }
        {
          cache$3 = param$1;
          name = cache$3[0];
          newChild = cache$3[1];
        }
        return [
          name,
          accum.concat(newChild)
        ];
      },
      listIdentity: [
        null,
        []
      ]
    });
  };
};
declarationsNeeded = function (node) {
  if (!(null != node))
    return [];
  if (node['instanceof'](JS.AssignmentExpression) && node.operator === '=' && node.left['instanceof'](JS.Identifier)) {
    return [node.left.name];
  } else if (node['instanceof'](JS.ForInStatement) && node.left['instanceof'](JS.Identifier)) {
    return [node.left.name];
  } else {
    return [];
  }
};
declarationsNeededRecursive = function (node) {
  if (!(null != node))
    return [];
  if (isScopeBoundary(node)) {
    return [];
  } else {
    return union(declarationsNeeded(node), mapChildNodes(node, declarationsNeededRecursive, function (a, b) {
      return a.concat(b);
    }, []));
  }
};
variableDeclarations = function (node) {
  if (!(null != node))
    return [];
  if (node['instanceof'](JS.FunctionDeclaration)) {
    return [node.id];
  } else if (isScopeBoundary(node)) {
    return [];
  } else if (node['instanceof'](JS.VariableDeclarator)) {
    return [node.id];
  } else {
    return mapChildNodes(node, variableDeclarations, function (a, b) {
      return a.concat(b);
    }, []);
  }
};
collectIdentifiers = function (node) {
  return nub(function () {
    switch (false) {
    case !!(null != node):
      return [];
    case !node['instanceof'](JS.Identifier):
      return [node.name];
    case !(node['instanceof'](JS.MemberExpression) && !node.computed):
      return collectIdentifiers(node.object);
    default:
      return mapChildNodes(node, collectIdentifiers, function (a, b) {
        return a.concat(b);
      }, []);
    }
  }.call(this));
};
needsCaching = function (node) {
  if (!(null != node))
    return false;
  return envEnrichments(node, []).length > 0 || node['instanceof'](CS.FunctionApplications, CS.DoOp, CS.NewOp, CS.ArrayInitialiser, CS.ObjectInitialiser, CS.RegExp, CS.HeregExp, CS.PreIncrementOp, CS.PostIncrementOp, CS.PreDecrementOp, CS.PostDecrementOp, CS.Range) || mapChildNodes(node, needsCaching, function (a, b) {
    return a || b;
  }, false);
};
forceBlock = function (node) {
  if (!(null != node))
    return new JS.BlockStatement([]);
  node = stmt(node);
  if (node['instanceof'](JS.BlockStatement)) {
    return node;
  } else {
    return new JS.BlockStatement([node]);
  }
};
makeVarDeclaration = function (vars) {
  var decls, v;
  vars.sort(function (a, b) {
    a = a.name.toLowerCase();
    b = b.name.toLowerCase();
    if (a < b) {
      return -1;
    } else if (a > b) {
      return 1;
    } else {
      return 0;
    }
  });
  decls = function (accum$) {
    for (var i$ = 0, length$ = vars.length; i$ < length$; ++i$) {
      v = vars[i$];
      accum$.push(new JS.VariableDeclarator(v));
    }
    return accum$;
  }.call(this, []);
  return new JS.VariableDeclaration('var', decls);
};
isIdentifierName = function (name) {
  return !in$(name, jsReserved) && /^[$_a-z][$_a-z0-9]*$/i.test(name);
};
memberAccess = function (e, member) {
  if (isIdentifierName(member)) {
    return new JS.MemberExpression(false, expr(e), new JS.Identifier(member));
  } else {
    return new JS.MemberExpression(true, expr(e), new JS.Literal(member));
  }
};
dynamicMemberAccess = function (e, index) {
  if (index['instanceof'](JS.Literal) && typeof index.value === 'string') {
    return memberAccess(e, index.value);
  } else {
    return new JS.MemberExpression(true, expr(e), expr(index));
  }
};
assignment = function (assignee, expression, valueUsed) {
  var alternate, assignments, consequent, e, elements, i, index, m, numElements, p, propName, restName, size, test;
  if (null == valueUsed)
    valueUsed = false;
  assignments = [];
  expression = expr(expression);
  switch (false) {
  case !assignee.rest:
  case !assignee['instanceof'](JS.ArrayExpression):
    e = expression;
    if (valueUsed || assignee.elements.length > 1) {
      e = genSym('cache');
      assignments.push(new JS.AssignmentExpression('=', e, expression));
    }
    elements = assignee.elements;
    for (var i$ = 0, length$ = elements.length; i$ < length$; ++i$) {
      m = elements[i$];
      i = i$;
      if (m.rest)
        break;
      assignments.push(assignment(m, dynamicMemberAccess(e, new JS.Literal(i)), valueUsed));
    }
    if (elements.length > 0) {
      if (elements.slice(-1)[0].rest) {
        numElements = elements.length;
        restName = elements[numElements - 1] = elements[numElements - 1].expression;
        test = new JS.BinaryExpression('<=', new JS.Literal(numElements), memberAccess(e, 'length'));
        consequent = helpers.slice(e, new JS.Literal(numElements - 1));
        alternate = new JS.ArrayExpression([]);
        assignments.push(stmt(new JS.AssignmentExpression('=', restName, new JS.ConditionalExpression(test, consequent, alternate))));
      } else if (any(elements, function (p) {
          return p.rest;
        })) {
        restName = index = null;
        for (var i$1 = 0, length$1 = elements.length; i$1 < length$1; ++i$1) {
          p = elements[i$1];
          i = i$1;
          if (!p.rest)
            continue;
          restName = p.expression;
          index = i;
          break;
        }
        elements.splice(index, 1);
        numElements = elements.length;
        size = genSym('size');
        assignments.push(new JS.AssignmentExpression('=', size, memberAccess(e, 'length')));
        test = new JS.BinaryExpression('>', size, new JS.Literal(numElements));
        consequent = helpers.slice(e, new JS.Literal(index), new JS.BinaryExpression('-', size, new JS.Literal(numElements - index)));
        assignments.push(new JS.AssignmentExpression('=', restName, new JS.ConditionalExpression(test, consequent, new JS.ArrayExpression([]))));
        for (var i$2 = 0, length$2 = elements.slice(index).length; i$2 < length$2; ++i$2) {
          p = elements.slice(index)[i$2];
          i = i$2;
          assignments.push(stmt(new JS.AssignmentExpression('=', p, new JS.MemberExpression(true, e, new JS.BinaryExpression('-', size, new JS.Literal(numElements - index - i))))));
        }
      }
      if (any(elements, function (p) {
          return p.rest;
        }))
        throw new Error('Positional destructuring assignments may not have more than one rest operator');
    }
    break;
  case !assignee['instanceof'](JS.ObjectExpression):
    e = expression;
    if (valueUsed || assignee.properties.length > 1) {
      e = genSym('cache');
      assignments.push(new JS.AssignmentExpression('=', e, expression));
    }
    for (var i$3 = 0, length$3 = assignee.properties.length; i$3 < length$3; ++i$3) {
      m = assignee.properties[i$3];
      propName = m.key['instanceof'](JS.Identifier) ? new JS.Literal(m.key.name) : m.key;
      assignments.push(assignment(m.value, dynamicMemberAccess(e, propName), valueUsed));
    }
    break;
  case !assignee['instanceof'](JS.Identifier, JS.GenSym, JS.MemberExpression):
    assignments.push(new JS.AssignmentExpression('=', assignee, expr(expression)));
    break;
  default:
    throw new Error('compile: assignment: unassignable assignee: ' + assignee.type);
  }
  switch (assignments.length) {
  case 0:
    if (e === expression) {
      return helpers.undef();
    } else {
      return expression;
    }
  case 1:
    return assignments[0];
  default:
    return new JS.SequenceExpression(valueUsed ? [].slice.call(assignments).concat([e]) : assignments);
  }
};
hasSoak = function (node) {
  switch (false) {
  case !node['instanceof'](CS.SoakedFunctionApplication, CS.SoakedMemberAccessOp, CS.SoakedProtoMemberAccessOp, CS.SoakedDynamicMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp):
    return true;
  case !node['instanceof'](CS.FunctionApplication):
    return hasSoak(node['function']);
  case !node['instanceof'](CS.MemberAccessOps):
    return hasSoak(node.expression);
  default:
    return false;
  }
};
generateSoak = function () {
  var fn;
  fn = function (node) {
    var cache$2, cache$3, cache$4, cache$5, cache$6, ctor, e, memberName, sym, tests, typeofTest;
    switch (false) {
    case !node['instanceof'](CS.MemberAccessOp, CS.ProtoMemberAccessOp):
      cache$2 = fn(node.expression);
      tests = cache$2[0];
      e = cache$2[1];
      return [
        tests,
        new node.constructor(e, node.memberName)
      ];
    case !node['instanceof'](CS.DynamicMemberAccessOp, CS.DynamicProtoMemberAccessOp):
      cache$3 = fn(node.expression);
      tests = cache$3[0];
      e = cache$3[1];
      return [
        tests,
        new node.constructor(e, node.indexingExpr)
      ];
    case !node['instanceof'](CS.FunctionApplication):
      cache$4 = fn(node['function']);
      tests = cache$4[0];
      e = cache$4[1];
      return [
        tests,
        new CS.FunctionApplication(e, node['arguments'])
      ];
    case !node['instanceof'](CS.SoakedFunctionApplication):
      cache$5 = fn(node['function']);
      tests = cache$5[0];
      e = cache$5[1];
      typeofTest = function (e) {
        return new CS.EQOp(new CS.String('function'), new CS.TypeofOp(e));
      };
      if (needsCaching(e)) {
        sym = new CS.GenSym('cache');
        return [
          [].slice.call(tests).concat([typeofTest(new CS.AssignOp(sym, e))]),
          new CS.FunctionApplication(sym, node['arguments'])
        ];
      } else {
        return [
          [].slice.call(tests).concat([typeofTest(e)]),
          new CS.FunctionApplication(e, node['arguments'])
        ];
      }
    case !node['instanceof'](CS.SoakedMemberAccessOp, CS.SoakedProtoMemberAccessOp, CS.SoakedDynamicMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp):
      memberName = function () {
        switch (false) {
        case !node['instanceof'](CS.SoakedMemberAccessOp, CS.SoakedProtoMemberAccessOp):
          return 'memberName';
        case !node['instanceof'](CS.SoakedDynamicMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp):
          return 'indexingExpr';
        }
      }.call(this);
      ctor = function () {
        switch (false) {
        case !node['instanceof'](CS.SoakedMemberAccessOp):
          return CS.MemberAccessOp;
        case !node['instanceof'](CS.SoakedProtoMemberAccessOp):
          return CS.ProtoMemberAccessOp;
        case !node['instanceof'](CS.SoakedDynamicMemberAccessOp):
          return CS.DynamicMemberAccessOp;
        case !node['instanceof'](CS.SoakedDynamicProtoMemberAccessOp):
          return CS.DynamicProtoMemberAccessOp;
        }
      }.call(this);
      cache$6 = fn(node.expression);
      tests = cache$6[0];
      e = cache$6[1];
      if (needsCaching(e)) {
        sym = new CS.GenSym('cache');
        return [
          [].slice.call(tests).concat([new CS.UnaryExistsOp(new CS.AssignOp(sym, e))]),
          new ctor(sym, node[memberName])
        ];
      } else {
        return [
          [].slice.call(tests).concat([new CS.UnaryExistsOp(e)]),
          new ctor(e, node[memberName])
        ];
      }
    default:
      return [
        [],
        node
      ];
    }
  };
  return function (node) {
    var cache$2, e, tests;
    cache$2 = fn(node);
    tests = cache$2[0];
    e = cache$2[1];
    return new CS.Conditional(foldl1(tests, function (memo, t) {
      return new CS.LogicalAndOp(memo, t);
    }), e);
  };
}();
extractNumber = function (what) {
  if (what['instanceof'](CS.Int))
    return what.data;
  if (!what['instanceof'](CS.UnaryNegateOp))
    return false;
  if (!what.expression['instanceof'](CS.Int))
    return false;
  return 0 - what.expression.data;
};
extractStaticRange = function (range) {
  var left, right;
  if (!range['instanceof'](CS.Range))
    return;
  left = extractNumber(range.left);
  right = extractNumber(range.right);
  if (left === false)
    return;
  if (right === false)
    return;
  return [
    left,
    right
  ];
};
helperNames = {};
helpers = {
  'extends': function () {
    var block, child, ctor, f, key, parent, protoAccess;
    protoAccess = function (e) {
      return memberAccess(e, 'prototype');
    };
    child = new JS.Identifier('child');
    parent = new JS.Identifier('parent');
    ctor = new JS.Identifier('ctor');
    key = new JS.Identifier('key');
    block = [
      new JS.ForInStatement(new JS.VariableDeclaration('var', [new JS.VariableDeclarator(key, null)]), parent, new JS.IfStatement(helpers.isOwn(parent, key), f = stmt(new JS.AssignmentExpression('=', new JS.MemberExpression(true, child, key), new JS.MemberExpression(true, parent, key))))),
      new JS.FunctionDeclaration(ctor, [], new JS.BlockStatement([stmt(new JS.AssignmentExpression('=', memberAccess(new JS.ThisExpression, 'constructor'), child))])),
      new JS.AssignmentExpression('=', protoAccess(ctor), protoAccess(parent)),
      new JS.AssignmentExpression('=', protoAccess(child), new JS.NewExpression(ctor, [])),
      new JS.AssignmentExpression('=', memberAccess(child, '__super__'), protoAccess(parent)),
      new JS.ReturnStatement(child)
    ];
    return new JS.FunctionDeclaration(helperNames['extends'], [
      child,
      parent
    ], new JS.BlockStatement(map(block, stmt)));
  },
  construct: function () {
    var args, block, child, ctor, fn, result;
    child = new JS.Identifier('child');
    ctor = new JS.Identifier('ctor');
    fn = new JS.Identifier('fn');
    args = new JS.Identifier('args');
    result = new JS.Identifier('result');
    block = [
      new JS.VariableDeclaration('var', [new JS.VariableDeclarator(fn, new JS.FunctionExpression(null, [], new JS.BlockStatement([])))]),
      new JS.AssignmentExpression('=', memberAccess(fn, 'prototype'), memberAccess(ctor, 'prototype')),
      new JS.VariableDeclaration('var', [
        new JS.VariableDeclarator(child, new JS.NewExpression(fn, [])),
        new JS.VariableDeclarator(result, new JS.CallExpression(memberAccess(ctor, 'apply'), [
          child,
          args
        ]))
      ]),
      new JS.ReturnStatement(new JS.ConditionalExpression(new JS.BinaryExpression('===', result, new JS.CallExpression(new JS.Identifier('Object'), [result])), result, child))
    ];
    return new JS.FunctionDeclaration(helperNames.construct, [
      ctor,
      args
    ], new JS.BlockStatement(map(block, stmt)));
  },
  isOwn: function () {
    var args, functionBody, hop, params;
    hop = memberAccess(new JS.ObjectExpression([]), 'hasOwnProperty');
    params = args = [
      new JS.Identifier('o'),
      new JS.Identifier('p')
    ];
    functionBody = [new JS.CallExpression(memberAccess(hop, 'call'), args)];
    return new JS.FunctionDeclaration(helperNames.isOwn, params, makeReturn(new JS.BlockStatement(map(functionBody, stmt))));
  },
  'in': function () {
    var functionBody, i, length, list, loopBody, member, varDeclaration;
    member = new JS.Identifier('member');
    list = new JS.Identifier('list');
    i = new JS.Identifier('i');
    length = new JS.Identifier('length');
    varDeclaration = new JS.VariableDeclaration('var', [
      new JS.VariableDeclarator(i, new JS.Literal(0)),
      new JS.VariableDeclarator(length, memberAccess(list, 'length'))
    ]);
    loopBody = new JS.IfStatement(new JS.LogicalExpression('&&', new JS.BinaryExpression('in', i, list), new JS.BinaryExpression('===', new JS.MemberExpression(true, list, i), member)), new JS.ReturnStatement(new JS.Literal(true)));
    functionBody = [
      new JS.ForStatement(varDeclaration, new JS.BinaryExpression('<', i, length), new JS.UpdateExpression('++', true, i), loopBody),
      new JS.Literal(false)
    ];
    return new JS.FunctionDeclaration(helperNames['in'], [
      member,
      list
    ], makeReturn(new JS.BlockStatement(map(functionBody, stmt))));
  }
};
enabledHelpers = [];
for (h in helpers) {
  if (!isOwn$(helpers, h))
    continue;
  fn = helpers[h];
  helperNames[h] = genSym(h);
  helpers[h] = function (h, fn) {
    return function () {
      enabledHelpers.push(fn());
      return (helpers[h] = function () {
        return new JS.CallExpression(helperNames[h], arguments);
      }).apply(this, arguments);
    };
  }(h, fn);
}
inlineHelpers = {
  exp: function () {
    return new JS.CallExpression(memberAccess(new JS.Identifier('Math'), 'pow'), arguments);
  },
  undef: function () {
    return new JS.UnaryExpression('void', new JS.Literal(0));
  },
  slice: function () {
    return new JS.CallExpression(memberAccess(memberAccess(new JS.ArrayExpression([]), 'slice'), 'call'), arguments);
  }
};
for (h in inlineHelpers) {
  if (!isOwn$(inlineHelpers, h))
    continue;
  fn = inlineHelpers[h];
  helpers[h] = fn;
}
exports.Compiler = function () {
  Compiler.compile = function (this$) {
    return function () {
      var cache$2;
      return (cache$2 = new this$()).compile.apply(cache$2, [].slice.call(arguments));
    };
  }(Compiler);
  defaultRules = [
    [
      CS.Program,
      function (param$) {
        var block, body, cache$2, cache$3, decls, fnDeclHelpers, inScope, options, otherHelpers, pkg, program;
        {
          cache$2 = param$;
          body = cache$2.body;
          inScope = cache$2.inScope;
          options = cache$2.options;
        }
        if (!(null != body))
          return new JS.Program([]);
        block = stmt(body);
        block = block['instanceof'](JS.BlockStatement) ? block.body : [block];
        cache$3 = partition(enabledHelpers, function (helper) {
          return helper['instanceof'](JS.FunctionDeclaration);
        });
        fnDeclHelpers = cache$3[0];
        otherHelpers = cache$3[1];
        [].push.apply(block, fnDeclHelpers);
        [].unshift.apply(block, otherHelpers);
        decls = nub(concatMap(block, declarationsNeededRecursive));
        if (decls.length && !options.bare)
          block = [stmt(new JS.UnaryExpression('void', new JS.CallExpression(memberAccess(new JS.FunctionExpression(null, [], new JS.BlockStatement(block)), 'call'), [new JS.ThisExpression])))];
        pkg = __webpack_require__(111);
        program = new JS.Program(block);
        program.leadingComments = [{
            type: 'Line',
            value: ' Generated by CoffeeScript ' + pkg.version
          }];
        return program;
      }
    ],
    [
      CS.Block,
      function (param$) {
        var statements;
        statements = param$.statements;
        switch (statements.length) {
        case 0:
          return new JS.EmptyStatement;
        case 1:
          return new stmt(statements[0]);
        default:
          return new JS.BlockStatement(concatMap(statements, function (s) {
            if (s['instanceof'](JS.BlockStatement)) {
              return map(s.body, stmt);
            } else if (s['instanceof'](JS.SequenceExpression)) {
              return map(s.expressions, stmt);
            } else {
              return [stmt(s)];
            }
          }));
        }
      }
    ],
    [
      CS.SeqOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.SequenceExpression([
          left,
          right
        ]);
      }
    ],
    [
      CS.Conditional,
      function (param$) {
        var ancestry, cache$2, condition;
        var alternate, consequent;
        {
          cache$2 = param$;
          condition = cache$2.condition;
          consequent = cache$2.consequent;
          alternate = cache$2.alternate;
          ancestry = cache$2.ancestry;
        }
        if (null != alternate) {
          if (!(null != consequent))
            throw new Error('Conditional with non-null alternate requires non-null consequent');
          if (!alternate['instanceof'](JS.IfStatement))
            alternate = forceBlock(alternate);
        }
        if (null != alternate || (null != ancestry[0] ? ancestry[0]['instanceof'](CS.Conditional) : void 0))
          consequent = forceBlock(consequent);
        return new JS.IfStatement(expr(condition), stmt(consequent), alternate);
      }
    ],
    [
      CS.ForIn,
      function (param$) {
        var block, body, cache$2, compile, e, filter, i, increment, k, keyAssignee, length, numericRange, op, step, target, update, valAssignee, varDeclaration;
        {
          cache$2 = param$;
          valAssignee = cache$2.valAssignee;
          keyAssignee = cache$2.keyAssignee;
          target = cache$2.target;
          step = cache$2.step;
          filter = cache$2.filter;
          body = cache$2.body;
          compile = cache$2.compile;
        }
        i = genSym('i');
        length = genSym('length');
        block = forceBlock(body);
        if (!block.body.length)
          block.body.push(stmt(helpers.undef()));
        numericRange = extractStaticRange(this.target);
        increment = null != this.step && !(this.step['instanceof'](CS.Int) && this.step.data === 1) ? function (x) {
          return new JS.AssignmentExpression('+=', x, step);
        } : null != numericRange && numericRange[1] < numericRange[0] ? function (x) {
          return new JS.UpdateExpression('--', true, x);
        } : function (x) {
          return new JS.UpdateExpression('++', true, x);
        };
        if (null != numericRange) {
          varDeclaration = new JS.VariableDeclaration('var', [new JS.VariableDeclarator(i, compile(this.target.left))]);
          update = increment(i);
          if (null != this.filter)
            block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', filter), new JS.ContinueStatement)));
          if (null != keyAssignee) {
            k = genSym('k');
            varDeclaration.declarations.unshift(new JS.VariableDeclarator(k, new JS.Literal(0)));
            update = new JS.SequenceExpression([
              increment(k),
              update
            ]);
            block.body.unshift(stmt(new JS.AssignmentExpression('=', keyAssignee, k)));
          }
          if (null != valAssignee)
            block.body.unshift(stmt(new JS.AssignmentExpression('=', valAssignee, i)));
          if (numericRange[1] > numericRange[0]) {
            op = this.target.isInclusive ? '<=' : '<';
          } else {
            op = this.target.isInclusive ? '>=' : '>';
          }
          return new JS.ForStatement(varDeclaration, new JS.BinaryExpression(op, i, compile(this.target.right)), update, block);
        }
        e = needsCaching(this.target) ? genSym('cache') : target;
        varDeclaration = new JS.VariableDeclaration('var', [
          new JS.VariableDeclarator(i, new JS.Literal(0)),
          new JS.VariableDeclarator(length, memberAccess(e, 'length'))
        ]);
        if (!(e === target))
          varDeclaration.declarations.unshift(new JS.VariableDeclarator(e, target));
        if (null != this.filter)
          block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', filter), new JS.ContinueStatement)));
        if (null != keyAssignee)
          block.body.unshift(stmt(assignment(keyAssignee, i)));
        if (null != valAssignee)
          block.body.unshift(stmt(assignment(valAssignee, new JS.MemberExpression(true, e, i))));
        return new JS.ForStatement(varDeclaration, new JS.BinaryExpression('<', i, length), increment(i), block);
      }
    ],
    [
      CS.ForOf,
      function (param$) {
        var block, body, cache$2, e, filter, keyAssignee, right, target, valAssignee;
        {
          cache$2 = param$;
          keyAssignee = cache$2.keyAssignee;
          valAssignee = cache$2.valAssignee;
          target = cache$2.target;
          filter = cache$2.filter;
          body = cache$2.body;
        }
        block = forceBlock(body);
        if (!block.body.length)
          block.body.push(stmt(helpers.undef()));
        e = this.isOwn && needsCaching(this.target) ? genSym('cache') : expr(target);
        if (null != this.filter)
          block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', filter), new JS.ContinueStatement)));
        if (null != valAssignee)
          block.body.unshift(stmt(assignment(valAssignee, new JS.MemberExpression(true, e, keyAssignee))));
        if (this.isOwn)
          block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', helpers.isOwn(e, keyAssignee)), new JS.ContinueStatement)));
        right = e === target ? e : new JS.AssignmentExpression('=', e, target);
        return new JS.ForInStatement(keyAssignee, right, block);
      }
    ],
    [
      CS.While,
      function (param$) {
        var body, cache$2, condition;
        {
          cache$2 = param$;
          condition = cache$2.condition;
          body = cache$2.body;
        }
        return new JS.WhileStatement(expr(condition), forceBlock(body));
      }
    ],
    [
      CS.Switch,
      function (param$) {
        var alternate, c, cache$2;
        var cases, expression;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          cases = cache$2.cases;
          alternate = cache$2.alternate;
        }
        cases = concat(cases);
        if (!(null != expression)) {
          expression = new JS.Literal(false);
          for (var i$ = 0, length$ = cases.length; i$ < length$; ++i$) {
            c = cases[i$];
            c.test = new JS.UnaryExpression('!', c.test);
          }
        }
        if (null != alternate)
          cases.push(new JS.SwitchCase(null, [stmt(alternate)]));
        for (var i$1 = 0, length$1 = cases.slice(0, -1).length; i$1 < length$1; ++i$1) {
          c = cases.slice(0, -1)[i$1];
          if (!((null != c.consequent ? c.consequent.length : void 0) > 0))
            continue;
          c.consequent.push(new JS.BreakStatement);
        }
        return new JS.SwitchStatement(expression, cases);
      }
    ],
    [
      CS.SwitchCase,
      function (param$) {
        var block, cache$2, cases, conditions, consequent;
        {
          cache$2 = param$;
          conditions = cache$2.conditions;
          consequent = cache$2.consequent;
        }
        cases = map(conditions, function (c) {
          return new JS.SwitchCase(c, []);
        });
        block = stmt(consequent);
        block = null != block ? block['instanceof'](JS.BlockStatement) ? block.body : [block] : [];
        cases[cases.length - 1].consequent = block;
        return cases;
      }
    ],
    [
      CS.Try,
      function (param$) {
        var body, cache$2, catchAssignee, catchBlock, catchBody, e, finallyBlock, finallyBody, handlers;
        {
          cache$2 = param$;
          body = cache$2.body;
          catchAssignee = cache$2.catchAssignee;
          catchBody = cache$2.catchBody;
          finallyBody = cache$2.finallyBody;
        }
        finallyBlock = null != this.finallyBody ? forceBlock(finallyBody) : null;
        if (null != this.catchBody || !(null != this.finallyBody)) {
          e = genSym('e');
          catchBlock = forceBlock(catchBody);
          if (null != catchAssignee)
            catchBlock.body.unshift(stmt(assignment(catchAssignee, e)));
          handlers = [new JS.CatchClause(e, catchBlock)];
        } else {
          handlers = [];
        }
        return new JS.TryStatement(forceBlock(body), handlers, finallyBlock);
      }
    ],
    [
      CS.Throw,
      function (param$) {
        var expression;
        expression = param$.expression;
        return new JS.ThrowStatement(expression);
      }
    ],
    [
      CS.Range,
      function (param$) {
        var accum, ancestry, body, cache$2, condition, conditionAlternate, conditionConsequent, conditionTest, i, left, left_, range, rawLeft, rawRight, right, right_, update, vars;
        {
          cache$2 = param$;
          left_ = cache$2.left;
          right_ = cache$2.right;
          ancestry = cache$2.ancestry;
        }
        if ((this.left['instanceof'](CS.Int) || this.left['instanceof'](CS.UnaryNegateOp) && this.left.expression['instanceof'](CS.Int)) && (this.right['instanceof'](CS.Int) || this.right['instanceof'](CS.UnaryNegateOp) && this.right.expression['instanceof'](CS.Int))) {
          rawLeft = this.left['instanceof'](CS.UnaryNegateOp) ? -this.left.expression.data : this.left.data;
          rawRight = this.right['instanceof'](CS.UnaryNegateOp) ? -this.right.expression.data : this.right.data;
          if (Math.abs(rawLeft - rawRight) <= 20) {
            range = this.isInclusive ? function () {
              var accum$;
              accum$ = [];
              for (var i$ = rawLeft; rawLeft <= rawRight ? i$ <= rawRight : i$ >= rawRight; rawLeft <= rawRight ? ++i$ : --i$)
                accum$.push(i$);
              return accum$;
            }.apply(this, arguments) : function () {
              var accum$;
              accum$ = [];
              for (var i$ = rawLeft; rawLeft <= rawRight ? i$ < rawRight : i$ > rawRight; rawLeft <= rawRight ? ++i$ : --i$)
                accum$.push(i$);
              return accum$;
            }.apply(this, arguments);
            return new JS.ArrayExpression(map(range, function (n) {
              if (n < 0) {
                return new JS.UnaryExpression('-', new JS.Literal(-n));
              } else {
                return new JS.Literal(n);
              }
            }));
          }
        }
        accum = genSym('accum');
        body = [stmt(new JS.AssignmentExpression('=', accum, new JS.ArrayExpression([])))];
        if (needsCaching(left_)) {
          left = genSym('from');
          body.push(stmt(new JS.AssignmentExpression('=', left, left_)));
        } else {
          left = left_;
        }
        if (needsCaching(right_)) {
          right = genSym('to');
          body.push(stmt(new JS.AssignmentExpression('=', right, right_)));
        } else {
          right = right_;
        }
        i = genSym('i');
        vars = new JS.VariableDeclaration('var', [new JS.VariableDeclarator(i, left)]);
        conditionTest = new JS.BinaryExpression('<=', left, right);
        conditionConsequent = new JS.BinaryExpression(this.isInclusive ? '<=' : '<', i, right);
        conditionAlternate = new JS.BinaryExpression(this.isInclusive ? '>=' : '>', i, right);
        condition = new JS.ConditionalExpression(conditionTest, conditionConsequent, conditionAlternate);
        update = new JS.ConditionalExpression(conditionTest, new JS.UpdateExpression('++', true, i), new JS.UpdateExpression('--', true, i));
        body.push(new JS.ForStatement(vars, condition, update, stmt(new JS.CallExpression(memberAccess(accum, 'push'), [i]))));
        body.push(new JS.ReturnStatement(accum));
        if (any(ancestry, function (ancestor) {
            return ancestor['instanceof'](CS.Functions);
          })) {
          return new JS.CallExpression(memberAccess(new JS.FunctionExpression(null, [], new JS.BlockStatement(body)), 'apply'), [
            new JS.ThisExpression,
            new JS.Identifier('arguments')
          ]);
        } else {
          return new JS.CallExpression(memberAccess(new JS.FunctionExpression(null, [], new JS.BlockStatement(body)), 'call'), [new JS.ThisExpression]);
        }
      }
    ],
    [
      CS.ArrayInitialiser,
      function () {
        var groupMembers;
        groupMembers = function (members) {
          var cache$2, cache$3, sliced, ys, zs;
          if (members.length === 0) {
            return [];
          } else {
            cache$2 = span(members, function (x) {
              return !x.spread;
            });
            ys = cache$2[0];
            zs = cache$2[1];
            if (ys.length === 0) {
              sliced = helpers.slice(zs[0].expression);
              cache$3 = [
                sliced,
                zs.slice(1)
              ];
              ys = cache$3[0];
              zs = cache$3[1];
              cache$3;
            } else {
              ys = new JS.ArrayExpression(map(ys, expr));
            }
            return [ys].concat(groupMembers(zs));
          }
        };
        return function (param$) {
          var cache$2, compile, grouped, members;
          {
            cache$2 = param$;
            members = cache$2.members;
            compile = cache$2.compile;
          }
          if (any(members, function (m) {
              return m.spread;
            })) {
            grouped = map(groupMembers(members), expr);
            if (grouped.length <= 1) {
              return grouped[0];
            } else {
              return new JS.CallExpression(memberAccess(grouped[0], 'concat'), grouped.slice(1));
            }
          } else {
            return new JS.ArrayExpression(map(members, expr));
          }
        };
      }()
    ],
    [
      CS.Spread,
      function (param$) {
        var expression;
        expression = param$.expression;
        return {
          spread: true,
          expression: expr(expression)
        };
      }
    ],
    [
      CS.ObjectInitialiser,
      function (param$) {
        var members;
        members = param$.members;
        return new JS.ObjectExpression(members);
      }
    ],
    [
      CS.ObjectInitialiserMember,
      function (param$) {
        var cache$2, expression, keyName;
        var key;
        {
          cache$2 = param$;
          key = cache$2.key;
          expression = cache$2.expression;
        }
        keyName = this.key.data;
        key = isIdentifierName(keyName) ? new JS.Identifier(keyName) : new JS.Literal(keyName);
        return new JS.Property(key, expr(expression));
      }
    ],
    [
      CS.DefaultParam,
      function (param$) {
        var cache$2, d, param;
        {
          cache$2 = param$;
          param = cache$2.param;
          d = cache$2['default'];
        }
        return {
          param: param,
          'default': d
        };
      }
    ],
    [
      CS.Function,
      CS.BoundFunction,
      function () {
        var handleParam;
        handleParam = function (param, original, block, inScope) {
          var decls, p;
          switch (false) {
          case !original['instanceof'](CS.Rest):
            return param;
          case !original['instanceof'](CS.Identifier):
            return param;
          case !original['instanceof'](CS.MemberAccessOps, CS.ObjectInitialiser, CS.ArrayInitialiser):
            p = genSym('param');
            decls = map(intersect(inScope, beingDeclared(original)), function (i) {
              return new JS.Identifier(i);
            });
            block.body.unshift(stmt(assignment(param, p)));
            if (decls.length)
              block.body.unshift(makeVarDeclaration(decls));
            return p;
          case !original['instanceof'](CS.DefaultParam):
            p = handleParam.call(this, param.param, original.param, block, inScope);
            block.body.unshift(new JS.IfStatement(new JS.BinaryExpression('==', new JS.Literal(null), p), stmt(assignment(p, param['default']))));
            return p;
          default:
            throw new Error('Unsupported parameter type: ' + original.className);
          }
        };
        return function (param$) {
          var alternate, ancestry, block, cache$2, consequent, i, index, inScope, last, newThis, numArgs, numParams, p, parameters_, paramName, performedRewrite, pIndex, reassignments, rewriteThis, test;
          var body, parameters;
          {
            cache$2 = param$;
            parameters = cache$2.parameters;
            body = cache$2.body;
            ancestry = cache$2.ancestry;
            inScope = cache$2.inScope;
          }
          if (!(null != ancestry[0] ? ancestry[0]['instanceof'](CS.Constructor) : void 0))
            body = makeReturn(body);
          block = forceBlock(body);
          last = block.body.slice(-1)[0];
          if ((null != last ? last['instanceof'](JS.ReturnStatement) : void 0) && !(null != last.argument))
            block.body = block.body.slice(0, -1);
          parameters_ = parameters.length === 0 ? [] : (pIndex = parameters.length, function (accum$) {
            while (pIndex--) {
              accum$.push(handleParam.call(this, parameters[pIndex], this.parameters[pIndex], block, inScope));
            }
            return accum$;
          }.call(this, []));
          parameters = parameters_.reverse();
          if (parameters.length > 0) {
            if (parameters.slice(-1)[0].rest) {
              paramName = parameters.pop().expression;
              numParams = parameters.length;
              test = new JS.BinaryExpression('>', memberAccess(new JS.Identifier('arguments'), 'length'), new JS.Literal(numParams));
              consequent = helpers.slice(new JS.Identifier('arguments'), new JS.Literal(numParams));
              alternate = new JS.ArrayExpression([]);
              if (paramName['instanceof'](JS.Identifier) && in$(paramName.name, inScope))
                block.body.unshift(makeVarDeclaration([paramName]));
              block.body.unshift(stmt(new JS.AssignmentExpression('=', paramName, new JS.ConditionalExpression(test, consequent, alternate))));
            } else if (any(parameters, function (p) {
                return p.rest;
              })) {
              paramName = index = null;
              for (var i$ = 0, length$ = parameters.length; i$ < length$; ++i$) {
                p = parameters[i$];
                i = i$;
                if (!p.rest)
                  continue;
                paramName = p.expression;
                index = i;
                break;
              }
              parameters.splice(index, 1);
              numParams = parameters.length;
              numArgs = genSym('numArgs');
              reassignments = new JS.IfStatement(new JS.BinaryExpression('>', new JS.AssignmentExpression('=', numArgs, memberAccess(new JS.Identifier('arguments'), 'length')), new JS.Literal(numParams)), new JS.BlockStatement([stmt(new JS.AssignmentExpression('=', paramName, helpers.slice(new JS.Identifier('arguments'), new JS.Literal(index), new JS.BinaryExpression('-', numArgs, new JS.Literal(numParams - index)))))]), new JS.BlockStatement([stmt(new JS.AssignmentExpression('=', paramName, new JS.ArrayExpression([])))]));
              for (var i$1 = 0, length$1 = parameters.slice(index).length; i$1 < length$1; ++i$1) {
                p = parameters.slice(index)[i$1];
                i = i$1;
                reassignments.consequent.body.push(stmt(new JS.AssignmentExpression('=', p, new JS.MemberExpression(true, new JS.Identifier('arguments'), new JS.BinaryExpression('-', numArgs, new JS.Literal(numParams - index - i))))));
              }
              if (paramName['instanceof'](JS.Identifier) && in$(paramName.name, inScope))
                block.body.unshift(makeVarDeclaration([paramName]));
              block.body.unshift(reassignments);
            }
            if (any(parameters, function (p) {
                return p.rest;
              }))
              throw new Error('Parameter lists may not have more than one rest operator');
          }
          performedRewrite = false;
          if (this['instanceof'](CS.BoundFunction)) {
            newThis = genSym('this');
            rewriteThis = generateMutatingWalker(function () {
              if (this['instanceof'](JS.ThisExpression)) {
                performedRewrite = true;
                return newThis;
              } else if (this['instanceof'](JS.FunctionExpression, JS.FunctionDeclaration)) {
                return this;
              } else {
                return rewriteThis(this);
              }
            });
            rewriteThis(block);
          }
          fn = new JS.FunctionExpression(null, parameters, block);
          if (performedRewrite) {
            return new JS.CallExpression(new JS.FunctionExpression(null, [newThis], new JS.BlockStatement([new JS.ReturnStatement(fn)])), [new JS.ThisExpression]);
          } else {
            return fn;
          }
        };
      }()
    ],
    [
      CS.Rest,
      function (param$) {
        var expression;
        expression = param$.expression;
        return {
          rest: true,
          expression: expression,
          isExpression: true,
          isStatement: true
        };
      }
    ],
    [
      CS.Class,
      function (param$) {
        var _, args, block, body, c, cache$2, compile, ctorBody, ctorIndex, ctorRef, i, iife, instance, member, memberName, nameAssignee, params, parent, parentRef, protoAssignOp, protoMember, ps, rewriteThis;
        var ctor, name;
        {
          cache$2 = param$;
          nameAssignee = cache$2.nameAssignee;
          parent = cache$2.parent;
          name = cache$2.name;
          ctor = cache$2.ctor;
          body = cache$2.body;
          compile = cache$2.compile;
        }
        args = [];
        params = [];
        parentRef = genSym('super');
        block = forceBlock(body);
        if (name['instanceof'](JS.Identifier) && in$(name.name, jsReserved))
          name = genSym(name.name);
        if (null != ctor) {
          for (var i$ = 0, length$ = block.body.length; i$ < length$; ++i$) {
            c = block.body[i$];
            i = i$;
            if (!c['instanceof'](JS.FunctionDeclaration))
              continue;
            ctorIndex = i;
            break;
          }
          block.body.splice(ctorIndex, 1, ctor);
        } else {
          ctorBody = new JS.BlockStatement([]);
          if (null != parent)
            ctorBody.body.push(stmt(new JS.CallExpression(memberAccess(parentRef, 'apply'), [
              new JS.ThisExpression,
              new JS.Identifier('arguments')
            ])));
          ctor = new JS.FunctionDeclaration(name, [], ctorBody);
          ctorIndex = 0;
          block.body.unshift(ctor);
        }
        ctor.id = name;
        if (null != this.ctor && !this.ctor.expression['instanceof'](CS.Functions)) {
          ctorRef = genSym('externalCtor');
          ctor.body.body.push(makeReturn(new JS.CallExpression(memberAccess(ctorRef, 'apply'), [
            new JS.ThisExpression,
            new JS.Identifier('arguments')
          ])));
          block.body.splice(ctorIndex, 0, stmt(new JS.AssignmentExpression('=', ctorRef, expr(compile(this.ctor.expression)))));
        }
        if (this.boundMembers.length > 0) {
          instance = genSym('instance');
          for (var i$1 = 0, length$1 = this.boundMembers.length; i$1 < length$1; ++i$1) {
            protoAssignOp = this.boundMembers[i$1];
            memberName = protoAssignOp.assignee.data.toString();
            ps = function (accum$) {
              for (var i$2 = 0, length$2 = protoAssignOp.expression.parameters.length; i$2 < length$2; ++i$2) {
                _ = protoAssignOp.expression.parameters[i$2];
                accum$.push(genSym());
              }
              return accum$;
            }.call(this, []);
            member = memberAccess(new JS.ThisExpression, memberName);
            protoMember = memberAccess(memberAccess(name, 'prototype'), memberName);
            fn = new JS.FunctionExpression(null, ps, new JS.BlockStatement([makeReturn(new JS.CallExpression(memberAccess(protoMember, 'apply'), [
                instance,
                new JS.Identifier('arguments')
              ]))]));
            ctor.body.body.unshift(stmt(new JS.AssignmentExpression('=', member, fn)));
          }
          ctor.body.body.unshift(stmt(new JS.AssignmentExpression('=', instance, new JS.ThisExpression)));
        }
        if (null != parent) {
          params.push(parentRef);
          args.push(parent);
          block.body.unshift(stmt(helpers['extends'](name, parentRef)));
        }
        block.body.push(new JS.ReturnStatement(new JS.ThisExpression));
        rewriteThis = generateMutatingWalker(function () {
          if (this['instanceof'](JS.ThisExpression)) {
            return name;
          } else if (this['instanceof'](JS.FunctionExpression, JS.FunctionDeclaration)) {
            return this;
          } else {
            return rewriteThis(this);
          }
        });
        rewriteThis(block);
        iife = new JS.CallExpression(new JS.FunctionExpression(null, params, block).g(), args);
        if (null != nameAssignee) {
          return assignment(nameAssignee, iife);
        } else {
          return iife;
        }
      }
    ],
    [
      CS.Constructor,
      function (param$) {
        var expression, tmpName;
        expression = param$.expression;
        tmpName = genSym('class');
        if (this.expression['instanceof'](CS.Functions)) {
          return new JS.FunctionDeclaration(tmpName, expression.params, forceBlock(expression.body));
        } else {
          return new JS.FunctionDeclaration(tmpName, [], new JS.BlockStatement([]));
        }
      }
    ],
    [
      CS.ClassProtoAssignOp,
      function (param$) {
        var assignee, cache$2, compile, expression, protoMember;
        {
          cache$2 = param$;
          assignee = cache$2.assignee;
          expression = cache$2.expression;
          compile = cache$2.compile;
        }
        if (this.expression['instanceof'](CS.BoundFunction)) {
          return compile(new CS.ClassProtoAssignOp(this.assignee, new CS.Function(this.expression.parameters, this.expression.body)));
        } else {
          protoMember = memberAccess(memberAccess(new JS.ThisExpression, 'prototype'), this.assignee.data);
          return new JS.AssignmentExpression('=', protoMember, expression);
        }
      }
    ],
    [
      CS.AssignOp,
      function (param$) {
        var ancestry, assignee, cache$2, expression;
        {
          cache$2 = param$;
          assignee = cache$2.assignee;
          expression = cache$2.expression;
          ancestry = cache$2.ancestry;
        }
        return assignment(assignee, expression, usedAsExpression(this, ancestry));
      }
    ],
    [
      CS.CompoundAssignOp,
      function (param$) {
        var assignee, cache$2, condition, expression, inScope, op;
        {
          cache$2 = param$;
          assignee = cache$2.assignee;
          expression = cache$2.expression;
          inScope = cache$2.inScope;
        }
        op = function () {
          switch (this.op) {
          case CS.LogicalAndOp.prototype.className:
            return '&&';
          case CS.LogicalOrOp.prototype.className:
            return '||';
          case CS.ExistsOp.prototype.className:
            return '?';
          case CS.BitOrOp.prototype.className:
            return '|';
          case CS.BitXorOp.prototype.className:
            return '^';
          case CS.BitAndOp.prototype.className:
            return '&';
          case CS.LeftShiftOp.prototype.className:
            return '<<';
          case CS.SignedRightShiftOp.prototype.className:
            return '>>';
          case CS.UnsignedRightShiftOp.prototype.className:
            return '>>>';
          case CS.PlusOp.prototype.className:
            return '+';
          case CS.SubtractOp.prototype.className:
            return '-';
          case CS.MultiplyOp.prototype.className:
            return '*';
          case CS.DivideOp.prototype.className:
            return '/';
          case CS.RemOp.prototype.className:
            return '%';
          case CS.ExpOp.prototype.className:
            return '**';
          default:
            throw new Error('Unrecognised compound assignment operator');
          }
        }.call(this);
        if ((op === '&&' || op === '||' || op === '?') && assignee['instanceof'](JS.Identifier) && !in$(assignee.name, inScope))
          throw new Error('the variable "' + assignee.name + '" can\'t be assigned with ?= because it has not been defined.');
        switch (op) {
        case '&&':
        case '||':
          return new JS.LogicalExpression(op, assignee, new JS.AssignmentExpression('=', assignee, expr(expression)));
        case '?':
          condition = new JS.BinaryExpression('!=', new JS.Literal(null), assignee);
          return new JS.ConditionalExpression(condition, assignee, new JS.AssignmentExpression('=', assignee, expr(expression)));
        case '**':
          return new JS.AssignmentExpression('=', assignee, helpers.exp(assignee, expr(expression)));
        default:
          return new JS.AssignmentExpression('' + op + '=', assignee, expr(expression));
        }
      }
    ],
    [
      CS.ChainedComparisonOp,
      function (param$) {
        var cache$2, compile, expression, left, lhs;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          compile = cache$2.compile;
        }
        if (!this.expression.left['instanceof'](CS.ComparisonOps))
          return expression;
        left = expression.left.right;
        lhs = compile(new CS.ChainedComparisonOp(this.expression.left));
        if (needsCaching(this.expression.left.right)) {
          left = genSym('cache');
          if (this.expression.left.left['instanceof'](CS.ComparisonOps)) {
            lhs.right.right = new JS.AssignmentExpression('=', left, lhs.right.right);
          } else {
            lhs.right = new JS.AssignmentExpression('=', left, lhs.right);
          }
        }
        return new JS.LogicalExpression('&&', lhs, new JS.BinaryExpression(expression.operator, left, expression.right));
      }
    ],
    [
      CS.FunctionApplication,
      function (param$) {
        var args, cache$2, compile, context, lhs;
        var fn;
        {
          cache$2 = param$;
          fn = cache$2['function'];
          args = cache$2['arguments'];
          compile = cache$2.compile;
        }
        if (any(args, function (m) {
            return m.spread;
          })) {
          lhs = this['function'];
          context = new CS.Null;
          if (needsCaching(this['function'])) {
            context = new CS.GenSym('cache');
            lhs = this['function']['instanceof'](CS.StaticMemberAccessOps) ? new this['function'].constructor(new CS.AssignOp(context, lhs.expression), this['function'].memberName) : this['function']['instanceof'](CS.DynamicMemberAccessOps) ? new this['function'].constructor(new CS.AssignOp(context, lhs.expression), this['function'].indexingExpr) : new CS.AssignOp(context, lhs);
          } else if (lhs['instanceof'](CS.MemberAccessOps)) {
            context = lhs.expression;
          }
          if (this['function']['instanceof'](CS.ProtoMemberAccessOp, CS.DynamicProtoMemberAccessOp)) {
            context = new CS.MemberAccessOp(context, 'prototype');
          } else if (this['function']['instanceof'](CS.SoakedProtoMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp)) {
            context = new CS.SoakedMemberAccessOp(context, 'prototype');
          }
          return compile(new CS.FunctionApplication(new CS.MemberAccessOp(lhs, 'apply'), [
            context,
            new CS.ArrayInitialiser(this['arguments'])
          ]));
        } else if (hasSoak(this)) {
          return compile(generateSoak(this));
        } else {
          return new JS.CallExpression(expr(fn), map(args, expr));
        }
      }
    ],
    [
      CS.SoakedFunctionApplication,
      function (param$) {
        var compile;
        compile = param$.compile;
        return compile(generateSoak(this));
      }
    ],
    [
      CS.NewOp,
      function (param$) {
        var args, cache$2, compile, ctor;
        {
          cache$2 = param$;
          ctor = cache$2.ctor;
          args = cache$2['arguments'];
          compile = cache$2.compile;
        }
        if (any(args, function (m) {
            return m.spread;
          })) {
          return helpers.construct(ctor, compile(new CS.ArrayInitialiser(this['arguments'])));
        } else {
          return new JS.NewExpression(ctor, map(args, expr));
        }
      }
    ],
    [
      CS.HeregExp,
      function (param$) {
        var args, expression, flag, flags;
        expression = param$.expression;
        args = [expression];
        if (flags = function (accum$) {
            for (var cache$2 = [
                  'g',
                  'i',
                  'm',
                  'y'
                ], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {
              flag = cache$2[i$];
              if (!this.flags[flag])
                continue;
              accum$.push(flag);
            }
            return accum$;
          }.call(this, []).join(''))
          args.push(new JS.Literal(flags));
        return new JS.NewExpression(new JS.Identifier('RegExp'), args);
      }
    ],
    [
      CS.RegExp,
      function () {
        var flag, flags, re;
        flags = function (accum$) {
          for (var cache$2 = [
                'g',
                'i',
                'm',
                'y'
              ], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {
            flag = cache$2[i$];
            if (!this.flags[flag])
              continue;
            accum$.push(flag);
          }
          return accum$;
        }.call(this, []).join('');
        re = new RegExp(this.data, flags);
        return new JS.Literal(re);
      }
    ],
    [
      CS.ConcatOp,
      function (param$) {
        var ancestry, cache$2, left, leftmost, plusOp, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
          ancestry = cache$2.ancestry;
        }
        plusOp = new JS.BinaryExpression('+', expr(left), expr(right));
        if (!ancestry[0]['instanceof'](CS.ConcatOp)) {
          leftmost = plusOp;
          while (null != (null != leftmost.left ? leftmost.left.left : void 0)) {
            leftmost = leftmost.left;
          }
          if (!(leftmost.left['instanceof'](JS.Literal) && 'string' === typeof leftmost.left.value))
            leftmost.left = new JS.BinaryExpression('+', new JS.Literal(''), leftmost.left);
        }
        return plusOp;
      }
    ],
    [
      CS.MemberAccessOp,
      CS.SoakedMemberAccessOp,
      function (param$) {
        var access, cache$2, compile, expression, offset;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          compile = cache$2.compile;
        }
        if (hasSoak(this)) {
          return expr(compile(generateSoak(this)));
        } else {
          access = memberAccess(expression, this.memberName);
          if (this.raw) {
            access.property.raw = this.memberName;
            access.property.line = this.line;
            offset = this.raw.length - this.memberName.length;
            access.property.column = this.column + offset - 1;
            access.property.offset = this.offset + offset - 1;
            this.column += this.expression.raw.length;
            this.offset += this.expression.raw.length;
          }
          return access;
        }
      }
    ],
    [
      CS.ProtoMemberAccessOp,
      CS.SoakedProtoMemberAccessOp,
      function (param$) {
        var cache$2, compile, expression;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          compile = cache$2.compile;
        }
        if (hasSoak(this)) {
          return expr(compile(generateSoak(this)));
        } else {
          return memberAccess(memberAccess(expression, 'prototype'), this.memberName);
        }
      }
    ],
    [
      CS.DynamicMemberAccessOp,
      CS.SoakedDynamicMemberAccessOp,
      function (param$) {
        var cache$2, compile, expression, indexingExpr;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          indexingExpr = cache$2.indexingExpr;
          compile = cache$2.compile;
        }
        if (hasSoak(this)) {
          return expr(compile(generateSoak(this)));
        } else {
          return dynamicMemberAccess(expression, indexingExpr);
        }
      }
    ],
    [
      CS.DynamicProtoMemberAccessOp,
      CS.SoakedDynamicProtoMemberAccessOp,
      function (param$) {
        var cache$2, compile, expression, indexingExpr;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          indexingExpr = cache$2.indexingExpr;
          compile = cache$2.compile;
        }
        if (hasSoak(this)) {
          return expr(compile(generateSoak(this)));
        } else {
          return dynamicMemberAccess(memberAccess(expression, 'prototype'), indexingExpr);
        }
      }
    ],
    [
      CS.Slice,
      function (param$) {
        var args, cache$2, expression, left, right;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          left = cache$2.left;
          right = cache$2.right;
        }
        args = null != left ? [left] : null != right ? [new JS.Literal(0)] : [];
        if (null != right)
          args.push(this.isInclusive ? right['instanceof'](JS.Literal) && typeof right.data === 'number' ? new JS.Literal(right.data + 1) : new JS.LogicalExpression('||', new JS.BinaryExpression('+', new JS.UnaryExpression('+', right), new JS.Literal(1)), new JS.Literal(9e9)) : right);
        return new JS.CallExpression(memberAccess(expression, 'slice'), args);
      }
    ],
    [
      CS.ExistsOp,
      function (param$) {
        var ancestry, cache$2, condition, e, inScope, node;
        var left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
          ancestry = cache$2.ancestry;
          inScope = cache$2.inScope;
        }
        left = expr(left);
        right = expr(right);
        e = needsCaching(this.left) ? genSym('cache') : left;
        condition = new JS.BinaryExpression('!=', new JS.Literal(null), e);
        if (e['instanceof'](JS.Identifier) && !in$(e.name, inScope))
          condition = new JS.LogicalExpression('&&', new JS.BinaryExpression('!==', new JS.Literal('undefined'), new JS.UnaryExpression('typeof', e)), condition);
        node = new JS.ConditionalExpression(condition, e, right);
        if (e === left) {
          return node;
        } else {
          return new JS.SequenceExpression([
            new JS.AssignmentExpression('=', e, left),
            node
          ]);
        }
      }
    ],
    [
      CS.UnaryExistsOp,
      function (param$) {
        var cache$2, expression, inScope, nullTest, typeofTest;
        {
          cache$2 = param$;
          expression = cache$2.expression;
          inScope = cache$2.inScope;
        }
        nullTest = new JS.BinaryExpression('!=', new JS.Literal(null), expression);
        if (expression['instanceof'](JS.Identifier) && !in$(expression.name, inScope)) {
          typeofTest = new JS.BinaryExpression('!==', new JS.Literal('undefined'), new JS.UnaryExpression('typeof', expression));
          return new JS.LogicalExpression('&&', typeofTest, nullTest);
        } else {
          return nullTest;
        }
      }
    ],
    [
      CS.DoOp,
      function () {
        var deriveArgsFromParams;
        deriveArgsFromParams = function (params) {
          var args, index, param;
          return args = function (accum$) {
            for (var i$ = 0, length$ = params.length; i$ < length$; ++i$) {
              param = params[i$];
              index = i$;
              accum$.push(function () {
                switch (false) {
                case !param['instanceof'](CS.DefaultParam):
                  params[index] = param.param;
                  return param['default'];
                case !param['instanceof'](CS.Identifier, CS.MemberAccessOp):
                  return param;
                default:
                  return helpers.undef();
                }
              }.call(this));
            }
            return accum$;
          }.call(this, []);
        };
        return function (param$) {
          var args, cache$2, compile, expression;
          {
            cache$2 = param$;
            expression = cache$2.expression;
            compile = cache$2.compile;
          }
          args = [];
          if (this.expression['instanceof'](CS.AssignOp) && this.expression.expression['instanceof'](CS.Functions)) {
            args = deriveArgsFromParams(this.expression.expression.parameters);
          } else if (this.expression['instanceof'](CS.Functions)) {
            args = deriveArgsFromParams(this.expression.parameters);
          }
          return compile(new CS.FunctionApplication(this.expression, args));
        };
      }()
    ],
    [
      CS.Return,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.ReturnStatement(expr(e));
      }
    ],
    [
      CS.Break,
      function () {
        return new JS.BreakStatement;
      }
    ],
    [
      CS.Continue,
      function () {
        return new JS.ContinueStatement;
      }
    ],
    [
      CS.Debugger,
      function () {
        return new JS.DebuggerStatement;
      }
    ],
    [
      CS.ExpOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return helpers.exp(expr(left), expr(right));
      }
    ],
    [
      CS.DivideOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('/', expr(left), expr(right));
      }
    ],
    [
      CS.MultiplyOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('*', expr(left), expr(right));
      }
    ],
    [
      CS.RemOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('%', expr(left), expr(right));
      }
    ],
    [
      CS.PlusOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('+', expr(left), expr(right));
      }
    ],
    [
      CS.SubtractOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('-', expr(left), expr(right));
      }
    ],
    [
      CS.OfOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('in', expr(left), expr(right));
      }
    ],
    [
      CS.InOp,
      function (param$) {
        var cache$2, comparisons, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        if (right['instanceof'](JS.ArrayExpression) && right.elements.length < 5) {
          switch (right.elements.length) {
          case 0:
            if (needsCaching(this.left)) {
              return new JS.SequenceExpression([
                left,
                new JS.Literal(false)
              ]);
            } else {
              return new JS.Literal(false);
            }
          case 1:
            return new JS.BinaryExpression('===', left, right.elements[0]);
          default:
            if (needsCaching(this.left)) {
              return helpers['in'](expr(left), expr(right));
            } else {
              comparisons = map(right.elements, function (e) {
                return new JS.BinaryExpression('===', left, e);
              });
              return foldl1(comparisons, function (l, r) {
                return new JS.LogicalExpression('||', l, r);
              });
            }
          }
        } else {
          return helpers['in'](expr(left), expr(right));
        }
      }
    ],
    [
      CS.ExtendsOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return helpers['extends'](expr(left), expr(right));
      }
    ],
    [
      CS.InstanceofOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('instanceof', expr(left), expr(right));
      }
    ],
    [
      CS.LogicalAndOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.LogicalExpression('&&', expr(left), expr(right));
      }
    ],
    [
      CS.LogicalOrOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.LogicalExpression('||', expr(left), expr(right));
      }
    ],
    [
      CS.EQOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('===', expr(left), expr(right));
      }
    ],
    [
      CS.NEQOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('!==', expr(left), expr(right));
      }
    ],
    [
      CS.GTEOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('>=', expr(left), expr(right));
      }
    ],
    [
      CS.GTOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('>', expr(left), expr(right));
      }
    ],
    [
      CS.LTEOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('<=', expr(left), expr(right));
      }
    ],
    [
      CS.LTOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('<', expr(left), expr(right));
      }
    ],
    [
      CS.BitAndOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('&', expr(left), expr(right));
      }
    ],
    [
      CS.BitOrOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('|', expr(left), expr(right));
      }
    ],
    [
      CS.BitXorOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('^', expr(left), expr(right));
      }
    ],
    [
      CS.LeftShiftOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('<<', expr(left), expr(right));
      }
    ],
    [
      CS.SignedRightShiftOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('>>', expr(left), expr(right));
      }
    ],
    [
      CS.UnsignedRightShiftOp,
      function (param$) {
        var cache$2, left, right;
        {
          cache$2 = param$;
          left = cache$2.left;
          right = cache$2.right;
        }
        return new JS.BinaryExpression('>>>', expr(left), expr(right));
      }
    ],
    [
      CS.PreDecrementOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UpdateExpression('--', true, expr(e));
      }
    ],
    [
      CS.PreIncrementOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UpdateExpression('++', true, expr(e));
      }
    ],
    [
      CS.PostDecrementOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UpdateExpression('--', false, expr(e));
      }
    ],
    [
      CS.PostIncrementOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UpdateExpression('++', false, expr(e));
      }
    ],
    [
      CS.UnaryPlusOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('+', expr(e));
      }
    ],
    [
      CS.UnaryNegateOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('-', expr(e));
      }
    ],
    [
      CS.LogicalNotOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('!', expr(e));
      }
    ],
    [
      CS.BitNotOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('~', expr(e));
      }
    ],
    [
      CS.TypeofOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('typeof', expr(e));
      }
    ],
    [
      CS.DeleteOp,
      function (param$) {
        var e;
        e = param$.expression;
        return new JS.UnaryExpression('delete', expr(e));
      }
    ],
    [
      CS.Identifier,
      function () {
        return new JS.Identifier(this.data);
      }
    ],
    [
      CS.GenSym,
      function () {
        var memos, symbols;
        symbols = [];
        memos = [];
        return function () {
          var memo;
          if (in$(this, symbols)) {
            return memos[symbols.indexOf(this)];
          } else {
            symbols.push(this);
            memos.push(memo = genSym(this.data));
            return memo;
          }
        };
      }()
    ],
    [
      CS.Bool,
      CS.Int,
      CS.Float,
      CS.String,
      function () {
        return new JS.Literal(this.data);
      }
    ],
    [
      CS.Null,
      function () {
        return new JS.Literal(null);
      }
    ],
    [
      CS.Undefined,
      function () {
        return helpers.undef();
      }
    ],
    [
      CS.This,
      function () {
        return new JS.ThisExpression;
      }
    ],
    [
      CS.JavaScript,
      function () {
        return new JS.CallExpression(new JS.Identifier('eval'), [new JS.Literal(this.data)]);
      }
    ]
  ];
  function Compiler() {
    var cache$2, ctor, ctors, handler, size$;
    this.rules = {};
    for (var i$ = 0, length$ = defaultRules.length; i$ < length$; ++i$) {
      {
        cache$2 = defaultRules[i$];
        size$ = cache$2.length;
        ctors = size$ > 1 ? [].slice.call(cache$2, 0, size$ - 1) : [];
        handler = cache$2[size$ - 1];
      }
      for (var i$1 = 0, length$1 = ctors.length; i$1 < length$1; ++i$1) {
        ctor = ctors[i$1];
        this.addRule(ctor, handler);
      }
    }
  }
  Compiler.prototype.addRule = function (ctor, handler) {
    this.rules[ctor.prototype.className] = handler;
    return this;
  };
  Compiler.prototype.compile = function () {
    var defaultRule, generateSymbols, walk;
    walk = function (fn, inScope, ancestry, options) {
      var child, childName, children, jsNode, member;
      if ((null != ancestry[0] ? ancestry[0]['instanceof'](CS.Function, CS.BoundFunction) : void 0) && this === ancestry[0].body)
        inScope = union(inScope, concatMap(ancestry[0].parameters, beingDeclared));
      ancestry.unshift(this);
      children = {};
      for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {
        childName = this.childNodes[i$];
        if (!(null != this[childName]))
          continue;
        children[childName] = in$(childName, this.listMembers) ? function (accum$) {
          for (var i$1 = 0, length$1 = this[childName].length; i$1 < length$1; ++i$1) {
            member = this[childName][i$1];
            jsNode = walk.call(member, fn, inScope, ancestry);
            inScope = union(inScope, envEnrichments(member, inScope));
            accum$.push(jsNode);
          }
          return accum$;
        }.call(this, []) : (child = this[childName], jsNode = walk.call(child, fn, inScope, ancestry), inScope = union(inScope, envEnrichments(child, inScope)), jsNode);
      }
      children.inScope = inScope;
      children.ancestry = ancestry;
      children.options = options;
      children.compile = function (node) {
        return walk.call(node, fn, inScope, ancestry);
      };
      ancestry.shift();
      jsNode = fn.call(this, children);
      jsNode.raw = this.raw;
      jsNode.line = this.line;
      jsNode.column = this.column - 1;
      jsNode.offset = this.offset;
      return jsNode;
    };
    generateSymbols = function () {
      var format, generateChildSymbols, generatedSymbols, generateName;
      generatedSymbols = {};
      format = function (pre, counter) {
        var cache$2, div, mod;
        if (pre) {
          return '' + pre + '$' + (counter || '');
        } else if (counter < 26) {
          return String.fromCharCode(97 + counter);
        } else {
          cache$2 = divMod(counter, 26);
          div = cache$2[0];
          mod = cache$2[1];
          return format(pre, div - 1) + format(pre, mod);
        }
      };
      generateName = function (node, param$) {
        var cache$2, formatted, nsCounters, usedSymbols;
        {
          cache$2 = param$;
          usedSymbols = cache$2.usedSymbols;
          nsCounters = cache$2.nsCounters;
        }
        if (owns(generatedSymbols, node.uniqueId)) {
          return generatedSymbols[node.uniqueId];
        } else {
          nsCounters[node.ns] = owns(nsCounters, node.ns) ? 1 + nsCounters[node.ns] : 0;
          while (in$(formatted = format(node.ns, nsCounters[node.ns]), usedSymbols)) {
            ++nsCounters[node.ns];
          }
          return generatedSymbols[node.uniqueId] = formatted;
        }
      };
      generateChildSymbols = generateMutatingWalker(function (state) {
        var alreadyDeclared, cache$2, declaredSymbols, declNames, decls, k, newNode, nsCounters, nsCounters_, params, undeclared, usedSymbols, v;
        state.declaredSymbols = union(state.declaredSymbols, declarationsNeeded(this));
        cache$2 = state;
        declaredSymbols = cache$2.declaredSymbols;
        usedSymbols = cache$2.usedSymbols;
        nsCounters = cache$2.nsCounters;
        newNode = this['instanceof'](JS.GenSym) ? (newNode = new JS.Identifier(generateName(this, state)), usedSymbols.push(newNode.name), newNode) : isScopeBoundary(this) ? (params = concatMap(this.params, collectIdentifiers), nsCounters_ = {}, function (accum$) {
          for (k in nsCounters) {
            if (!isOwn$(nsCounters, k))
              continue;
            v = nsCounters[k];
            accum$.push(nsCounters_[k] = v);
          }
          return accum$;
        }.call(this, []), newNode = generateChildSymbols(this, {
          declaredSymbols: union(declaredSymbols, params),
          usedSymbols: union(usedSymbols, params),
          nsCounters: nsCounters_
        }), newNode.body = forceBlock(newNode.body), undeclared = declarationsNeededRecursive(this.body), undeclared = difference(undeclared, map(variableDeclarations(this.body), function (id) {
          return id.name;
        })), alreadyDeclared = union(declaredSymbols, concatMap(this.params, collectIdentifiers)), declNames = nub(difference(undeclared, alreadyDeclared)), decls = map(declNames, function (name) {
          return new JS.Identifier(name);
        }), decls.length > 0 ? newNode.body.body.unshift(makeVarDeclaration(decls)) : void 0, newNode) : generateChildSymbols(this, state);
        state.declaredSymbols = union(declaredSymbols, declarationsNeededRecursive(newNode));
        return newNode;
      });
      return function (jsAST, state) {
        var inScope, needed, program;
        inScope = (null != state.declaredSymbols ? state.declaredSymbols : []).slice();
        program = generateChildSymbols(jsAST, state);
        if (program['instanceof'](JS.Program)) {
          needed = nub(difference(concatMap(program.body, declarationsNeededRecursive), inScope));
          if (needed.length > 0)
            program.body.unshift(makeVarDeclaration(needed.map(function (n) {
              return new JS.Identifier(n);
            })));
        }
        return program;
      };
    }();
    defaultRule = function () {
      throw new Error('compile: Non-exhaustive patterns in case: ' + this.className);
    };
    return function (ast, options) {
      var inScope, jsAST, rules;
      if (null == options)
        options = {};
      if (null != options.bare)
        options.bare;
      else
        options.bare = false;
      rules = this.rules;
      inScope = null != options.inScope ? options.inScope : [];
      jsAST = walk.call(ast, function () {
        return (null != rules[this.className] ? rules[this.className] : defaultRule).apply(this, arguments);
      }, inScope, [], options);
      return generateSymbols(jsAST, {
        declaredSymbols: inScope,
        usedSymbols: union(jsReserved.slice(), collectIdentifiers(jsAST)),
        nsCounters: {}
      });
    };
  }();
  return Compiler;
}();
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(87)(module)))

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {// Generated by CoffeeScript 2.0.0-beta9-dev
var ArrayExpression, AssignmentExpression, BinaryExpression, BlockStatement, cache$, cache$1, CallExpression, createNode, ctor, difference, exports, FunctionDeclaration, FunctionExpression, GenSym, handleLists, handlePrimitives, Identifier, isStatement, Literal, LogicalExpression, MemberExpression, NewExpression, node, nodeData, Nodes, ObjectExpression, params, Program, SequenceExpression, SwitchCase, SwitchStatement, TryStatement, UnaryExpression, UpdateExpression, VariableDeclaration;
difference = __webpack_require__(56).difference;
exports = null != ('undefined' !== typeof module && null != module ? module.exports : void 0) ? 'undefined' !== typeof module && null != module ? module.exports : void 0 : this;
createNode = function (type, props) {
  return function (super$) {
    extends$(class$, super$);
    function class$() {
      var i, prop;
      for (var i$ = 0, length$ = props.length; i$ < length$; ++i$) {
        prop = props[i$];
        i = i$;
        this[prop] = arguments[i];
      }
    }
    class$.prototype.type = type;
    class$.prototype.childNodes = props;
    return class$;
  }(Nodes);
};
this.Nodes = Nodes = function () {
  function Nodes() {
  }
  Nodes.prototype.listMembers = [];
  Nodes.prototype['instanceof'] = function () {
    var ctor, ctors;
    ctors = arguments.length > 0 ? [].slice.call(arguments, 0) : [];
    for (var i$ = 0, length$ = ctors.length; i$ < length$; ++i$) {
      ctor = ctors[i$];
      if (!(this.type === ctor.prototype.type))
        continue;
      return true;
    }
    return false;
  };
  Nodes.prototype.toBasicObject = function () {
    var child, obj, p;
    obj = { type: this.type };
    if (null != this.leadingComments)
      obj.leadingComments = this.leadingComments;
    for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {
      child = this.childNodes[i$];
      if (in$(child, this.listMembers)) {
        obj[child] = function (accum$) {
          for (var i$1 = 0, length$1 = this[child].length; i$1 < length$1; ++i$1) {
            p = this[child][i$1];
            accum$.push('undefined' !== typeof p && null != p ? p.toBasicObject() : void 0);
          }
          return accum$;
        }.call(this, []);
      } else {
        obj[child] = null != this[child] ? this[child].toBasicObject() : void 0;
      }
    }
    if (null != this.line && null != this.column)
      obj.loc = {
        start: {
          line: this.line,
          column: this.column
        }
      };
    if (null != this.offset)
      obj.range = [
        this.offset,
        null != this.raw ? this.offset + this.raw.length : void 0
      ];
    if (null != this.raw)
      obj.raw = this.raw;
    return obj;
  };
  return Nodes;
}();
nodeData = [
  [
    'ArrayExpression',
    false,
    ['elements']
  ],
  [
    'AssignmentExpression',
    false,
    [
      'operator',
      'left',
      'right'
    ]
  ],
  [
    'BinaryExpression',
    false,
    [
      'operator',
      'left',
      'right'
    ]
  ],
  [
    'BlockStatement',
    true,
    ['body']
  ],
  [
    'BreakStatement',
    true,
    ['label']
  ],
  [
    'CallExpression',
    false,
    [
      'callee',
      'arguments'
    ]
  ],
  [
    'CatchClause',
    true,
    [
      'param',
      'body'
    ]
  ],
  [
    'ConditionalExpression',
    false,
    [
      'test',
      'consequent',
      'alternate'
    ]
  ],
  [
    'ContinueStatement',
    true,
    ['label']
  ],
  [
    'DebuggerStatement',
    true,
    []
  ],
  [
    'DoWhileStatement',
    true,
    [
      'body',
      'test'
    ]
  ],
  [
    'EmptyStatement',
    true,
    []
  ],
  [
    'ExpressionStatement',
    true,
    ['expression']
  ],
  [
    'ForInStatement',
    true,
    [
      'left',
      'right',
      'body'
    ]
  ],
  [
    'ForStatement',
    true,
    [
      'init',
      'test',
      'update',
      'body'
    ]
  ],
  [
    'FunctionDeclaration',
    true,
    [
      'id',
      'params',
      'body'
    ]
  ],
  [
    'FunctionExpression',
    false,
    [
      'id',
      'params',
      'body'
    ]
  ],
  [
    'GenSym',
    false,
    [
      'ns',
      'uniqueId'
    ]
  ],
  [
    'Identifier',
    false,
    ['name']
  ],
  [
    'IfStatement',
    true,
    [
      'test',
      'consequent',
      'alternate'
    ]
  ],
  [
    'LabeledStatement',
    true,
    [
      'label',
      'body'
    ]
  ],
  [
    'Literal',
    false,
    ['value']
  ],
  [
    'LogicalExpression',
    false,
    [
      'operator',
      'left',
      'right'
    ]
  ],
  [
    'MemberExpression',
    false,
    [
      'computed',
      'object',
      'property'
    ]
  ],
  [
    'NewExpression',
    false,
    [
      'callee',
      'arguments'
    ]
  ],
  [
    'ObjectExpression',
    false,
    ['properties']
  ],
  [
    'Program',
    true,
    ['body']
  ],
  [
    'Property',
    true,
    [
      'key',
      'value'
    ]
  ],
  [
    'ReturnStatement',
    true,
    ['argument']
  ],
  [
    'SequenceExpression',
    false,
    ['expressions']
  ],
  [
    'SwitchCase',
    true,
    [
      'test',
      'consequent'
    ]
  ],
  [
    'SwitchStatement',
    true,
    [
      'discriminant',
      'cases'
    ]
  ],
  [
    'ThisExpression',
    false,
    []
  ],
  [
    'ThrowStatement',
    true,
    ['argument']
  ],
  [
    'TryStatement',
    true,
    [
      'block',
      'handlers',
      'finalizer'
    ]
  ],
  [
    'UnaryExpression',
    false,
    [
      'operator',
      'argument'
    ]
  ],
  [
    'UpdateExpression',
    false,
    [
      'operator',
      'prefix',
      'argument'
    ]
  ],
  [
    'VariableDeclaration',
    true,
    [
      'kind',
      'declarations'
    ]
  ],
  [
    'VariableDeclarator',
    true,
    [
      'id',
      'init'
    ]
  ],
  [
    'WhileStatement',
    true,
    [
      'test',
      'body'
    ]
  ],
  [
    'WithStatement',
    true,
    [
      'object',
      'body'
    ]
  ]
];
for (var i$ = 0, length$ = nodeData.length; i$ < length$; ++i$) {
  {
    cache$ = nodeData[i$];
    node = cache$[0];
    isStatement = cache$[1];
    params = cache$[2];
  }
  exports[node] = ctor = createNode(node, params);
  ctor.prototype.isStatement = isStatement;
  ctor.prototype.isExpression = !isStatement;
}
cache$1 = exports;
Program = cache$1.Program;
BlockStatement = cache$1.BlockStatement;
Literal = cache$1.Literal;
Identifier = cache$1.Identifier;
FunctionExpression = cache$1.FunctionExpression;
CallExpression = cache$1.CallExpression;
SequenceExpression = cache$1.SequenceExpression;
ArrayExpression = cache$1.ArrayExpression;
BinaryExpression = cache$1.BinaryExpression;
UnaryExpression = cache$1.UnaryExpression;
NewExpression = cache$1.NewExpression;
VariableDeclaration = cache$1.VariableDeclaration;
ObjectExpression = cache$1.ObjectExpression;
MemberExpression = cache$1.MemberExpression;
UpdateExpression = cache$1.UpdateExpression;
AssignmentExpression = cache$1.AssignmentExpression;
LogicalExpression = cache$1.LogicalExpression;
GenSym = cache$1.GenSym;
FunctionDeclaration = cache$1.FunctionDeclaration;
VariableDeclaration = cache$1.VariableDeclaration;
SwitchStatement = cache$1.SwitchStatement;
SwitchCase = cache$1.SwitchCase;
TryStatement = cache$1.TryStatement;
handlePrimitives = function (ctor, primitives) {
  ctor.prototype.childNodes = difference(ctor.prototype.childNodes, primitives);
  return ctor.prototype.toBasicObject = function () {
    var obj, primitive;
    obj = Nodes.prototype.toBasicObject.call(this);
    for (var i$1 = 0, length$1 = primitives.length; i$1 < length$1; ++i$1) {
      primitive = primitives[i$1];
      obj[primitive] = this[primitive];
    }
    return obj;
  };
};
handlePrimitives(AssignmentExpression, ['operator']);
handlePrimitives(BinaryExpression, ['operator']);
handlePrimitives(LogicalExpression, ['operator']);
handlePrimitives(GenSym, [
  'ns',
  'uniqueId'
]);
handlePrimitives(Identifier, ['name']);
handlePrimitives(Literal, ['value']);
handlePrimitives(MemberExpression, ['computed']);
handlePrimitives(UnaryExpression, ['operator']);
handlePrimitives(UpdateExpression, [
  'operator',
  'prefix'
]);
handlePrimitives(VariableDeclaration, ['kind']);
handleLists = function (ctor, listProps) {
  return ctor.prototype.listMembers = listProps;
};
handleLists(ArrayExpression, ['elements']);
handleLists(BlockStatement, ['body']);
handleLists(CallExpression, ['arguments']);
handleLists(FunctionDeclaration, ['params']);
handleLists(FunctionExpression, ['params']);
handleLists(NewExpression, ['arguments']);
handleLists(ObjectExpression, ['properties']);
handleLists(Program, ['body']);
handleLists(SequenceExpression, ['expressions']);
handleLists(SwitchCase, ['consequent']);
handleLists(SwitchStatement, ['cases']);
handleLists(TryStatement, ['handlers']);
handleLists(VariableDeclaration, ['declarations']);
FunctionDeclaration.prototype.generated = FunctionExpression.prototype.generated = false;
FunctionDeclaration.prototype.g = FunctionExpression.prototype.g = function () {
  this.generated = true;
  return this;
};
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  for (var key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(87)(module)))

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { program: peg$parseprogram, block: peg$parseblock, statement: peg$parsestatement },
        peg$startRuleFunction  = peg$parseprogram,

        peg$c0 = peg$FAILED,
        peg$c1 = null,
        peg$c2 = function(leader, b) {return rp(new CS.Program(b));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c3 = [],
        peg$c4 = function(s) {return s;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c5 = function(s, ss) {return rp(new CS.Block([s].concat([].slice.call(ss))));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c6 = void 0,
        peg$c7 = ";",
        peg$c8 = { type: "literal", value: ";", description: "\";\"" },
        peg$c9 = function(e) {return e;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c10 = function(left, right) {if (!right)
          return left;
        return rp(new CS.SeqOp(left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c11 = function(expr, postfixes) {return foldl(function (expr, postfixContainer) {
          var indicator, postfix;
          postfix = postfixContainer[1];
          indicator = postfix.type;
          switch (indicator) {
          case 'if':
            return rp(new CS.Conditional(postfix.cond, expr, null));
          case 'unless':
            return rp(new CS.NegatedConditional(new CS.LogicalNotOp(postfix.cond).g(), expr, null));
          case 'while':
            return rp(new CS.While(postfix.cond, expr));
          case 'until':
            return rp(new CS.NegatedWhile(new CS.LogicalNotOp(postfix.cond).g(), expr));
          case 'for-in':
            return rp(new CS.ForIn(postfix.val, postfix.key, postfix.list, postfix.step, postfix.filter, expr));
          case 'for-of':
            return rp(new CS.ForOf(postfix.own, postfix.key, postfix.val, postfix.obj, postfix.filter, expr));
          }
        }, expr, postfixes);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c12 = function(kw, e) {return {
          type: kw,
          cond: e
        };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c13 = ",",
        peg$c14 = { type: "literal", value: ",", description: "\",\"" },
        peg$c15 = function(a) {return a;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c16 = function(val, key) {return [
          val,
          key
        ];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c17 = function(valKey, list, step, filter) {var cache$, key, val;
        cache$ = null != valKey ? valKey : [
          null,
          null
        ];
        val = cache$[0];
        key = cache$[1];
        if (null != step)
          step;
        else
          step = new CS.Int(1).r('1').g();
        return {
          type: 'for-in',
          val: val,
          key: key,
          list: list,
          step: step,
          filter: filter
        };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c18 = function(own, key, val, obj, filter) {return {
          type: 'for-of',
          own: Boolean(own),
          key: key,
          val: val,
          obj: obj,
          filter: filter
        };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c19 = "=",
        peg$c20 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c21 = function(left, right) {return rp(new CS.AssignOp(left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c22 = "?",
        peg$c23 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c24 = function(left, op, right) {return rp(new CS.CompoundAssignOp(constructorLookup[op].prototype.className, left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c25 = "&&",
        peg$c26 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c27 = "||",
        peg$c28 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c29 = "**",
        peg$c30 = { type: "literal", value: "**", description: "\"**\"" },
        peg$c31 = /^[?&\^|*\/%]/,
        peg$c32 = { type: "class", value: "[?&\\^|*\\/%]", description: "[?&\\^|*\\/%]" },
        peg$c33 = "+",
        peg$c34 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c35 = "-",
        peg$c36 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c37 = "<<",
        peg$c38 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c39 = ">>>",
        peg$c40 = { type: "literal", value: ">>>", description: "\">>>\"" },
        peg$c41 = ">>",
        peg$c42 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c43 = "?=",
        peg$c44 = { type: "literal", value: "?=", description: "\"?=\"" },
        peg$c45 = function(left, right) {return rp(new CS.CompoundAssignOp(constructorLookup['?'].prototype.className, left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c46 = function(o, e) {return [
          o,
          e
        ];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c47 = function(left, rights) {var cache$, cache$1, expr, op;
        switch (rights.length) {
        case 0:
          return left;
        case 1:
          cache$ = rights[0];
          op = cache$[0];
          expr = cache$[1];
          return rp(new constructorLookup[op](left, expr));
        default:
          return rp(foldBinaryExpr((cache$1 = [left]).concat.apply(cache$1, [].slice.call(rights))));
        }
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c48 = "<=",
        peg$c49 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c50 = ">=",
        peg$c51 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c52 = "<",
        peg$c53 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c54 = ">",
        peg$c55 = { type: "literal", value: ">", description: "\">\"" },
        peg$c56 = "==",
        peg$c57 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c58 = "!=",
        peg$c59 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c60 = function(op) {return 'not ' + op;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c61 = function(e) {return rp(new CS.DoOp(e));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c62 = function(o) {return o;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c63 = function(ops, e) {return rp(foldr(function (e, op) {
          return new prefixConstructorLookup[op](e);
        }, e, ops));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c64 = "++",
        peg$c65 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c66 = "--",
        peg$c67 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c68 = "!",
        peg$c69 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c70 = "~",
        peg$c71 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c72 = function(a, f) {return rp(new CS.AssignOp(a, f));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c73 = function(e, ops) {return rp(foldl(function (e, op) {
          return new postfixConstructorLookup[op](e);
        }, e, ops));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c74 = "[..]",
        peg$c75 = { type: "literal", value: "[..]", description: "\"[..]\"" },
        peg$c76 = "(",
        peg$c77 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c78 = ")",
        peg$c79 = { type: "literal", value: ")", description: "\")\"" },
        peg$c80 = function(soaked, a) {return rp({
          op: soaked ? CS.SoakedFunctionApplication : CS.FunctionApplication,
          operands: [null != a ? a : []]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c81 = function(e, es) {return [e].concat([].slice.call(es));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c82 = /^[+-\/]/,
        peg$c83 = { type: "class", value: "[+-\\/]", description: "[+-\\/]" },
        peg$c84 = function(e, es, obj) {es.unshift(e);
        if (null != obj)
          es.push(obj);
        return es;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c85 = function(o) {return [o];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c86 = function(fn, accesses, secondaryArgs) {var cache$, list, secondaryCtor, soaked;
        if (null != accesses)
          fn = createMemberExpression(fn, accesses);
        if (null != secondaryArgs) {
          cache$ = secondaryArgs;
          soaked = cache$[0];
          list = cache$[1];
          secondaryCtor = soaked ? CS.SoakedFunctionApplication : CS.FunctionApplication;
          fn = rp(new secondaryCtor(fn, list));
        }
        return fn;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c87 = function(as) {return as;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c88 = function(as, bs) {return [].slice.call(as).concat([].slice.call(null != bs ? bs : []));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c89 = function(e) {return rp(new CS.NewOp(e, []));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c90 = function(e, args) {return rp(new CS.NewOp(e, args.operands[0]));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c91 = function(e, accesses) {return createMemberExpression(e, accesses);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c92 = function(e, args) {return rp(new CS.NewOp(e, args));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c93 = function(e, accesses) {var acc;
        acc = foldl(function (memo, a) {
          return memo.concat(a);
        }, [], accesses);
        return createMemberExpression(e, acc);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c94 = ".",
        peg$c95 = { type: "literal", value: ".", description: "\".\"" },
        peg$c96 = function(e) {return rp({
          op: CS.MemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c97 = "?.",
        peg$c98 = { type: "literal", value: "?.", description: "\"?.\"" },
        peg$c99 = function(e) {return rp({
          op: CS.SoakedMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c100 = "[",
        peg$c101 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c102 = "]",
        peg$c103 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c104 = function(e) {return rp({
          op: CS.DynamicMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c105 = "?[",
        peg$c106 = { type: "literal", value: "?[", description: "\"?[\"" },
        peg$c107 = function(e) {return rp({
          op: CS.SoakedDynamicMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c108 = "::",
        peg$c109 = { type: "literal", value: "::", description: "\"::\"" },
        peg$c110 = function(e) {return rp({
          op: CS.ProtoMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c111 = "::[",
        peg$c112 = { type: "literal", value: "::[", description: "\"::[\"" },
        peg$c113 = function(e) {return rp({
          op: CS.DynamicProtoMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c114 = "?::",
        peg$c115 = { type: "literal", value: "?::", description: "\"?::\"" },
        peg$c116 = function(e) {return rp({
          op: CS.SoakedProtoMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c117 = "?::[",
        peg$c118 = { type: "literal", value: "?::[", description: "\"?::[\"" },
        peg$c119 = function(e) {return rp({
          op: CS.SoakedDynamicProtoMemberAccessOp,
          operands: [e]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c120 = "..",
        peg$c121 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c122 = function(left, exclusive, right) {return rp({
          op: CS.Slice,
          operands: [
            !exclusive,
            left,
            right
          ]
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c123 = "@",
        peg$c124 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c125 = function() {return rp(new CS.This);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c126 = function(e) {return r(e.clone());
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c127 = function(a, m) {return rp(new CS.MemberAccessOp(a, m));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c128 = "`",
        peg$c129 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c130 = /^[^`]/,
        peg$c131 = { type: "class", value: "[^`]", description: "[^`]" },
        peg$c132 = function(d) {return rp(new CS.JavaScript(d));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c133 = "...",
        peg$c134 = { type: "literal", value: "...", description: "\"...\"" },
        peg$c135 = function(e) {return rp(new CS.Spread(e));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c136 = function(kw, cond, body, elseClause) {switch (kw) {
        case 'if':
          return rp(new CS.Conditional(cond, body.block, elseClause));
        case 'unless':
          return rp(new CS.NegatedConditional(new CS.LogicalNotOp(cond).g(), body.block, elseClause));
        }
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c137 = function(b) {return { block: b };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c138 = function(s) {return { block: s };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c139 = function() {return { block: null };
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c140 = function(b) {return b;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c141 = function(kw, cond, body) {switch (kw) {
        case 'while':
          return rp(new CS.While(cond, body.block));
        case 'until':
          return rp(new CS.NegatedWhile(new CS.LogicalNotOp(cond).g(), body.block));
        }
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c142 = function(body) {return rp(new CS.Loop(body.block));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c143 = function(body, c, f) {return rp(new CS.Try(body.block, null != (null != c ? c.assignee : void 0) ? null != c ? c.assignee : void 0 : null, null != (null != c ? c.block : void 0) ? null != c ? c.block : void 0 : null, null != (null != f ? f.block : void 0) ? null != f ? f.block : void 0 : null));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c144 = function(e, body) {return r({
          block: null != body ? body.block : new CS.Block([]),
          assignee: e
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c145 = function(body) {return r({ block: null != (null != body ? body.block : void 0) ? null != body ? body.block : void 0 : null });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c146 = function(name, parent, body) {var boundMembers, ctor, m, stmts;
        ctor = null;
        boundMembers = [];
        stmts = null != body ? null != body.statements ? body.statements : [body] : [];
        for (var i$ = 0, length$ = stmts.length; i$ < length$; ++i$) {
          m = stmts[i$];
          if (m['instanceof'](CS.Constructor)) {
            ctor = m;
          } else if (m['instanceof'](CS.ClassProtoAssignOp) && m.expression['instanceof'](CS.BoundFunction)) {
            boundMembers.push(m);
          }
        }
        return rp(new CS.Class(name, parent, ctor, body, boundMembers));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c147 = function(key) {return key['instanceof'](CS.String, CS.Identifier) && key.data === 'constructor';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c148 = ":",
        peg$c149 = { type: "literal", value: ":", description: "\":\"" },
        peg$c150 = function(key, fn) {if (fn['instanceof'](CS.BoundFunction))
          fn = c(new CS.Function(fn.parameters, fn.body).r(fn.raw), fn);
        return rp(new CS.Constructor(fn));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c151 = function(e) {return r({ expr: e });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c152 = function(key, e) {return rp(new CS.AssignOp(key, e.expr));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c153 = function(key, e) {return rp(new CS.ClassProtoAssignOp(key, e.expr));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c154 = function(own, key, val, obj, filter, body) {return rp(new CS.ForOf(Boolean(own), key, val, obj, filter, body.block));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c155 = function(valKey, list, step, filter, body) {var cache$, key, val;
        cache$ = null != valKey ? valKey : [
          null,
          null
        ];
        val = cache$[0];
        key = cache$[1];
        if (null != step)
          step;
        else
          step = new CS.Int(1).r('1').g();
        return rp(new CS.ForIn(val, key, list, step, filter, body.block));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c156 = function(e, body) {return rp(new CS.Switch(e, body.cases, null != body['else'] ? body['else'] : null));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c157 = function(b) {return r({
          cases: b.cases,
          'else': b['else']
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c158 = function(c) {return r({ cases: [c] });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c159 = function() {return r({ cases: [] });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c160 = function(c) {return c;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c161 = function(c, cs, elseClause) {return r({
          cases: [c].concat([].slice.call(cs)),
          'else': elseClause
        });
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c162 = function(conditions, body) {return rp(new CS.SwitchCase(conditions, body.block));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c163 = function(c, cs) {return [c].concat([].slice.call(cs));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c164 = function(p) {return p;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c165 = "->",
        peg$c166 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c167 = "=>",
        peg$c168 = { type: "literal", value: "=>", description: "\"=>\"" },
        peg$c169 = function(params, arrow, body) {var constructor;
        constructor = function () {
          switch (arrow) {
          case '->':
            return CS.Function;
          case '=>':
            return CS.BoundFunction;
          }
        }.call(this);
        return rp(new constructor(null != params ? params : [], body));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c170 = function(param, default_) {return rp(new CS.DefaultParam(param, default_));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c171 = function(a, rest) {return rp(null != rest ? new CS.Rest(a) : a);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c172 = function(left, exclusiveDot, right) {var inclusive;
        inclusive = !exclusiveDot;
        return rp(new CS.Range(inclusive, left, right));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c173 = function(members) {return rp(new CS.ArrayInitialiser(members));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c174 = function(members) {return members;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c175 = function(members) {return null != members ? members : [];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c176 = "{",
        peg$c177 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c178 = "}",
        peg$c179 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c180 = function(members) {return rp(new CS.ObjectInitialiser(members));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c181 = function(v) {var key;
        key = p(new CS.String(v.memberName).g());
        return rp(new CS.ObjectInitialiserMember(key, v));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c182 = function(v) {return rp(new CS.ObjectInitialiserMember(v, v));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c183 = function(i) {return rp(new CS.Identifier(i));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c184 = function(key, val) {return rp(new CS.ObjectInitialiserMember(key, val));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c185 = "__LINE__",
        peg$c186 = { type: "literal", value: "__LINE__", description: "\"__LINE__\"" },
        peg$c187 = function() {return rp(new CS.Int(line()));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c188 = "__FILENAME__",
        peg$c189 = { type: "literal", value: "__FILENAME__", description: "\"__FILENAME__\"" },
        peg$c190 = function() {return rp(new CS.String(null != options.inputSource ? options.inputSource : ''));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c191 = "__DATE__",
        peg$c192 = { type: "literal", value: "__DATE__", description: "\"__DATE__\"" },
        peg$c193 = function() {return rp(new CS.String(new Date().toDateString().slice(4)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c194 = "__TIME__",
        peg$c195 = { type: "literal", value: "__TIME__", description: "\"__TIME__\"" },
        peg$c196 = function() {return rp(new CS.String(new Date().toTimeString().slice(0, 8)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c197 = "__DATETIMEMS__",
        peg$c198 = { type: "literal", value: "__DATETIMEMS__", description: "\"__DATETIMEMS__\"" },
        peg$c199 = function() {return rp(new CS.Int(+new Date));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c200 = "__COFFEE_VERSION__",
        peg$c201 = { type: "literal", value: "__COFFEE_VERSION__", description: "\"__COFFEE_VERSION__\"" },
        peg$c202 = function() {return rp(new CS.String(__webpack_require__(111).version));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c203 = function() {return rp(new CS.Bool(true));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c204 = function() {return rp(new CS.Bool(false));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c205 = "0b",
        peg$c206 = { type: "literal", value: "0b", description: "\"0b\"" },
        peg$c207 = function(bs) {return rp(new CS.Int(parseInt(bs, 2)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c208 = "0o",
        peg$c209 = { type: "literal", value: "0o", description: "\"0o\"" },
        peg$c210 = function(os) {return rp(new CS.Int(parseInt(os, 8)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c211 = "0x",
        peg$c212 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c213 = function(hs) {return rp(new CS.Int(parseInt(hs, 16)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c214 = /^[eE]/,
        peg$c215 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c216 = /^[+\-]/,
        peg$c217 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
        peg$c218 = function(base, e, sign, exponent) {return rp(new CS.Float(parseFloat('' + base.data + e + (null != sign ? sign : '') + exponent.data)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c219 = function(integral, fractional) {if (fractional) {
          return rp(new CS.Float(parseFloat(integral + fractional)));
        } else {
          return rp(new CS.Int(+integral));
        }
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c220 = "0",
        peg$c221 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c222 = /^[1-9]/,
        peg$c223 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c224 = /^[0-9]/,
        peg$c225 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c226 = /^[0-9a-fA-F]/,
        peg$c227 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c228 = /^[0-7]/,
        peg$c229 = { type: "class", value: "[0-7]", description: "[0-7]" },
        peg$c230 = /^[01]/,
        peg$c231 = { type: "class", value: "[01]", description: "[01]" },
        peg$c232 = "\"\"\"",
        peg$c233 = { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
        peg$c234 = "'",
        peg$c235 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c236 = "\"",
        peg$c237 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c238 = function(d) {return rp(new CS.String(stripLeadingWhitespace(d.join(''))));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c239 = "'''",
        peg$c240 = { type: "literal", value: "'''", description: "\"'''\"" },
        peg$c241 = "#",
        peg$c242 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c243 = function(d) {return rp(new CS.String(d.join('')));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c244 = /^[^"'\\#]/,
        peg$c245 = { type: "class", value: "[^\"'\\\\#]", description: "[^\"'\\\\#]" },
        peg$c246 = "\\x",
        peg$c247 = { type: "literal", value: "\\x", description: "\"\\\\x\"" },
        peg$c248 = function(h) {return String.fromCharCode(parseInt(h, 16));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c249 = "\\0",
        peg$c250 = { type: "literal", value: "\\0", description: "\"\\\\0\"" },
        peg$c251 = function() {return '\0';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c252 = function() {throw new SyntaxError(['string data'], 'octal escape sequence', offset(), line(), column());
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c253 = "\\b",
        peg$c254 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
        peg$c255 = function() {return '\b';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c256 = "\\t",
        peg$c257 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
        peg$c258 = function() {return '\t';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c259 = "\\n",
        peg$c260 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
        peg$c261 = function() {return '\n';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c262 = "\\v",
        peg$c263 = { type: "literal", value: "\\v", description: "\"\\\\v\"" },
        peg$c264 = function() {return '\x0B';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c265 = "\\f",
        peg$c266 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
        peg$c267 = function() {return '\f';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c268 = "\\r",
        peg$c269 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
        peg$c270 = function() {return '\r';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c271 = "\\",
        peg$c272 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c273 = { type: "any", description: "any character" },
        peg$c274 = "#{",
        peg$c275 = { type: "literal", value: "#{", description: "\"#{\"" },
        peg$c276 = function(es) {return rp(createInterpolation(stripLeadingWhitespaceInterpolation(es)));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c277 = function(es) {return rp(createInterpolation(es));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c278 = "///",
        peg$c279 = { type: "literal", value: "///", description: "\"///\"" },
        peg$c280 = /^[ \r\n]/,
        peg$c281 = { type: "class", value: "[ \\r\\n]", description: "[ \\r\\n]" },
        peg$c282 = function() {return [rp(new CS.String('').g())];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c283 = /^[^\\\/#[ \r\n]/,
        peg$c284 = { type: "class", value: "[^\\\\\\/#[ \\r\\n]", description: "[^\\\\\\/#[ \\r\\n]" },
        peg$c285 = function(s) {return [rp(new CS.String(s).g())];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c286 = /^[gimy]/,
        peg$c287 = { type: "class", value: "[gimy]", description: "[gimy]" },
        peg$c288 = function(es, flags) {var interp;
        if (!isValidRegExpFlags(flags))
          throw new SyntaxError(['regular expression flags'], 'regular expression flags', offset(), line(), column());
        interp = createInterpolation(foldl(function (memo, e) {
          return memo.concat(e);
        }, [], es));
        if (interp instanceof CS.String)
          return p(new CS.RegExp(interp.data, flags));
        return rp(new CS.HeregExp(interp, flags));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c289 = "/",
        peg$c290 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c291 = /^[^\/\\[\n]/,
        peg$c292 = { type: "class", value: "[^\\/\\\\[\\n]", description: "[^\\/\\\\[\\n]" },
        peg$c293 = function(d, flags) {if (!isValidRegExpFlags(flags))
          throw new SyntaxError(['regular expression flags'], 'regular expression flags', offset(), line(), column());
        return rp(new CS.RegExp(d, flags));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c294 = /^[^\\\]\n]/,
        peg$c295 = { type: "class", value: "[^\\\\\\]\\n]", description: "[^\\\\\\]\\n]" },
        peg$c296 = function(h) {return h[0];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c297 = /^[^\\\/\]]/,
        peg$c298 = { type: "class", value: "[^\\\\\\/\\]]", description: "[^\\\\\\/\\]]" },
        peg$c299 = function(s) {return p(new CS.String(s));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c300 = function(d) {return [p(new CS.String('['))].concat([].slice.call(d), [p(new CS.String(']'))]);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c301 = function(d) {return [rp(new CS.String(d))];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c302 = function(s) {return [rp(new CS.String(s))];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c303 = function(c) {return [rp(new CS.String(c))];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c304 = function(e) {return [e];
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c305 = function(e) {return rp(new CS.Throw(e));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c306 = function(e) {return rp(new CS.Return(e));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c307 = function() {return rp(new CS.Continue);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c308 = function() {return rp(new CS.Break);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c309 = function() {return rp(new CS.Debugger);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c310 = function() {return rp(new CS.Undefined);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c311 = function() {return rp(new CS.Null);
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c312 = "arguments",
        peg$c313 = { type: "literal", value: "arguments", description: "\"arguments\"" },
        peg$c314 = "eval",
        peg$c315 = { type: "literal", value: "eval", description: "\"eval\"" },
        peg$c316 = function(i) {return i;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c317 = function(v) {var key;
        key = rp(new CS.String(v.memberName));
        return rp(new CS.ObjectInitialiserMember(key, v));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c318 = function(i) {return rp(new CS.ObjectInitialiserMember(i, i));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c319 = /^[$_]/,
        peg$c320 = { type: "class", value: "[$_]", description: "[$_]" },
        peg$c321 = "###",
        peg$c322 = { type: "literal", value: "###", description: "\"###\"" },
        peg$c323 = /^[^#]/,
        peg$c324 = { type: "class", value: "[^#]", description: "[^#]" },
        peg$c325 = /^[\t\x0B\f \xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/,
        peg$c326 = { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]", description: "[\\t\\x0B\\f \\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]" },
        peg$c327 = "\r",
        peg$c328 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c329 = "\n",
        peg$c330 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c331 = "\uEFEF",
        peg$c332 = { type: "literal", value: "\uEFEF", description: "\"\\uEFEF\"" },
        peg$c333 = function(ws) {return ws;
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c334 = "\uEFFE",
        peg$c335 = { type: "literal", value: "\uEFFE", description: "\"\\uEFFE\"" },
        peg$c336 = "\uEFFF",
        peg$c337 = { type: "literal", value: "\uEFFF", description: "\"\\uEFFF\"" },
        peg$c338 = function() {return '';
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c339 = "and",
        peg$c340 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c341 = "break",
        peg$c342 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c343 = "by",
        peg$c344 = { type: "literal", value: "by", description: "\"by\"" },
        peg$c345 = "catch",
        peg$c346 = { type: "literal", value: "catch", description: "\"catch\"" },
        peg$c347 = "continue",
        peg$c348 = { type: "literal", value: "continue", description: "\"continue\"" },
        peg$c349 = "class",
        peg$c350 = { type: "literal", value: "class", description: "\"class\"" },
        peg$c351 = "delete",
        peg$c352 = { type: "literal", value: "delete", description: "\"delete\"" },
        peg$c353 = "debugger",
        peg$c354 = { type: "literal", value: "debugger", description: "\"debugger\"" },
        peg$c355 = "do",
        peg$c356 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c357 = "else",
        peg$c358 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c359 = "extends",
        peg$c360 = { type: "literal", value: "extends", description: "\"extends\"" },
        peg$c361 = "false",
        peg$c362 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c363 = "finally",
        peg$c364 = { type: "literal", value: "finally", description: "\"finally\"" },
        peg$c365 = "for",
        peg$c366 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c367 = "if",
        peg$c368 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c369 = "in",
        peg$c370 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c371 = "instanceof",
        peg$c372 = { type: "literal", value: "instanceof", description: "\"instanceof\"" },
        peg$c373 = "is",
        peg$c374 = { type: "literal", value: "is", description: "\"is\"" },
        peg$c375 = "isnt",
        peg$c376 = { type: "literal", value: "isnt", description: "\"isnt\"" },
        peg$c377 = "loop",
        peg$c378 = { type: "literal", value: "loop", description: "\"loop\"" },
        peg$c379 = "new",
        peg$c380 = { type: "literal", value: "new", description: "\"new\"" },
        peg$c381 = "no",
        peg$c382 = { type: "literal", value: "no", description: "\"no\"" },
        peg$c383 = "not",
        peg$c384 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c385 = "null",
        peg$c386 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c387 = "of",
        peg$c388 = { type: "literal", value: "of", description: "\"of\"" },
        peg$c389 = "off",
        peg$c390 = { type: "literal", value: "off", description: "\"off\"" },
        peg$c391 = "on",
        peg$c392 = { type: "literal", value: "on", description: "\"on\"" },
        peg$c393 = "or",
        peg$c394 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c395 = "own",
        peg$c396 = { type: "literal", value: "own", description: "\"own\"" },
        peg$c397 = "return",
        peg$c398 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c399 = "switch",
        peg$c400 = { type: "literal", value: "switch", description: "\"switch\"" },
        peg$c401 = "then",
        peg$c402 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c403 = "this",
        peg$c404 = { type: "literal", value: "this", description: "\"this\"" },
        peg$c405 = "throw",
        peg$c406 = { type: "literal", value: "throw", description: "\"throw\"" },
        peg$c407 = "true",
        peg$c408 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c409 = "try",
        peg$c410 = { type: "literal", value: "try", description: "\"try\"" },
        peg$c411 = "typeof",
        peg$c412 = { type: "literal", value: "typeof", description: "\"typeof\"" },
        peg$c413 = "undefined",
        peg$c414 = { type: "literal", value: "undefined", description: "\"undefined\"" },
        peg$c415 = "unless",
        peg$c416 = { type: "literal", value: "unless", description: "\"unless\"" },
        peg$c417 = "until",
        peg$c418 = { type: "literal", value: "until", description: "\"until\"" },
        peg$c419 = "when",
        peg$c420 = { type: "literal", value: "when", description: "\"when\"" },
        peg$c421 = "while",
        peg$c422 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c423 = "yes",
        peg$c424 = { type: "literal", value: "yes", description: "\"yes\"" },
        peg$c425 = "super",
        peg$c426 = { type: "literal", value: "super", description: "\"super\"" },
        peg$c427 = "case",
        peg$c428 = { type: "literal", value: "case", description: "\"case\"" },
        peg$c429 = "default",
        peg$c430 = { type: "literal", value: "default", description: "\"default\"" },
        peg$c431 = "function",
        peg$c432 = { type: "literal", value: "function", description: "\"function\"" },
        peg$c433 = "var",
        peg$c434 = { type: "literal", value: "var", description: "\"var\"" },
        peg$c435 = "void",
        peg$c436 = { type: "literal", value: "void", description: "\"void\"" },
        peg$c437 = "with",
        peg$c438 = { type: "literal", value: "with", description: "\"with\"" },
        peg$c439 = "const",
        peg$c440 = { type: "literal", value: "const", description: "\"const\"" },
        peg$c441 = "let",
        peg$c442 = { type: "literal", value: "let", description: "\"let\"" },
        peg$c443 = "enum",
        peg$c444 = { type: "literal", value: "enum", description: "\"enum\"" },
        peg$c445 = "export",
        peg$c446 = { type: "literal", value: "export", description: "\"export\"" },
        peg$c447 = "import",
        peg$c448 = { type: "literal", value: "import", description: "\"import\"" },
        peg$c449 = "native",
        peg$c450 = { type: "literal", value: "native", description: "\"native\"" },
        peg$c451 = "implements",
        peg$c452 = { type: "literal", value: "implements", description: "\"implements\"" },
        peg$c453 = "interface",
        peg$c454 = { type: "literal", value: "interface", description: "\"interface\"" },
        peg$c455 = "package",
        peg$c456 = { type: "literal", value: "package", description: "\"package\"" },
        peg$c457 = "private",
        peg$c458 = { type: "literal", value: "private", description: "\"private\"" },
        peg$c459 = "protected",
        peg$c460 = { type: "literal", value: "protected", description: "\"protected\"" },
        peg$c461 = "public",
        peg$c462 = { type: "literal", value: "public", description: "\"public\"" },
        peg$c463 = "static",
        peg$c464 = { type: "literal", value: "static", description: "\"static\"" },
        peg$c465 = "yield",
        peg$c466 = { type: "literal", value: "yield", description: "\"yield\"" },
        peg$c467 = "\\u",
        peg$c468 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
        peg$c469 = function(h0, h1, h2, h3) {return String.fromCharCode(parseInt(h0 + h1 + h2 + h3, 16));
        function isOwn$(o, p) {
          return {}.hasOwnProperty.call(o, p);
        }
        function in$(member, list) {
          for (var i = 0, length = list.length; i < length; ++i)
            if (i in list && list[i] === member)
              return true;
          return false;
        }},
        peg$c470 = /^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0531-\u0556\u10A0-\u10C5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uFF21-\uFF3Aa-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0561-\u0587\u1D00-\u1D2B\u1D62-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7C\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2D00-\u2D25\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7FA\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D61\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA717-\uA71F\uA770\uA788\uA9CF\uAA70\uAADD\uFF70\uFF9E\uFF9F\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC\u0EDD\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BC0-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u2135-\u2138\u2D30-\u2D65\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400\u4DB5\u4E00\u9FCB\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA2D\uFA30-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/,
        peg$c471 = { type: "class", value: "[A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uFF21-\\uFF3Aa-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]", description: "[A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uFF21-\\uFF3Aa-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]" },
        peg$c472 = "\uD82C",
        peg$c473 = { type: "literal", value: "\uD82C", description: "\"\\uD82C\"" },
        peg$c474 = /^[\uDC00\uDC01]/,
        peg$c475 = { type: "class", value: "[\\uDC00\\uDC01]", description: "[\\uDC00\\uDC01]" },
        peg$c476 = "\uD808",
        peg$c477 = { type: "literal", value: "\uD808", description: "\"\\uD808\"" },
        peg$c478 = /^[\uDC00-\uDF6E]/,
        peg$c479 = { type: "class", value: "[\\uDC00-\\uDF6E]", description: "[\\uDC00-\\uDF6E]" },
        peg$c480 = "\uD869",
        peg$c481 = { type: "literal", value: "\uD869", description: "\"\\uD869\"" },
        peg$c482 = /^[\uDED6\uDF00]/,
        peg$c483 = { type: "class", value: "[\\uDED6\\uDF00]", description: "[\\uDED6\\uDF00]" },
        peg$c484 = "\uD809",
        peg$c485 = { type: "literal", value: "\uD809", description: "\"\\uD809\"" },
        peg$c486 = /^[\uDC00-\uDC62]/,
        peg$c487 = { type: "class", value: "[\\uDC00-\\uDC62]", description: "[\\uDC00-\\uDC62]" },
        peg$c488 = "\uD835",
        peg$c489 = { type: "literal", value: "\uD835", description: "\"\\uD835\"" },
        peg$c490 = /^[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]/,
        peg$c491 = { type: "class", value: "[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]", description: "[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]" },
        peg$c492 = "\uD804",
        peg$c493 = { type: "literal", value: "\uD804", description: "\"\\uD804\"" },
        peg$c494 = /^[\uDC03-\uDC37\uDC83-\uDCAF]/,
        peg$c495 = { type: "class", value: "[\\uDC03-\\uDC37\\uDC83-\\uDCAF]", description: "[\\uDC03-\\uDC37\\uDC83-\\uDCAF]" },
        peg$c496 = "\uD800",
        peg$c497 = { type: "literal", value: "\uD800", description: "\"\\uD800\"" },
        peg$c498 = /^[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1E\uDF30-\uDF40\uDF42-\uDF49\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]/,
        peg$c499 = { type: "class", value: "[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]", description: "[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]" },
        peg$c500 = "\uD80C",
        peg$c501 = { type: "literal", value: "\uD80C", description: "\"\\uD80C\"" },
        peg$c502 = /^[\uDC00-\uDFFF]/,
        peg$c503 = { type: "class", value: "[\\uDC00-\\uDFFF]", description: "[\\uDC00-\\uDFFF]" },
        peg$c504 = "\uD801",
        peg$c505 = { type: "literal", value: "\uD801", description: "\"\\uD801\"" },
        peg$c506 = /^[\uDC00-\uDC9D]/,
        peg$c507 = { type: "class", value: "[\\uDC00-\\uDC9D]", description: "[\\uDC00-\\uDC9D]" },
        peg$c508 = "\uD86E",
        peg$c509 = { type: "literal", value: "\uD86E", description: "\"\\uD86E\"" },
        peg$c510 = /^[\uDC1D]/,
        peg$c511 = { type: "class", value: "[\\uDC1D]", description: "[\\uDC1D]" },
        peg$c512 = "\uD803",
        peg$c513 = { type: "literal", value: "\uD803", description: "\"\\uD803\"" },
        peg$c514 = /^[\uDC00-\uDC48]/,
        peg$c515 = { type: "class", value: "[\\uDC00-\\uDC48]", description: "[\\uDC00-\\uDC48]" },
        peg$c516 = "\uD840",
        peg$c517 = { type: "literal", value: "\uD840", description: "\"\\uD840\"" },
        peg$c518 = /^[\uDC00]/,
        peg$c519 = { type: "class", value: "[\\uDC00]", description: "[\\uDC00]" },
        peg$c520 = "\uD87E",
        peg$c521 = { type: "literal", value: "\uD87E", description: "\"\\uD87E\"" },
        peg$c522 = /^[\uDC00-\uDE1D]/,
        peg$c523 = { type: "class", value: "[\\uDC00-\\uDE1D]", description: "[\\uDC00-\\uDE1D]" },
        peg$c524 = "\uD86D",
        peg$c525 = { type: "literal", value: "\uD86D", description: "\"\\uD86D\"" },
        peg$c526 = /^[\uDF34\uDF40]/,
        peg$c527 = { type: "class", value: "[\\uDF34\\uDF40]", description: "[\\uDF34\\uDF40]" },
        peg$c528 = "\uD81A",
        peg$c529 = { type: "literal", value: "\uD81A", description: "\"\\uD81A\"" },
        peg$c530 = /^[\uDC00-\uDE38]/,
        peg$c531 = { type: "class", value: "[\\uDC00-\\uDE38]", description: "[\\uDC00-\\uDE38]" },
        peg$c532 = "\uD802",
        peg$c533 = { type: "literal", value: "\uD802", description: "\"\\uD802\"" },
        peg$c534 = /^[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDD00-\uDD15\uDD20-\uDD39\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72]/,
        peg$c535 = { type: "class", value: "[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72]", description: "[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72]" },
        peg$c536 = "\uD80D",
        peg$c537 = { type: "literal", value: "\uD80D", description: "\"\\uD80D\"" },
        peg$c538 = /^[\uDC00-\uDC2E]/,
        peg$c539 = { type: "class", value: "[\\uDC00-\\uDC2E]", description: "[\\uDC00-\\uDC2E]" },
        peg$c540 = /^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0900-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1DC0-\u1DE6\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F\uA67C\uA67D\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE26\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u19B0-\u19C0\u19C8\u19C9\u1A19-\u1A1B\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF2\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BD-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]/,
        peg$c541 = { type: "class", value: "[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]", description: "[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]" },
        peg$c542 = "\uDB40",
        peg$c543 = { type: "literal", value: "\uDB40", description: "\"\\uDB40\"" },
        peg$c544 = /^[\uDD00-\uDDEF]/,
        peg$c545 = { type: "class", value: "[\\uDD00-\\uDDEF]", description: "[\\uDD00-\\uDDEF]" },
        peg$c546 = "\uD834",
        peg$c547 = { type: "literal", value: "\uD834", description: "\"\\uD834\"" },
        peg$c548 = /^[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44\uDD65\uDD66\uDD6D-\uDD72]/,
        peg$c549 = { type: "class", value: "[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDD65\\uDD66\\uDD6D-\\uDD72]", description: "[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDD65\\uDD66\\uDD6D-\\uDD72]" },
        peg$c550 = /^[\uDC01\uDC38-\uDC46\uDC80\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8]/,
        peg$c551 = { type: "class", value: "[\\uDC01\\uDC38-\\uDC46\\uDC80\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8]", description: "[\\uDC01\\uDC38-\\uDC46\\uDC80\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8]" },
        peg$c552 = /^[\uDDFD]/,
        peg$c553 = { type: "class", value: "[\\uDDFD]", description: "[\\uDDFD]" },
        peg$c554 = /^[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F]/,
        peg$c555 = { type: "class", value: "[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]", description: "[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]" },
        peg$c556 = /^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/,
        peg$c557 = { type: "class", value: "[0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]", description: "[0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]" },
        peg$c558 = /^[\uDFCE-\uDFFF]/,
        peg$c559 = { type: "class", value: "[\\uDFCE-\\uDFFF]", description: "[\\uDFCE-\\uDFFF]" },
        peg$c560 = /^[\uDC66-\uDC6F]/,
        peg$c561 = { type: "class", value: "[\\uDC66-\\uDC6F]", description: "[\\uDC66-\\uDC6F]" },
        peg$c562 = /^[\uDCA0-\uDCA9]/,
        peg$c563 = { type: "class", value: "[\\uDCA0-\\uDCA9]", description: "[\\uDCA0-\\uDCA9]" },
        peg$c564 = /^[_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F]/,
        peg$c565 = { type: "class", value: "[_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]", description: "[_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]" },
        peg$c566 = "\u200C",
        peg$c567 = { type: "literal", value: "\u200C", description: "\"\\u200C\"" },
        peg$c568 = "\u200D",
        peg$c569 = { type: "literal", value: "\u200D", description: "\"\\u200D\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseprogram() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 0,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINATOR();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetoplevelBlock();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c2(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetoplevelBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 1,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsetoplevelStatement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERMINATOR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetoplevelStatement();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c4(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetoplevelStatement();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c4(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetoplevelStatement() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 2,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsereturn();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecontinue();
        if (s2 === peg$FAILED) {
          s2 = peg$parsebreak();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c6;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestatement();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c4(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 3,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsestatement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERMINATOR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestatement();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c4(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestatement();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c4(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsestatement() {
      var s0;

      var key    = peg$currPos * 204 + 4,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseexpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereturn();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecontinue();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebreak();
            if (s0 === peg$FAILED) {
              s0 = peg$parsethrow();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedebugger();
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpression() {
      var s0;

      var key    = peg$currPos * 204 + 5,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseexpressionworthy();
      if (s0 === peg$FAILED) {
        s0 = peg$parseseqExpression();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryStatement() {
      var s0;

      var key    = peg$currPos * 204 + 6,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsesecondaryExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereturn();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecontinue();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebreak();
            if (s0 === peg$FAILED) {
              s0 = peg$parsethrow();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedebugger();
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryExpression() {
      var s0;

      var key    = peg$currPos * 204 + 7,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseexpressionworthy();
      if (s0 === peg$FAILED) {
        s0 = peg$parseassignmentExpression();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryExpressionNoImplicitObjectCall() {
      var s0;

      var key    = peg$currPos * 204 + 8,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseexpressionworthy();
      if (s0 === peg$FAILED) {
        s0 = peg$parseassignmentExpressionNoImplicitObjectCall();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpressionworthy() {
      var s0;

      var key    = peg$currPos * 204 + 9,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsefunctionLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseconditional();
        if (s0 === peg$FAILED) {
          s0 = peg$parsewhile();
          if (s0 === peg$FAILED) {
            s0 = peg$parseloop();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetry();
              if (s0 === peg$FAILED) {
                s0 = peg$parseforOf();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseforIn();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseswitch();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseimplicitObjectLiteral();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseclass();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseseqExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 10,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsepostfixControlFlowExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s4 = peg$c7;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 === peg$FAILED) {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c9(s7);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c10(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepostfixControlFlowExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 11,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesecondaryStatement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsepostfixControlFlowOp();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepostfixControlFlowOp();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c11(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepostfixControlFlowOp() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      var key    = peg$currPos * 204 + 12,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNLESS();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseassignmentExpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c12(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseWHILE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseUNTIL();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseassignmentExpression();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c12(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFOR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseAssignable();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c13;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c14); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseAssignable();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s6;
                          s7 = peg$c15(s9);
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c16(s4, s6);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseIN();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseassignmentExpression();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$currPos;
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseBY();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseassignmentExpression();
                            if (s11 !== peg$FAILED) {
                              peg$reportedPos = s7;
                              s8 = peg$c15(s11);
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$c0;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$c0;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                      if (s7 === peg$FAILED) {
                        s7 = peg$c1;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$currPos;
                        s9 = peg$parse_();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseWHEN();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse_();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parseassignmentExpression();
                              if (s12 !== peg$FAILED) {
                                peg$reportedPos = s8;
                                s9 = peg$c15(s12);
                                s8 = s9;
                              } else {
                                peg$currPos = s8;
                                s8 = peg$c0;
                              }
                            } else {
                              peg$currPos = s8;
                              s8 = peg$c0;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$c0;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c0;
                        }
                        if (s8 === peg$FAILED) {
                          s8 = peg$c1;
                        }
                        if (s8 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c17(s3, s6, s7, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFOR();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseOWN();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseAssignable();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s7 = peg$c13;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c14); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseAssignable();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (s10 !== peg$FAILED) {
                              peg$reportedPos = s6;
                              s7 = peg$c15(s9);
                              s6 = s7;
                            } else {
                              peg$currPos = s6;
                              s6 = peg$c0;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$c0;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseOF();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseassignmentExpression();
                            if (s9 !== peg$FAILED) {
                              s10 = peg$currPos;
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parseWHEN();
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parse_();
                                  if (s13 !== peg$FAILED) {
                                    s14 = peg$parseassignmentExpression();
                                    if (s14 !== peg$FAILED) {
                                      peg$reportedPos = s10;
                                      s11 = peg$c15(s14);
                                      s10 = s11;
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$c0;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$c0;
                              }
                              if (s10 === peg$FAILED) {
                                s10 = peg$c1;
                              }
                              if (s10 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c18(s3, s4, s6, s9, s10);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseassignmentExpression() {
      var s0;

      var key    = peg$currPos * 204 + 13,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseassignmentOp();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecompoundAssignmentOp();
        if (s0 === peg$FAILED) {
          s0 = peg$parseexistsAssignmentOp();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebinaryExpression();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseassignmentOp() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 14,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c19;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c6;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpression();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c21(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecompoundAssignmentOp() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 204 + 15,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCompoundAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c22;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c6;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCompoundAssignmentOperators();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c19;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseTERMINDENT();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesecondaryExpression();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseDEDENT();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s6;
                      s7 = peg$c9(s8);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseTERMINATOR();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsesecondaryExpression();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s6;
                        s7 = peg$c9(s9);
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c24(s1, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCompoundAssignmentOperators() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 16,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseAND();
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c27) {
            s1 = peg$c27;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$parseOR();
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c29) {
                s1 = peg$c29;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c30); }
              }
              if (s1 === peg$FAILED) {
                if (peg$c31.test(input.charAt(peg$currPos))) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c32); }
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 43) {
                    s2 = peg$c33;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 43) {
                      s4 = peg$c33;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c34); }
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                      s3 = peg$c6;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                      s2 = [s2, s3];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c0;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s2 = peg$c35;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c36); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$currPos;
                      peg$silentFails++;
                      if (input.charCodeAt(peg$currPos) === 45) {
                        s4 = peg$c35;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c36); }
                      }
                      peg$silentFails--;
                      if (s4 === peg$FAILED) {
                        s3 = peg$c6;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                      if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c0;
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c37) {
                        s1 = peg$c37;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c38); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c39) {
                          s1 = peg$c39;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c40); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c41) {
                            s1 = peg$c41;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c42); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexistsAssignmentOp() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 17,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCompoundAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c43) {
            s3 = peg$c43;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpression();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c45(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseassignmentExpressionNoImplicitObjectCall() {
      var s0;

      var key    = peg$currPos * 204 + 18,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseassignmentOpNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecompoundAssignmentOpNoImplicitObjectCall();
        if (s0 === peg$FAILED) {
          s0 = peg$parseexistsAssignmentOpNoImplicitObjectCall();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebinaryExpressionNoImplicitObjectCall();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseassignmentOpNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 19,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c19;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c6;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c21(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecompoundAssignmentOpNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 204 + 20,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCompoundAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c22;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c6;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCompoundAssignmentOperators();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c19;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseTERMINDENT();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseDEDENT();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s6;
                      s7 = peg$c9(s8);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseTERMINATOR();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s6;
                        s7 = peg$c9(s9);
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c24(s1, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexistsAssignmentOpNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 21,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCompoundAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c43) {
            s3 = peg$c43;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c45(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebinaryExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 22,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprefixExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebinaryOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTERMINATOR();
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexpressionworthy();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseprefixExpression();
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c46(s5, s8);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebinaryOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseTERMINATOR();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseexpressionworthy();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseprefixExpression();
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c46(s5, s8);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c47(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebinaryOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 23,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCompoundAssignmentOperators();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c19;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c48) {
          s0 = peg$c48;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c50) {
            s0 = peg$c50;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 60) {
              s0 = peg$c52;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s0 = peg$c54;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c56) {
                  s0 = peg$c56;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIS();
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c58) {
                      s0 = peg$c58;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c59); }
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseISNT();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseEXTENDS();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseINSTANCEOF();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseIN();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseOF();
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseNOT();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parse_();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseINSTANCEOF();
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$parseIN();
                                      if (s3 === peg$FAILED) {
                                        s3 = peg$parseOF();
                                      }
                                    }
                                    if (s3 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c60(s3);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebinaryExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 24,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprefixExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebinaryOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTERMINATOR();
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexpressionworthy();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseprefixExpressionNoImplicitObjectCall();
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c46(s5, s8);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebinaryOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseTERMINATOR();
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseexpressionworthy();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseprefixExpressionNoImplicitObjectCall();
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c46(s5, s8);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c47(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseprefixExpression() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 25,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsepostfixExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDO();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenfe();
            if (s3 === peg$FAILED) {
              s3 = peg$parseexpressionworthy();
              if (s3 === peg$FAILED) {
                s3 = peg$parseprefixExpression();
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c61(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          s3 = peg$parsePrefixOperators();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c62(s3);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              s3 = peg$parsePrefixOperators();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c62(s3);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpressionworthy();
            if (s2 === peg$FAILED) {
              s2 = peg$parseprefixExpression();
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c63(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePrefixOperators() {
      var s0;

      var key    = peg$currPos * 204 + 26,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.substr(peg$currPos, 2) === peg$c64) {
        s0 = peg$c64;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s0 = peg$c66;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c33;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s0 = peg$c35;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 33) {
                s0 = peg$c68;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c69); }
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parseNOT();
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 126) {
                    s0 = peg$c70;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c71); }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDO();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseTYPEOF();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseDELETE();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenfe() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 27,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseunassignable();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c6;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAssignable();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c19;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsefunctionLiteral();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c72(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseprefixExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 28,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsepostfixExpressionNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDO();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenfe();
            if (s3 === peg$FAILED) {
              s3 = peg$parseexpressionworthy();
              if (s3 === peg$FAILED) {
                s3 = peg$parseprefixExpressionNoImplicitObjectCall();
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c61(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$currPos;
          s3 = peg$parsePrefixOperators();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c62(s3);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$currPos;
              s3 = peg$parsePrefixOperators();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c62(s3);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpressionworthy();
            if (s2 === peg$FAILED) {
              s2 = peg$parseprefixExpressionNoImplicitObjectCall();
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c63(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepostfixExpression() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 29,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseleftHandSideExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsePostfixOperators();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsePostfixOperators();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePostfixOperators() {
      var s0;

      var key    = peg$currPos * 204 + 30,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 63) {
        s0 = peg$c22;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c74) {
          s0 = peg$c74;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s0 = peg$c64;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c66) {
              s0 = peg$c66;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepostfixExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 31,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseleftHandSideExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsePostfixOperators();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsePostfixOperators();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseleftHandSideExpression() {
      var s0;

      var key    = peg$currPos * 204 + 32,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsecallExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenewExpression();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseargumentList() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 33,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c22;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c76;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseargumentListContents();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c78;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c79); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c80(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseargumentListContents() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 34,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseargument();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseTERMINATOR();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseargument();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c15(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseTERMINATOR();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseargument();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c15(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c13;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseTERMINATOR();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c81(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTERMINDENT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseargumentListContents();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDEDENT();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseTERMINATOR();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c15(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseargument() {
      var s0;

      var key    = peg$currPos * 204 + 35,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsespread();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryArgumentList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      var key    = peg$currPos * 204 + 36,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        if (peg$c82.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryArgument();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c13;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseTERMINATOR();
                  if (s9 === peg$FAILED) {
                    s9 = peg$c1;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsesecondaryArgument();
                      if (s11 !== peg$FAILED) {
                        peg$reportedPos = s5;
                        s6 = peg$c15(s11);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseTERMINATOR();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsesecondaryArgument();
                        if (s11 !== peg$FAILED) {
                          peg$reportedPos = s5;
                          s6 = peg$c15(s11);
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c13;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseTERMINDENT();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseimplicitObjectLiteral();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseDEDENT();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c62(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c84(s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTERMINDENT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseimplicitObjectLiteral();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDEDENT();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c85(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryArgument() {
      var s0;

      var key    = peg$currPos * 204 + 37,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsespread();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesingleLineImplicitObjectLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesecondaryExpression();
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseleftHandSideExpressionNoImplicitObjectCall() {
      var s0;

      var key    = peg$currPos * 204 + 38,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsecallExpressionNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenewExpressionNoImplicitObjectCall();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryArgumentListNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      var key    = peg$currPos * 204 + 39,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        if (peg$c82.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryArgumentNoImplicitObjectCall();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c13;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseTERMINATOR();
                  if (s9 === peg$FAILED) {
                    s9 = peg$c1;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsesecondaryArgumentNoImplicitObjectCall();
                      if (s11 !== peg$FAILED) {
                        peg$reportedPos = s5;
                        s6 = peg$c9(s11);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseTERMINATOR();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c1;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsesecondaryArgumentNoImplicitObjectCall();
                        if (s11 !== peg$FAILED) {
                          peg$reportedPos = s5;
                          s6 = peg$c9(s11);
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c0;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c81(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesecondaryArgumentNoImplicitObjectCall() {
      var s0;

      var key    = peg$currPos * 204 + 40,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsespreadNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesecondaryExpressionNoImplicitObjectCall();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecallExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 41,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsememberExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecallExpressionAccesses();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c22;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesecondaryArgumentList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c86(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecallExpressionAccesses() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 42,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecallExpressionAccesses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c87(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseargumentList();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMemberAccessOps();
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseargumentList();
            if (s2 === peg$FAILED) {
              s2 = peg$parseMemberAccessOps();
            }
          }
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsecallExpressionAccesses();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c88(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecallExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 43,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsememberExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseargumentList();
        if (s3 === peg$FAILED) {
          s3 = peg$parseMemberAccessOps();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseargumentList();
          if (s3 === peg$FAILED) {
            s3 = peg$parseMemberAccessOps();
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c22;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesecondaryArgumentListNoImplicitObjectCall();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c86(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenewExpression() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 44,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsememberExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNEW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpressionworthy();
            if (s3 === peg$FAILED) {
              s3 = peg$parsenewExpression();
              if (s3 === peg$FAILED) {
                s3 = peg$parseprefixExpression();
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c89(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenewExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 45,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsememberExpressionNoImplicitObjectCall();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNEW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpressionworthy();
            if (s3 === peg$FAILED) {
              s3 = peg$parsenewExpressionNoImplicitObjectCall();
              if (s3 === peg$FAILED) {
                s3 = peg$parseprefixExpressionNoImplicitObjectCall();
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c89(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsememberExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 46,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprimaryExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseNEW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsememberExpression();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseargumentList();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c90(s4, s5);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseMemberAccessOps();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseMemberAccessOps();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c91(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNEW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsememberExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesecondaryArgumentList();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c92(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsememberAccess() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 47,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprimaryExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseNEW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsememberExpression();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseargumentList();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c90(s4, s5);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseargumentList();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseMemberAccessOps();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseMemberAccessOps();
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseargumentList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMemberAccessOps();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseMemberAccessOps();
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c93(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsecontextVar();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseMemberAccessOps() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 204 + 48,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c94;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseidentifierName();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseMemberAccessOps();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseMemberAccessOps();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseDEDENT();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c96(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTERMINATOR();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c94;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c95); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseTERMINATOR();
              if (s4 === peg$FAILED) {
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseidentifierName();
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c96(s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c97) {
            s1 = peg$c97;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c98); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidentifierName();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c99(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c100;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c101); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpression();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s5 = peg$c102;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c103); }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c104(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c105) {
                s1 = peg$c105;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c106); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpression();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s5 = peg$c102;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c103); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c107(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c108) {
                  s1 = peg$c108;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseidentifierName();
                    if (s3 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c110(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c111) {
                    s1 = peg$c111;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c112); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseexpression();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 93) {
                            s5 = peg$c102;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
                          }
                          if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c113(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c114) {
                      s1 = peg$c114;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c115); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseidentifierName();
                        if (s3 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c116(s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 4) === peg$c117) {
                        s1 = peg$c117;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c118); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseexpression();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 93) {
                                s5 = peg$c102;
                                peg$currPos++;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c103); }
                              }
                              if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c119(s3);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 91) {
                          s1 = peg$c100;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c101); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse_();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseassignmentExpression();
                            if (s3 === peg$FAILED) {
                              s3 = peg$c1;
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parse_();
                              if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c120) {
                                  s5 = peg$c120;
                                  peg$currPos += 2;
                                } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                }
                                if (s5 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 46) {
                                    s6 = peg$c94;
                                    peg$currPos++;
                                  } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                  }
                                  if (s6 === peg$FAILED) {
                                    s6 = peg$c1;
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parseassignmentExpression();
                                      if (s8 === peg$FAILED) {
                                        s8 = peg$c1;
                                      }
                                      if (s8 !== peg$FAILED) {
                                        s9 = peg$parse_();
                                        if (s9 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 93) {
                                            s10 = peg$c102;
                                            peg$currPos++;
                                          } else {
                                            s10 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                          }
                                          if (s10 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c122(s3, s6, s8);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsememberExpressionNoImplicitObjectCall() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 49,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseprimaryExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseNEW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsememberExpressionNoImplicitObjectCall();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseargumentList();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c90(s4, s5);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseMemberAccessOps();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseMemberAccessOps();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c91(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNEW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsememberExpressionNoImplicitObjectCall();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesecondaryArgumentListNoImplicitObjectCall();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c92(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseprimaryExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 50,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsemacro();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumbers();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebool();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenull();
            if (s0 === peg$FAILED) {
              s0 = peg$parseundefined();
              if (s0 === peg$FAILED) {
                s0 = peg$parsecontextVar();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseTHIS();
                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 64) {
                      s1 = peg$c123;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c124); }
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c125();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseidentifier();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parserange();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsearrayLiteral();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseobjectLiteral();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseinterpolation();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseJSLiteral();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsestring();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseregexp();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 40) {
                                      s1 = peg$c76;
                                      peg$currPos++;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c77); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseTERMINDENT();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseexpression();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parseDEDENT();
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parseTERMINATOR();
                                            if (s5 === peg$FAILED) {
                                              s5 = peg$c1;
                                            }
                                            if (s5 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 41) {
                                                s6 = peg$c78;
                                                peg$currPos++;
                                              } else {
                                                s6 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                              }
                                              if (s6 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c126(s3);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 40) {
                                        s1 = peg$c76;
                                        peg$currPos++;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c77); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parse_();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseexpression();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parse_();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parseTERMINATOR();
                                              if (s5 === peg$FAILED) {
                                                s5 = peg$c1;
                                              }
                                              if (s5 !== peg$FAILED) {
                                                s6 = peg$parse_();
                                                if (s6 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 41) {
                                                    s7 = peg$c78;
                                                    peg$currPos++;
                                                  } else {
                                                    s7 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                                  }
                                                  if (s7 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c126(s3);
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecontextVar() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 51,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c123;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c124); }
      }
      if (s2 !== peg$FAILED) {
        peg$reportedPos = s1;
        s2 = peg$c125();
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifierName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c127(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseJSLiteral() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 52,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c128;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c130.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c130.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c131); }
          }
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 96) {
            s3 = peg$c128;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c129); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c132(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsespread() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 53,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsepostfixExpression();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c133) {
          s2 = peg$c133;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c135(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsespreadNoImplicitObjectCall() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 54,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsepostfixExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c133) {
          s2 = peg$c133;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c135(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseconditional() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 55,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNLESS();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseassignmentExpressionNoImplicitObjectCall();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseconditionalBody();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseelseClause();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c136(s1, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseconditionalBody() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 56,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINDENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseblock();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDEDENT();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c137(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTERMINATOR();
        if (s1 === peg$FAILED) {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseTHEN();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestatement();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c138(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTHEN();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c139();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseelseClause() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 57,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINATOR();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseELSE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefunctionBody();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c140(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsewhile() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 58,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseWHILE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNTIL();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseassignmentExpressionNoImplicitObjectCall();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseconditionalBody();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c141(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseloop() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 59,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseLOOP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseconditionalBody();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c142(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetry() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 60,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTRY();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetryBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecatchClause();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsefinallyClause();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c143(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetryBody() {
      var s0, s1;

      var key    = peg$currPos * 204 + 61,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsefunctionBody();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c137(s1);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecatchClause() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 62,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINATOR();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCATCH();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAssignable();
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseconditionalBody();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c144(s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefinallyClause() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 63,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINATOR();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFINALLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetryBody();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c145(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclass() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 64,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCLASS();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAssignable();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c15(s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEXTENDS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesecondaryExpressionNoImplicitObjectCall();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c9(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseclassBody();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c146(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclassBody() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 65,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINDENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseclassBlock();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDEDENT();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c140(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTHEN();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseclassStatement();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c4(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTHEN();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$c1;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclassBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 66,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseclassStatement();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERMINATOR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseclassStatement();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c4(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseclassStatement();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c4(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c5(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclassStatement() {
      var s0;

      var key    = peg$currPos * 204 + 67,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseconstructor();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclassProtoAssignment();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestaticAssignment();
          if (s0 === peg$FAILED) {
            s0 = peg$parseexpression();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseconstructor() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 68,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseObjectInitialiserKeys();
      if (s2 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s3 = peg$c147(s2);
        if (s3) {
          s3 = peg$c6;
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c9(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseexpression();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c9(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c150(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsestaticAssignment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 69,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsecontextVar();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c151(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseTERMINATOR();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseexpression();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c151(s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c152(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseclassProtoAssignment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 70,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseObjectInitialiserKeys();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseTERMINDENT();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDEDENT();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c151(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parsesingleLineImplicitObjectLiteral();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c151(s6);
                }
                s5 = s6;
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseTERMINATOR();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsesecondaryExpression();
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s5;
                        s6 = peg$c151(s8);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c153(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseforOf() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      var key    = peg$currPos * 204 + 71,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseFOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseOWN();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAssignable();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseAssignable();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        peg$reportedPos = s6;
                        s7 = peg$c15(s9);
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseOF();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseassignmentExpressionNoImplicitObjectCall();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$currPos;
                          s12 = peg$parseWHEN();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse_();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parseassignmentExpressionNoImplicitObjectCall();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parse_();
                                if (s15 !== peg$FAILED) {
                                  peg$reportedPos = s11;
                                  s12 = peg$c9(s14);
                                  s11 = s12;
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$c0;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$c0;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$c0;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c0;
                          }
                          if (s11 === peg$FAILED) {
                            s11 = peg$c1;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseconditionalBody();
                            if (s12 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c154(s3, s4, s6, s9, s11, s12);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseforIn() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 204 + 72,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseFOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAssignable();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c13;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseAssignable();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      peg$reportedPos = s6;
                      s7 = peg$c15(s9);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c16(s4, s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIN();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseassignmentExpressionNoImplicitObjectCall();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parseBY();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseassignmentExpressionNoImplicitObjectCall();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();
                          if (s12 !== peg$FAILED) {
                            peg$reportedPos = s8;
                            s9 = peg$c9(s11);
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$c0;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c0;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parseWHEN();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseassignmentExpressionNoImplicitObjectCall();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse_();
                            if (s13 !== peg$FAILED) {
                              peg$reportedPos = s9;
                              s10 = peg$c9(s12);
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$c0;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$c0;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c1;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseconditionalBody();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c155(s3, s6, s8, s9, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseswitch() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 73,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseSWITCH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpressionworthy();
          if (s3 === peg$FAILED) {
            s3 = peg$parseassignmentExpression();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseswitchBody();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c156(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseswitchBody() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 74,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINDENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseswitchBlock();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDEDENT();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c157(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTHEN();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecase();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c158(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseTHEN();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c159();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseswitchBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 75,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsecase();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERMINATOR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecase();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c160(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecase();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c160(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTERMINATOR();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseelseClause();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c9(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTERMINATOR();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c161(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecase() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 76,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseWHEN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecaseConditions();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseconditionalBody();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c162(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecaseConditions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 77,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseassignmentExpressionNoImplicitObjectCall();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseassignmentExpressionNoImplicitObjectCall();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c160(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseassignmentExpressionNoImplicitObjectCall();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c160(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c163(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefunctionLiteral() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 78,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c76;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseTERMINDENT();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseparameterList();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseDEDENT();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseTERMINATOR();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c164(s6);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$parseparameterList();
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c78;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s1;
                  s2 = peg$c164(s4);
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c165) {
          s2 = peg$c165;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c166); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c167) {
            s2 = peg$c167;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c168); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunctionBody();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c169(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsefunctionBody() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 79,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTERMINDENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseblock();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDEDENT();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c140(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestatement();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseparameter() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 80,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAssignable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesecondaryExpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c170(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parserest();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parserest() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 81,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAssignable();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c133) {
          s2 = peg$c133;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c171(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseparameterList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 82,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseparameter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c13;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseTERMINATOR();
            if (s7 === peg$FAILED) {
              s7 = peg$c1;
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseTERMINATOR();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseparameter();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c9(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c13;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTERMINATOR();
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseTERMINATOR();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseparameter();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c9(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parserange() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 204 + 83,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c120) {
                s5 = peg$c120;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s6 = peg$c94;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c95); }
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesecondaryExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s10 = peg$c102;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c103); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c172(s3, s6, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteral() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 84,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsearrayLiteralBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c102;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c173(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteralBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 85,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsearrayLiteralMemberList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c174(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsearrayLiteralMemberList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteralMemberList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 86,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsearrayLiteralMember();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsearrayLiteralMemberSeparator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsearrayLiteralMember();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c9(s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsearrayLiteralMemberSeparator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsearrayLiteralMember();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c9(s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsearrayLiteralMemberSeparator();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c81(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteralMember() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 87,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsespread();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTERMINDENT();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseimplicitObjectLiteral();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseDEDENT();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c62(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsearrayLiteralMemberSeparator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 88,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseTERMINATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c13;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c13;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s1 = input.substring(s0, peg$currPos);
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseobjectLiteral() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 89,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c176;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseobjectLiteralBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c178;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c179); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c180(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseobjectLiteralBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 90,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseobjectLiteralMemberList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c174(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseobjectLiteralMemberList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseobjectLiteralMemberList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 91,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseobjectLiteralMember();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsearrayLiteralMemberSeparator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseobjectLiteralMember();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c9(s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsearrayLiteralMemberSeparator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseobjectLiteralMember();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c9(s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c13;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c81(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseobjectLiteralMember() {
      var s0, s1;

      var key    = peg$currPos * 204 + 92,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseimplicitObjectLiteralMember();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecontextVar();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c181(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseObjectInitialiserKeys();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c182(s1);
          }
          s0 = s1;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseObjectInitialiserKeys() {
      var s0, s1;

      var key    = peg$currPos * 204 + 93,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseidentifierName();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c183(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumbers();
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteral() {
      var s0, s1;

      var key    = peg$currPos * 204 + 94,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseimplicitObjectLiteralMemberList();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c180(s1);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteralMemberList() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 95,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseimplicitObjectLiteralMember();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseimplicitObjectLiteralMemberSeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseimplicitObjectLiteralMember();
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c9(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseimplicitObjectLiteralMemberSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseimplicitObjectLiteralMember();
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c9(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteralMemberSeparator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 96,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINATOR();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c13;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c13;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseTERMINATOR();
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteralMember() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 97,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseObjectInitialiserKeys();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseimplicitObjectLiteralMemberValue();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c184(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimplicitObjectLiteralMemberValue() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 98,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsesingleLineImplicitObjectLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTERMINDENT();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpression();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseDEDENT();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c62(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesingleLineImplicitObjectLiteral() {
      var s0, s1;

      var key    = peg$currPos * 204 + 99,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsesingleLineImplicitObjectLiteralMemberList();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c180(s1);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesingleLineImplicitObjectLiteralMemberList() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 100,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseimplicitObjectLiteralMember();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsesingleLineImplicitObjectLiteralMemberSeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseimplicitObjectLiteralMember();
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c9(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsesingleLineImplicitObjectLiteralMemberSeparator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseimplicitObjectLiteralMember();
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c9(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesingleLineImplicitObjectLiteralMemberSeparator() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 101,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c13;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsemacro() {
      var s0, s1;

      var key    = peg$currPos * 204 + 102,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c185) {
        s1 = peg$c185;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c187();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 12) === peg$c188) {
          s1 = peg$c188;
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c190();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c191) {
            s1 = peg$c191;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c192); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c193();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c194) {
              s1 = peg$c194;
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c195); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c196();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 14) === peg$c197) {
                s1 = peg$c197;
                peg$currPos += 14;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c198); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c199();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 18) === peg$c200) {
                  s1 = peg$c200;
                  peg$currPos += 18;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c201); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c202();
                }
                s0 = s1;
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebool() {
      var s0, s1;

      var key    = peg$currPos * 204 + 103,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTRUE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseYES();
        if (s1 === peg$FAILED) {
          s1 = peg$parseON();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c203();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFALSE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseNO();
          if (s1 === peg$FAILED) {
            s1 = peg$parseOFF();
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c204();
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNumbers() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 104,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c205) {
        s1 = peg$c205;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c206); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parsebit();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsebit();
          }
        } else {
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c207(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c208) {
          s1 = peg$c208;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseoctalDigit();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseoctalDigit();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s3 = input.substring(s2, peg$currPos);
          }
          s2 = s3;
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c210(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c211) {
            s1 = peg$c211;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c212); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsehexDigit();
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsehexDigit();
              }
            } else {
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s3 = input.substring(s2, peg$currPos);
            }
            s2 = s3;
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c213(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedecimal();
            if (s1 !== peg$FAILED) {
              if (peg$c214.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c215); }
              }
              if (s2 !== peg$FAILED) {
                if (peg$c216.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c217); }
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsedecimal();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c218(s1, s2, s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsedecimal();
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedecimal() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 105,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c94;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsedecimalDigit();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsedecimalDigit();
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c219(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 106,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c220;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (peg$c222.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c223); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedecimalDigit();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsedecimalDigit();
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s1 = input.substring(s0, peg$currPos);
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedecimalDigit() {
      var s0;

      var key    = peg$currPos * 204 + 107,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c224.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsehexDigit() {
      var s0;

      var key    = peg$currPos * 204 + 108,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c226.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c227); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseoctalDigit() {
      var s0;

      var key    = peg$currPos * 204 + 109,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c228.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebit() {
      var s0;

      var key    = peg$currPos * 204 + 110,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c230.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 204 + 111,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c232) {
        s1 = peg$c232;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestringData();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c234;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c235); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s5 = peg$c236;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s6 = peg$c236;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c237); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s8 = peg$c236;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c6;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s4 = input.substring(s3, peg$currPos);
            }
            s3 = s4;
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsestringData();
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c234;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c235); }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s5 = peg$c236;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s6 = peg$c236;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c237); }
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s8 = peg$c236;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c237); }
                    }
                    peg$silentFails--;
                    if (s8 === peg$FAILED) {
                      s7 = peg$c6;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
                if (s4 !== peg$FAILED) {
                  s4 = input.substring(s3, peg$currPos);
                }
                s3 = s4;
              }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c232) {
            s3 = peg$c232;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c233); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c238(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c239) {
          s1 = peg$c239;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c240); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsestringData();
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c236;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 35) {
                s3 = peg$c241;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c242); }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                  s5 = peg$c234;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s6 = peg$c234;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c235); }
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$c1;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s8 = peg$c234;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c235); }
                    }
                    peg$silentFails--;
                    if (s8 === peg$FAILED) {
                      s7 = peg$c6;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
                if (s4 !== peg$FAILED) {
                  s4 = input.substring(s3, peg$currPos);
                }
                s3 = s4;
              }
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsestringData();
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c236;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s3 = peg$c241;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c242); }
                  }
                  if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s5 = peg$c234;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c235); }
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s6 = peg$c234;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c235); }
                      }
                      if (s6 === peg$FAILED) {
                        s6 = peg$c1;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s8 = peg$c234;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c235); }
                        }
                        peg$silentFails--;
                        if (s8 === peg$FAILED) {
                          s7 = peg$c6;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                        if (s7 !== peg$FAILED) {
                          s5 = [s5, s6, s7];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c0;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                    if (s4 !== peg$FAILED) {
                      s4 = input.substring(s3, peg$currPos);
                    }
                    s3 = s4;
                  }
                }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c239) {
              s3 = peg$c239;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c240); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c238(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c236;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c237); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsestringData();
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c234;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c235); }
              }
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsestringData();
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s3 = peg$c234;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c236;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c237); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c243(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
              s1 = peg$c234;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c235); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsestringData();
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s3 = peg$c236;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s3 = peg$c241;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c242); }
                  }
                }
              }
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsestringData();
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s3 = peg$c236;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c237); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 35) {
                      s3 = peg$c241;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c242); }
                    }
                  }
                }
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s3 = peg$c234;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c243(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsestringData() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 112,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c244.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c245); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnicodeEscapeSequence();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c246) {
            s1 = peg$c246;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c247); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$currPos;
            s4 = peg$parsehexDigit();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsehexDigit();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s3 = input.substring(s2, peg$currPos);
            }
            s2 = s3;
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c248(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c249) {
              s1 = peg$c249;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c250); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              s3 = peg$parsedecimalDigit();
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = peg$c6;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c251();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c249) {
                s1 = peg$c249;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c250); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parsedecimalDigit();
                peg$silentFails--;
                if (s3 !== peg$FAILED) {
                  peg$currPos = s2;
                  s2 = peg$c6;
                } else {
                  s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c252();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c253) {
                  s1 = peg$c253;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c254); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c255();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c256) {
                    s1 = peg$c256;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c257); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c258();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c259) {
                      s1 = peg$c259;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c260); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c261();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c262) {
                        s1 = peg$c262;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c263); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c264();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c265) {
                          s1 = peg$c265;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c266); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c267();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c268) {
                            s1 = peg$c268;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c269); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c270();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 92) {
                              s1 = peg$c271;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c272); }
                            }
                            if (s1 !== peg$FAILED) {
                              if (input.length > peg$currPos) {
                                s2 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c273); }
                              }
                              if (s2 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c160(s2);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 35) {
                                s1 = peg$c241;
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c242); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$currPos;
                                peg$silentFails++;
                                if (input.charCodeAt(peg$currPos) === 123) {
                                  s3 = peg$c176;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c177); }
                                }
                                peg$silentFails--;
                                if (s3 === peg$FAILED) {
                                  s2 = peg$c6;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                if (s2 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c160(s1);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseinterpolation() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 204 + 113,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c232) {
        s1 = peg$c232;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parsestringData();
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s5 = peg$c234;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c235); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s7 = peg$c236;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s8 = peg$c236;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c237); }
              }
              if (s8 === peg$FAILED) {
                s8 = peg$c1;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s10 = peg$c236;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                peg$silentFails--;
                if (s10 === peg$FAILED) {
                  s9 = peg$c6;
                } else {
                  peg$currPos = s9;
                  s9 = peg$c0;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            if (s6 !== peg$FAILED) {
              s6 = input.substring(s5, peg$currPos);
            }
            s5 = s6;
          }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsestringData();
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s5 = peg$c234;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c235); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s7 = peg$c236;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s8 = peg$c236;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c237); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s10 = peg$c236;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c237); }
                    }
                    peg$silentFails--;
                    if (s10 === peg$FAILED) {
                      s9 = peg$c6;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  s6 = input.substring(s5, peg$currPos);
                }
                s5 = s6;
              }
            }
          }
        } else {
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s3;
          s4 = peg$c243(s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c274) {
            s4 = peg$c274;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c275); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c178;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c9(s6);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parsestringData();
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s5 = peg$c234;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c235); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s7 = peg$c236;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c237); }
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s8 = peg$c236;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c237); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s10 = peg$c236;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c237); }
                    }
                    peg$silentFails--;
                    if (s10 === peg$FAILED) {
                      s9 = peg$c6;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  s6 = input.substring(s5, peg$currPos);
                }
                s5 = s6;
              }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsestringData();
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s5 = peg$c234;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c235); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$currPos;
                    s6 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s7 = peg$c236;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c237); }
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s8 = peg$c236;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c237); }
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$c1;
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c236;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c237); }
                        }
                        peg$silentFails--;
                        if (s10 === peg$FAILED) {
                          s9 = peg$c6;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                        if (s9 !== peg$FAILED) {
                          s7 = [s7, s8, s9];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                    if (s6 !== peg$FAILED) {
                      s6 = input.substring(s5, peg$currPos);
                    }
                    s5 = s6;
                  }
                }
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c243(s4);
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c274) {
                s4 = peg$c274;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c275); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseexpression();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s8 = peg$c178;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c179); }
                      }
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s3;
                        s4 = peg$c9(s6);
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c232) {
            s3 = peg$c232;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c233); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c276(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c236;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c237); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parsestringData();
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s5 = peg$c234;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c235); }
            }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsestringData();
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s5 = peg$c234;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
              }
            }
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c243(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c274) {
              s4 = peg$c274;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c275); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpression();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c178;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c179); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s3;
                      s4 = peg$c9(s6);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = [];
              s5 = peg$parsestringData();
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s5 = peg$c234;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsestringData();
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s5 = peg$c234;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c235); }
                    }
                  }
                }
              } else {
                s4 = peg$c0;
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c243(s4);
              }
              s3 = s4;
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c274) {
                  s4 = peg$c274;
                  peg$currPos += 2;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c275); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseexpression();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s8 = peg$c178;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c179); }
                        }
                        if (s8 !== peg$FAILED) {
                          peg$reportedPos = s3;
                          s4 = peg$c9(s6);
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c0;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c236;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c277(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseregexp() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 114,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c278) {
        s1 = peg$c278;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c279); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        if (peg$c280.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c281); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c280.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c281); }
            }
          }
        } else {
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s3;
          s4 = peg$c282();
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = [];
          if (peg$c283.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c284); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c283.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c284); }
              }
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            s5 = input.substring(s4, peg$currPos);
          }
          s4 = s5;
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c285(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$parsehereregexpData();
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = [];
            if (peg$c280.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c281); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c280.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c281); }
                }
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c282();
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$currPos;
              s5 = [];
              if (peg$c283.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c284); }
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$c283.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c284); }
                  }
                }
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                s5 = input.substring(s4, peg$currPos);
              }
              s4 = s5;
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c285(s4);
              }
              s3 = s4;
              if (s3 === peg$FAILED) {
                s3 = peg$parsehereregexpData();
              }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c278) {
            s3 = peg$c278;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c279); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c286.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c287); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c286.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c287); }
              }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c288(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s1 = peg$c289;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c290); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseregexpData();
          if (s4 === peg$FAILED) {
            s4 = [];
            if (peg$c291.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c292); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c291.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c292); }
                }
              }
            } else {
              s4 = peg$c0;
            }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseregexpData();
            if (s4 === peg$FAILED) {
              s4 = [];
              if (peg$c291.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c292); }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c291.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c292); }
                  }
                }
              } else {
                s4 = peg$c0;
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s3 = input.substring(s2, peg$currPos);
          }
          s2 = s3;
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s3 = peg$c289;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c290); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              if (peg$c286.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c287); }
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c286.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c287); }
                }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c293(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseregexpData() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 115,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c294.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c295); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseregexpData();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c294.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c295); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseregexpData();
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c102;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c271;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c272); }
        }
        if (s1 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c273); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsehereregexpData() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 116,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsehereregexpData();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s3;
          s4 = peg$c296(s4);
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (peg$c297.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c298); }
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c299(s4);
          }
          s3 = s4;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsehereregexpData();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c296(s4);
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (peg$c297.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c298); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c299(s4);
            }
            s3 = s4;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c102;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c300(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s3 = peg$c271;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c272); }
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c273); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s2 = input.substring(s1, peg$currPos);
        }
        s1 = s2;
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c301(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c289;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c290); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s4 = peg$c289;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c290); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c289;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c290); }
              }
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s2 = input.substring(s1, peg$currPos);
          }
          s1 = s2;
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c302(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s1 = peg$c241;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c242); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 123) {
                s3 = peg$c176;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c177); }
              }
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = peg$c6;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c303(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c274) {
                s1 = peg$c274;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c275); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpression();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s5 = peg$c178;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c179); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c304(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsethrow() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 117,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTHROW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryExpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c305(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsereturn() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 118,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseRETURN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesecondaryExpression();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c306(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecontinue() {
      var s0, s1;

      var key    = peg$currPos * 204 + 119,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseCONTINUE();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c307();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsebreak() {
      var s0, s1;

      var key    = peg$currPos * 204 + 120,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseBREAK();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c308();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedebugger() {
      var s0, s1;

      var key    = peg$currPos * 204 + 121,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseDEBUGGER();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c309();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseundefined() {
      var s0, s1;

      var key    = peg$currPos * 204 + 122,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseUNDEFINED();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c310();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenull() {
      var s0, s1;

      var key    = peg$currPos * 204 + 123,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseNULL();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c311();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseunassignable() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 124,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c312) {
        s1 = peg$c312;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c313); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c314) {
          s1 = peg$c314;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c315); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCompoundAssignable() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 125,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsememberAccess();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$parseunassignable();
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = peg$c6;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c316(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAssignable() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 126,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsememberAccess();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$parseunassignable();
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = peg$c6;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c316(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsepositionalDestructuring();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenamedDestructuring();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepositionalDestructuring() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 127,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepositionalDestructuringBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c102;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c173(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepositionalDestructuringBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 128,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepositionalDestructuringMemberList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c174(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsepositionalDestructuringMemberList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepositionalDestructuringMemberList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 204 + 129,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsepositionalDestructuringMember();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsepositionalDestructuringMember();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c9(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsepositionalDestructuringMember();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c9(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsepositionalDestructuringMember() {
      var s0;

      var key    = peg$currPos * 204 + 130,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parserest();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAssignable();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenamedDestructuring() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 131,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c176;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenamedDestructuringBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTERMINATOR();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c178;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c179); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c180(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenamedDestructuringBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 132,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseTERMINDENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenamedDestructuringMemberList();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDEDENT();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c174(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenamedDestructuringMemberList();
          if (s2 === peg$FAILED) {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenamedDestructuringMemberList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 204 + 133,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsenamedDestructuringMember();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseTERMINATOR();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c13;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s6 === peg$FAILED) {
              s6 = peg$parseTERMINATOR();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTERMINATOR();
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsenamedDestructuringMember();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c9(s9);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseTERMINATOR();
          if (s4 === peg$FAILED) {
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c13;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$parseTERMINATOR();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseTERMINATOR();
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsenamedDestructuringMember();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s3;
                      s4 = peg$c9(s9);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsenamedDestructuringMember() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 134,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseObjectInitialiserKeys();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c148;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAssignable();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c184(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecontextVar();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c317(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          peg$silentFails++;
          s2 = peg$parseunassignable();
          peg$silentFails--;
          if (s2 === peg$FAILED) {
            s1 = peg$c6;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseidentifier();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c318(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 135,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsereserved();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c6;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifierName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c183(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseidentifierName() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 136,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseidentifierStart();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseidentifierPart();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseidentifierPart();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseidentifierStart() {
      var s0;

      var key    = peg$currPos * 204 + 137,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseUnicodeLetter();
      if (s0 === peg$FAILED) {
        if (peg$c319.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c320); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnicodeEscapeSequence();
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseidentifierPart() {
      var s0;

      var key    = peg$currPos * 204 + 138,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseidentifierStart();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnicodeCombiningMark();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnicodeDigit();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnicodeConnectorPunctuation();
            if (s0 === peg$FAILED) {
              s0 = peg$parseZWNJ();
              if (s0 === peg$FAILED) {
                s0 = peg$parseZWJ();
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parse__() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 139,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsewhitespace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseblockComment();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsewhitespace();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsewhitespace();
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parse_() {
      var s0;

      var key    = peg$currPos * 204 + 140,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parse__();
      if (s0 === peg$FAILED) {
        s0 = peg$c1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsecomment() {
      var s0;

      var key    = peg$currPos * 204 + 141,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parseblockComment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesingleLineComment();
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsesingleLineComment() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 142,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c241;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c242); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseTERM();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = peg$c6;
        } else {
          peg$currPos = s5;
          s5 = peg$c0;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c273); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseTERM();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c6;
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c273); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseblockComment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 204 + 143,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c321) {
        s2 = peg$c321;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c322); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c323.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c324); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c323.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c324); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s6 = peg$c241;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c242); }
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 35) {
                s7 = peg$c241;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c242); }
              }
              if (s7 === peg$FAILED) {
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 35) {
                  s9 = peg$c241;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c242); }
                }
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = peg$c6;
                } else {
                  peg$currPos = s8;
                  s8 = peg$c0;
                }
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c323.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c324); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 35) {
                s6 = peg$c241;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c242); }
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 35) {
                  s7 = peg$c241;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c242); }
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s9 = peg$c241;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c242); }
                  }
                  peg$silentFails--;
                  if (s9 === peg$FAILED) {
                    s8 = peg$c6;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c0;
                  }
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c321) {
              s5 = peg$c321;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c322); }
            }
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsewhitespace() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 144,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c325.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c327;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c328); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c271;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c272); }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 13) {
              s3 = peg$c327;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c328); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s4 = peg$c329;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c330); }
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s1 = input.substring(s0, peg$currPos);
          }
          s0 = s1;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseINDENT() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 145,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61423) {
          s2 = peg$c331;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c332); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c333(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDEDENT() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 146,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseTERMINATOR();
      if (s3 === peg$FAILED) {
        s3 = peg$c1;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61438) {
          s2 = peg$c334;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c335); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c333(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTERM() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 147,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 13) {
        s2 = peg$c327;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s3 = peg$c329;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c330); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 61439) {
          s1 = peg$c336;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c337); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c338();
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTERMINATOR() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 204 + 148,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsecomment();
        if (s4 === peg$FAILED) {
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTERM();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseblockComment();
            if (s6 === peg$FAILED) {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecomment();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseTERM();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseblockComment();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTERMINDENT() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 149,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseTERMINATOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseINDENT();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAND() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 150,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c339) {
        s2 = peg$c339;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c340); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBREAK() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 151,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c341) {
        s2 = peg$c341;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c342); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBY() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 152,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c343) {
        s2 = peg$c343;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c344); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCATCH() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 153,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c345) {
        s2 = peg$c345;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c346); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCONTINUE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 154,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c347) {
        s2 = peg$c347;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c348); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCLASS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 155,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c349) {
        s2 = peg$c349;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c350); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDELETE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 156,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c351) {
        s2 = peg$c351;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c352); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDEBUGGER() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 157,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c353) {
        s2 = peg$c353;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c354); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDO() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 158,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c355) {
        s2 = peg$c355;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c356); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseELSE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 159,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c357) {
        s2 = peg$c357;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c358); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEXTENDS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 160,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c359) {
        s2 = peg$c359;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFALSE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 161,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c361) {
        s2 = peg$c361;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c362); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFINALLY() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 162,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c363) {
        s2 = peg$c363;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c364); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFOR() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 163,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c365) {
        s2 = peg$c365;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c366); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseIF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 164,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c367) {
        s2 = peg$c367;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c368); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseIN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 165,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c369) {
        s2 = peg$c369;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c370); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseINSTANCEOF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 166,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c371) {
        s2 = peg$c371;
        peg$currPos += 10;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c372); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseIS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 167,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c373) {
        s2 = peg$c373;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c374); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseISNT() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 168,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c375) {
        s2 = peg$c375;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c376); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseLOOP() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 169,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c377) {
        s2 = peg$c377;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c378); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNEW() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 170,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c379) {
        s2 = peg$c379;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c380); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNO() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 171,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c381) {
        s2 = peg$c381;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c382); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNOT() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 172,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c383) {
        s2 = peg$c383;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c384); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNULL() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 173,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c385) {
        s2 = peg$c385;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c386); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 174,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c387) {
        s2 = peg$c387;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c388); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOFF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 175,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c389) {
        s2 = peg$c389;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c390); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseON() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 176,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c391) {
        s2 = peg$c391;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c392); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOR() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 177,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c393) {
        s2 = peg$c393;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c394); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOWN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 178,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c395) {
        s2 = peg$c395;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c396); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRETURN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 179,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c397) {
        s2 = peg$c397;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c398); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSWITCH() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 180,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c399) {
        s2 = peg$c399;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c400); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTHEN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 181,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c401) {
        s2 = peg$c401;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTHIS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 182,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c403) {
        s2 = peg$c403;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c404); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTHROW() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 183,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c405) {
        s2 = peg$c405;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c406); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTRUE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 184,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c407) {
        s2 = peg$c407;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c408); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTRY() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 185,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c409) {
        s2 = peg$c409;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c410); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTYPEOF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 186,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c411) {
        s2 = peg$c411;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c412); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUNDEFINED() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 187,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c413) {
        s2 = peg$c413;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c414); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUNLESS() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 188,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c415) {
        s2 = peg$c415;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c416); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUNTIL() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 189,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c417) {
        s2 = peg$c417;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c418); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseWHEN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 190,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c419) {
        s2 = peg$c419;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c420); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseWHILE() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 191,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c421) {
        s2 = peg$c421;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c422); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseYES() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 204 + 192,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c423) {
        s2 = peg$c423;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c424); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c6;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSharedKeywords() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 193,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c407) {
        s1 = peg$c407;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c408); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c361) {
          s1 = peg$c361;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c362); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c385) {
            s1 = peg$c385;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c386); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c403) {
              s1 = peg$c403;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c404); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c379) {
                s1 = peg$c379;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c380); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c351) {
                  s1 = peg$c351;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c352); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c411) {
                    s1 = peg$c411;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c412); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 10) === peg$c371) {
                      s1 = peg$c371;
                      peg$currPos += 10;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c372); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c369) {
                        s1 = peg$c369;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c370); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c397) {
                          s1 = peg$c397;
                          peg$currPos += 6;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c398); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c405) {
                            s1 = peg$c405;
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c406); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c341) {
                              s1 = peg$c341;
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c342); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 8) === peg$c347) {
                                s1 = peg$c347;
                                peg$currPos += 8;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c348); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 8) === peg$c353) {
                                  s1 = peg$c353;
                                  peg$currPos += 8;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c354); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c367) {
                                    s1 = peg$c367;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c368); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c357) {
                                      s1 = peg$c357;
                                      peg$currPos += 4;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c358); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c399) {
                                        s1 = peg$c399;
                                        peg$currPos += 6;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c400); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c365) {
                                          s1 = peg$c365;
                                          peg$currPos += 3;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c366); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 5) === peg$c421) {
                                            s1 = peg$c421;
                                            peg$currPos += 5;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c422); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c355) {
                                              s1 = peg$c355;
                                              peg$currPos += 2;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c356); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 3) === peg$c409) {
                                                s1 = peg$c409;
                                                peg$currPos += 3;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c410); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 5) === peg$c345) {
                                                  s1 = peg$c345;
                                                  peg$currPos += 5;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c346); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 7) === peg$c363) {
                                                    s1 = peg$c363;
                                                    peg$currPos += 7;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c364); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 5) === peg$c349) {
                                                      s1 = peg$c349;
                                                      peg$currPos += 5;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c350); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 7) === peg$c359) {
                                                        s1 = peg$c359;
                                                        peg$currPos += 7;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c360); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c425) {
                                                          s1 = peg$c425;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c426); }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseJSKeywords() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 194,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c427) {
        s1 = peg$c427;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c428); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c429) {
          s1 = peg$c429;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c430); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c431) {
            s1 = peg$c431;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c432); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c433) {
              s1 = peg$c433;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c434); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c435) {
                s1 = peg$c435;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c436); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c437) {
                  s1 = peg$c437;
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c438); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c439) {
                    s1 = peg$c439;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c440); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c441) {
                      s1 = peg$c441;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c442); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c443) {
                        s1 = peg$c443;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c444); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c445) {
                          s1 = peg$c445;
                          peg$currPos += 6;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c446); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c447) {
                            s1 = peg$c447;
                            peg$currPos += 6;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c448); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c449) {
                              s1 = peg$c449;
                              peg$currPos += 6;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c450); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 10) === peg$c451) {
                                s1 = peg$c451;
                                peg$currPos += 10;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c452); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 9) === peg$c453) {
                                  s1 = peg$c453;
                                  peg$currPos += 9;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c454); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 7) === peg$c455) {
                                    s1 = peg$c455;
                                    peg$currPos += 7;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c456); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 7) === peg$c457) {
                                      s1 = peg$c457;
                                      peg$currPos += 7;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c458); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 9) === peg$c459) {
                                        s1 = peg$c459;
                                        peg$currPos += 9;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c460); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c461) {
                                          s1 = peg$c461;
                                          peg$currPos += 6;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c462); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 6) === peg$c463) {
                                            s1 = peg$c463;
                                            peg$currPos += 6;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c464); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 5) === peg$c465) {
                                              s1 = peg$c465;
                                              peg$currPos += 5;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c466); }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCSKeywords() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 204 + 195,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c413) {
        s1 = peg$c413;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c414); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c401) {
          s1 = peg$c401;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c402); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c415) {
            s1 = peg$c415;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c416); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c417) {
              s1 = peg$c417;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c418); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c377) {
                s1 = peg$c377;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c378); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c389) {
                  s1 = peg$c389;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c390); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c343) {
                    s1 = peg$c343;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c344); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c419) {
                      s1 = peg$c419;
                      peg$currPos += 4;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c420); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c339) {
                        s1 = peg$c339;
                        peg$currPos += 3;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c340); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c393) {
                          s1 = peg$c393;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c394); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c375) {
                            s1 = peg$c375;
                            peg$currPos += 4;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c376); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c373) {
                              s1 = peg$c373;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c374); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c383) {
                                s1 = peg$c383;
                                peg$currPos += 3;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c384); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c423) {
                                  s1 = peg$c423;
                                  peg$currPos += 3;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c424); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c381) {
                                    s1 = peg$c381;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c382); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c391) {
                                      s1 = peg$c391;
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c392); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 2) === peg$c387) {
                                        s1 = peg$c387;
                                        peg$currPos += 2;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c388); }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseidentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c6;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsereserved() {
      var s0, s1;

      var key    = peg$currPos * 204 + 196,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsemacro();
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseSharedKeywords();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCSKeywords();
          if (s0 === peg$FAILED) {
            s0 = peg$parseJSKeywords();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeEscapeSequence() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 204 + 197,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c467) {
        s1 = peg$c467;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c468); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsehexDigit();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsehexDigit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsehexDigit();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsehexDigit();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c469(s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeLetter() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 198,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c470.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c471); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 55340) {
          s1 = peg$c472;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c473); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c474.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c475); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 55304) {
            s1 = peg$c476;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c477); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c478.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c479); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 55401) {
              s1 = peg$c480;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c481); }
            }
            if (s1 !== peg$FAILED) {
              if (peg$c482.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c483); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 55305) {
                s1 = peg$c484;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c485); }
              }
              if (s1 !== peg$FAILED) {
                if (peg$c486.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c487); }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 55349) {
                  s1 = peg$c488;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c489); }
                }
                if (s1 !== peg$FAILED) {
                  if (peg$c490.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c491); }
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 55300) {
                    s1 = peg$c492;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c493); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (peg$c494.test(input.charAt(peg$currPos))) {
                      s2 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c495); }
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 55296) {
                      s1 = peg$c496;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c497); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (peg$c498.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c499); }
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 55308) {
                        s1 = peg$c500;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c501); }
                      }
                      if (s1 !== peg$FAILED) {
                        if (peg$c502.test(input.charAt(peg$currPos))) {
                          s2 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c503); }
                        }
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 55297) {
                          s1 = peg$c504;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c505); }
                        }
                        if (s1 !== peg$FAILED) {
                          if (peg$c506.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c507); }
                          }
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 55406) {
                            s1 = peg$c508;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c509); }
                          }
                          if (s1 !== peg$FAILED) {
                            if (peg$c510.test(input.charAt(peg$currPos))) {
                              s2 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c511); }
                            }
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 55299) {
                              s1 = peg$c512;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c513); }
                            }
                            if (s1 !== peg$FAILED) {
                              if (peg$c514.test(input.charAt(peg$currPos))) {
                                s2 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c515); }
                              }
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 55360) {
                                s1 = peg$c516;
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c517); }
                              }
                              if (s1 !== peg$FAILED) {
                                if (peg$c518.test(input.charAt(peg$currPos))) {
                                  s2 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c519); }
                                }
                                if (s2 !== peg$FAILED) {
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 55422) {
                                  s1 = peg$c520;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c521); }
                                }
                                if (s1 !== peg$FAILED) {
                                  if (peg$c522.test(input.charAt(peg$currPos))) {
                                    s2 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c523); }
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s1 = [s1, s2];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 55405) {
                                    s1 = peg$c524;
                                    peg$currPos++;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c525); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    if (peg$c526.test(input.charAt(peg$currPos))) {
                                      s2 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c527); }
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 55322) {
                                      s1 = peg$c528;
                                      peg$currPos++;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c529); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      if (peg$c530.test(input.charAt(peg$currPos))) {
                                        s2 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c531); }
                                      }
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 55298) {
                                        s1 = peg$c532;
                                        peg$currPos++;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c533); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        if (peg$c534.test(input.charAt(peg$currPos))) {
                                          s2 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c535); }
                                        }
                                        if (s2 !== peg$FAILED) {
                                          s1 = [s1, s2];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 55309) {
                                          s1 = peg$c536;
                                          peg$currPos++;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c537); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          if (peg$c538.test(input.charAt(peg$currPos))) {
                                            s2 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c539); }
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeCombiningMark() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 199,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c540.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c541); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 56128) {
          s1 = peg$c542;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c543); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c544.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c545); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 55348) {
            s1 = peg$c546;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c547); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c548.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c549); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 55300) {
              s1 = peg$c492;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c493); }
            }
            if (s1 !== peg$FAILED) {
              if (peg$c550.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c551); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 55296) {
                s1 = peg$c496;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c497); }
              }
              if (s1 !== peg$FAILED) {
                if (peg$c552.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c553); }
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 55298) {
                  s1 = peg$c532;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c533); }
                }
                if (s1 !== peg$FAILED) {
                  if (peg$c554.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c555); }
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeDigit() {
      var s0, s1, s2;

      var key    = peg$currPos * 204 + 200,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c556.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c557); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 55349) {
          s1 = peg$c488;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c489); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c558.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c559); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 55300) {
            s1 = peg$c492;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c493); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c560.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c561); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 55297) {
              s1 = peg$c504;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c505); }
            }
            if (s1 !== peg$FAILED) {
              if (peg$c562.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c563); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeConnectorPunctuation() {
      var s0;

      var key    = peg$currPos * 204 + 201,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c564.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c565); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseZWNJ() {
      var s0;

      var key    = peg$currPos * 204 + 202,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 8204) {
        s0 = peg$c566;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c567); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseZWJ() {
      var s0;

      var key    = peg$currPos * 204 + 203,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 8205) {
        s0 = peg$c568;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c569); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    // Generated by CoffeeScript 2.0.0-beta9-dev
    var associativities, c, chainableComparisonOps, constructorLookup, createInterpolation, createMemberExpression, CS, foldBinaryExpr, foldl, foldr, id, isValidRegExpFlags, LEFT_ASSOCIATIVE, negatableOps, op, p, postfixConstructorLookup, precedenceHierarchy, precedenceTable, prefixConstructorLookup, r, RIGHT_ASSOCIATIVE, rightAssocOps, rp, stripLeadingWhitespace, stripLeadingWhitespaceInterpolation;
    CS = __webpack_require__(57);
    constructorLookup = {
      '||': CS.LogicalOrOp,
      or: CS.LogicalOrOp,
      '&&': CS.LogicalAndOp,
      and: CS.LogicalAndOp,
      '|': CS.BitOrOp,
      '^': CS.BitXorOp,
      '&': CS.BitAndOp,
      '?': CS.ExistsOp,
      '==': CS.EQOp,
      is: CS.EQOp,
      '!=': CS.NEQOp,
      isnt: CS.NEQOp,
      '<=': CS.LTEOp,
      '>=': CS.GTEOp,
      '<': CS.LTOp,
      '>': CS.GTOp,
      'extends': CS.ExtendsOp,
      'instanceof': CS.InstanceofOp,
      'in': CS.InOp,
      of: CS.OfOp,
      '<<': CS.LeftShiftOp,
      '>>': CS.SignedRightShiftOp,
      '>>>': CS.UnsignedRightShiftOp,
      '+': CS.PlusOp,
      '-': CS.SubtractOp,
      '*': CS.MultiplyOp,
      '/': CS.DivideOp,
      '%': CS.RemOp,
      '**': CS.ExpOp
    };
    negatableOps = [
      'instanceof',
      'in',
      'of'
    ];
    chainableComparisonOps = [
      '<=',
      '>=',
      '<',
      '>',
      '==',
      'is',
      '!=',
      'isnt'
    ];
    rightAssocOps = [
      ';',
      '=',
      '?',
      '**'
    ];
    precedenceHierarchy = [
      [
        'or',
        '||'
      ],
      [
        'and',
        '&&'
      ],
      ['|'],
      ['^'],
      ['&'],
      ['?'],
      [
        'is',
        '==',
        'isnt',
        '!='
      ],
      [
        'instanceof',
        'in',
        'of',
        '<=',
        '>=',
        '<',
        '>'
      ],
      [
        '<<',
        '>>',
        '>>>'
      ],
      [
        '+',
        '-'
      ],
      [
        '*',
        '/',
        '%'
      ],
      ['**']
    ];
    precedenceTable = function () {
      var level, op, ops, table;
      table = {};
      for (var i$ = 0, length$ = precedenceHierarchy.length; i$ < length$; ++i$) {
        ops = precedenceHierarchy[i$];
        level = i$;
        for (var i$1 = 0, length$1 = ops.length; i$1 < length$1; ++i$1) {
          op = ops[i$1];
          table[op] = level;
        }
      }
      return table;
    }();
    RIGHT_ASSOCIATIVE = {};
    LEFT_ASSOCIATIVE = {};
    associativities = function () {
      var op, result, rightAssocOp;
      result = {};
      for (op in precedenceTable) {
        if (!isOwn$(precedenceTable, op))
          continue;
        result[op] = LEFT_ASSOCIATIVE;
      }
      for (var i$ = 0, length$ = rightAssocOps.length; i$ < length$; ++i$) {
        rightAssocOp = rightAssocOps[i$];
        result[rightAssocOp] = RIGHT_ASSOCIATIVE;
      }
      return result;
    }();
    for (var i$ = 0, length$ = negatableOps.length; i$ < length$; ++i$) {
      op = negatableOps[i$];
      (function (op) {
        var fn, negatedOp;
        fn = function (a, b) {
          return new CS.LogicalNotOp(new constructorLookup[op](a, b));
        };
        fn.prototype = constructorLookup[op].prototype;
        negatedOp = 'not ' + op;
        constructorLookup[negatedOp] = fn;
        precedenceTable[negatedOp] = precedenceTable[op];
        return associativities[negatedOp] = associativities[op];
      }(op));
    }
    prefixConstructorLookup = {
      '++': CS.PreIncrementOp,
      '--': CS.PreDecrementOp,
      '+': CS.UnaryPlusOp,
      '-': CS.UnaryNegateOp,
      '!': CS.LogicalNotOp,
      not: CS.LogicalNotOp,
      '~': CS.BitNotOp,
      'do': CS.DoOp,
      'typeof': CS.TypeofOp,
      'delete': CS.DeleteOp
    };
    postfixConstructorLookup = {
      '?': CS.UnaryExistsOp,
      '[..]': CS.ShallowCopyArray,
      '++': CS.PostIncrementOp,
      '--': CS.PostDecrementOp
    };
    foldl = function (fn, memo, list) {
      var item;
      for (var i$1 = 0, length$1 = list.length; i$1 < length$1; ++i$1) {
        item = list[i$1];
        memo = fn(memo, item);
      }
      return memo;
    };
    foldr = function (fn, memo, list) {
      var i, item;
      i = list.length;
      while (i--) {
        item = list[i];
        memo = fn(memo, item);
      }
      return memo;
    };
    foldBinaryExpr = function (parts, ignoreChains) {
      var chainStack, expr, leftOperand, nextOp, nextPrec, operator, prec, rightOperand, stack;
      if (parts.length < 3)
        return parts[0];
      stack = [].slice.call(parts, 0, 3);
      parts = [].slice.call(parts, 3);
      while (parts.length > 0) {
        nextOp = parts[0];
        if (!ignoreChains && stack.length > 2) {
          operator = stack[stack.length - 2];
          if (in$(operator, chainableComparisonOps) && in$(nextOp, chainableComparisonOps)) {
            chainStack = stack.slice(-3);
            stack = stack.slice(0, stack.length - 3);
            while (true) {
              operator = nextOp;
              chainStack.push(parts.shift(), parts.shift());
              nextOp = parts[0];
              if (nextOp) {
                nextPrec = precedenceTable[nextOp];
                prec = precedenceTable[operator];
              }
              if (!(null != nextOp && (nextPrec > prec || in$(nextOp, chainableComparisonOps))))
                break;
            }
            stack.push(new CS.ChainedComparisonOp(foldBinaryExpr(chainStack, true)));
            continue;
          }
        }
        while (stack.length > 2 && (operator = stack[stack.length - 2], (prec = precedenceTable[operator], (nextPrec = precedenceTable[nextOp], nextPrec < prec || in$(operator, chainableComparisonOps) && in$(nextOp, chainableComparisonOps) || nextPrec === prec && associativities[operator] === LEFT_ASSOCIATIVE)))) {
          rightOperand = stack.pop();
          stack.pop();
          leftOperand = stack.pop();
          stack.push(new constructorLookup[operator](leftOperand, rightOperand));
        }
        stack.push(parts.shift());
        stack.push(parts.shift());
      }
      expr = stack.pop();
      while (stack.length > 0) {
        expr = new constructorLookup[(stack.pop())](stack.pop(), expr);
      }
      return expr;
    };
    createInterpolation = function (es) {
      var init;
      init = new CS.String('').g().r('');
      return foldl(function (memo, s) {
        var left;
        if (s instanceof CS.String) {
          left = memo;
          while (left) {
            if (left instanceof CS.String) {
              if (left === init) {
                c(left, s);
                left.raw = s.raw;
                delete left.generated;
              }
              left.data = '' + left.data + s.data;
              return memo;
            } else if (left instanceof CS.ConcatOp) {
              left = left.right;
            } else {
              break;
            }
          }
        }
        return new CS.ConcatOp(memo, s);
      }, init, es);
    };
    createMemberExpression = function (e, accesses) {
      return foldl(function (left, access) {
        var F, o;
        F = function () {
        };
        F.prototype = access.op.prototype;
        o = new F;
        access.op.call.apply(access.op, [
          o,
          left
        ].concat([].slice.call(access.operands)));
        return c(o.r(left.raw + access.raw), e);
      }, e, accesses);
    };
    isValidRegExpFlags = function (flags) {
      var f, flag;
      if (!flags)
        return true;
      if (flags.length > 4)
        return false;
      flags.sort();
      flag = null;
      for (var i$1 = 0, length$1 = flags.length; i$1 < length$1; ++i$1) {
        f = flags[i$1];
        if (flag === f)
          return false;
        flag = f;
      }
      return true;
    };
    stripLeadingWhitespace = function (str) {
      var attempt, cache$, indent, match, matchStr, wholeMatch;
      str = str.trimRight();
      matchStr = str;
      indent = null;
      while (match = /\n+([^\n\S]*)/.exec(matchStr)) {
        cache$ = match;
        wholeMatch = cache$[0];
        attempt = cache$[1];
        matchStr = matchStr.slice(match.index + wholeMatch.length);
        if (!(null != indent) || 0 < attempt.length && attempt.length < indent.length)
          indent = attempt;
      }
      if (indent)
        str = str.replace(new RegExp('\\n' + indent, 'g'), '\n');
      str = str.replace(/^\n/, '');
      return str;
    };
    stripLeadingWhitespaceInterpolation = function (pieces) {
      var attempt, cache$, indent, index, match, matchStr, piece, wholeMatch;
      indent = null;
      for (var i$1 = 0, length$1 = pieces.length; i$1 < length$1; ++i$1) {
        piece = pieces[i$1];
        index = i$1;
        if (piece instanceof CS.String) {
          if (index === pieces.length - 1)
            piece.data = piece.data.replace(/\s+$/, '');
          matchStr = piece.data;
          while (match = /\n+([^\n\S]*)/.exec(matchStr)) {
            cache$ = match;
            wholeMatch = cache$[0];
            attempt = cache$[1];
            matchStr = matchStr.slice(match.index + wholeMatch.length);
            if (!(null != indent) || 0 < attempt.length && attempt.length < indent.length)
              indent = attempt;
          }
        }
      }
      if (indent)
        for (var i$2 = 0, length$2 = pieces.length; i$2 < length$2; ++i$2) {
          piece = pieces[i$2];
          index = i$2;
          if (piece instanceof CS.String) {
            piece.data = piece.data.replace(new RegExp('\\n' + indent, 'g'), '\n');
            if (index === pieces.length - 1)
              piece.data = piece.data.replace(/(\n\s*)+$/, '');
            if (index === 0)
              piece.data = piece.data.replace(/^\n/, '');
          }
        }
      return pieces;
    };
    r = function (node) {
      node.raw = text().replace(/[\uEFEF\uEFFE\uEFFF]/g, '');
      return node;
    };
    p = function (node) {
      node.line = line();
      node.column = column();
      node.offset = offset();
      return node;
    };
    rp = function (node) {
      return r(p(node));
    };
    c = function (to, from) {
      to.line = from.line;
      to.column = from.column;
      to.offset = from.offset;
      return to;
    };
    id = function (x) {
      return x;
    };
    if (!options.raw)
      r = p = rp = id;
    eval('\n  // XXX: The functions below override the default code generated by PEGjs.\n  // CoffeeScriptRedux has a preprocessor that adds control characters to\n  // mark indents/outdents/etc for PEGjs. These characters cause the line,\n  // column, and offset values to differ from the original input source code,\n  // so this section exists to properly hide those control characters when\n  // reporting location information. See #117 & #335.\n\n  var csr$controlCharacterCount = 0;\n\n  function offset() {\n    return peg$reportedPos - csr$controlCharacterCount;\n  }\n\n  function peg$computePosDetails(pos) {\n    function advance(details, startPos, endPos) {\n      var p, ch;\n\n      for (p = startPos; p < endPos; p++) {\n        ch = input.charAt(p);\n        if (ch === "\\n") {\n          if (!details.seenCR) { details.line++; }\n          details.column = 1;\n          details.seenCR = false;\n        } else if (ch === "\\r" || ch === "\\u2028" || ch === "\\u2029") {\n          details.line++;\n          details.column = 1;\n          details.seenCR = true;\n        } else if(!/[\\uEFEF\\uEFFE\\uEFFF]/.test(ch)) {\n          details.column++;\n          details.seenCR = false;\n        } else {\n          csr$controlCharacterCount++;\n        }\n      }\n    }\n\n    if (peg$cachedPos !== pos) {\n      if (peg$cachedPos > pos) {\n        csr$controlCharacterCount = 0;\n        peg$cachedPos = 0;\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n      }\n      advance(peg$cachedPosDetails, peg$cachedPos, pos);\n      peg$cachedPos = pos;\n    }\n\n    return peg$cachedPosDetails;\n  }\n  ');
    function isOwn$(o, p) {
      return {}.hasOwnProperty.call(o, p);
    }
    function in$(member, list) {
      for (var i = 0, length = list.length; i < length; ++i)
        if (i in list && list[i] === member)
          return true;
      return false;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 2.0.0-beta9-dev
var DEDENT, INDENT, pointToErrorLocation, Preprocessor, StringScanner, TERM, ws;
pointToErrorLocation = __webpack_require__(114).pointToErrorLocation;
StringScanner = __webpack_require__(215);
this.Preprocessor = Preprocessor = function () {
  ws = '\\t\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000\\uFEFF';
  INDENT = '\uEFEF';
  DEDENT = '\uEFFE';
  TERM = '\uEFFF';
  function Preprocessor(param$) {
    if (null == param$)
      param$ = {};
    this.options = param$;
    this.preprocessed = '';
    this.base = null;
    this.indents = [];
    this.context = [];
  }
  Preprocessor.process = function (input, options) {
    if (null == options)
      options = {};
    return new Preprocessor(options).process(input);
  };
  Preprocessor.prototype.err = function (c) {
    var columns, context, lines, token;
    token = function () {
      switch (c) {
      case INDENT:
        return 'INDENT';
      case DEDENT:
        return 'DEDENT';
      case TERM:
        return 'TERM';
      default:
        return '"' + c.replace(/"/g, '\\"') + '"';
      }
    }.call(this);
    lines = this.ss.str.substr(0, this.ss.pos).split(/\n/) || [''];
    columns = null != lines[lines.length - 1] ? lines[lines.length - 1].length : 0;
    context = pointToErrorLocation(this.ss.str, lines.length, columns);
    throw new Error('Unexpected ' + token + '\n' + context);
  };
  Preprocessor.prototype.peek = function () {
    if (this.context.length) {
      return this.context[this.context.length - 1];
    } else {
      return null;
    }
  };
  Preprocessor.prototype.observe = function (c) {
    var top;
    top = this.peek();
    switch (c) {
    case '"""':
    case "'''":
    case '"':
    case "'":
    case '###':
    case '`':
    case '///':
    case '/':
      if (top === c) {
        this.context.pop();
      } else {
        this.context.push(c);
      }
      break;
    case INDENT:
    case '#':
    case '#{':
    case '[':
    case '(':
    case '{':
    case '\\':
    case 'regexp-[':
    case 'regexp-(':
    case 'regexp-{':
    case 'heregexp-#':
    case 'heregexp-[':
    case 'heregexp-(':
    case 'heregexp-{':
      this.context.push(c);
      break;
    case DEDENT:
      if (!(top === INDENT))
        this.err(c);
      this.indents.pop();
      this.context.pop();
      break;
    case '\n':
      if (!(top === '#' || top === 'heregexp-#'))
        this.err(c);
      this.context.pop();
      break;
    case ']':
      if (!(top === '[' || top === 'regexp-[' || top === 'heregexp-['))
        this.err(c);
      this.context.pop();
      break;
    case ')':
      if (!(top === '(' || top === 'regexp-(' || top === 'heregexp-('))
        this.err(c);
      this.context.pop();
      break;
    case '}':
      if (!(top === '#{' || top === '{' || top === 'regexp-{' || top === 'heregexp-{'))
        this.err(c);
      this.context.pop();
      break;
    case 'end-\\':
      if (!(top === '\\'))
        this.err(c);
      this.context.pop();
      break;
    default:
      throw new Error('undefined token observed: ' + c);
    }
    return this.context;
  };
  Preprocessor.prototype.p = function (s) {
    if (null != s)
      this.preprocessed = '' + this.preprocessed + s;
    return s;
  };
  Preprocessor.prototype.scan = function (r) {
    return this.p(this.ss.scan(r));
  };
  Preprocessor.prototype.consumeIndentation = function () {
    var context, indent, indentIndex, lineLen, lines, message;
    if (this.ss.bol() || this.scan(new RegExp('(?:[' + ws + ']*\\n)+'))) {
      this.scan(new RegExp('(?:[' + ws + ']*(\\#\\#?(?!\\#)[^\\n]*)?\\n)+'));
      if (null != this.base) {
        if (!(this.ss.eos() || null != this.scan(this.base))) {
          throw new Error('inconsistent base indentation');
        }
      } else {
        this.base = new RegExp('' + this.scan(new RegExp('[' + ws + ']*')) + '');
      }
      indentIndex = 0;
      while (indentIndex < this.indents.length) {
        indent = this.indents[indentIndex];
        if (this.ss.check(new RegExp('' + indent + ''))) {
          this.scan(new RegExp('' + indent + ''));
        } else if (this.ss.eos() || this.ss.check(new RegExp('[^' + ws + ']'))) {
          --indentIndex;
          this.p('' + DEDENT + TERM);
          this.observe(DEDENT);
        } else {
          lines = this.ss.str.substr(0, this.ss.pos).split(/\n/) || [''];
          message = 'Syntax error on line ' + lines.length + ': indentation is ambiguous';
          lineLen = this.indents.reduce(function (l, r) {
            return l + r.length;
          }, 0);
          context = pointToErrorLocation(this.ss.str, lines.length, lineLen);
          throw new Error('' + message + '\n' + context);
        }
        ++indentIndex;
      }
      if (this.ss.check(new RegExp('[' + ws + ']+[^' + ws + '#]'))) {
        this.indents.push(this.scan(new RegExp('[' + ws + ']+')));
        this.p(INDENT);
        return this.observe(INDENT);
      }
    }
  };
  Preprocessor.prototype.introduceContext = function () {
    var impliedRegexp, lastChar, pos, spaceBefore, tok;
    if (tok = this.scan(/"""|'''|\/\/\/|###|["'`#[({\\]/)) {
      return this.observe(tok);
    } else if (tok = this.scan(/\//)) {
      pos = this.ss.position();
      if (pos > 1) {
        lastChar = this.ss.string()[pos - 2];
        spaceBefore = new RegExp('[' + ws + ']').test(lastChar);
        impliedRegexp = /[;,=><*%^&|[(+!~-]/.test(lastChar);
      }
      if (pos === 1 || impliedRegexp || spaceBefore && !this.ss.check(new RegExp('[' + ws + '=]')) && this.ss.check(/[^\r\n]*\//))
        return this.observe('/');
    }
  };
  Preprocessor.prototype.process = function (input) {
    var tok;
    if (this.options.literate)
      input = input.replace(/^( {0,3}\S)/gm, '    #$1');
    this.ss = new StringScanner(input);
    while (!this.ss.eos()) {
      switch (this.peek()) {
      case null:
      case INDENT:
        this.consumeIndentation();
        this.scan(/[^\n'"\\\/#`[(){}\]]+/);
        if (this.ss.check(/[})\]]/)) {
          while (this.peek() === INDENT) {
            this.p('' + DEDENT + TERM);
            this.observe(DEDENT);
          }
          this.observe(this.scan(/[})\]]/));
        } else {
          this.introduceContext();
        }
        break;
      case '#{':
      case '{':
        this.scan(/[^\n'"\\\/#`[({}]+/);
        if (tok = this.scan(/\}/)) {
          this.observe(tok);
        } else {
          this.consumeIndentation();
          this.introduceContext();
        }
        break;
      case '[':
        this.scan(/[^\n'"\\\/#`[({\]]+/);
        if (tok = this.scan(/\]/)) {
          this.observe(tok);
        } else {
          this.consumeIndentation();
          this.introduceContext();
        }
        break;
      case '(':
        this.scan(/[^\n'"\\\/#`[({)]+/);
        if (tok = this.scan(/\)/)) {
          this.observe(tok);
        } else {
          this.consumeIndentation();
          this.introduceContext();
        }
        break;
      case '\\':
        if (this.scan(/[\s\S]/))
          this.observe('end-\\');
        break;
      case '"""':
        this.scan(/(?:[^"#\\]+|""?(?!")|#(?!{)|\\.)+/);
        this.ss.scan(/\\\n/);
        if (tok = this.scan(/#{|"""/)) {
          this.observe(tok);
        } else if (tok = this.scan(/#{|"""/)) {
          this.observe(tok);
        }
        break;
      case '"':
        this.scan(/(?:[^"#\\]+|#(?!{)|\\.)+/);
        this.ss.scan(/\\\n/);
        if (tok = this.scan(/#{|"/))
          this.observe(tok);
        break;
      case "'''":
        this.scan(/(?:[^'\\]+|''?(?!')|\\.)+/);
        this.ss.scan(/\\\n/);
        if (tok = this.scan(/'''/))
          this.observe(tok);
        break;
      case "'":
        this.scan(/(?:[^'\\]+|\\.)+/);
        this.ss.scan(/\\\n/);
        if (tok = this.scan(/'/))
          this.observe(tok);
        break;
      case '###':
        this.scan(/(?:[^#]+|##?(?!#))+/);
        if (tok = this.scan(/###/))
          this.observe(tok);
        break;
      case '#':
        this.scan(/[^\n]+/);
        if (tok = this.scan(/\n/))
          this.observe(tok);
        break;
      case '`':
        this.scan(/[^`]+/);
        if (tok = this.scan(/`/))
          this.observe(tok);
        break;
      case '///':
        this.scan(/(?:[^[/#\\]+|\/\/?(?!\/)|\\.)+/);
        if (tok = this.scan(/#{|\/\/\/|\\/)) {
          this.observe(tok);
        } else if (this.ss.scan(/#/)) {
          this.observe('heregexp-#');
        } else if (tok = this.scan(/[\[]/)) {
          this.observe('heregexp-' + tok);
        }
        break;
      case 'heregexp-[':
        this.scan(/(?:[^\]\/\\]+|\/\/?(?!\/))+/);
        if (tok = this.scan(/[\]\\]|#{|\/\/\//))
          this.observe(tok);
        break;
      case 'heregexp-#':
        this.ss.scan(/(?:[^\n/]+|\/\/?(?!\/))+/);
        if (tok = this.scan(/\n|\/\/\//))
          this.observe(tok);
        break;
      case '/':
        this.scan(/[^[/\\]+/);
        if (tok = this.scan(/[\/\\]/)) {
          this.observe(tok);
        } else if (tok = this.scan(/\[/)) {
          this.observe('regexp-' + tok);
        }
        break;
      case 'regexp-[':
        this.scan(/[^\]\\]+/);
        if (tok = this.scan(/[\]\\]/))
          this.observe(tok);
      }
    }
    this.scan(new RegExp('[' + ws + '\\n]*$'));
    while (this.context.length) {
      switch (this.peek()) {
      case INDENT:
        this.p('' + DEDENT + TERM);
        this.observe(DEDENT);
        break;
      case '#':
        this.p('\n');
        this.observe('\n');
        break;
      default:
        throw new Error('Unclosed "' + this.peek().replace(/"/g, '\\"') + '" at EOF');
      }
    }
    return this.preprocessed;
  };
  return Preprocessor;
}();


/***/ }),
/* 215 */
/***/ (function(module, exports) {

(function() {
  var StringScanner;
  StringScanner = (function() {
    function StringScanner(str) {
      this.str = str != null ? str : '';
      this.str = '' + this.str;
      this.pos = 0;
      this.lastMatch = {
        reset: function() {
          this.str = null;
          this.captures = [];
          return this;
        }
      }.reset();
      this;
    }
    StringScanner.prototype.bol = function() {
      return this.pos <= 0 || (this.str[this.pos - 1] === "\n");
    };
    StringScanner.prototype.captures = function() {
      return this.lastMatch.captures;
    };
    StringScanner.prototype.check = function(pattern) {
      var matches;
      if (this.str.substr(this.pos).search(pattern) !== 0) {
        this.lastMatch.reset();
        return null;
      }
      matches = this.str.substr(this.pos).match(pattern);
      this.lastMatch.str = matches[0];
      this.lastMatch.captures = matches.slice(1);
      return this.lastMatch.str;
    };
    StringScanner.prototype.checkUntil = function(pattern) {
      var matches, patternPos;
      patternPos = this.str.substr(this.pos).search(pattern);
      if (patternPos < 0) {
        this.lastMatch.reset();
        return null;
      }
      matches = this.str.substr(this.pos + patternPos).match(pattern);
      this.lastMatch.captures = matches.slice(1);
      return this.lastMatch.str = this.str.substr(this.pos, patternPos) + matches[0];
    };
    StringScanner.prototype.clone = function() {
      var clone, prop, value, _ref;
      clone = new this.constructor(this.str);
      clone.pos = this.pos;
      clone.lastMatch = {};
      _ref = this.lastMatch;
      for (prop in _ref) {
        value = _ref[prop];
        clone.lastMatch[prop] = value;
      }
      return clone;
    };
    StringScanner.prototype.concat = function(str) {
      this.str += str;
      return this;
    };
    StringScanner.prototype.eos = function() {
      return this.pos === this.str.length;
    };
    StringScanner.prototype.exists = function(pattern) {
      var matches, patternPos;
      patternPos = this.str.substr(this.pos).search(pattern);
      if (patternPos < 0) {
        this.lastMatch.reset();
        return null;
      }
      matches = this.str.substr(this.pos + patternPos).match(pattern);
      this.lastMatch.str = matches[0];
      this.lastMatch.captures = matches.slice(1);
      return patternPos;
    };
    StringScanner.prototype.getch = function() {
      return this.scan(/./);
    };
    StringScanner.prototype.match = function() {
      return this.lastMatch.str;
    };
    StringScanner.prototype.matches = function(pattern) {
      this.check(pattern);
      return this.matchSize();
    };
    StringScanner.prototype.matched = function() {
      return this.lastMatch.str != null;
    };
    StringScanner.prototype.matchSize = function() {
      if (this.matched()) {
        return this.match().length;
      } else {
        return null;
      }
    };
    StringScanner.prototype.peek = function(len) {
      return this.str.substr(this.pos, len);
    };
    StringScanner.prototype.pointer = function() {
      return this.pos;
    };
    StringScanner.prototype.setPointer = function(pos) {
      pos = +pos;
      if (pos < 0) {
        pos = 0;
      }
      if (pos > this.str.length) {
        pos = this.str.length;
      }
      return this.pos = pos;
    };
    StringScanner.prototype.reset = function() {
      this.lastMatch.reset();
      this.pos = 0;
      return this;
    };
    StringScanner.prototype.rest = function() {
      return this.str.substr(this.pos);
    };
    StringScanner.prototype.scan = function(pattern) {
      var chk;
      chk = this.check(pattern);
      if (chk != null) {
        this.pos += chk.length;
      }
      return chk;
    };
    StringScanner.prototype.scanUntil = function(pattern) {
      var chk;
      chk = this.checkUntil(pattern);
      if (chk != null) {
        this.pos += chk.length;
      }
      return chk;
    };
    StringScanner.prototype.skip = function(pattern) {
      this.scan(pattern);
      return this.matchSize();
    };
    StringScanner.prototype.skipUntil = function(pattern) {
      this.scanUntil(pattern);
      return this.matchSize();
    };
    StringScanner.prototype.string = function() {
      return this.str;
    };
    StringScanner.prototype.terminate = function() {
      this.pos = this.str.length;
      this.lastMatch.reset();
      return this;
    };
    StringScanner.prototype.toString = function() {
      return "#<StringScanner " + (this.eos() ? 'fin' : "" + this.pos + "/" + this.str.length + " @ " + (this.str.length > 8 ? "" + (this.str.substr(0, 5)) + "..." : this.str)) + ">";
    };
    return StringScanner;
  })();
  StringScanner.prototype.beginningOfLine = StringScanner.prototype.bol;
  StringScanner.prototype.clear = StringScanner.prototype.terminate;
  StringScanner.prototype.dup = StringScanner.prototype.clone;
  StringScanner.prototype.endOfString = StringScanner.prototype.eos;
  StringScanner.prototype.exist = StringScanner.prototype.exists;
  StringScanner.prototype.getChar = StringScanner.prototype.getch;
  StringScanner.prototype.position = StringScanner.prototype.pointer;
  StringScanner.StringScanner = StringScanner;
  module.exports = StringScanner;
}).call(this);


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {


var parser = __webpack_require__(217);
var stdlib = __webpack_require__(218);

this.stdlib = stdlib;
this.parse = parser.parser.parse;




/***/ }),
/* 217 */
/***/ (function(module, exports) {

this.parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function() { init(); return true; },
        peg$c2 = void 0,
        peg$c3 = null,
        peg$c4 = "#",
        peg$c5 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c6 = [],
        peg$c7 = /^[^\n]/,
        peg$c8 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c9 = "\n",
        peg$c10 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c11 = function(t) { return finalize(t); },
        peg$c12 = /^[ \r\t\n]/,
        peg$c13 = { type: "class", value: "[ \\r\\t\\n]", description: "[ \\r\\t\\n]" },
        peg$c14 = "--[",
        peg$c15 = { type: "literal", value: "--[", description: "\"--[\"" },
        peg$c16 = "]",
        peg$c17 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c18 = "--",
        peg$c19 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c20 = { type: "any", description: "any character" },
        peg$c21 = ";",
        peg$c22 = { type: "literal", value: ";", description: "\";\"" },
        peg$c23 = function(r) {
                return builder.blockStatement([r]) 
            },
        peg$c24 = function(list, ret) {
                list = expandMultiStatements(list);
                return builder.blockStatement(ret === null ? list : list.concat([ret[1]])); 
            },
        peg$c25 = function(a, b) {  
                if ( a === null ) return [];
                if ( b === null ) return a;
                return listHelper(a,b,1);
            },
        peg$c26 = "if",
        peg$c27 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c28 = "then",
        peg$c29 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c30 = "elseif",
        peg$c31 = { type: "literal", value: "elseif", description: "\"elseif\"" },
        peg$c32 = "else",
        peg$c33 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c34 = "do",
        peg$c35 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c36 = "end",
        peg$c37 = { type: "literal", value: "end", description: "\"end\"" },
        peg$c38 = "return",
        peg$c39 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c40 = "local",
        peg$c41 = { type: "literal", value: "local", description: "\"local\"" },
        peg$c42 = "nil",
        peg$c43 = { type: "literal", value: "nil", description: "\"nil\"" },
        peg$c44 = "true",
        peg$c45 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c46 = "false",
        peg$c47 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c48 = "function",
        peg$c49 = { type: "literal", value: "function", description: "\"function\"" },
        peg$c50 = "not",
        peg$c51 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c52 = "break",
        peg$c53 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c54 = "for",
        peg$c55 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c56 = "until",
        peg$c57 = { type: "literal", value: "until", description: "\"until\"" },
        peg$c58 = "while",
        peg$c59 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c60 = /^[a-zA-Z_]/,
        peg$c61 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c62 = /^[a-zA-Z0-9_]/,
        peg$c63 = { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
        peg$c64 = function(a) { return a; },
        peg$c65 = /^[0-9]/,
        peg$c66 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c67 = ".",
        peg$c68 = { type: "literal", value: ".", description: "\".\"" },
        peg$c69 = "\\",
        peg$c70 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c71 = /^[abfrntv'"\\]/,
        peg$c72 = { type: "class", value: "[abfrntv'\"\\\\]", description: "[abfrntv'\"\\\\]" },
        peg$c73 = function(c) { return {
                "n": "\n",
                "b": "\b",
                "f": "\f",
                "r": "\r",
                "t": "\t",
                "v": "\v",
                '"': '"',
                "'": "'",
                "\\": "\\"
            }[c] },
        peg$c74 = "\\\n",
        peg$c75 = { type: "literal", value: "\\\n", description: "\"\\\\\\n\"" },
        peg$c76 = function() { return "\n" },
        peg$c77 = "\\z",
        peg$c78 = { type: "literal", value: "\\z", description: "\"\\\\z\"" },
        peg$c79 = function() { return "" },
        peg$c80 = "\\x",
        peg$c81 = { type: "literal", value: "\\x", description: "\"\\\\x\"" },
        peg$c82 = /^[0-9a-f]/,
        peg$c83 = { type: "class", value: "[0-9a-f]", description: "[0-9a-f]" },
        peg$c84 = function(a, b) { return String.fromCharCode(parseInt('0x' + a + b)); },
        peg$c85 = function(a, b, c) { return String.fromCharCode(parseInt('' + a + b + c)); },
        peg$c86 = function() { error('Invalid Escape Sequence') },
        peg$c87 = /^[^'"']/,
        peg$c88 = { type: "class", value: "[^'\"']", description: "[^'\"']" },
        peg$c89 = /^[']/,
        peg$c90 = { type: "class", value: "[']", description: "[']" },
        peg$c91 = function() { return wrapNode({}); },
        peg$c92 = /^["]/,
        peg$c93 = { type: "class", value: "[\"]", description: "[\"]" },
        peg$c94 = "'",
        peg$c95 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c96 = function(s, r, e) { return eUntermIfEmpty(e,"string","\"",s); },
        peg$c97 = function(s, r, e) { return r.join(''); },
        peg$c98 = "\"",
        peg$c99 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c100 = function(s, r, e) { return eUntermIfEmpty(e,"string","'",s); },
        peg$c101 = "[",
        peg$c102 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c103 = function(s) { return s; },
        peg$c104 = "=",
        peg$c105 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c106 = /^[\n]/,
        peg$c107 = { type: "class", value: "[\\n]", description: "[\\n]" },
        peg$c108 = function(a) { return a;},
        peg$c109 = function(e) { return eMsg("Found an expression but expected a statement: " + e)},
        peg$c110 = function(e) { return builder.emptyStatement(); },
        peg$c111 = function(e) { return eMsg("`=` expected")},
        peg$c112 = /^[^\n\t\r ]/,
        peg$c113 = { type: "class", value: "[^\\n\\t\\r ]", description: "[^\\n\\t\\r ]" },
        peg$c114 = function(e) { return eMsg("Parser error near `" + e + "`"); },
        peg$c115 = "debugger",
        peg$c116 = { type: "literal", value: "debugger", description: "\"debugger\"" },
        peg$c117 = function() { return {type: "ExpressionStatement", expression: {type: "Identifier", name:"debugger; "} } },
        peg$c118 = function(start, b, end) { return eUntermIfEmpty(end, "do", "end", start); },
        peg$c119 = function(start, b, end) { return b ? b[0] : {type: "BlockStatement", body: []}; },
        peg$c120 = ",",
        peg$c121 = { type: "literal", value: ",", description: "\",\"" },
        peg$c122 = function(start, a, b, c, d, body, end) { return eUntermIfEmpty(end, "for", "end", start); },
        peg$c123 = function(start, a, b, c, d, body, end) {
                var amount = d == null ? {type: "Literal", value: 1 } : d[3];
                

                var start = bhelper.tempVar(b);
                var updateBy = bhelper.tempVar(amount);
                var testValue = bhelper.tempVar(c);
                var idx = bhelper.tempVar();

                var update = builder.assignmentExpression("=", idx.id, bhelper.binaryExpression("+", idx.id, updateBy.id));

                var texp;
                if ( false ) {
                    texp = bhelper.binaryExpression("<=", idx.id, testValue.id)
                } else {
                    texp = bhelper.luaOperator("forcomp", updateBy.id, idx.id, testValue.id);
                }

                if ( !body ) body = {type: "BlockStatement", body: []};
                else body = body[0];

                body.body.unshift(builder.variableDeclaration("let",[
                    {
                            type: "VariableDeclarator",
                            id: a,
                            init: idx.id,
                            userCode: false
                    }
                ]));

                var out = {
                    type: "ForStatement",
                    init: builder.variableDeclaration("let", [
                        {
                            type: "VariableDeclarator",
                            id: idx.id,
                            init: start.id,
                            userCode: false
                        }
                    ]),
                    body: body,
                    update: update,
                    test: texp,
                    loc: loc(),
                    range: range()
                };

                return bhelper.encloseDecls([out], start, updateBy, testValue);
            },
        peg$c124 = "in",
        peg$c125 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c126 = function(start, a, b, c, end) { return eUntermIfEmpty(end, "for", "end", start); },
        peg$c127 = function(start, a, b, c, end) {
                var statements = [];
                var nil = {type: "Literal", value: null };
                var uf = {type: "Identifier", name: 'undefined' };


                var iterator = bhelper.tempName();
                var context = bhelper.tempName();
                var curent = bhelper.tempName();

                var v1 = a[0];

                var varlist = [];
                for ( var idx in a ) {
                    varlist.push({type: "VariableDeclarator", id: a[idx] });
                }

                var call = builder.callExpression(iterator,[context, curent]);
                var assign;
                //if ( a.length > 1 ) {
                    assign = bhelper.bulkAssign(a, [call])
                //} else {
                //    assign = bhelper.assign(v1, call);
                //}

                var nullish = function(v) {
                    return builder.binaryExpression("||", builder.binaryExpression("===", v1, nil), builder.binaryExpression("===", v1, uf))
                }

                statements.push(builder.variableDeclaration("let", varlist));
                statements.push({
                    type: "WhileStatement",
                    test: {type: "Literal", value: true},
                    body: bhelper.blockStatement([
                    assign,
                    { type: "IfStatement", test: nullish(v1), consequent: {type: "BreakStatement" } },
                    bhelper.assign(curent, v1),
                    c.body

                    ])
                });

                return bhelper.encloseDeclsUnpack(statements, [iterator, context, curent], b);
            },
        peg$c128 = function(left, right) { 
                var result = builder.variableDeclaration("let", []);

                if ( !opt('decorateLuaObjects', false) || ( left.length < 2 && right.length < 2 )) { 
                    for ( var i = 0; i < left.length; ++i ) {
                        result.declarations.push(            {
                            type: "VariableDeclarator",
                            id: left[i],
                            init: right[i],
                        });
                    }

                    return result;
                } else {
                    var assign = bhelper.bulkAssign(left, right)
                    for ( var i = 0; i < left.length; ++i ) {
                        result.declarations.push({
                            type: "VariableDeclarator",
                            id: left[i]
                        });
                    }
                 
                    return [result, assign];   
                }
            
            },
        peg$c129 = function(left) {
                var result = builder.variableDeclaration("let", []);
                for ( var i = 0; i < left.length; ++i ) {
                    result.declarations.push({
                        type: "VariableDeclarator",
                        id: left[i]
                    });
                }
                return result;  
            },
        peg$c130 = function(left, right) { 
                // if ( left.length < 2 ) return bhelper.assign(left[0], right[0]).expression;
                return bhelper.bulkAssign(left, right).expression;
            },
        peg$c131 = function() { return {
                "type": "BreakStatement",
                loc: loc(),
                range: range()
            } },
        peg$c132 = function(e) { return {
                type: "ExpressionStatement",
                expression: e,
                loc: loc(),
                range: range()
            } },
        peg$c133 = function(test, then) { return wrapNode({test: test, then:then}); },
        peg$c134 = function() { return eUnterminated("if","then"); },
        peg$c135 = function(start, test, then, elzeifs, elze, end) { return eUntermIfEmpty(end, "if", "end", start); },
        peg$c136 = function(start, test, then, elzeifs, elze, end) {
                var result = { type: "IfStatement", test: test, consequent: then, loc: loc(), range: range()}
                var last = result;

                for ( var idx in elzeifs ) {
                    var elif = elzeifs[idx][1];
                    var nue = { type: "IfStatement", test: elif.test, consequent: elif.then, loc: elif.loc, range: elif.range }
                    last.alternate = nue;
                    last = nue;
                }

                if ( elze !== null ) last.alternate = elze[3];
                return result;
            },
        peg$c137 = function(argument) { 
                var arg;


                if ( argument == null ) { }
                else if ( argument.length == 1 ) arg = argument[0];
                else if ( argument.length > 1 ) {
                    if ( opt('decorateLuaObjects', false) ) arg = bhelper.luaOperatorA("makeMultiReturn", argument);
                    else  arg = {
                        type: "ArrayExpression",
                        elements: argument
                    };            
                }
                return {
                    type: "ReturnStatement",
                    argument: arg,
                    loc: loc(),
                    range: range()
                }
            },
        peg$c138 = function() {
                return {
                    type: "ReturnStatement",
                    loc: loc(),
                }     
            },
        peg$c139 = function() { return eUnterminated("if"); },
        peg$c140 = function(test, body) { return {
                type: "WhileStatement",
                test: test,
                body: body ? body[0] : {type: "EmptyStatement"},
                loc: loc(),
                range: range()

            } },
        peg$c141 = "repeat",
        peg$c142 = { type: "literal", value: "repeat", description: "\"repeat\"" },
        peg$c143 = function() { return eUnterminated("repeat", "until"); },
        peg$c144 = function() {return eMsg("repeat until needs terminations criteria"); },
        peg$c145 = function(body, test) { return {
                type: "DoWhileStatement",
                test: { 
                    type: "UnaryExpression",
                    operator: "!",
                    argument: test,
                    prefix: true,
                    loc: test.loc,
                    range: test.range
                },
                body: body ? body[0] : {type: "EmptyStatement"},
                loc: loc(),
                range: range()
            } },
        peg$c146 = "that",
        peg$c147 = { type: "literal", value: "that", description: "\"that\"" },
        peg$c148 = function() { return { "type": "ThisExpression" }; },
        peg$c149 = function(a, b) {
                a = bhelper.translateExpressionIfNeeded(a);
                if ( b === null ) return a;
                var tokens = [];
                for ( var idx in b ) {
                    var v = b[idx];
                    tokens.push(v[1]);
                    tokens.push(bhelper.translateExpressionIfNeeded(v[3]));
                }

                return precedenceClimber(tokens, a, 1);
            },
        peg$c150 = "-",
        peg$c151 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c152 = "+",
        peg$c153 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c154 = "==",
        peg$c155 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c156 = ">=",
        peg$c157 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c158 = "<=",
        peg$c159 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c160 = "~=",
        peg$c161 = { type: "literal", value: "~=", description: "\"~=\"" },
        peg$c162 = ">",
        peg$c163 = { type: "literal", value: ">", description: "\">\"" },
        peg$c164 = "<",
        peg$c165 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c166 = "..",
        peg$c167 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c168 = "and",
        peg$c169 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c170 = "or",
        peg$c171 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c172 = "*",
        peg$c173 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c174 = "//",
        peg$c175 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c176 = "/",
        peg$c177 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c178 = "%",
        peg$c179 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c180 = "^",
        peg$c181 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c182 = "(",
        peg$c183 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c184 = ")",
        peg$c185 = { type: "literal", value: ")", description: "\")\"" },
        peg$c186 = function(e) { return e; },
        peg$c187 = ":",
        peg$c188 = { type: "literal", value: ":", description: "\":\"" },
        peg$c189 = function(who, a) {
                var left = who
                for ( var idx = 0; idx < a.length; ++idx ) {
                    var v = a[idx];
                    if ( v[1] != null ) {
                        left = builder.memberExpression(left, v[1][1], false);
                        left.selfSuggar = true;
                    }
                    left = bhelper.callExpression(left,v[2]);
                }
                return left;
            },
        peg$c190 = function(b) { return [b]; },
        peg$c191 = function(c) { return [{type: "Literal", value: c, loc: loc(), range: range()}]; },
        peg$c192 = function(a) {

            // Wraping a call in ()'s reduces it to a singel value
            if ( a.type == "CallExpression" ) {
                return bhelper.luaOperator("oneValue", a);
            } else if ( a.type == "Identifier" && a.name == "__lua$rest" ) {
                return bhelper.luaOperator("oneValue", a);
            }
            return a;
        },
        peg$c193 = "...",
        peg$c194 = { type: "literal", value: "...", description: "\"...\"" },
        peg$c195 = function() {
                return wrapNode({type: "Identifier", name: "__lua$rest"});
            },
        peg$c196 = function(a, b) {
                var selfSuggar = false;
                if ( b.length == 0 ) return a;
                var left = a;
                for ( var i in b ) {
                    left = builder.memberExpression(left, b[i].exp, b[i].computed);
                    if ( b[i].suggar ) left.selfSuggar = true;
                }

                return left;
            },
        peg$c197 = /^[.:]/,
        peg$c198 = { type: "class", value: "[.:]", description: "[.:]" },
        peg$c199 = function(p, e) {
                return {exp: e, suggar: p == ':', computed: false }
            },
        peg$c200 = function(e) {
                return {exp: e, suggar: false, computed: true }
            },
        peg$c201 = function() { return eMsg("Malformed argument list."); },
        peg$c202 = function(a, b) {
                 return listHelper(a,b,3); 
            },
        peg$c203 = function(a, b) {
             return listHelper(a,b,3); 
        },
        peg$c204 = function() {return eUnterminated(")", "argument list"); },
        peg$c205 = function(a) {
                 return a; 
            },
        peg$c206 = function() {
                return []
            },
        peg$c207 = function(a, b, c) { 
                var left = builder.memberExpression(a, b[0], b[1]);
                for ( var idx in c ) {
                    left = builder.memberExpression(left, c[idx][0], c[idx][1]);
                }
                return left;
            },
        peg$c208 = function(b) { return [b, true]; },
        peg$c209 = function(b) { return [b,false]; },
        peg$c210 = "{",
        peg$c211 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c212 = "}",
        peg$c213 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c214 = function(f, s) { 
                var result = {
                    type: "ObjectExpression",
                    properties: [],
                    loc: loc(),
                    range: range()
                };

                var props = listHelper(f,s,3);
                var numeric = 0;
                var longProps = [];
                for ( var idx in props ) {
                    var p = props[idx];

                    if ( p.key === undefined ) p.key = {type: "Literal", value: ++numeric, arrayLike: true};
                    p.kind = "init";
                    result.properties.push(p);
                }


                if ( opt('decorateLuaObjects', false) ) {
                    var last;
                    var args = [];
                    var pp = [];
                    var last = true;
                    for ( var idx in result.properties ) {
                        var p = result.properties[idx];
                        if ( p.key.arrayLike ) {
                            args.push(p.value);
                            last = true;
                        } else {
                            longProps.push({
                                type: "ArrayExpression",
                                elements: [p.key, p.value]
                            });
                            pp.push(p);
                            last = false;
                        }
                    }
                    result.properties = pp;

                    result = {type: "ArrayExpression", elements: longProps };
                    if (pp.length < 1 ) result = {type:"Literal", value: null};

                    return bhelper.luaOperator.apply(bhelper, ["makeTable", result, {type: "Literal", value:last}].concat(args)); 
                }
                else return result;
            },
        peg$c215 = function(n, v) {
                if ( n.type == "Identifier" ) n = {type: "Literal", value: n.name};
                return { key: n, value: v };
            },
        peg$c216 = function(v) {
                return { value: v };
            },
        peg$c217 = function(k, v) {
                return { key: k, value: v }; 
            },
        peg$c218 = function(start, name, f, end) { return eUntermIfEmpty(end, "function", "end", start); },
        peg$c219 = function(start, name, f, end) {



                if ( name.type != "MemberExpression" && opt("allowRegularFunctions", false) ) {
                    //TODO: this would need to be decorated
                    return builder.functionDeclaration(name, f.params, f.body);
                }

                //TODO: Translate member expression into call
                var params = f.params.slice(0);
                if ( name.selfSuggar ) params = [{type: "Identifier", name: "self"}].concat(f.params);

                if ( f.rest ) {
                    bhelper.injectRest(f.body.body, params.length);
                }

                var out = builder.functionExpression(null, params, f.body)
                if ( opt('decorateLuaObjects', false) ) {
                    out = bhelper.luaOperator("makeFunction", out);
                }

                return bhelper.assign(name, out);
            },
        peg$c220 = function(start, name, f, end) {

                if ( f.rest ) {
                    bhelper.injectRest(f.body.body, f.params.length);
                }

                if ( opt("allowRegularFunctions", false) )
                    return builder.functionDeclaration(name, f.params, f.body);

                var func = builder.functionExpression(name, f.params, f.body);
                if ( opt('decorateLuaObjects', false) ) {
                    func = bhelper.luaOperator("makeFunction", func);
                }

                var decl = {type: "VariableDeclarator", id: name, init: func};
                var out = builder.variableDeclaration("let", [ decl ]);

                return out;
            },
        peg$c221 = function(f) {
                var result = {
                    type: "FunctionExpression",
                    body: f.body,
                    params: f.params,
                    loc:loc(),
                    range:range()
                }

                if ( f.rest ) {
                    bhelper.injectRest(f.body.body, f.params.length)
                }

                if ( opt('decorateLuaObjects', false) ) {
                    return bhelper.luaOperator("makeFunction", result);
                } else {
                    return result;
                }

            },
        peg$c222 = function(start, b, end) { return eUntermIfEmpty(end, "function", "end", start); },
        peg$c223 = function(start, b, end) { return b; },
        peg$c224 = function(p, rest, body) {
                return { params: p, body: body, rest: rest != null }
            },
        peg$c225 = function(body) {
                return { params: [], body: body, rest: true }
            },
        peg$c226 = function(a, b) {
                return listHelper(a,b); 
            },
        peg$c227 = function() { 
                return [] 
            },
        peg$c228 = function(o, e) { 
                var ops = {"not": "!", "-": "-", "#": "#" }
                if ( o == "#" ) {
                    e = bhelper.translateExpressionIfNeeded(e);
                    return bhelper.luaOperator("count", e);
                }
                return { 
                    type: "UnaryExpression",
                    operator: ops[o],
                    argument: bhelper.translateExpressionIfNeeded(e),
                    prefix: true,
                    loc: loc(),
                    range: range()
                }
            },
        peg$c229 = function(name) { return {
                type: "Identifier",
                name: name,
                loc: loc(),
                range: range()
            } },
        peg$c230 = function(a) {
                var values = {"nil": null, "false": false, "true": true} 
                return { type: "Literal", value: values[a], loc: loc(), range: range() }

            },
        peg$c231 = /^[eE]/,
        peg$c232 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c233 = function(b, c) {
                return { type: "Literal", value: parseFloat(b) * Math.pow(10, parseInt(c)), loc: loc(), range: range()  }

            },
        peg$c234 = "0",
        peg$c235 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c236 = /^[Xx]/,
        peg$c237 = { type: "class", value: "[Xx]", description: "[Xx]" },
        peg$c238 = /^[0-9a-fA-F]/,
        peg$c239 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c240 = function(b) {
                return { type: "Literal", value: parseInt(b), loc: loc(), range: range()  }

            },
        peg$c241 = function(b) {
                return { type: "Literal", value: parseFloat(b), loc: loc(), range: range()  }

            },
        peg$c242 = function(s) {
                return { type: "Literal", value: s, loc: loc(), range: range()  }

            },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c1();
      if (s1) {
        s1 = peg$c2;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s3 = peg$c4;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c7.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c7.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseBlockStatement();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c11(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1, s2, s3, s4, s5;

      s0 = [];
      if (peg$c12.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c14) {
          s2 = peg$c14;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebalstringinsde();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c18) {
            s2 = peg$c18;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            if (peg$c7.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c7.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s5 = peg$c9;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = [];
              if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c14) {
              s2 = peg$c14;
              peg$currPos += 3;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsebalstringinsde();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s4 = peg$c16;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c18) {
                s2 = peg$c18;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = [];
                if (peg$c7.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c7.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s5 = peg$c9;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
                if (s3 === peg$FAILED) {
                  s3 = [];
                  if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (input.length > peg$currPos) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            }
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsescws() {
      var s0, s1, s2, s3, s4;

      s0 = [];
      s1 = peg$currPos;
      s2 = peg$parsews();
      if (s2 === peg$FAILED) {
        s2 = peg$c3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s3 = peg$c21;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s3 = peg$c21;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsews();
              if (s4 === peg$FAILED) {
                s4 = peg$c3;
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      } else {
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsews();
      }

      return s0;
    }

    function peg$parseBlockStatement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseReturnStatement();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c23(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseStatementList();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parsescws();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsescws();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseReturnStatement();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c24(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseStatementList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseStatement();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parsescws();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsescws();
          }
        } else {
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseStatement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parsescws();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsescws();
            }
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseStatement();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 === peg$FAILED) {
            s5 = peg$c3;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c21;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsews();
            if (s5 === peg$FAILED) {
              s5 = peg$c3;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s6 = peg$c21;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c25(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseReservedWord() {
      var s0, s1, s2;

      if (input.substr(peg$currPos, 2) === peg$c26) {
        s0 = peg$c26;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c28) {
          s0 = peg$c28;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c30) {
            s0 = peg$c30;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c32) {
              s0 = peg$c32;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c34) {
                s0 = peg$c34;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c36) {
                  s0 = peg$c36;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c38) {
                    s0 = peg$c38;
                    peg$currPos += 6;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c40) {
                      s0 = peg$c40;
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c41); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c42) {
                        s0 = peg$c42;
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c44) {
                          s0 = peg$c44;
                          peg$currPos += 4;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c45); }
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 5) === peg$c46) {
                            s1 = peg$c46;
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c47); }
                          }
                          if (s1 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c48) {
                              s2 = peg$c48;
                              peg$currPos += 8;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c49); }
                            }
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c50) {
                              s0 = peg$c50;
                              peg$currPos += 3;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c51); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c52) {
                                s0 = peg$c52;
                                peg$currPos += 5;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c53); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c54) {
                                  s0 = peg$c54;
                                  peg$currPos += 3;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c55); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c56) {
                                    s0 = peg$c56;
                                    peg$currPos += 5;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 8) === peg$c48) {
                                      s0 = peg$c48;
                                      peg$currPos += 8;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 5) === peg$c58) {
                                        s0 = peg$c58;
                                        peg$currPos += 5;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsebinop();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseunop();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseName() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$parseReservedWord();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c2;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c62.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c62.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c63); }
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c64(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c65.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c67;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c65.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestringchar() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c74) {
          s1 = peg$c74;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c76();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c77) {
            s1 = peg$c77;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsews();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c79();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c80) {
              s1 = peg$c80;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c81); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              if (peg$c82.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c83); }
              }
              if (s3 !== peg$FAILED) {
                s3 = input.substring(s2, peg$currPos);
              }
              s2 = s3;
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                if (peg$c82.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }
                if (s4 !== peg$FAILED) {
                  s4 = input.substring(s3, peg$currPos);
                }
                s3 = s4;
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c84(s2, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c69;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                if (peg$c65.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c66); }
                }
                if (s3 !== peg$FAILED) {
                  s3 = input.substring(s2, peg$currPos);
                }
                s2 = s3;
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  if (peg$c65.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$c3;
                  }
                  if (s4 !== peg$FAILED) {
                    s4 = input.substring(s3, peg$currPos);
                  }
                  s3 = s4;
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    if (peg$c65.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c66); }
                    }
                    if (s5 === peg$FAILED) {
                      s5 = peg$c3;
                    }
                    if (s5 !== peg$FAILED) {
                      s5 = input.substring(s4, peg$currPos);
                    }
                    s4 = s5;
                    if (s4 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c85(s2, s3, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                  s1 = peg$c69;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c70); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c86();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (peg$c87.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c88); }
                  }
                  if (s1 !== peg$FAILED) {
                    s1 = input.substring(s0, peg$currPos);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesinglequote() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c89.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedoublequote() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c92.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseString() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsedoublequote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestringchar();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c94;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsestringchar();
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c94;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c95); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedoublequote();
          if (s3 === peg$FAILED) {
            s3 = [];
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = peg$currPos;
            s4 = peg$c96(s1, s2, s3);
            if (s4) {
              s4 = peg$c2;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c97(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesinglequote();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsestringchar();
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c98;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsestringchar();
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c98;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c99); }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsesinglequote();
            if (s3 === peg$FAILED) {
              s3 = [];
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s4 = peg$c100(s1, s2, s3);
              if (s4) {
                s4 = peg$c2;
              } else {
                s4 = peg$c0;
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c97(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c101;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c102); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsebalstringinsde();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c16;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c103(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsebalstringinsde() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c104;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebalstringinsde();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c104;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c64(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c101;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c102); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c106.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 93) {
              s8 = peg$c16;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s8 !== peg$FAILED) {
              s9 = [];
              if (input.charCodeAt(peg$currPos) === 61) {
                s10 = peg$c104;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                if (input.charCodeAt(peg$currPos) === 61) {
                  s10 = peg$c104;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c105); }
                }
              }
              if (s9 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s10 = peg$c16;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s10 !== peg$FAILED) {
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$c0;
            }
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c2;
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            if (s6 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$currPos;
              peg$silentFails++;
              s7 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 93) {
                s8 = peg$c16;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                if (input.charCodeAt(peg$currPos) === 61) {
                  s10 = peg$c104;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c105); }
                }
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s10 = peg$c104;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c105); }
                  }
                }
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s10 = peg$c16;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                  }
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c0;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c0;
              }
              peg$silentFails--;
              if (s7 === peg$FAILED) {
                s6 = peg$c2;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s4 = input.substring(s3, peg$currPos);
            }
            s3 = s4;
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c16;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c108(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parseDebugger();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBreakStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumericFor();
          if (s0 === peg$FAILED) {
            s0 = peg$parseForEach();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRepeatUntil();
              if (s0 === peg$FAILED) {
                s0 = peg$parseWhileStatement();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIfStatement();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseExpressionStatement();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseDoEndGrouped();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseLocalAssingment();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseFunctionDeclaration();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseLocalFunction();
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$currPos;
                              peg$silentFails++;
                              s2 = peg$currPos;
                              s3 = peg$parsews();
                              if (s3 === peg$FAILED) {
                                s3 = peg$c3;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseReservedWord();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                              }
                              peg$silentFails--;
                              if (s2 === peg$FAILED) {
                                s1 = peg$c2;
                              } else {
                                peg$currPos = s1;
                                s1 = peg$c0;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$parseExpression();
                                if (s3 !== peg$FAILED) {
                                  s3 = input.substring(s2, peg$currPos);
                                }
                                s2 = s3;
                                if (s2 !== peg$FAILED) {
                                  peg$reportedPos = peg$currPos;
                                  s3 = peg$c109(s2);
                                  if (s3) {
                                    s3 = peg$c2;
                                  } else {
                                    s3 = peg$c0;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c110(s2);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$currPos;
                                peg$silentFails++;
                                s2 = peg$currPos;
                                s3 = peg$parsews();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$c3;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseReservedWord();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c0;
                                }
                                peg$silentFails--;
                                if (s2 === peg$FAILED) {
                                  s1 = peg$c2;
                                } else {
                                  peg$currPos = s1;
                                  s1 = peg$c0;
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$currPos;
                                  s3 = peg$parseIdentifier();
                                  if (s3 !== peg$FAILED) {
                                    s3 = input.substring(s2, peg$currPos);
                                  }
                                  s2 = s3;
                                  if (s2 !== peg$FAILED) {
                                    peg$reportedPos = peg$currPos;
                                    s3 = peg$c111(s2);
                                    if (s3) {
                                      s3 = peg$c2;
                                    } else {
                                      s3 = peg$c0;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c110(s2);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$currPos;
                                  peg$silentFails++;
                                  s2 = peg$currPos;
                                  s3 = peg$parsews();
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$c3;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseReservedWord();
                                    if (s4 !== peg$FAILED) {
                                      s3 = [s3, s4];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                  }
                                  peg$silentFails--;
                                  if (s2 === peg$FAILED) {
                                    s1 = peg$c2;
                                  } else {
                                    peg$currPos = s1;
                                    s1 = peg$c0;
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$currPos;
                                    if (peg$c112.test(input.charAt(peg$currPos))) {
                                      s3 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s3 = input.substring(s2, peg$currPos);
                                    }
                                    s2 = s3;
                                    if (s2 !== peg$FAILED) {
                                      s3 = [];
                                      if (peg$c7.test(input.charAt(peg$currPos))) {
                                        s4 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                      }
                                      while (s4 !== peg$FAILED) {
                                        s3.push(s4);
                                        if (peg$c7.test(input.charAt(peg$currPos))) {
                                          s4 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                        }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        if (peg$c106.test(input.charAt(peg$currPos))) {
                                          s4 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                        }
                                        if (s4 === peg$FAILED) {
                                          s4 = peg$currPos;
                                          peg$silentFails++;
                                          if (input.length > peg$currPos) {
                                            s5 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                          }
                                          peg$silentFails--;
                                          if (s5 === peg$FAILED) {
                                            s4 = peg$c2;
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$c0;
                                          }
                                        }
                                        if (s4 !== peg$FAILED) {
                                          peg$reportedPos = peg$currPos;
                                          s5 = peg$c114(s2);
                                          if (s5) {
                                            s5 = peg$c2;
                                          } else {
                                            s5 = peg$c0;
                                          }
                                          if (s5 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c110(s2);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseDebugger() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c115) {
        s1 = peg$c115;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c117();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDoEndGrouped() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseBlockStatement();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c36) {
              s4 = peg$c36;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s4 === peg$FAILED) {
              s4 = [];
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s5 = peg$c118(s1, s3, s4);
              if (s5) {
                s5 = peg$c2;
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c119(s1, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseif() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedo() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c34) {
        s1 = peg$c34;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefor() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c54) {
        s1 = peg$c54;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefunction() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c48) {
        s1 = peg$c48;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNumericFor() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

      s0 = peg$currPos;
      s1 = peg$parsefor();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c104;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseExpression();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c3;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c120;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c121); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsews();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c3;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseExpression();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$currPos;
                            s13 = peg$parsews();
                            if (s13 === peg$FAILED) {
                              s13 = peg$c3;
                            }
                            if (s13 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 44) {
                                s14 = peg$c120;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c121); }
                              }
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parsews();
                                if (s15 === peg$FAILED) {
                                  s15 = peg$c3;
                                }
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parseExpression();
                                  if (s16 !== peg$FAILED) {
                                    s13 = [s13, s14, s15, s16];
                                    s12 = s13;
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$c0;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$c0;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$c0;
                            }
                            if (s12 === peg$FAILED) {
                              s12 = peg$c3;
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsews();
                              if (s13 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c34) {
                                  s14 = peg$c34;
                                  peg$currPos += 2;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c35); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsews();
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$currPos;
                                    s17 = peg$parseBlockStatement();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parsews();
                                      if (s18 !== peg$FAILED) {
                                        s17 = [s17, s18];
                                        s16 = s17;
                                      } else {
                                        peg$currPos = s16;
                                        s16 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s16;
                                      s16 = peg$c0;
                                    }
                                    if (s16 === peg$FAILED) {
                                      s16 = peg$c3;
                                    }
                                    if (s16 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c36) {
                                        s17 = peg$c36;
                                        peg$currPos += 3;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                      }
                                      if (s17 === peg$FAILED) {
                                        s17 = [];
                                      }
                                      if (s17 !== peg$FAILED) {
                                        peg$reportedPos = peg$currPos;
                                        s18 = peg$c122(s1, s3, s7, s11, s12, s16, s17);
                                        if (s18) {
                                          s18 = peg$c2;
                                        } else {
                                          s18 = peg$c0;
                                        }
                                        if (s18 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c123(s1, s3, s7, s11, s12, s16, s17);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseForEach() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parsefor();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenamelist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c124) {
                s5 = peg$c124;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c125); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexplist();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c34) {
                        s9 = peg$c34;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c35); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsews();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c3;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseBlockStatement();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsews();
                            if (s12 === peg$FAILED) {
                              s12 = peg$c3;
                            }
                            if (s12 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c36) {
                                s13 = peg$c36;
                                peg$currPos += 3;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c37); }
                              }
                              if (s13 === peg$FAILED) {
                                s13 = [];
                              }
                              if (s13 !== peg$FAILED) {
                                peg$reportedPos = peg$currPos;
                                s14 = peg$c126(s1, s3, s7, s11, s13);
                                if (s14) {
                                  s14 = peg$c2;
                                } else {
                                  s14 = peg$c0;
                                }
                                if (s14 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c127(s1, s3, s7, s11, s13);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLocalAssingment() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenamelist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c104;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexplist();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c128(s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c40) {
          s1 = peg$c40;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenamelist();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c129(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseAssignmentExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsevarlist();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c104;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexplist();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c130(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBreakStatement() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c52) {
        s1 = peg$c52;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c131();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseExpressionStatement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseAssignmentExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parseCallExpression();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c132(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseelseif() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c30) {
        s1 = peg$c30;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c28) {
                s5 = peg$c28;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseBlockStatement();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c133(s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseIfStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parseif();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c28) {
                s5 = peg$c28;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
              if (s5 === peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s5 = peg$c134();
                if (s5) {
                  s5 = peg$c2;
                } else {
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseBlockStatement();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$currPos;
                    s10 = peg$parsews();
                    if (s10 === peg$FAILED) {
                      s10 = peg$c3;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseelseif();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$c0;
                    }
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$currPos;
                      s10 = peg$parsews();
                      if (s10 === peg$FAILED) {
                        s10 = peg$c3;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseelseif();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parsews();
                      if (s10 === peg$FAILED) {
                        s10 = peg$c3;
                      }
                      if (s10 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c32) {
                          s11 = peg$c32;
                          peg$currPos += 4;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c33); }
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsews();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parseBlockStatement();
                            if (s13 !== peg$FAILED) {
                              s10 = [s10, s11, s12, s13];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$c0;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$c0;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c3;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsews();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c3;
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c36) {
                            s11 = peg$c36;
                            peg$currPos += 3;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                          }
                          if (s11 === peg$FAILED) {
                            s11 = [];
                          }
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = peg$currPos;
                            s12 = peg$c135(s1, s3, s7, s8, s9, s11);
                            if (s12) {
                              s12 = peg$c2;
                            } else {
                              s12 = peg$c0;
                            }
                            if (s12 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c136(s1, s3, s7, s8, s9, s11);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseReturnStatement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c38) {
        s1 = peg$c38;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexplist();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c137(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c38) {
          s1 = peg$c38;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c138();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseWhileStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c58) {
        s1 = peg$c58;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c34) {
                s5 = peg$c34;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseBlockStatement();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsews();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c3;
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c36) {
                      s8 = peg$c36;
                      peg$currPos += 3;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c37); }
                    }
                    if (s8 === peg$FAILED) {
                      peg$reportedPos = peg$currPos;
                      s8 = peg$c139();
                      if (s8) {
                        s8 = peg$c2;
                      } else {
                        s8 = peg$c0;
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c140(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRepeatUntil() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c141) {
        s1 = peg$c141;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseBlockStatement();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c56) {
                s5 = peg$c56;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
              if (s5 === peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s5 = peg$c143();
                if (s5) {
                  s5 = peg$c2;
                } else {
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseExpression();
                  if (s7 === peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s7 = peg$c144();
                    if (s7) {
                      s7 = peg$c2;
                    } else {
                      s7 = peg$c0;
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c145(s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseThat() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c146) {
        s1 = peg$c146;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c148();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSimpleExpression() {
      var s0;

      s0 = peg$parseLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseResetExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFunctionExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCallExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseThat();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIdentifier();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseObjectExpression();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseUnaryExpression();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseParenExpr();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0;

      s0 = peg$parseAssignmentExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBinSimpleExpression();
      }

      return s0;
    }

    function peg$parseBinSimpleExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseMemberExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSimpleExpression();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsebinop();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseMemberExpression();
              if (s7 === peg$FAILED) {
                s7 = peg$parseSimpleExpression();
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebinop();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseMemberExpression();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseSimpleExpression();
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c149(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseunop() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c150;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c50) {
          s1 = peg$c50;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c4;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebinop() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c152;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c150;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c154) {
            s1 = peg$c154;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c155); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c156) {
              s1 = peg$c156;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c157); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c158) {
                s1 = peg$c158;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c159); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c160) {
                  s1 = peg$c160;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c161); }
                }
                if (s1 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s1 = peg$c162;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c163); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 60) {
                      s1 = peg$c164;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c165); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c166) {
                        s1 = peg$c166;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c167); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c168) {
                          s1 = peg$c168;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c169); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c170) {
                            s1 = peg$c170;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c171); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 42) {
                              s1 = peg$c172;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c173); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c174) {
                                s1 = peg$c174;
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c175); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 47) {
                                  s1 = peg$c176;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c177); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 37) {
                                    s1 = peg$c178;
                                    peg$currPos++;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 94) {
                                      s1 = peg$c180;
                                      peg$currPos++;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c181); }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseprefixexp() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parsefuncname();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c182;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c183); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsews();
              if (s4 === peg$FAILED) {
                s4 = peg$c3;
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c184;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c185); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c186(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseCallExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c48) {
        s3 = peg$c48;
        peg$currPos += 8;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c182;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c183); }
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprefixexp();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 === peg$FAILED) {
            s5 = peg$c3;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 58) {
              s7 = peg$c187;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c188); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parseIdentifier();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecallsuffix();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsews();
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 58) {
                  s7 = peg$c187;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c188); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseIdentifier();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecallsuffix();
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c189(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecallsuffix() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseargs();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c64(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseObjectExpression();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c190(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseString();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c191(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseParenExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c182;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c184;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c185); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c192(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResetExpression() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c193) {
        s1 = peg$c193;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefuncname() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseThat();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIdentifier();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsefuncnamesuffix();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsefuncnamesuffix();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c196(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefuncnamesuffix() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        if (peg$c197.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c198); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c199(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 === peg$FAILED) {
          s1 = peg$c3;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c101;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c102); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 === peg$FAILED) {
              s3 = peg$c3;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseExpression();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsews();
                if (s5 === peg$FAILED) {
                  s5 = peg$c3;
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s6 = peg$c16;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c200(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseexplist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c120;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 === peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s7 = peg$c201();
                if (s7) {
                  s7 = peg$c2;
                } else {
                  s7 = peg$c0;
                }
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c120;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 === peg$FAILED) {
                  peg$reportedPos = peg$currPos;
                  s7 = peg$c201();
                  if (s7) {
                    s7 = peg$c2;
                  } else {
                    s7 = peg$c0;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c202(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevarlist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsevar();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c120;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsevar();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c120;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsevar();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c203(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenamelist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 === peg$FAILED) {
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c120;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIdentifier();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 === peg$FAILED) {
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c120;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIdentifier();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c202(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseargs() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c182;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexplist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c184;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c185); }
              }
              if (s5 === peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s5 = peg$c204();
                if (s5) {
                  s5 = peg$c2;
                } else {
                  s5 = peg$c0;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c205(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c182;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c183); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c184;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c185); }
            }
            if (s3 === peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s3 = peg$c204();
              if (s3) {
                s3 = peg$c2;
              } else {
                s3 = peg$c0;
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c206();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsevar() {
      var s0;

      s0 = peg$parseMemberExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIdentifier();
      }

      return s0;
    }

    function peg$parseMemberExpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseCallExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSimpleExpression();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseindexer();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseindexer();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseindexer();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c207(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseindexer() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c101;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c16;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c208(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c67;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSimpleExpression();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c209(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseObjectExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c210;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c211); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefield();
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c120;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s7 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s7 = peg$c21;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsews();
                if (s8 === peg$FAILED) {
                  s8 = peg$c3;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsefield();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c120;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c121); }
                }
                if (s7 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s7 = peg$c21;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c3;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsefield();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c212;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c213); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c214(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefield() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseLiteral();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIdentifier();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c104;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseBinSimpleExpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c215(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBinSimpleExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c216(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsews();
          if (s1 === peg$FAILED) {
            s1 = peg$c3;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s2 = peg$c101;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c102); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsews();
              if (s3 === peg$FAILED) {
                s3 = peg$c3;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseExpression();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsews();
                  if (s5 === peg$FAILED) {
                    s5 = peg$c3;
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s6 = peg$c16;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c17); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsews();
                      if (s7 === peg$FAILED) {
                        s7 = peg$c3;
                      }
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                          s8 = peg$c104;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c105); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsews();
                          if (s9 === peg$FAILED) {
                            s9 = peg$c3;
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseBinSimpleExpression();
                            if (s10 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c217(s4, s10);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseFunctionDeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsefunction();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefuncname();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefuncbody();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c36) {
                    s7 = peg$c36;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                  }
                  if (s7 === peg$FAILED) {
                    s7 = [];
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s8 = peg$c218(s1, s3, s5, s7);
                    if (s8) {
                      s8 = peg$c2;
                    } else {
                      s8 = peg$c0;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c219(s1, s3, s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLocalFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunction();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefuncname();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 === peg$FAILED) {
                  s6 = peg$c3;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsefuncbody();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsews();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c3;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c36) {
                        s9 = peg$c36;
                        peg$currPos += 3;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                      }
                      if (s9 === peg$FAILED) {
                        s9 = [];
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = peg$currPos;
                        s10 = peg$c218(s3, s5, s7, s9);
                        if (s10) {
                          s10 = peg$c2;
                        } else {
                          s10 = peg$c0;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c220(s3, s5, s7, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFunctionExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsefuncdef();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c221(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefuncdef() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsefunction();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefuncbody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c36) {
                s5 = peg$c36;
                peg$currPos += 3;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c37); }
              }
              if (s5 === peg$FAILED) {
                s5 = [];
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s6 = peg$c222(s1, s3, s5);
                if (s6) {
                  s6 = peg$c2;
                } else {
                  s6 = peg$c0;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c223(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefuncbody() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c182;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparamlist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c120;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 === peg$FAILED) {
                  s7 = peg$c3;
                }
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c193) {
                    s8 = peg$c193;
                    peg$currPos += 3;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c194); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsews();
                    if (s9 === peg$FAILED) {
                      s9 = peg$c3;
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c184;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c185); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsews();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseBlockStatement();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c224(s3, s5, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c182;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c183); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 === peg$FAILED) {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c193) {
              s3 = peg$c193;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c194); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsews();
              if (s4 === peg$FAILED) {
                s4 = peg$c3;
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c184;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c185); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsews();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c3;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseBlockStatement();
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c225(s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseparamlist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c120;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 === peg$FAILED) {
              s6 = peg$c3;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIdentifier();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c120;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 === peg$FAILED) {
                s6 = peg$c3;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIdentifier();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c226(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 === peg$FAILED) {
          s1 = peg$c3;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c227();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseUnaryExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseunop();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMemberExpression();
          if (s3 === peg$FAILED) {
            s3 = peg$parseSimpleExpression();
            if (s3 === peg$FAILED) {
              s3 = peg$parseExpression();
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c228(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseName();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c229(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLiteral() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c42) {
        s1 = peg$c42;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c46) {
          s1 = peg$c46;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c44) {
            s1 = peg$c44;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c230(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNumber();
        if (s1 !== peg$FAILED) {
          if (peg$c231.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c232); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c150;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c151); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s5 = peg$c152;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c153); }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c3;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c65.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c65.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                  }
                }
              } else {
                s6 = peg$c0;
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s4 = input.substring(s3, peg$currPos);
            }
            s3 = s4;
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c233(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 48) {
            s1 = peg$c234;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c235); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c236.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              if (peg$c238.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c239); }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c238.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c239); }
                  }
                }
              } else {
                s4 = peg$c0;
              }
              if (s4 !== peg$FAILED) {
                s4 = input.substring(s3, peg$currPos);
              }
              s3 = s4;
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c240(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseNumber();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c241(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseString();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c242(s1);
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }


      function loc() { return {start: { line: line(), column: column() } } }
      function range() { return [offset(), offset() + text().length]; }
      function listHelper(a,b,c) { return a == null ? [] : [a].concat(b.map(function(b) { return b[c || 2]; })); }
      function opt(name, def) { return name in options ? options[name] : def }

      function expandMultiStatements(list) {
        var out = [];
        for ( var i = 0; i < list.length; ++i ) {
            var value = list[i];
            if (value instanceof Array) out = out.concat(value);
            else out.push(value);
        }
        return out;
      }

      function wrapNode(obj, hasScope) {
        hasScope = !!hasScope 
        obj.loc = loc();
        obj.range = range();
        obj.hasScope = hasScope;
        obj.text = text();
        return obj;
      }

      function eUntermIfEmpty(what, type, end, start) {
        if ( what.length == 0 ) return eUnterminated(type, end, start);
        return true;
      }

      function eUnterminated(type, end, start) {
        var xline = start !== undefined ? start.loc.start.line : (line());
        var xcol = start !== undefined ? start.loc.start.column : (column());

        eMsg("`" + (end || "end") + "` expected (to close " + type + " at " + xline + ":" + xcol + ") at " + line() +  ":" + column() );
        return true;
      }

      function eMsg(why) {
        if ( !opt("loose", false) ) error(why);
        errors.push({msg: why, loc: loc(), range: range()});
        return true;
      }

      var opPrecedence = {
        "^": 10,
        "not": 9,
        "*": 8, "/": 8, "%": 8, "//": 8,
        "+": 7, "-": 7,
        "..": 6,
        "<": 5, ">": 5, ">=": 5, "<=": 5, "==": 5, "~=": 5,
        "and": 4,
        "or": 3
      }

      function precedenceClimber(tokens, lhs, min) {
        while ( true ) { 
            if ( tokens.length == 0 ) return lhs;
            var op = tokens[0];
            var prec = opPrecedence[op];
            if ( prec < min ) return lhs;
            tokens.shift();

            var rhs = tokens.shift();
            while ( true ) {
                var peek = tokens[0];
                if ( peek == null || opPrecedence[peek] <= prec ) break;
                rhs = precedenceClimber(tokens, rhs, opPrecedence[peek]);
            }

            lhs = bhelper.binaryExpression(op, lhs, rhs);
        }

      }

      var errors;

      function init() {
        errors = [];
      }

      var builder = {
        assignmentExpression: function(op, left, right) { return wrapNode({type: "AssignmentExpression", operator: op, left: left, right: right }); },
        binaryExpression: function(op, left, right) { return wrapNode({type: (op == '||' || op == '&&') ? "LogicalExpression" : "BinaryExpression", operator: op, left: left, right: right }); },
        blockStatement: function(body) { return wrapNode({ type: "BlockStatement", body: body}); },
        callExpression: function(callee, args) { return wrapNode({ type: "CallExpression", callee: callee, arguments: args}); },
        emptyStatement: function() { return wrapNode({ type: "EmptyStatement" }); },
        functionDeclaration: function(name, args, body, isGenerator, isExpression) {
            return wrapNode({type: "FunctionDeclaration", id: name, params: args, body: body, generator: isGenerator, expression: isExpression });
        },
        memberExpression: function(obj, prop, isComputed) { return wrapNode({ type:"MemberExpression", object: obj, property: prop, computed: isComputed }); },
        variableDeclaration: function(kind, decls) { return { type: "VariableDeclaration", declarations: decls, kind: opt("forceVar", true) ? "var" : kind } },
        functionExpression: function(name, args, body) { return { type: "FunctionExpression", name: name, body: body, params: args } },
        returnStatement: function(arg) { return wrapNode({type: "ReturnStatement", argument: arg}); },
        generatedReturnStatement: function(arg) { return wrapNode({type: "ReturnStatement", argument: arg, userCode: false}); }
      };

      var i = function(n) { return { type: "Identifier", name: n}; }
      var id = i;
      var tmpVarCtr = 0;

      function clone(obj) {
        return JSON.parse(JSON.stringify(obj));
      }



      function finalize(ast) {
        if ( opt("loose", false) ) ast.errors = errors;
        
        if ( opt("useStrict", false) ) {
            ast.body.unshift({
                type: "ExpressionStatement",
                expression: { type: "Literal", value: "use strict" }
            });
        }

        if ( opt("noSharedObjects", true) ) return clone(ast);
        return ast;
      }

      var bhelper = {
        blockStatement: function(body) {
            return builder.blockStatement(expandMultiStatements(body));
        },
        tempName: function() {
            return i("__lua$tmpvar$" + (++tmpVarCtr));
        },
        tempVar: function(exp) {
            return { type: "VariableDeclarator", id: bhelper.tempName(), init: exp };
        },
        assign: function(target, exp) {
            var out = builder.assignmentExpression("=", target, exp);
            if ( target.type == "MemberExpression" && opt("luaOperators", false) ) {
                var prop = target.property;
                if ( !target.computed ) prop = {"type": "Literal", "value": prop.name, loc: prop.loc, range: prop.range };
                
                var helper;
                var nue = bhelper.translateExpressionIfNeeded(target.object);

                if ( target.object.type == "Identifier" ) helper = target.object.name;

                if ( helper === undefined ) {
                    nue = bhelper.luaOperator("indexAssign", nue, prop, exp);
                } else {
                    nue = bhelper.luaOperator("indexAssign", nue, prop, exp, {type:"Literal", value: helper});
                }

                nue = {type: "ConditionalExpression",test: nue, consequent: exp, alternate: out};

                out = nue;
            }
                
            return {
                type: "ExpressionStatement",
                expression: out
            };
        },
        encloseDecls: function(body /*, decls...*/) {
            var decls = Array.prototype.slice.call(arguments, 1);
            return bhelper.encloseDeclsEx.apply(this, [body, opt("encloseWithFunctions", true) ].concat(decls));
        },
        encloseDeclsEx: function(body, enclose /*, decls...*/) {
            var decls = Array.prototype.slice.call(arguments, 2);
            var vals = [];
            var names = [];
            for ( var k in decls ) {
                var v = decls[k];
                vals.push(v.init);
                names.push(v.id);
            }

            if ( enclose ) {
                return {
                    expression: builder.callExpression(
                        builder.functionExpression(null, names, bhelper.blockStatement(body)),
                        vals
                    ),
                    type: "ExpressionStatement"
                }
            } else {
                if ( decls.length < 1 ) return body;
                return bhelper.blockStatement([ builder.variableDeclaration("let", decls) ].concat(body));
            }
        },
        encloseDeclsUnpack: function(body, names, explist, force) {

            if ( force || opt("encloseWithFunctions", true) ) {
                return {
                    expression: builder.callExpression(
                        builder.memberExpression(
                            builder.functionExpression(null, names, builder.blockStatement(body)),
                            i("apply")
                        ),
                        [{type: "Literal", value: null}, bhelper.luaOperatorA("expandReturnValues", explist)]
                    ),
                    type: "ExpressionStatement"
                }
            } else {
                var decls = [];
                for ( var idx in names ) {
                    decls.push({
                        type: "VariableDeclarator",
                        id: names[idx],
                        init: idx.id
                    });
                }
                return bhelper.blockStatement([ 
                    builder.variableDeclaration("let", decls),
                    bhelper.bulkAssign(names, explist)
                    ].concat(body));
            }
        },
        bulkAssign: function(names, explist) {
            var temps = [];
            var body = [];
            for ( var i = 0; i < names.length; ++i ) {
                temps[i] = bhelper.tempName();
            }

            // If we are refrencing a previously set value in a bulk assign as a property
            // we want to use the old value to look up the index, so we will pull that from
            // the temp var passed in
            var extra = 0;
            for ( var i = 0; i < names.length; ++i ) {
                var exp = names[i];
                if ( exp.type == "MemberExpression" && exp.property.type == "Identifier" ) {
                    for ( var j = 0; j < i; ++j) {
                        if ( names[j].name == exp.property.name ) {
                            var holding = bhelper.tempName();
                            temps.unshift(holding);
                            explist.unshift(exp.property);
                            exp.property = holding;
                            ++extra;
                        }
                    }
                }
            }

            for ( var i = 0; i < names.length; ++i ) {
                body[i] = bhelper.assign(names[i], temps[i+extra]);
            }

            if ( names.length > 1 ) {
                return bhelper.encloseDeclsUnpack(body, temps, explist, true);
            } else {
                var value = explist[0];
                if ( value.type == "CallExpression" ) value = bhelper.luaOperator("oneValue", value);
                return bhelper.assign(names[0], value);
            }
            
        },
        luaOperator: function(op /*, args */) {
            if ( op == "oneValue" && opt("noMutliReturnSquish", false) ) return arguments[1];
            var o = builder.callExpression(
                builder.memberExpression(i("__lua"), i(op)), 
                Array.prototype.slice.call(arguments, 1)
            );
            o.internal = true;
            return o;
        },
        luaOperatorA: function(op, args) {
            var o = builder.callExpression(
                builder.memberExpression(i("__lua"), i(op)), 
                args
            );
            o.internal = true;
            return o;
        },
        binaryExpression: function(op, a, b) {
            if ( opt("luaOperators", false) && op != "and" && op != "or" ) {
                var map = {"+": "add", "-": "sub", "*": "mul", "/": "div", "//": "intdiv", "^": "pow", "%":"mod",
                    "..": "concat", "==": "eq", "<": "lt", "<=": "lte", ">": "gt", ">=": "gte", "~=": "ne",
                    "and": "and", "or": "or"
                };
                
                return bhelper.luaOperator(map[op], a, b);
            } else {

                if ( op == "~=" ) xop = "!=";
                else if ( op == ".." ) op = "+";
                else if ( op == "or" ) op = "||";
                else if ( op == "and" ) op = "&&";
                else if ( op == "//" ) op = "/";

                a = bhelper.luaOperator("oneValue", a);
                b = bhelper.luaOperator("oneValue", b);

                return builder.binaryExpression(op, a, b);
            }
        },
        callExpression: function(callee, args) {
            if ( opt("luaCalls", false) ) {
                var that = {"type": "ThisExpression" };
                if ( callee.type == "MemberExpression" ) that = {"type":"Literal", "value": null};
                var flags = 0;
                if ( callee.selfSuggar ) {
                    flags = flags | 1;
                }

                if ( opt('decorateLuaObjects', false) ) {
                    flags = flags | 2;
                }

                var flagso = {"type": "Literal", "value": flags};
                var helper = null;
                
                if ( callee.type == "Identifier" ) helper = callee.name;
                else if ( callee.type == "MemberExpression" && !callee.computed ) helper = callee.property.name;

                helper = {"type": "Literal", "value": helper};

                if ( callee.selfSuggar ) {
                    if ( callee.object.type == "Identifier" ) {
                        //Dont bother making a function if we are just an identifer.
                        var rcallee = bhelper.translateExpressionIfNeeded(callee)
                        return bhelper.luaOperator.apply(bhelper, ["call", flagso , rcallee, callee.object, helper].concat(args));

                    } else {
                        var tmp = bhelper.tempVar(bhelper.translateExpressionIfNeeded(callee.object));
                        
                        var rexpr = builder.memberExpression(tmp.id, callee.property, callee.computed);
                        var rcallee = bhelper.translateExpressionIfNeeded(rexpr);
                        var expr = bhelper.luaOperator.apply(bhelper, ["call", flagso, rcallee, tmp.id, helper].concat(args));
                        return result = bhelper.encloseDeclsEx([
                            builder.returnStatement(
                                expr
                            )
                        ], true, tmp).expression;

                    }
                } else {
                    var rcallee = bhelper.translateExpressionIfNeeded(callee)
                    if ( rcallee.type == "Identifier" && rcallee.name == "assert" ) {
                        args.push({type: "Literal", value: args[0].text || "?"})
                    }
                    return bhelper.luaOperator.apply(bhelper, ["call", flagso , rcallee, that, helper].concat(args));
                }
            } else {
                return builder.callExpression(callee, args);
            }
        },
        memberExpression: function(obj, prop, isComputed) {
            if ( opt("luaOperators", false) && !isComputed ) {
                var helper;
                if ( obj.type == "Identifier") helper = obj.name;

                if ( helper == undefined ) {
                    return bhelper.luaOperator("index", obj, prop);
                } else {
                    return bhelper.luaOperator("index", obj, prop, {type:"Literal", value: helper});
                }
            }
            return builder.memberExpression(obj, prop, isComputed);
        },
        translateExpressionIfNeeded: function(exp) {
            if ( !opt("luaOperators", false) ) return exp;
            if ( exp.type == "MemberExpression" ) {
                var prop = exp.property;
                if ( !exp.computed ) prop = {"type": "Literal", value: prop.name };
                var nu = bhelper.memberExpression(bhelper.translateExpressionIfNeeded(exp.object), prop, false);
                nu.origional = exp;
                nu.range = exp.range;
                nu.loc = exp.loc;
                return nu;
            }

            return exp;
        },
        injectRest: function(block, count) {
            block.unshift(builder.variableDeclaration("let", [
                    {
                        type: "VariableDeclarator", 
                        id: {type: "Identifier", name:"__lua$rest"},
                        userCode: false,
                        init: bhelper.luaOperator("rest", 
                            {type: "Identifier", name:"arguments"},
                            {type: "Literal", value:count}
                        )
                    }
                 ]));
        },
        valueProvdier: function(statement) {
            return builder.functionExpression(null, [], bhelper.blockStatement([
                builder.generatedReturnStatement(statement)
            ]));
        }
      }



    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();


/***/ }),
/* 218 */
/***/ (function(module, exports) {

var env = {};
var __lua = (function() {

	// Yoinked from underscore.
	var isJSArray = Array.isArray || function(obj) { return toString.call(obj) === '[object Array]'; };

	function type(what) {
		if ( what === null || what === undefined ) return "nil";
		if ( isNaN(what) ) return "number";
		var t = typeof what;
		if ( t == "object" ) return "table";
		return t;
	}

	function numberForArith(n) {
		if ( type(n) == "number" ) return n;
		else if ( typeof n == "string" ) {
			n = parseInt(n);
			if ( !isNaN(n) ) return n;

		}

		throw "attempt to perform arithmetic on a " +  type(n) + " value: " + n;
	}

	function makeString(a) { 
		a = oneValue(a);

		var mtf = lookupMetaTable(a, "__tostring");
		if ( mtf !== null ) return mtf(a);

		if ( a === undefined || a === null ) return "nil";
		if ( a instanceof LuaTable ) {
			return "table: 0x" + a.id;
		} else if ( typeof a == "number" ) {
			if ( ~~a == a ) return a.toString();
			var rep = a.toPrecision();
			if ( rep.length > 14 ) return a.toPrecision(14);
			return rep;
		}
		return "" + a;
	}

	function add(a,b) {
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__add");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) + numberForArith(b); 
	}

	function sub(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__sub");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) - numberForArith(b);
	}

	function mul(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__mul");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) * numberForArith(b);
	}

	function div(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__div");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) / numberForArith(b);
	}

	function intdiv(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__idiv");
		if ( mtf !== null ) return mtf(a,b);

		return ~~(numberForArith(a) / numberForArith(b));
	}

	function mod(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__mod");
		if ( mtf !== null ) return mtf(a,b);

		return numberForArith(a) % numberForArith(b);
	}

	function pow(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__pow");
		if ( mtf !== null ) return mtf(a,b);

		return Math.pow(numberForArith(a),numberForArith(b)); 
	}

	function concat(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__concat");
		if ( mtf !== null ) return mtf(a,b);
		if ( a === null || a === undefined || b === null || b === undefined ) throw "attempt to concatenate a nil value";

		return  makeString(a) + makeString(b); 
	}

	function lte(a,b) {
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__le");
		if ( mtf !== null ) return mtf(a,b);

		return a <= b; 
	}

	function lt(a,b) {
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__lt");
		if ( mtf !== null ) return mtf(a,b);

		return a < b; 
	}

	function gte(a,b) { return lte(b,a); }
	function gt(a,b) { return lt(b,a); }


	function forcomp(d,a,b) { 
		if ( d > 0 ) return a <= b; 
		else if ( d < 0 ) return b <= a;
		else return false;
	}

	
	function eq(a,b) { 
		a = oneValue(a); b = oneValue(b);

		var mtf = lookupMetaTableBin(a, b, "__eq");
		if ( mtf !== null ) return mtf(a,b);


		if ( a === null || a === undefined ) {
			return ( b === null || b === undefined );
		}
		if ( a === b ) return true;
		return false;
	}
	
	function ne(a,b) { return !eq(a,b); }

	function count(a) { 
		if ( a instanceof LuaTable ) {
			var cnt = 0;
			while ( a.numeric[cnt] !== undefined ) ++cnt;
			return cnt;
		}
		return a.length;
	}

	function and(a,b) { return a && b; }
	function or(a,b) { return a || b; }

	function call(flags, what, that, helper /*, args... */ ) {
		var injectSelf = !!(flags & 1); 
		var detectLua = !!(flags & 2); 

		if ( what === null || what === undefined ) {
			if ( helper === undefined ) throw "attempt to call a " + type(what) + " value";
			else throw "attempt to call '" + helper + "' (a " + type(what) + " value)"; 
		}

		var args = expand(Array.prototype.slice.call(arguments, 4), true);

		var doInject = true;

		if ( detectLua ) {
			doInject = what.__luaType == "function";
		}

		if ( injectSelf && doInject ) {
			args.unshift(that);
		}

		if ( detectLua && what.__luaType != "function" ) {
			var args2 = [];
			for ( var i = 0; i < args.length; ++i ) {
				var a = args[i];
				if ( a instanceof LuaTable ) {
					if ( a.numeric.length == 0 ) args2[i] = a.hash;
					else if ( Object.keys(a.hash).length == 0 ) args2[i] = a.numeric;
					else args2[i] = a;
				} else {
					args2[i] = a;
				}
			}
			args = args2;
		}

		return what.apply(that, args);
	}

	function rest(args, cnt) {
		var out = Object.create(LuaReturnValues.prototype, {});
		out.values = Array.prototype.slice.call(args, cnt);
		return out;
	}

	var id = 0;
	function LuaTable() {
		this.id = ++id;
		this.numeric = [];
		this.hash = {};
	}

	Object.defineProperty(LuaTable.prototype, "__luaType",  {value: "table",  enumerable: false});
	Object.defineProperty(LuaTable.prototype, "toString",  {value: function() {
		return makeString(this);
	},  enumerable: false});

	function makeTable(t, allowExpand /*, numeric ... */) {
		var out = new LuaTable();

		out.numeric = expand(Array.prototype.slice.call(arguments, 2), allowExpand);
		if ( !t ) return out;

		if ( isJSArray(t) ) {
			for ( var i = 0; i < t.length; ++i ) {
				var pair = t[i];
				var key = pair[0];
				var val = pair[1];
				if ( typeof key == "number" ) {
					out.numeric[key - 1] = val;
				} else {
					out.hash[key] = val;
				}
			}
		} else {
			for ( var k in t ) {
				out.hash[k] = t[k];
			}
		}

		return out;
	}

	function makeFunction(f) {
		f.__luaType = "function";
		return f;
	}

	function LuaReturnValues(v) {
		this.values = v;
	}

	Object.defineProperty(LuaReturnValues.prototype, "__luaType",  {value: "returnValues",  enumerable: false});

	function lookupMetaTable(table, entry) {
		if ( table instanceof LuaTable ) {
			if ( table.__metatable === undefined ) return null;

			var idx = table.__metatable.hash[entry];
			if ( idx === null || idx === undefined ) return null;

			return idx;
		}

		return null;
	}

	function lookupMetaTableBin(a, b, entry) {
		var mt = lookupMetaTable(a, entry);
		if ( mt == null ) return lookupMetaTable(b, entry);
		return mt;
	}

	function index(table, prop, helper) {
		if ( table === null || table === undefined || typeof table == "number" ) {
			if ( helper == undefined ) {
				throw "attempt to index a " + type(table) + " value";
			} else {
				throw "attempt to index '" + helper + "' (a " + type(table) + " value)";
			}
		} else if ( table instanceof LuaTable ) {
			var val;
			if ( typeof prop == "number") val = table.numeric[prop-1];
			else val = table.hash[prop];

			if ( val !== null & val !== undefined ) return val;

			var idxfx = lookupMetaTable(table, "__index");
			if ( idxfx == null ) return null;

			if ( typeof idxfx == "function" ) return oneValue(idxfx(table, prop));
			return index(idxfx, prop);
		} else if ( isJSArray(table) ) {
			return table[prop - 1];
		} else if ( typeof table == "string" ) {
			var sidx = tonumber(prop);
			if ( sidx < 0 ) sidx += (table.length + 1);
			return table[sidx-1];
		} else {
			return table[prop];
		}
	}

	function indexAssign(table, prop, value, helper) {

		if ( table === null || table === undefined || typeof table == "number" ) {
			if ( helper == undefined ) {
				throw "attempt to index a " + type(table) + " value";
			} else {
				throw "attempt to index '" + helper + "' (a " + type(table) + " value)";
			}
		}

		if ( table instanceof LuaTable ) {
			var val;

			if ( prop === undefined || prop === null ) throw "table index is nil";

			if ( typeof prop == "number" ) val = table.numeric[prop-1];
			else val = table.hash[prop];

			if ( val !== null & val !== undefined ) {
				if ( typeof prop == "number") table.numeric[prop-1] = value;
				else table.hash[prop] = value;
				return true;
			}

			if ( table.__metatable === undefined ) {
				if ( typeof prop == "number") table.numeric[prop-1] = value;
				else table.hash[prop] = value;
				return true;
			}



			var idx = table.__metatable.__newindex;
			if ( idx === null || idx === undefined ) {
				if ( typeof pop == "number") table.numeric[prop] = value;
				else table.hash[prop] = value;
				return true;	
			}

			if ( typeof idx == "function" ) idx(table, prop, value);
			else indexAssign(idx, prop, value);

			return true;


		} else if ( typeof table == "string" ) { 
			throw "attempt to index string value";
		} else if ( isJSArray(table) ) {
			table[prop-1] = value;
			return true;
		} else {
			return false;
		}
	}

	function oneValue(v) {
		if ( v instanceof LuaReturnValues ) return v.values[0];
		return v;
	}

	function makeMultiReturn() {
		return new LuaReturnValues(expand(arguments, true));
	}

	function expand(what, allowExpand) {
		if ( allowExpand === undefined ) allowExpand = false;

		var out = [];
		for ( var idx in what ) {
			var v = what[idx];
			if ( v instanceof LuaReturnValues ) {
				for ( var i in v.values ) {
					out.push(v.values[i]);
					if ( idx < what.length - 1 || !allowExpand) break;
				}
			} else {
				out.push(v);
			}
		}
		return out;
	}

	function expandReturnValues() {
		return expand(arguments, true);
	}

	function pcall(what /*, args... */ ) {
		try {
			var result = expand([what.apply(this, Array.prototype.slice.call(arguments, 1))], true);
			result.unshift(true);
			return makeMultiReturn.apply(__lua, result);
		} catch ( e ) {
			return makeMultiReturn(false, e);
		}
	}

	function isTable(a) { return a instanceof LuaTable; }

	function mark(o) {
		var seen = [];
		function domark(o) {
			if ( o in seen ) return;
			seen.push(o);
			if ( typeof o == "object" ) for ( var idx in o ) domark(o[idx]);
			else if ( typeof o == "function" ) o.__luaType = "function";
			
		}
		domark(o);
	}

	return {
		add: add,
		sub: sub,
		mul: mul,
		div: div,
		intdiv: intdiv,
		mod: mod,
		call: call,
		lte: lte,
		lt: lt,
		ne: ne,
		gt: gt,
		gte: gte,
		eq: eq,
		index: index,
		indexAssign: indexAssign,
		concat: concat,
		makeTable: makeTable,
		makeFunction: makeFunction,
		expandReturnValues: expandReturnValues,
		makeMultiReturn: makeMultiReturn,
		count: count,
		and: and,
		or: or,
		expand: expand,
		rest: rest,
		pcall: pcall,
		type: type,
		pow: pow,
		isTable: isTable,
		mark: mark,
		forcomp: forcomp,
		makeString: makeString,
		oneValue: oneValue,
		lookupMetaTable: lookupMetaTable,
		isJSArray: isJSArray
	};

})();


this.__lua = __lua;

env.string = {
	byte: function byte(s,i,j) {
		var chars = env.string.sub(s,i,j);
		var out = [];
		for ( var i = 0; i < chars.length; ++i ) out[i] = chars.charCodeAt(i);
		return __lua.makeMultiReturn.apply(__lua, out);
	},
	char: function char(/* arguments */) {
		var out = "";
		for ( var i = 0; i < arguments.length; ++i ) {
			out += String.fromCharCode(arguments[i]|0); 
		}
		return out;

	},
	dump: null,
	find: null,
	gmatch: null,
	gsub: null,
	len: function len(s) { return ("" + s).length; },
	lower: function lower(s) { return ("" + s).toLowerCase(); },
	match: null,
	reverse: function(s) {
		return ("" + s).split("").reverse().join("");
	},
	sub: function(s, i, j) {
		if ( i === undefined || i === null ) i = 1;
		if ( j === undefined || j === null ) j = s.length;
		if ( i < 0 ) i += (s.length+1);
		if ( j < 0 ) j += (s.length+1);

		return __lua.makeString(s).substring(i-1,j);

	},
	upper: function lower(s) { return ("" + s).toUpperCase(); },
	format: function format(format, etc) {
		var arg = arguments;
		var i = 1;
		return format.replace(/%([0-9.]+)?([%sfdgi])/g, function (m, w, t) {
			var r = null;
			if ( t == "%" ) return "%";
			else if ( t == "s") r = arg[i++];
			else if ( t == "d") r = parseInt(arg[i++]);
			else if ( t == "i") r = parseInt(arg[i++]);
			else if ( t == "f" ) r = arg[i++].toFixed(parseFloat(m[1]) || 6);
			else r = arg[i++]; 
			r = "" + r;
			if ( parseInt(w) ) {
				var extra = parseInt(w) - r.length;
				if ( extra > 0 ) r = new Array(extra).join(" ") + r;
			}
			return r;
		});
	}

};

env.table = {
	concat: null,
	insert: null,
	pack: function(/* arguments */) {
		var obj = {}
		for ( var i = 0; i < arguments.length; ++i) {
			obj[("" + (i + 1))] = arguments[i];
		}
		return __lua.makeTable(obj);
	},
	remove: null,
	sort: function sort(table) { return table; },
	unpack: function(table,i,j) {
		if ( i === undefined || i === null ) i = 1;
		if ( j === undefined || j === null ) j = __lua.count(table);

		var arr = [];
		if ( __lua.isTable(table) ) {
			for ( var a = i; a <= j; ++a ) {
				arr.push(table.numeric[a]);
			}
		} else {
			for ( var a = i; a <= j; ++a ) {
				arr.push(table[a]);
			}			
		}

		return __lua.makeMultiReturn.apply(__lua, arr);


	}

};

env.unpack = env.table.unpack;

env.tonumber = function(n) {
	return parseInt(n);
};

env.tostring = function(n) {
	return __lua.makeString(n);
};

env.os = {
	clock: null,
	date: null,
	difftime: function difftime(t1,t2) { return t2 - t1; },
	execute: null,
	exit: null,
	time: function time(table) {
		if ( table == null ) return new Date().getTime();
		throw "Time given a table not implemented yet.";
	}
};

env.io = {
	write: function() { env.print(arguments); }
};

env.error = function error(s) { throw s; };

env.assert = function assert(what, msg, code) {
	if ( code === undefined ) {
		code = msg;
		msg = undefined;
	}

	if ( !!what ) return what;

	throw("Assert Failed!! " + code);
};

env.type = function type(what) {
	return __lua.type(what);
};


env.pairs = function pairs(table) {

	var mtf = __lua.lookupMetaTable(table, "__pairs");
	if ( mtf !== null ) return mtf(table);

	var list = [];
	if ( __lua.isTable(table) ) {
		for ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, i, table.numeric]);
		for ( var idx in table.hash ) list.push([idx, idx, table.hash]);
	} else if ( __lua.isJSArray(table) ) {
		for ( var i = 0; i < table.length; ++i ) list.push([i + 1, i, table]);
	} else {
		var keys = Object.keys(table);
		for ( var idx in keys ) list.push([keys[idx], keys[idx], table]);
	}

	return __lua.makeMultiReturn(function(handle, cur) {
		if ( handle.length < 1 ) return null;
		var nfo = handle.shift();
		var k = nfo[0];
		var v = nfo[2][nfo[1]];
		return __lua.makeMultiReturn(k,v);
	}, list, null);
};

env.ipairs = function ipairs(table) {

	var mtf = __lua.lookupMetaTable(table, "__ipairs");
	if ( mtf !== null ) return mtf(table);

	return __lua.makeMultiReturn(function ipairsitr(table, cur) {
		cur = cur + 1;
		if ( __lua.isJSArray(table) ) {
			if ( table.length < cur ) return null;
			return __lua.makeMultiReturn(cur, table[cur-1]);
		} else if ( __lua.isTable(table) ) {
			if ( table.numeric[cur-1] === null || table.numeric[cur-1] === undefined ) return null;
			return __lua.makeMultiReturn(cur, table.numeric[cur-1]);
		} else {
			return table[cur-1];
		}
	}, table, 0);
};

env.next = function next(table, cur) {
	if ( __lua.isTable(table) ) {
		var list = [];
		for ( var i = 0; i < table.numeric.length; ++i ) list.push([i + 1, table.numeric[i]]);
		for ( var tidx in table.hash ) list.push([tidx, table.hash[tidx]]);
		var trigger = false;
		for ( var i = 0; i < list.length; ++i ) {
			var itm = list[i];
			if ( cur === null || cur === undefined || trigger ) {
				if ( itm[1] !== undefined && itm[1] !== null )
					return __lua.makeMultiReturn(itm[0], itm[1]);
			}
			if ( cur === itm[0] ) trigger = true;
		}

		return null;
	} else {
		var listk = Object.keys(table);
		var trigger = false;
		for ( var i = 0; i < listk.length; ++i ) {
			var idx = listk[i];
			var sidx = idx;
			if ( typeof sidx == "number" ) sidx = sidx = 1;
			if ( cur === null || cur === undefined || trigger ) return __lua.makeMultiReturn(idx, table[sidx]);
			if ( cur === idx ) trigger = true;
		}
		return null;
	}
};

env.print = function print() { console.log.apply(console, arguments); };
env.pcall = this.__lua.pcall;

env.rawequals = function rawequals(a,b) { return a == b; };
env.rawget = function rawget(table, prop) { 
	if ( table instanceof LuaTable ) {
		if ( typeof prop == "number" ) return table.numeric[prop - 1];
		else return table.hash[prop];
	}
	return table[prop]; 
};
env.rawset = function rawset(table, prop, val) { 
	if ( table instanceof LuaTable ) {
		if ( typeof prop == "number" ) return table.numeric[prop - 1] = val;
		else return table.hash[prop] = val;
	}
	return table[prop] = val; 
};

env.something = function something(table) {
	var array = [];
	var idx = 1;
	while ( table[idx] !== undefined ) {
		array.push(table[idx]);
		++idx;
	}
	return __lua.makeMultiReturn.apply(__lua, array);
};
env.math = Math;

env.setmetatable = function setmetatable(target, meta) {

	Object.defineProperty(target, "__metatable", {value: meta, enumerable: false, configurable: true });
	return target;
};

env.getmetatable = function getmetatable(taget, meta) {
	return taget.__metatable;
};

var reduce = function reduce(arr, op) {
	if ( arr.length < 1 ) return undefined;
	var val = arr[0];
	for ( var i = 1; i < arr.length; ++i ) {
		val = op(val, arr[i]);
	}
	return val;
};

env.bit32 = {
	band: function band() { return reduce(arguments, function(a,b) { return a & b; }); },
	bor: function bor() { return reduce(arguments, function(a,b) { return a | b; }); },
	bxor: function bxor() { return reduce(arguments, function(a,b) { return a | b; }); },

	rshift: function rshift(b, disp) { return b >> disp; }
};

env.require = function require(what) {
	if ( what == "bit" ) return env.bit32;
	if ( what == "bit32" ) return env.bit32;
	throw "Module " + waht + " not found";
};

__lua.mark(env);
__lua.env = env;
for ( var idx in env ) this[idx] = env[idx];



/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["filbert"] = factory();
	else
		root["filbert"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Sk = __webpack_require__(1);
	var transform = __webpack_require__(2);
	var improveError = __webpack_require__(3);

	var defaultOptions = {
		locations: true,
		ranges: true,
		sippets: true,
		filename: 'file.py',
		useLet: false,
		friendlyErrors: true
	};

	function rangeToLoc(x, offsets) {
		var best = -1;
		for ( var i = 0; i < offsets.length; ++i ) {
			if ( offsets[i] > x ) break;
			best = i;
		}
		var off = best >= 0 ? offsets[best] : 0;
		return {line: best+2, column: x - off, pos: x };
	}

	function locToRange(line, col, offsets) {
		var loff = 0;
		if ( line > 2 && (line-2) < offsets.length ) loff = offsets[line-2];
		return loff + col;
	}

	function decorate(n, code, offsets, options) {
		var numrange = locToRange(n.lineno, n.col_offset, offsets);

		var range = [
			numrange === numrange ? numrange : Infinity,
			numrange === numrange ? numrange : -Infinity
		];
		
		if ( n.value ) range[1] += (n.value.length);

		if ( n.children )
		for ( var i = 0; i < n.children.length; ++i ) {
			var r = decorate(n.children[i], code, offsets, options);
			range[0] = Math.min(range[0], r[0]);
			range[1] = Math.max(range[1], r[1]);
		}

		if ( options.ranges ) n.range = range;
		if ( options.locations ) {
			n.loc = {
				start: rangeToLoc(range[0], offsets),
				end: rangeToLoc(range[1], offsets),
			};
		}
		if ( options.snippets ) n.str = code.substring(range[0], range[1]);

		return range;
	}

	function parser(code, options) {
		var lineOffsets = [];
		var idx = -1;
		var parse, ast;
		options = options || {};
		for ( var opt in defaultOptions ) {
			if ( !(opt in options) ) options[opt] = defaultOptions[opt];
		}

		while ( true ) {
			idx = code.indexOf("\n", idx+1);
			if ( idx < 0 ) break;
			lineOffsets.push(idx+1);
		}

		try {
			parse = Sk.parse(options.filename, code);
			decorate(parse.cst, code, lineOffsets, options);
			parse.flags = parse.flags | Sk.Parser.CO_FUTURE_UNICODE_LITERALS; //Enable future unicode literals
			ast = Sk.astFromParse(parse.cst, options.filename, parse.flags);
		} catch ( e ) {
			if ( e.extra && e.extra.node ) decorate(e.extra.node, code, lineOffsets, options);
			improveError(e, options, code);
			if ( e.loc ) {
				e.pos = locToRange(e.loc.line, e.loc.column, lineOffsets);
			}
			throw e;
		}

		//console.log(JSON.stringify(ast, null, "  "));
		var ctx = {varType: (options.useLet ? 'let' : 'var')};
		var js = transform(ast, ctx);
		return js;
	}

	module.exports = {
		parse: parser,
		pythonRuntime: __webpack_require__(4),
		defaultOptions: {runtimeParamName: '__pythonRuntime'}
	};

/***/ },
/* 1 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/* ---- /Users/rob/skulpty/lib/preamble.js ---- */ 

	var goog = {
		global: global
	};

	var COMPILED = false;

	goog.exportSymbol = function() {};
	goog.require = function() {};

	goog.inherits = function(childCtor, parentCtor) {
	  if ( !parentCtor ) throw new Error("Cant inherit from undefined?");
	  /** @constructor */
	  function tempCtor() {};
	  tempCtor.prototype = parentCtor.prototype;
	  childCtor.superClass_ = parentCtor.prototype;
	  childCtor.prototype = new tempCtor();
	  /** @override */
	  childCtor.prototype.constructor = childCtor;
	};

	goog.asserts = {
		assert: function(what, why) {
	        if ( !what ) throw new Error("AssertionFailed:" + why);
	    }
	};

	var Sk = Sk || {};

	Sk.builtin = Sk.builtin  ||  {};

	Sk.builtin.bool = Boolean;
	Sk.builtin.int_ = function Int(x) {
	  this.v = x;
	};

	Sk.builtin.int_.prototype.threshold$ = Infinity;
	Sk.builtin.int_.prototype.valueOf = function() { return this.v.valueOf(); };

	Sk.builtin.tuple = function(x) {
	  this.v = Array.prototype.slice.call(x, 0);
	};
	Sk.builtin.tuple.prototype.sq$length = function() { return this.length; };

	Sk.builtin.float_ = Number;
	Sk.builtin.long = Number;
	Sk.builtin.func = function(fx) { return fx; };


	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/type.js ---- */ 

	if(Sk.builtin === undefined) {
	    Sk.builtin = {};
	}

	/**
	 * Maps Python dunder names to the Skulpt Javascript function names that
	 * implement them.
	 *
	 * Note: __add__, __mul__, and __rmul__ can be used for either numeric or
	 * sequence types. Here, they default to the numeric versions (i.e. nb$add,
	 * nb$multiply, and nb$reflected_multiply). This works because Sk.abstr.binary_op_
	 * checks for the numeric shortcuts and not the sequence shortcuts when computing
	 * a binary operation.
	 *
	 * Because many of these functions are used in contexts in which Skulpt does not
	 * [yet] handle suspensions, the assumption is that they must not suspend. However,
	 * some of these built-in functions are acquiring 'canSuspend' arguments to signal
	 * where this is not the case. These need to be spliced out of the argument list before
	 * it is passed to python. Array values in this map contain [dunderName, argumentIdx],
	 * where argumentIdx specifies the index of the 'canSuspend' boolean argument.
	 *
	 * @type {Object}
	 */
	Sk.dunderToSkulpt = {
	    "__eq__": "ob$eq",
	    "__ne__": "ob$ne",
	    "__lt__": "ob$lt",
	    "__le__": "ob$le",
	    "__gt__": "ob$gt",
	    "__ge__": "ob$ge",
	    "__hash__": "tp$hash",
	    "__abs__": "nb$abs",
	    "__neg__": "nb$negative",
	    "__pos__": "nb$positive",
	    "__int__": "nb$int_",
	    "__long__": "nb$lng",
	    "__float__": "nb$float_",
	    "__add__": "nb$add",
	    "__radd__": "nb$reflected_add",
	    "__sub__": "nb$subtract",
	    "__rsub__": "nb$reflected_subtract",
	    "__mul__": "nb$multiply",
	    "__rmul__": "nb$reflected_multiply",
	    "__div__": "nb$divide",
	    "__rdiv__": "nb$reflected_divide",
	    "__floordiv__": "nb$floor_divide",
	    "__rfloordiv__": "nb$reflected_floor_divide",
	    "__mod__": "nb$remainder",
	    "__rmod__": "nb$reflected_remainder",
	    "__divmod__": "nb$divmod",
	    "__rdivmod__": "nb$reflected_divmod",
	    "__pow__": "nb$power",
	    "__rpow__": "nb$reflected_power",
	    "__contains__": "sq$contains",
	    "__len__": ["sq$length", 0]
	};

	/**
	 *
	 * @constructor
	 *
	 * @param {*} name name or object to get type of, if only one arg
	 *
	 * @param {Sk.builtin.tuple=} bases
	 *
	 * @param {Object=} dict
	 *
	 *
	 * This type represents the type of `type'. *Calling* an instance of
	 * this builtin type named "type" creates class objects. The resulting
	 * class objects will have various tp$xyz attributes on them that allow
	 * for the various operations on that object.
	 *
	 * calling the type or calling an instance of the type? or both?
	 */
	Sk.builtin.type = function (name, bases, dict) {
	    var mro;
	    var obj;
	    var klass;
	    var v;
	    if (bases === undefined && dict === undefined) {
	        // 1 arg version of type()
	        // the argument is an object, not a name and returns a type object
	        obj = name;
	        return obj.ob$type;
	    } else {

	        // argument dict must be of type dict
	        if(dict.tp$name !== "dict") {
	            throw new Sk.builtin.TypeError("type() argument 3 must be dict, not " + Sk.abstr.typeName(dict));
	        }

	        // checks if name must be string
	        if(!Sk.builtin.checkString(name)) {
	            throw new Sk.builtin.TypeError("type() argument 1 must be str, not " + Sk.abstr.typeName(name));
	        }

	        // argument bases must be of type tuple
	        if(bases.tp$name !== "tuple") {
	            throw new Sk.builtin.TypeError("type() argument 2 must be tuple, not " + Sk.abstr.typeName(bases));
	        }

	        // type building version of type

	        // dict is the result of running the classes code object
	        // (basically the dict of functions). those become the prototype
	        // object of the class).
	        /**
	        * @constructor
	        */
	        klass = function (kwdict, varargseq, kws, args, canSuspend) {
	            var init;
	            var self = this;
	            var s;
	            var args_copy;
	            if (!(this instanceof klass)) {
	                return new klass(kwdict, varargseq, kws, args, canSuspend);
	            }

	            args = args || [];
	            self["$d"] = new Sk.builtin.dict([]);
	            self["$d"].mp$ass_subscript(new Sk.builtin.str("__dict__"), self["$d"]);

	            if (klass.prototype.tp$base !== undefined) {
	                if (klass.prototype.tp$base.sk$klass) {
	                    klass.prototype.tp$base.call(this, kwdict, varargseq, kws, args.slice(), canSuspend);
	                } else {
	                    // Call super constructor if subclass of a builtin
	                    args_copy = args.slice();
	                    args_copy.unshift(klass, this);
	                    Sk.abstr.superConstructor.apply(undefined, args_copy);
	                }
	            }

	            init = Sk.builtin.type.typeLookup(self.ob$type, "__init__");
	            if (init !== undefined) {
	                // return should be None or throw a TypeError otherwise
	                args.unshift(self);
	                s = Sk.misceval.applyOrSuspend(init, kwdict, varargseq, kws, args);

	                return (function doSusp(s) {
	                    if (s instanceof Sk.misceval.Suspension) {
	                        // TODO I (Meredydd) don't know whether we are ever called
	                        // from anywhere except Sk.misceval.applyOrSuspend().
	                        // If we're not, we don't need a canSuspend parameter at all.
	                        if (canSuspend) {
	                            return new Sk.misceval.Suspension(doSusp, s);
	                        } else {
	                            return Sk.misceval.retryOptionalSuspensionOrThrow(s);
	                        }
	                    } else {
	                        return self;
	                    }
	                })(s);
	            }

	            return self;
	        };

	        var _name = Sk.ffi.remapToJs(name); // unwrap name string to js for latter use

	        var inheritsFromObject = false, inheritsBuiltin = false;

	        if (bases.v.length === 0 && Sk.python3) {
	            // new style class, inherits from object by default
	            inheritsFromObject = true;
	            Sk.abstr.setUpInheritance(_name, klass, Sk.builtin.object);
	        }

	        var parent, it, firstAncestor, builtin_bases = [];
	        // Set up inheritance from any builtins
	        for (it = bases.tp$iter(), parent = it.tp$iternext(); parent !== undefined; parent = it.tp$iternext()) {
	            if (firstAncestor === undefined) {
	                firstAncestor = parent;
	            }
	            if (parent.prototype instanceof Sk.builtin.object || parent === Sk.builtin.object) {

	                while (parent.sk$klass && parent.prototype.tp$base) {
	                    parent = parent.prototype.tp$base;
	                }

	                if (!parent.sk$klass && builtin_bases.indexOf(parent) < 0) {
	                    builtin_bases.push(parent);
	                }

	                // This class inherits from Sk.builtin.object at some level
	                inheritsFromObject = true;
	            }
	        }

	        if (builtin_bases.length > 1) {
	            throw new Sk.builtin.TypeError("Multiple inheritance with more than one builtin type is unsupported");
	        }

	        // Javascript does not support multiple inheritance, so only the first
	        // base (if any) will directly inherit in Javascript
	        if (firstAncestor !== undefined) {
	            goog.inherits(klass, firstAncestor);

	            if (firstAncestor.prototype instanceof Sk.builtin.object || firstAncestor === Sk.builtin.object) {
	                klass.prototype.tp$base = firstAncestor;
	            }
	        }

	        klass.prototype.tp$name = _name;
	        klass.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj(_name, klass);

	        if (!inheritsFromObject) {
	            // old style class, does not inherit from object
	            klass.prototype.tp$getattr = Sk.builtin.object.prototype.GenericGetAttr;
	            klass.prototype.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;
	        }

	        // set __module__ if not present (required by direct type(name, bases, dict) calls)
	        var module_lk = new Sk.builtin.str("__module__");
	        if(dict.mp$lookup(module_lk) === undefined) {
	            dict.mp$ass_subscript(module_lk, Sk.globals["__name__"]);
	        }

	        // copy properties into our klass object
	        // uses python iter methods
	        var k;
	        for (it = dict.tp$iter(), k = it.tp$iternext(); k !== undefined; k = it.tp$iternext()) {
	            v = dict.mp$subscript(k);
	            if (v === undefined) {
	                v = null;
	            }
	            klass.prototype[k.v] = v;
	            klass[k.v] = v;
	        }

	        klass["__class__"] = klass;
	        klass["__name__"] = name;
	        klass.sk$klass = true;
	        klass.prototype.tp$descr_get = function () {
	            goog.asserts.fail("in type tp$descr_get");
	        };
	        klass.prototype["$r"] = function () {
	            var cname;
	            var mod;
	            // TODO use Sk.abstr.gattr() here so __repr__ can be dynamically provided (eg by __getattr__())
	            var reprf = this.tp$getattr("__repr__");
	            if (reprf !== undefined && reprf.im_func !== Sk.builtin.object.prototype["__repr__"]) {
	                return Sk.misceval.apply(reprf, undefined, undefined, undefined, []);
	            }

	            if ((klass.prototype.tp$base !== undefined) &&
	                (klass.prototype.tp$base !== Sk.builtin.object) &&
	                (klass.prototype.tp$base.prototype["$r"] !== undefined)) {
	                // If subclass of a builtin which is not object, use that class' repr
	                return klass.prototype.tp$base.prototype["$r"].call(this);
	            } else {
	                // Else, use default repr for a user-defined class instance
	                mod = dict.mp$subscript(module_lk); // lookup __module__
	                cname = "";
	                if (mod) {
	                    cname = mod.v + ".";
	                }
	                return new Sk.builtin.str("<" + cname + _name + " object>");
	            }
	        };
	        klass.prototype.tp$str = function () {
	            // TODO use Sk.abstr.gattr() here so __str__ can be dynamically provided (eg by __getattr__())
	            var strf = this.tp$getattr("__str__");
	            if (strf !== undefined && strf.im_func !== Sk.builtin.object.prototype["__str__"]) {
	                return Sk.misceval.apply(strf, undefined, undefined, undefined, []);
	            }
	            if ((klass.prototype.tp$base !== undefined) &&
	                (klass.prototype.tp$base !== Sk.builtin.object) &&
	                (klass.prototype.tp$base.prototype.tp$str !== undefined)) {
	                // If subclass of a builtin which is not object, use that class' repr
	                return klass.prototype.tp$base.prototype.tp$str.call(this);
	            }
	            return this["$r"]();
	        };
	        klass.prototype.tp$length = function (canSuspend) {
	            var r = Sk.misceval.chain(Sk.abstr.gattr(this, "__len__", canSuspend), function(lenf) {
	                return Sk.misceval.applyOrSuspend(lenf, undefined, undefined, undefined, []);
	            });
	            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	        };
	        klass.prototype.tp$call = function (args, kw) {
	            return Sk.misceval.chain(Sk.abstr.gattr(this, "__call__", true), function(callf) {
	                return Sk.misceval.applyOrSuspend(callf, undefined, undefined, kw, args);
	            });
	        };
	        klass.prototype.tp$iter = function () {
	            var iterf = Sk.abstr.gattr(this, "__iter__", false);
	            return Sk.misceval.callsim(iterf);
	        };
	        klass.prototype.tp$iternext = function (canSuspend) {
	            var self = this;
	            var r = Sk.misceval.chain(
	                Sk.misceval.tryCatch(function() {
	                    return Sk.abstr.gattr(self, "next", canSuspend);
	                }, function(e) {
	                    if (e instanceof Sk.builtin.AttributeError) {
	                        throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(self) + "' object is not iterable");
	                    } else {
	                        throw e;
	                    }
	                }),
	            function(/** {Object} */ iternextf) {
	                return Sk.misceval.tryCatch(function() {
	                    return Sk.misceval.callsimOrSuspend(iternextf);
	                }, function(e) {
	                    if (e instanceof Sk.builtin.StopIteration) {
	                        return undefined;
	                    } else {
	                        throw e;
	                    }
	                });
	            });

	            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	        };

	        klass.prototype.tp$getitem = function (key, canSuspend) {
	            var getf = Sk.abstr.gattr(this, "__getitem__", canSuspend), r;
	            if (getf !== undefined) {
	                r = Sk.misceval.applyOrSuspend(getf, undefined, undefined, undefined, [key]);
	                return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	            }
	            throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(this) + "' object does not support indexing");
	        };
	        klass.prototype.tp$setitem = function (key, value, canSuspend) {
	            var setf = Sk.abstr.gattr(this, "__setitem__", canSuspend), r;
	            if (setf !== undefined) {
	                r = Sk.misceval.applyOrSuspend(setf, undefined, undefined, undefined, [key, value]);
	                return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	            }
	            throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(this) + "' object does not support item assignment");
	        };

	        if (bases) {
	            //print("building mro for", name);
	            //for (var i = 0; i < bases.length; ++i)
	            //print("base[" + i + "]=" + bases[i].tp$name);
	            klass["$d"] = new Sk.builtin.dict([]);
	            klass["$d"].mp$ass_subscript(Sk.builtin.type.basesStr_, bases);
	            mro = Sk.builtin.type.buildMRO(klass);
	            klass["$d"].mp$ass_subscript(Sk.builtin.type.mroStr_, mro);
	            klass.tp$mro = mro;
	            //print("mro result", Sk.builtin.repr(mro).v);
	        }

	        // fix for class attributes
	        klass.tp$setattr = Sk.builtin.type.prototype.tp$setattr;

	        var shortcutDunder = function (skulpt_name, magic_name, magic_func, canSuspendIdx) {
	            klass.prototype[skulpt_name] = function () {
	                var args = Array.prototype.slice.call(arguments), canSuspend;
	                args.unshift(magic_func, this);

	                if (canSuspendIdx) {
	                    canSuspend = args[canSuspendIdx+1];
	                    args.splice(canSuspendIdx+1, 1);
	                    if (canSuspend) {
	                        return Sk.misceval.callsimOrSuspend.apply(undefined, args);
	                    }
	                }
	                return Sk.misceval.callsim.apply(undefined, args);
	            };
	        };

	        // Register skulpt shortcuts to magic methods defined by this class.
	        // TODO: This is somewhat problematic, as it means that dynamically defined
	        // methods (eg those returned by __getattr__()) cannot be used by these magic
	        // functions.
	        var dunder, skulpt_name, canSuspendIdx;
	        for (dunder in Sk.dunderToSkulpt) {
	            skulpt_name = Sk.dunderToSkulpt[dunder];
	            if (typeof(skulpt_name) === "string") {
	                canSuspendIdx = null;
	            } else {
	                canSuspendIdx = skulpt_name[1];
	                skulpt_name = skulpt_name[0];
	            }

	            if (klass[dunder]) {
	                // scope workaround
	                shortcutDunder(skulpt_name, dunder, klass[dunder], canSuspendIdx);
	            }
	        }

	        return klass;
	    }

	};

	/**
	 *
	 */
	Sk.builtin.type.makeTypeObj = function (name, newedInstanceOfType) {
	    Sk.builtin.type.makeIntoTypeObj(name, newedInstanceOfType);
	    return newedInstanceOfType;
	};

	Sk.builtin.type.makeIntoTypeObj = function (name, t) {
	    goog.asserts.assert(name !== undefined);
	    goog.asserts.assert(t !== undefined);
	    t.ob$type = Sk.builtin.type;
	    t.tp$name = name;
	    t["$r"] = function () {
	        var ctype;
	        var mod = t.__module__;
	        var cname = "";
	        if (mod) {
	            cname = mod.v + ".";
	        }
	        ctype = "class";
	        if (!mod && !t.sk$klass && !Sk.python3) {
	            ctype = "type";
	        }
	        return new Sk.builtin.str("<" + ctype + " '" + cname + t.tp$name + "'>");
	    };
	    t.tp$str = undefined;
	    t.tp$getattr = Sk.builtin.type.prototype.tp$getattr;
	    t.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;
	    t.tp$richcompare = Sk.builtin.type.prototype.tp$richcompare;
	    t.sk$type = true;

	    return t;
	};

	Sk.builtin.type.ob$type = Sk.builtin.type;
	Sk.builtin.type.tp$name = "type";
	Sk.builtin.type["$r"] = function () {
	    if(Sk.python3) {
	        return new Sk.builtin.str("<class 'type'>");
	    } else {
	        return new Sk.builtin.str("<type 'type'>");
	    }
	};

	//Sk.builtin.type.prototype.tp$descr_get = function() { print("in type descr_get"); };

	//Sk.builtin.type.prototype.tp$name = "type";

	// basically the same as GenericGetAttr except looks in the proto instead
	Sk.builtin.type.prototype.tp$getattr = function (name) {
	    var res;
	    var tp = this;
	    var descr;
	    var f;

	    if (this["$d"]) {
	        res = this["$d"].mp$lookup(new Sk.builtin.str(name));
	        if (res !== undefined) {
	            return res;
	        }
	    }

	    descr = Sk.builtin.type.typeLookup(tp, name);

	    //print("type.tpgetattr descr", descr, descr.tp$name, descr.func_code, name);
	    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {
	        f = descr.ob$type.tp$descr_get;
	        // todo;if (f && descr.tp$descr_set) // is a data descriptor if it has a set
	        // return f.call(descr, this, this.ob$type);
	    }

	    if (f) {
	        // non-data descriptor
	        return f.call(descr, null, tp);
	    }

	    if (descr !== undefined) {
	        return descr;
	    }

	    return undefined;
	};

	Sk.builtin.type.prototype.tp$setattr = function (name, value) {
	    // class attributes are direct properties of the object
	    this[name] = value;
	};

	Sk.builtin.type.typeLookup = function (type, name) {
	    var mro = type.tp$mro;
	    var pyname = new Sk.builtin.str(name);
	    var base;
	    var res;
	    var i;

	    // todo; probably should fix this, used for builtin types to get stuff
	    // from prototype
	    if (!mro) {
	        if (type.prototype) {
	            return type.prototype[name];
	        }
	        return undefined;
	    }

	    for (i = 0; i < mro.v.length; ++i) {
	        base = mro.v[i];
	        if (base.hasOwnProperty(name)) {
	            return base[name];
	        }
	        res = base["$d"].mp$lookup(pyname);
	        if (res !== undefined) {
	            return res;
	        }
	        if (base.prototype && base.prototype[name] !== undefined) {
	            return base.prototype[name];
	        }
	    }

	    return undefined;
	};

	Sk.builtin.type.mroMerge_ = function (seqs) {
	    /*
	     var tmp = [];
	     for (var i = 0; i < seqs.length; ++i)
	     {
	     tmp.push(new Sk.builtin.list(seqs[i]));
	     }
	     print(Sk.builtin.repr(new Sk.builtin.list(tmp)).v);
	     */
	    var seq;
	    var i;
	    var next;
	    var k;
	    var sseq;
	    var j;
	    var cand;
	    var cands;
	    var res = [];
	    for (; ;) {
	        for (i = 0; i < seqs.length; ++i) {
	            seq = seqs[i];
	            if (seq.length !== 0) {
	                break;
	            }
	        }
	        if (i === seqs.length) { // all empty
	            return res;
	        }
	        cands = [];
	        for (i = 0; i < seqs.length; ++i) {
	            seq = seqs[i];
	            //print("XXX", Sk.builtin.repr(new Sk.builtin.list(seq)).v);
	            if (seq.length !== 0) {
	                cand = seq[0];
	                //print("CAND", Sk.builtin.repr(cand).v);
	                OUTER:
	                    for (j = 0; j < seqs.length; ++j) {
	                        sseq = seqs[j];
	                        for (k = 1; k < sseq.length; ++k) {
	                            if (sseq[k] === cand) {
	                                break OUTER;
	                            }
	                        }
	                    }

	                // cand is not in any sequences' tail -> constraint-free
	                if (j === seqs.length) {
	                    cands.push(cand);
	                }
	            }
	        }

	        if (cands.length === 0) {
	            throw new Sk.builtin.TypeError("Inconsistent precedences in type hierarchy");
	        }

	        next = cands[0];
	        // append next to result and remove from sequences
	        res.push(next);
	        for (i = 0; i < seqs.length; ++i) {
	            seq = seqs[i];
	            if (seq.length > 0 && seq[0] === next) {
	                seq.splice(0, 1);
	            }
	        }
	    }
	};

	Sk.builtin.type.buildMRO_ = function (klass) {
	    // MERGE(klass + mro(bases) + bases)
	    var i;
	    var bases;
	    var all = [
	        [klass]
	    ];

	    //Sk.debugout("buildMRO for", klass.tp$name);

	    var kbases = klass["$d"].mp$subscript(Sk.builtin.type.basesStr_);
	    for (i = 0; i < kbases.v.length; ++i) {
	        all.push(Sk.builtin.type.buildMRO_(kbases.v[i]));
	    }

	    bases = [];
	    for (i = 0; i < kbases.v.length; ++i) {
	        bases.push(kbases.v[i]);
	    }
	    all.push(bases);

	    return Sk.builtin.type.mroMerge_(all);
	};

	/*
	 * C3 MRO (aka CPL) linearization. Figures out which order to search through
	 * base classes to determine what should override what. C3 does the "right
	 * thing", and it's what Python has used since 2.3.
	 *
	 * Kind of complicated to explain, but not really that complicated in
	 * implementation. Explanations:
	 *
	 * http://people.csail.mit.edu/jrb/goo/manual.43/goomanual_55.html
	 * http://www.python.org/download/releases/2.3/mro/
	 * http://192.220.96.201/dylan/linearization-oopsla96.html
	 *
	 * This implementation is based on a post by Samuele Pedroni on python-dev
	 * (http://mail.python.org/pipermail/python-dev/2002-October/029176.html) when
	 * discussing its addition to Python.
	 */
	Sk.builtin.type.buildMRO = function (klass) {
	    return new Sk.builtin.tuple(Sk.builtin.type.buildMRO_(klass));
	};

	Sk.builtin.type.prototype.tp$richcompare = function (other, op) {
	    var r2;
	    var r1;
	    if (other.ob$type != Sk.builtin.type) {
	        return undefined;
	    }
	    if (!this["$r"] || !other["$r"]) {
	        return undefined;
	    }
	    r1 = new Sk.builtin.str(this["$r"]().v.slice(1,6));
	    r2 = new Sk.builtin.str(other["$r"]().v.slice(1,6));
	    if (this["$r"]().v.slice(1,6) !== "class") {
	        r1 = this["$r"]();
	        r2 = other["$r"]();
	    }
	    return r1.tp$richcompare(r2, op);
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/abstract.js ---- */ 

	/**
	 * @namespace Sk.abstr
	 *
	 */
	Sk.abstr = {};

	//
	// Number
	//

	Sk.abstr.typeName = function (v) {
	    var vtypename;
	    if (v.tp$name !== undefined) {
	        vtypename = v.tp$name;
	    } else {
	        vtypename = "<invalid type>";
	    }
	    return vtypename;
	};

	Sk.abstr.binop_type_error = function (v, w, name) {
	    var vtypename = Sk.abstr.typeName(v),
	        wtypename = Sk.abstr.typeName(w);

	    throw new Sk.builtin.TypeError("unsupported operand type(s) for " + name + ": '" + vtypename + "' and '" + wtypename + "'");
	};

	Sk.abstr.unop_type_error = function (v, name) {
	    var vtypename = Sk.abstr.typeName(v),
	        uop = {
	            "UAdd"  : "+",
	            "USub"  : "-",
	            "Invert": "~"
	        }[name];

	    throw new Sk.builtin.TypeError("bad operand type for unary " + uop + ": '" + vtypename + "'");
	};

	/**
	 * lookup and return the LHS object slot function method.  This coudl be either a builtin slot function or a dunder method defined by the user.
	 * @param obj
	 * @param name
	 * @returns {Object|null|undefined}
	 * @private
	 */
	Sk.abstr.boNameToSlotFuncLhs_ = function (obj, name) {
	    if (obj === null) {
	        return undefined;
	    }

	    switch (name) {
	    case "Add":
	        return obj.nb$add ? obj.nb$add : obj["__add__"];
	    case "Sub":
	        return obj.nb$subtract ? obj.nb$subtract : obj["__sub__"];
	    case "Mult":
	        return obj.nb$multiply ? obj.nb$multiply : obj["__mul__"];
	    case "Div":
	        return obj.nb$divide ? obj.nb$divide : obj["__div__"];
	    case "FloorDiv":
	        return obj.nb$floor_divide ? obj.nb$floor_divide : obj["__floordiv__"];
	    case "Mod":
	        return obj.nb$remainder ? obj.nb$remainder : obj["__mod__"];
	    case "DivMod":
	        return obj.nb$divmod ? obj.nb$divmod : obj["__divmod__"];
	    case "Pow":
	        return obj.nb$power ? obj.nb$power : obj["__pow__"];
	    case "LShift":
	        return obj.nb$lshift ? obj.nb$lshift : obj["__lshift__"];
	    case "RShift":
	        return obj.nb$rshift ? obj.nb$rshift : obj["__rshift__"];
	    case "BitAnd":
	        return obj.nb$and ? obj.nb$and : obj["__and__"];
	    case "BitXor":
	        return obj.nb$xor ? obj.nb$xor : obj["__xor__"];
	    case "BitOr":
	        return obj.nb$or ? obj.nb$or : obj["__or__"];
	    }
	};

	Sk.abstr.boNameToSlotFuncRhs_ = function (obj, name) {
	    if (obj === null) {
	        return undefined;
	    }

	    switch (name) {
	    case "Add":
	        return obj.nb$reflected_add ? obj.nb$reflected_add : obj["__radd__"];
	    case "Sub":
	        return obj.nb$reflected_subtract ? obj.nb$reflected_subtract : obj["__rsub__"];
	    case "Mult":
	        return obj.nb$reflected_multiply ? obj.nb$reflected_multiply : obj["__rmul__"];
	    case "Div":
	        return obj.nb$reflected_divide ? obj.nb$reflected_divide : obj["__rdiv__"];
	    case "FloorDiv":
	        return obj.nb$reflected_floor_divide ? obj.nb$reflected_floor_divide : obj["__rfloordiv__"];
	    case "Mod":
	        return obj.nb$reflected_remainder ? obj.nb$reflected_remainder : obj["__rmod__"];
	    case "DivMod":
	        return obj.nb$reflected_divmod ? obj.nb$reflected_divmod : obj["__rdivmod__"];
	    case "Pow":
	        return obj.nb$reflected_power ? obj.nb$reflected_power : obj["__rpow__"];
	    case "LShift":
	        return obj.nb$reflected_lshift ? obj.nb$reflected_lshift : obj["__rlshift__"];
	    case "RShift":
	        return obj.nb$reflected_rshift ? obj.nb$reflected_rshift : obj["__rrshift__"];
	    case "BitAnd":
	        return obj.nb$reflected_and ? obj.nb$reflected_and : obj["__rand__"];
	    case "BitXor":
	        return obj.nb$reflected_xor ? obj.nb$reflected_xor : obj["__rxor__"];
	    case "BitOr":
	        return obj.nb$reflected_or ? obj.nb$reflected_or : obj["__ror__"];
	    }
	};

	Sk.abstr.iboNameToSlotFunc_ = function (obj, name) {
	    switch (name) {
	    case "Add":
	        return obj.nb$inplace_add ? obj.nb$inplace_add : obj["__iadd__"];
	    case "Sub":
	        return obj.nb$inplace_subtract ? obj.nb$inplace_subtract : obj["__isub__"];
	    case "Mult":
	        return obj.nb$inplace_multiply ? obj.nb$inplace_multiply : obj["__imul__"];
	    case "Div":
	        return obj.nb$inplace_divide ? obj.nb$inplace_divide : obj["__idiv__"];
	    case "FloorDiv":
	        return obj.nb$inplace_floor_divide ? obj.nb$inplace_floor_divide : obj["__ifloordiv__"];
	    case "Mod":
	        return obj.nb$inplace_remainder;
	    case "Pow":
	        return obj.nb$inplace_power;
	    case "LShift":
	        return obj.nb$inplace_lshift ? obj.nb$inplace_lshift : obj["__ilshift__"];
	    case "RShift":
	        return obj.nb$inplace_rshift ? obj.nb$inplace_rshift : obj["__irshift__"];
	    case "BitAnd":
	        return obj.nb$inplace_and;
	    case "BitOr":
	        return obj.nb$inplace_or;
	    case "BitXor":
	        return obj.nb$inplace_xor ? obj.nb$inplace_xor : obj["__ixor__"];
	    }
	};
	Sk.abstr.uoNameToSlotFunc_ = function (obj, name) {
	    if (obj === null) {
	        return undefined;
	    }
	    switch (name) {
	    case "USub":
	        return obj.nb$negative ? obj.nb$negative : obj["__neg__"];
	    case "UAdd":
	        return obj.nb$positive ? obj.nb$positive : obj["__pos__"];
	    case "Invert":
	        return obj.nb$invert ? obj.nb$invert : obj["__invert__"];
	    }
	};

	Sk.abstr.binary_op_ = function (v, w, opname) {
	    var wop;
	    var ret;
	    var vop;

	    // All Python inheritance is now enforced with Javascript inheritance
	    // (see Sk.abstr.setUpInheritance). This checks if w's type is a strict
	    // subclass of v's type
	    var w_is_subclass = w.constructor.prototype instanceof v.constructor;

	    // From the Python 2.7 docs:
	    //
	    // "If the right operand’s type is a subclass of the left operand’s type and
	    // that subclass provides the reflected method for the operation, this
	    // method will be called before the left operand’s non-reflected method.
	    // This behavior allows subclasses to override their ancestors’ operations."
	    //
	    // -- https://docs.python.org/2/reference/datamodel.html#index-92

	    if (w_is_subclass) {
	        wop = Sk.abstr.boNameToSlotFuncRhs_(w, opname);
	        if (wop !== undefined) {
	            if (wop.call) {
	                ret = wop.call(w, v);
	            } else {
	                ret = Sk.misceval.callsim(wop, w, v);
	            }
	            if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	                return ret;
	            }
	        }
	    }

	    vop = Sk.abstr.boNameToSlotFuncLhs_(v, opname);
	    if (vop !== undefined) {
	        if (vop.call) {
	            ret = vop.call(v, w);
	        } else {
	            ret = Sk.misceval.callsim(vop, v, w);
	        }
	        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	            return ret;
	        }
	    }
	    // Don't retry RHS if failed above
	    if (!w_is_subclass) {
	        wop = Sk.abstr.boNameToSlotFuncRhs_(w, opname);
	        if (wop !== undefined) {
	            if (wop.call) {
	                ret = wop.call(w, v);
	            } else {
	                ret = Sk.misceval.callsim(wop, w, v);
	            }
	            if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	                return ret;
	            }
	        }
	    }
	    Sk.abstr.binop_type_error(v, w, opname);
	};

	Sk.abstr.binary_iop_ = function (v, w, opname) {
	    var wop;
	    var ret;
	    var vop = Sk.abstr.iboNameToSlotFunc_(v, opname);
	    if (vop !== undefined) {
	        if (vop.call) {
	            ret = vop.call(v, w);
	        } else {  // assume that vop is an __xxx__ type method
	            ret = Sk.misceval.callsim(vop, v, w); //  added to be like not-in-place... is this okay?
	        }
	        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	            return ret;
	        }
	    }
	    wop = Sk.abstr.iboNameToSlotFunc_(w, opname);
	    if (wop !== undefined) {
	        if (wop.call) {
	            ret = wop.call(w, v);
	        } else { // assume that wop is an __xxx__ type method
	            ret = Sk.misceval.callsim(wop, w, v); //  added to be like not-in-place... is this okay?
	        }
	        if (ret !== undefined && ret !== Sk.builtin.NotImplemented.NotImplemented$) {
	            return ret;
	        }
	    }
	    Sk.abstr.binop_type_error(v, w, opname);
	};
	Sk.abstr.unary_op_ = function (v, opname) {
	    var ret;
	    var vop = Sk.abstr.uoNameToSlotFunc_(v, opname);
	    if (vop !== undefined) {
	        if (vop.call) {
	            ret = vop.call(v);
	        } else {  // assume that vop is an __xxx__ type method
	            ret = Sk.misceval.callsim(vop, v); //  added to be like not-in-place... is this okay?
	        }
	        if (ret !== undefined) {
	            return ret;
	        }
	    }
	    Sk.abstr.unop_type_error(v, opname);
	};

	//
	// handle upconverting a/b from number to long if op causes too big/small a
	// result, or if either of the ops are already longs
	Sk.abstr.numOpAndPromote = function (a, b, opfn) {
	    var tmp;
	    var ans;
	    if (a === null || b === null) {
	        return undefined;
	    }

	    if (typeof a === "number" && typeof b === "number") {
	        ans = opfn(a, b);
	        // todo; handle float   Removed RNL (bugs in lng, and it should be a question of precision, not magnitude -- this was just wrong)
	        if ((ans > Sk.builtin.int_.threshold$ || ans < -Sk.builtin.int_.threshold$) && Math.floor(ans) === ans) {
	            return [Sk.builtin.lng.fromInt$(a), Sk.builtin.lng.fromInt$(b)];
	        } else {
	            return ans;
	        }
	    } else if (a === undefined || b === undefined) {
	        throw new Sk.builtin.NameError("Undefined variable in expression");
	    }

	    if (a.constructor === Sk.builtin.lng) {
	        return [a, b];
	    } else if ((a.constructor === Sk.builtin.int_ ||
	                a.constructor === Sk.builtin.float_) &&
	                b.constructor === Sk.builtin.complex) {
	        // special case of upconverting nmber and complex
	        // can we use here the Sk.builtin.checkComplex() method?
	        tmp = new Sk.builtin.complex(a);
	        return [tmp, b];
	    } else if (a.constructor === Sk.builtin.int_ ||
	               a.constructor === Sk.builtin.float_) {
	        return [a, b];
	    } else if (typeof a === "number") {
	        tmp = Sk.builtin.assk$(a);
	        return [tmp, b];
	    } else {
	        return undefined;
	    }
	};

	Sk.abstr.boNumPromote_ = {
	    "Add"     : function (a, b) {
	        return a + b;
	    },
	    "Sub"     : function (a, b) {
	        return a - b;
	    },
	    "Mult"    : function (a, b) {
	        return a * b;
	    },
	    "Mod"     : function (a, b) {
	        var m;
	        if (b === 0) {
	            throw new Sk.builtin.ZeroDivisionError("division or modulo by zero");
	        }
	        m = a % b;
	        return ((m * b) < 0 ? (m + b) : m);
	    },
	    "Div"     : function (a, b) {
	        if (b === 0) {
	            throw new Sk.builtin.ZeroDivisionError("division or modulo by zero");
	        } else {
	            return a / b;
	        }
	    },
	    "FloorDiv": function (a, b) {
	        if (b === 0) {
	            throw new Sk.builtin.ZeroDivisionError("division or modulo by zero");
	        } else {
	            return Math.floor(a / b);
	        } // todo; wrong? neg?
	    },
	    "Pow"     : Math.pow,
	    "BitAnd"  : function (a, b) {
	        var m = a & b;
	        if (m < 0) {
	            m = m + 4294967296; // convert back to unsigned
	        }
	        return m;
	    },
	    "BitOr"   : function (a, b) {
	        var m = a | b;
	        if (m < 0) {
	            m = m + 4294967296; // convert back to unsigned
	        }
	        return m;
	    },
	    "BitXor"  : function (a, b) {
	        var m = a ^ b;
	        if (m < 0) {
	            m = m + 4294967296; // convert back to unsigned
	        }
	        return m;
	    },
	    "LShift"  : function (a, b) {
	        var m;
	        if (b < 0) {
	            throw new Sk.builtin.ValueError("negative shift count");
	        }
	        m = a << b;
	        if (m > a) {
	            return m;
	        } else {
	            // Fail, this will get recomputed with longs
	            return a * Math.pow(2, b);
	        }
	    },
	    "RShift"  : function (a, b) {
	        var m;
	        if (b < 0) {
	            throw new Sk.builtin.ValueError("negative shift count");
	        }
	        m = a >> b;
	        if ((a > 0) && (m < 0)) {
	            // fix incorrect sign extension
	            m = m & (Math.pow(2, 32 - b) - 1);
	        }
	        return m;
	    }
	};

	Sk.abstr.numberBinOp = function (v, w, op) {
	    var tmp;
	    var numPromoteFunc = Sk.abstr.boNumPromote_[op];
	    if (numPromoteFunc !== undefined) {
	        tmp = Sk.abstr.numOpAndPromote(v, w, numPromoteFunc);
	        if (typeof tmp === "number") {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.int_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.float_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.lng) {
	            return tmp;
	        } else if (tmp !== undefined) {
	            v = tmp[0];
	            w = tmp[1];
	        }
	    }

	    return Sk.abstr.binary_op_(v, w, op);
	};
	goog.exportSymbol("Sk.abstr.numberBinOp", Sk.abstr.numberBinOp);

	Sk.abstr.numberInplaceBinOp = function (v, w, op) {
	    var tmp;
	    var numPromoteFunc = Sk.abstr.boNumPromote_[op];
	    if (numPromoteFunc !== undefined) {
	        tmp = Sk.abstr.numOpAndPromote(v, w, numPromoteFunc);
	        if (typeof tmp === "number") {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.int_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.float_) {
	            return tmp;
	        } else if (tmp !== undefined && tmp.constructor === Sk.builtin.lng) {
	            return tmp;
	        } else if (tmp !== undefined) {
	            v = tmp[0];
	            w = tmp[1];
	        }
	    }

	    return Sk.abstr.binary_iop_(v, w, op);
	};
	goog.exportSymbol("Sk.abstr.numberInplaceBinOp", Sk.abstr.numberInplaceBinOp);

	Sk.abstr.numberUnaryOp = function (v, op) {
	    var value;
	    if (op === "Not") {
	        return Sk.misceval.isTrue(v) ? Sk.builtin.bool.false$ : Sk.builtin.bool.true$;
	    } else if (v instanceof Sk.builtin.bool) {
	        value = Sk.builtin.asnum$(v);
	        if (op === "USub") {
	            return new Sk.builtin.int_(-value);
	        }
	        if (op === "UAdd") {
	            return new Sk.builtin.int_(value);
	        }
	        if (op === "Invert") {
	            return new Sk.builtin.int_(~value);
	        }
	    } else {
	        if (op === "USub" && v.nb$negative) {
	            return v.nb$negative();
	        }
	        if (op === "UAdd" && v.nb$positive) {
	            return v.nb$positive();
	        }
	        if (op === "Invert" && v.nb$invert) {
	            return v.nb$invert();
	        }
	    }

	    return Sk.abstr.unary_op_(v, op);
	};
	goog.exportSymbol("Sk.abstr.numberUnaryOp", Sk.abstr.numberUnaryOp);

	//
	// Sequence
	//

	Sk.abstr.fixSeqIndex_ = function (seq, i) {
	    i = Sk.builtin.asnum$(i);
	    if (i < 0 && seq.sq$length) {
	        i += seq.sq$length();
	    }
	    return i;
	};

	/**
	 * @param {*} seq
	 * @param {*} ob
	 * @param {boolean=} canSuspend
	 */
	Sk.abstr.sequenceContains = function (seq, ob, canSuspend) {
	    var seqtypename;
	    var special;
	    var r;

	    if (seq.sq$contains) {
	        return seq.sq$contains(ob);
	    }

	    /**
	     *  Look for special method and call it, we have to distinguish between built-ins and
	     *  python objects
	     */
	    special = Sk.abstr.lookupSpecial(seq, "__contains__");
	    if (special != null) {
	        // method on builtin, provide this arg
	        return Sk.misceval.isTrue(Sk.misceval.callsim(special, seq, ob));
	    }

	    if (!Sk.builtin.checkIterable(seq)) {
	        seqtypename = Sk.abstr.typeName(seq);
	        throw new Sk.builtin.TypeError("argument of type '" + seqtypename + "' is not iterable");
	    }

	    r = Sk.misceval.iterFor(Sk.abstr.iter(seq), function(i) {
	        if (Sk.misceval.richCompareBool(i, ob, "Eq")) {
	            return new Sk.misceval.Break(true);
	        } else {
	            return false;
	        }
	    }, false);

	    return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	};

	Sk.abstr.sequenceConcat = function (seq1, seq2) {
	    var seq1typename;
	    if (seq1.sq$concat) {
	        return seq1.sq$concat(seq2);
	    }
	    seq1typename = Sk.abstr.typeName(seq1);
	    throw new Sk.builtin.TypeError("'" + seq1typename + "' object can't be concatenated");
	};

	Sk.abstr.sequenceGetIndexOf = function (seq, ob) {
	    var seqtypename;
	    var i, it;
	    var index;
	    if (seq.index) {
	        return Sk.misceval.callsim(seq.index, seq, ob);
	    }
	    if (Sk.builtin.checkIterable(seq)) {
	        index = 0;
	        for (it = Sk.abstr.iter(seq), i = it.tp$iternext();
	             i !== undefined; i = it.tp$iternext()) {
	            if (Sk.misceval.richCompareBool(ob, i, "Eq")) {
	                return new Sk.builtin.int_(index);
	            }
	            index += 1;
	        }
	        throw new Sk.builtin.ValueError("sequence.index(x): x not in sequence");
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("argument of type '" + seqtypename + "' is not iterable");
	};

	Sk.abstr.sequenceGetCountOf = function (seq, ob) {
	    var seqtypename;
	    var i, it;
	    var count;
	    if (seq.count) {
	        return Sk.misceval.callsim(seq.count, seq, ob);
	    }
	    if (Sk.builtin.checkIterable(seq)) {
	        count = 0;
	        for (it = Sk.abstr.iter(seq), i = it.tp$iternext();
	             i !== undefined; i = it.tp$iternext()) {
	            if (Sk.misceval.richCompareBool(ob, i, "Eq")) {
	                count += 1;
	            }
	        }
	        return new Sk.builtin.int_(count);
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("argument of type '" + seqtypename + "' is not iterable");
	};

	Sk.abstr.sequenceGetItem = function (seq, i, canSuspend) {
	    var seqtypename;
	    if (seq.mp$subscript) {
	        return seq.mp$subscript(i);
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object is unsubscriptable");
	};

	Sk.abstr.sequenceSetItem = function (seq, i, x, canSuspend) {
	    var seqtypename;
	    if (seq.mp$ass_subscript) {
	        return seq.mp$ass_subscript(i, x);
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object does not support item assignment");
	};

	Sk.abstr.sequenceDelItem = function (seq, i) {
	    var seqtypename;
	    if (seq.sq$del_item) {
	        i = Sk.abstr.fixSeqIndex_(seq, i);
	        seq.sq$del_item(i);
	        return;
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object does not support item deletion");
	};

	Sk.abstr.sequenceRepeat = function (f, seq, n) {
	    var ntypename;
	    var count;
	    n = Sk.builtin.asnum$(n);
	    count = Sk.misceval.asIndex(n);
	    if (count === undefined) {
	        ntypename = Sk.abstr.typeName(n);
	        throw new Sk.builtin.TypeError("can't multiply sequence by non-int of type '" + ntypename + "'");
	    }
	    return f.call(seq, n);
	};

	Sk.abstr.sequenceGetSlice = function (seq, i1, i2) {
	    var seqtypename;
	    if (seq.sq$slice) {
	        i1 = Sk.abstr.fixSeqIndex_(seq, i1);
	        i2 = Sk.abstr.fixSeqIndex_(seq, i2);
	        return seq.sq$slice(i1, i2);
	    } else if (seq.mp$subscript) {
	        return seq.mp$subscript(new Sk.builtin.slice(i1, i2));
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' object is unsliceable");
	};

	Sk.abstr.sequenceDelSlice = function (seq, i1, i2) {
	    var seqtypename;
	    if (seq.sq$del_slice) {
	        i1 = Sk.abstr.fixSeqIndex_(seq, i1);
	        i2 = Sk.abstr.fixSeqIndex_(seq, i2);
	        seq.sq$del_slice(i1, i2);
	        return;
	    }

	    seqtypename = Sk.abstr.typeName(seq);
	    throw new Sk.builtin.TypeError("'" + seqtypename + "' doesn't support slice deletion");
	};

	Sk.abstr.sequenceSetSlice = function (seq, i1, i2, x) {
	    var seqtypename;
	    if (seq.sq$ass_slice) {
	        i1 = Sk.abstr.fixSeqIndex_(seq, i1);
	        i2 = Sk.abstr.fixSeqIndex_(seq, i2);
	        seq.sq$ass_slice(i1, i2, x);
	    } else if (seq.mp$ass_subscript) {
	        seq.mp$ass_subscript(new Sk.builtin.slice(i1, i2), x);
	    } else {
	        seqtypename = Sk.abstr.typeName(seq);
	        throw new Sk.builtin.TypeError("'" + seqtypename + "' object doesn't support slice assignment");
	    }
	};

	// seq - Python object to unpack
	// n   - JavaScript number of items to unpack
	Sk.abstr.sequenceUnpack = function (seq, n) {
	    var res = [];
	    var it, i;

	    if (!Sk.builtin.checkIterable(seq)) {
	        throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(seq) + "' object is not iterable");
	    }

	    for (it = Sk.abstr.iter(seq), i = it.tp$iternext();
	         (i !== undefined) && (res.length < n);
	         i = it.tp$iternext()) {
	        res.push(i);
	    }

	    if (res.length < n) {
	        throw new Sk.builtin.ValueError("need more than " + res.length + " values to unpack");
	    }
	    if (i !== undefined) {
	        throw new Sk.builtin.ValueError("too many values to unpack");
	    }

	    // Return Javascript array of items
	    return res;
	};

	//
	// Object
	//

	Sk.abstr.objectFormat = function (obj, format_spec) {
	    var meth; // PyObject
	    var result; // PyObject

	    // If no format_spec is provided, use an empty string
	    if(format_spec == null) {
	        format_spec = "";
	    }

	    // Find the (unbound!) __format__ method (a borrowed reference)
	    meth = Sk.abstr.lookupSpecial(obj, "__format__");
	    if (meth == null) {
	        throw new Sk.builtin.TypeError("Type " + Sk.abstr.typeName(obj) + "doesn't define __format__");
	    }

	    // And call it
	    result = Sk.misceval.callsim(meth, obj, format_spec);
	    if (!Sk.builtin.checkString(result)) {
	        throw new Sk.builtin.TypeError("__format__ must return a str, not " + Sk.abstr.typeName(result));
	    }

	    return result;
	};

	Sk.abstr.objectAdd = function (a, b) {
	    var btypename;
	    var atypename;
	    if (a.nb$add) {
	        return a.nb$add(b);
	    }

	    atypename = Sk.abstr.typeName(a);
	    btypename = Sk.abstr.typeName(b);
	    throw new Sk.builtin.TypeError("unsupported operand type(s) for +: '" + atypename + "' and '" + btypename + "'");
	};

	// in Python 2.6, this behaviour seems to be defined for numbers and bools (converts bool to int)
	Sk.abstr.objectNegative = function (obj) {
	    var objtypename;
	    var obj_asnum = Sk.builtin.asnum$(obj); // this will also convert bool type to int

	    if (obj instanceof Sk.builtin.bool) {
	        obj = new Sk.builtin.int_(obj_asnum);
	    }

	    if (obj.nb$negative) {
	        return obj.nb$negative();
	    }

	    objtypename = Sk.abstr.typeName(obj);
	    throw new Sk.builtin.TypeError("bad operand type for unary -: '" + objtypename + "'");
	};

	// in Python 2.6, this behaviour seems to be defined for numbers and bools (converts bool to int)
	Sk.abstr.objectPositive = function (obj) {
	    var objtypename = Sk.abstr.typeName(obj);
	    var obj_asnum = Sk.builtin.asnum$(obj); // this will also convert bool type to int

	    if (obj instanceof Sk.builtin.bool) {
	        obj = new Sk.builtin.int_(obj_asnum);
	    }

	    if (obj.nb$negative) {
	        return obj.nb$positive();
	    }

	    throw new Sk.builtin.TypeError("bad operand type for unary +: '" + objtypename + "'");
	};

	Sk.abstr.objectDelItem = function (o, key) {
	    var otypename;
	    var keytypename;
	    var keyValue;
	    if (o !== null) {
	        if (o.mp$del_subscript) {
	            o.mp$del_subscript(key);
	            return;
	        }
	        if (o.sq$ass_item) {
	            keyValue = Sk.misceval.asIndex(key);
	            if (keyValue === undefined) {
	                keytypename = Sk.abstr.typeName(key);
	                throw new Sk.builtin.TypeError("sequence index must be integer, not '" + keytypename + "'");
	            }
	            Sk.abstr.sequenceDelItem(o, keyValue);
	            return;
	        }
	        // if o is a slice do something else...
	    }

	    otypename = Sk.abstr.typeName(o);
	    throw new Sk.builtin.TypeError("'" + otypename + "' object does not support item deletion");
	};
	goog.exportSymbol("Sk.abstr.objectDelItem", Sk.abstr.objectDelItem);

	Sk.abstr.objectGetItem = function (o, key, canSuspend) {
	    var otypename;
	    if (o !== null) {
	        if (o.tp$getitem) {
	            return o.tp$getitem(key, canSuspend);
	        } else if (o.mp$subscript) {
	            return o.mp$subscript(key, canSuspend);
	        } else if (Sk.misceval.isIndex(key) && o.sq$item) {
	            return Sk.abstr.sequenceGetItem(o, Sk.misceval.asIndex(key), canSuspend);
	        }
	    }

	    otypename = Sk.abstr.typeName(o);
	    throw new Sk.builtin.TypeError("'" + otypename + "' does not support indexing");
	};
	goog.exportSymbol("Sk.abstr.objectGetItem", Sk.abstr.objectGetItem);

	Sk.abstr.objectSetItem = function (o, key, v, canSuspend) {
	    var otypename;
	    if (o !== null) {
	        if (o.tp$setitem) {
	            return o.tp$setitem(key, v, canSuspend);
	        } else if (o.mp$ass_subscript) {
	            return o.mp$ass_subscript(key, v, canSuspend);
	        } else if (Sk.misceval.isIndex(key) && o.sq$ass_item) {
	            return Sk.abstr.sequenceSetItem(o, Sk.misceval.asIndex(key), v, canSuspend);
	        }
	    }

	    otypename = Sk.abstr.typeName(o);
	    throw new Sk.builtin.TypeError("'" + otypename + "' does not support item assignment");
	};
	goog.exportSymbol("Sk.abstr.objectSetItem", Sk.abstr.objectSetItem);


	Sk.abstr.gattr = function (obj, nameJS, canSuspend) {
	    var ret, f;
	    var objname = Sk.abstr.typeName(obj);

	    if (obj === null) {
	        throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	    }


	    if (obj.tp$getattr !== undefined) {
	        f = obj.tp$getattr("__getattribute__");
	    }

	    if (f !== undefined) {
	        ret = Sk.misceval.callsimOrSuspend(f, new Sk.builtin.str(nameJS));
	    }

	    ret = Sk.misceval.chain(ret, function(ret) {
	        var f;

	        if (ret === undefined && obj.tp$getattr !== undefined) {
	            ret = obj.tp$getattr(nameJS);

	            if (ret === undefined) {
	                f = obj.tp$getattr("__getattr__");

	                if (f !== undefined) {
	                    ret = Sk.misceval.callsimOrSuspend(f, new Sk.builtin.str(nameJS));
	                }
	            }
	        }
	        return ret;
	    }, function(r) {
	        if (r === undefined) {
	            throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	        }
	        return r;
	    });

	    return canSuspend ? ret : Sk.misceval.retryOptionalSuspensionOrThrow(ret);
	};
	goog.exportSymbol("Sk.abstr.gattr", Sk.abstr.gattr);

	Sk.abstr.sattr = function (obj, nameJS, data, canSuspend) {
	    var objname = Sk.abstr.typeName(obj), r, setf;

	    if (obj === null) {
	        throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	    }

	    if (obj.tp$getattr !== undefined) {
	        setf = obj.tp$getattr("__setattr__");
	        if (setf !== undefined) {
	            r = Sk.misceval.callsimOrSuspend(setf, new Sk.builtin.str(nameJS), data);
	            return canSuspend ? r : Sk.misceval.retryOptionalSuspensionOrThrow(r);
	        }
	    }

	    if (obj.tp$setattr !== undefined) {
	        obj.tp$setattr(nameJS, data);
	    } else {
	        throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + nameJS + "'");
	    }
	};
	goog.exportSymbol("Sk.abstr.sattr", Sk.abstr.sattr);


	Sk.abstr.iternext = function (it, canSuspend) {
	    return it.tp$iternext(canSuspend);
	};
	goog.exportSymbol("Sk.abstr.iternext", Sk.abstr.iternext);


	/**
	 * Get the iterator for a Python object  This iterator could be one of the following.
	 * This is the preferred mechanism for consistently getting the correct iterator.  You should
	 * not just use tp$iter because that could lead to incorrect behavior of a user created class.
	 *
	 * - tp$iter
	 * - A user defined `__iter__` method
	 * - A user defined `__getitem__` method
	 *
	 * @param obj
	 *
	 * @throws {Sk.builtin.TypeError}
	 * @returns {Object}
	 */

	Sk.abstr.iter = function(obj) {
	    var iter;
	    var getit;
	    var ret;

	    /**
	     * Builds an iterator around classes that have a __getitem__ method.
	     *
	     * @constructor
	     */
	    var seqIter = function (obj) {
	        this.idx = 0;
	        this.myobj = obj;
	        this.getitem = Sk.abstr.lookupSpecial(obj, "__getitem__");
	        this.tp$iternext = function () {
	            var ret;
	            try {
	                ret = Sk.misceval.callsim(this.getitem, this.myobj, Sk.ffi.remapToPy(this.idx));
	            } catch (e) {
	                if (e instanceof Sk.builtin.IndexError || e instanceof Sk.builtin.StopIteration) {
	                    return undefined;
	                } else {
	                    throw e;
	                }
	            }
	            this.idx++;
	            return ret;
	        };
	    };

	    if (obj.tp$getattr) {
	        iter =  Sk.abstr.lookupSpecial(obj,"__iter__");
	        if (iter) {
	            ret = Sk.misceval.callsim(iter, obj);
	            if (ret.tp$iternext) {
	                return ret;
	            }
	        }
	    }
	    if (obj.tp$iter) {
	        try {  // catch and ignore not iterable error here.
	            ret = obj.tp$iter();
	            if (ret.tp$iternext) {
	                return ret;
	            }
	        } catch (e) { }
	    }
	    getit = Sk.abstr.lookupSpecial(obj, "__getitem__");
	    if (getit) {
	        // create internal iterobject if __getitem__
	        return new seqIter(obj);
	    }
	    throw new Sk.builtin.TypeError("'" + Sk.abstr.typeName(obj) + "' object is not iterable");
	};
	goog.exportSymbol("Sk.abstr.iter", Sk.abstr.iter);

	/**
	 * Special method look up. First try getting the method via
	 * internal dict and getattr. If getattr is not present (builtins)
	 * try if method is defined on the object itself
	 *
	 * @returns {null|Object} Return null if not found or the function
	 */
	Sk.abstr.lookupSpecial = function(op, str) {
	    var res;
	    var obtp;
	    if (op.ob$type) {
	        obtp = op.ob$type;
	    } else {
	        return null;
	    }

	    return Sk.builtin.type.typeLookup(obtp, str);
	};
	goog.exportSymbol("Sk.abstr.lookupSpecial", Sk.abstr.lookupSpecial);

	/**
	 * Mark a class as unhashable and prevent its `__hash__` function from being called.
	 * @param  {function(...[?])} thisClass The class to mark as unhashable.
	 * @return {undefined}
	 */
	Sk.abstr.markUnhashable = function (thisClass) {
	    var proto = thisClass.prototype;
	    proto.__hash__ = Sk.builtin.none.none$;
	    proto.tp$hash = Sk.builtin.none.none$;
	};

	/**
	 * Set up inheritance between two Python classes. This allows only for single
	 * inheritance -- multiple inheritance is not supported by Javascript.
	 *
	 * Javascript's inheritance is prototypal. This means that properties must
	 * be defined on the superclass' prototype in order for subclasses to inherit
	 * them.
	 *
	 * ```
	 * Sk.superclass.myProperty                 # will NOT be inherited
	 * Sk.superclass.prototype.myProperty       # will be inherited
	 * ```
	 *
	 * In order for a class to be subclassable, it must (directly or indirectly)
	 * inherit from Sk.builtin.object so that it will be properly initialized in
	 * {@link Sk.doOneTimeInitialization} (in src/import.js). Further, all Python
	 * builtins should inherit from Sk.builtin.object.
	 *
	 * @param {string} childName The Python name of the child (subclass).
	 * @param {function(...[?])} child     The subclass.
	 * @param {function(...[?])} parent    The superclass.
	 * @return {undefined}
	 */
	Sk.abstr.setUpInheritance = function (childName, child, parent) {
	    goog.inherits(child, parent);
	    child.prototype.tp$base = parent;
	    child.prototype.tp$name = childName;
	    child.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj(childName, child);
	};

	/**
	 * Call the super constructor of the provided class, with the object `self` as
	 * the `this` value of that constructor. Any arguments passed to this function
	 * after `self` will be passed as-is to the constructor.
	 *
	 * @param  {function(...[?])} thisClass The subclass.
	 * @param  {Object} self      The instance of the subclas.
	 * @param  {...?} args Arguments to pass to the constructor.
	 * @return {undefined}
	 */
	Sk.abstr.superConstructor = function (thisClass, self, args) {
	    var argumentsForConstructor = Array.prototype.slice.call(arguments, 2);
	    thisClass.prototype.tp$base.apply(self, argumentsForConstructor);
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/object.js ---- */ 

	/**
	 * @constructor
	 * Sk.builtin.object
	 *
	 * @description
	 * Constructor for Python object. All Python classes (builtin and user-defined)
	 * should inherit from this class.
	 *
	 * @return {Sk.builtin.object} Python object
	 */
	Sk.builtin.object = function () {
	    if (!(this instanceof Sk.builtin.object)) {
	        return new Sk.builtin.object();
	    }

	    return this;
	};



	var _tryGetSubscript = function(dict, pyName) {
	    try {
	        return dict.mp$subscript(pyName);
	    } catch (x) {
	        return undefined;
	    }
	};

	/**
	 * @return {undefined}
	 */
	Sk.builtin.object.prototype.GenericGetAttr = function (name) {
	    var res;
	    var f;
	    var descr;
	    var tp;
	    var dict;
	    var pyName = new Sk.builtin.str(name);
	    goog.asserts.assert(typeof name === "string");

	    tp = this.ob$type;
	    goog.asserts.assert(tp !== undefined, "object has no ob$type!");

	    dict = this["$d"] || this.constructor["$d"];

	    // todo; assert? force?
	    if (dict) {
	        if (dict.mp$lookup) {
	            res = dict.mp$lookup(pyName);
	        } else if (dict.mp$subscript) {
	            res = _tryGetSubscript(dict, pyName);
	        } else if (typeof dict === "object") {
	            // todo; definitely the wrong place for this. other custom tp$getattr won't work on object -- bnm -- implemented custom __getattr__ in abstract.js
	            res = dict[name];
	        }
	        if (res !== undefined) {
	            return res;
	        }
	    }

	    descr = Sk.builtin.type.typeLookup(tp, name);

	    // otherwise, look in the type for a descr
	    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {
	        f = descr.ob$type.tp$descr_get;
	        if (!(f) && descr["__get__"]) {
	            f = descr["__get__"];
	            return Sk.misceval.callsimOrSuspend(f, descr, this, Sk.builtin.none.none$);
	        }
	        // todo;
	        // if (f && descr.tp$descr_set) // is a data descriptor if it has a set
	        // return f.call(descr, this, this.ob$type);

	        if (f) {
	            // non-data descriptor
	            return f.call(descr, this, this.ob$type);
	        }
	    }

	    if (descr !== undefined) {
	        return descr;
	    }

	    return undefined;
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericGetAttr", Sk.builtin.object.prototype.GenericGetAttr);

	Sk.builtin.object.prototype.GenericPythonGetAttr = function(self, name) {
	    return Sk.builtin.object.prototype.GenericGetAttr.call(self, name.v);
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericPythonGetAttr", Sk.builtin.object.prototype.GenericPythonGetAttr);

	Sk.builtin.object.prototype.GenericSetAttr = function (name, value) {
	    var objname = Sk.abstr.typeName(this);
	    var pyname;
	    var dict;
	    var tp = this.ob$type;
	    var descr;
	    var f;

	    goog.asserts.assert(typeof name === "string");
	    goog.asserts.assert(tp !== undefined, "object has no ob$type!");

	    dict = this["$d"] || this.constructor["$d"];

	    descr = Sk.builtin.type.typeLookup(tp, name);

	    // otherwise, look in the type for a descr
	    if (descr !== undefined && descr !== null && descr.ob$type !== undefined) {
	        //f = descr.ob$type.tp$descr_set;
	        if (descr["__set__"]) {
	            f = descr["__set__"];
	            Sk.misceval.callsimOrSuspend(f, descr, this, value);
	            return;
	        }
	        // todo;
	        //if (f && descr.tp$descr_set) // is a data descriptor if it has a set
	        //return f.call(descr, this, this.ob$type);
	    }

	    if (dict.mp$ass_subscript) {
	        pyname = new Sk.builtin.str(name);

	        if (this instanceof Sk.builtin.object && !(this.ob$type.sk$klass) &&
	            dict.mp$lookup(pyname) === undefined) {
	            // Cannot add new attributes to a builtin object
	            throw new Sk.builtin.AttributeError("'" + objname + "' object has no attribute '" + name + "'");
	        }
	        dict.mp$ass_subscript(new Sk.builtin.str(name), value);
	    } else if (typeof dict === "object") {
	        dict[name] = value;
	    }
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericSetAttr", Sk.builtin.object.prototype.GenericSetAttr);

	Sk.builtin.object.prototype.GenericPythonSetAttr = function(self, name, value) {
	    return Sk.builtin.object.prototype.GenericSetAttr.call(self, name.v, value);
	};
	goog.exportSymbol("Sk.builtin.object.prototype.GenericPythonSetAttr", Sk.builtin.object.prototype.GenericPythonSetAttr);

	Sk.builtin.object.prototype.HashNotImplemented = function () {
	    throw new Sk.builtin.TypeError("unhashable type: '" + Sk.abstr.typeName(this) + "'");
	};

	Sk.builtin.object.prototype.tp$getattr = Sk.builtin.object.prototype.GenericGetAttr;
	Sk.builtin.object.prototype.tp$setattr = Sk.builtin.object.prototype.GenericSetAttr;

	// Although actual attribute-getting happens in pure Javascript via tp$getattr, classes
	// overriding __getattr__ etc need to be able to call object.__getattr__ etc from Python
	Sk.builtin.object.prototype["__getattr__"] = Sk.builtin.object.prototype.GenericPythonGetAttr;
	Sk.builtin.object.prototype["__setattr__"] = Sk.builtin.object.prototype.GenericPythonSetAttr;

	/**
	 * The name of this class.
	 * @type {string}
	 */
	Sk.builtin.object.prototype.tp$name = "object";

	/**
	 * The type object of this class.
	 * @type {Sk.builtin.type}
	 */
	Sk.builtin.object.prototype.ob$type = Sk.builtin.type.makeIntoTypeObj("object", Sk.builtin.object);
	Sk.builtin.object.prototype.ob$type.sk$klass = undefined;   // Nonsense for closure compiler

	/** Default implementations of dunder methods found in all Python objects */

	/**
	 * Python wrapper for `__repr__` method.
	 * @name  __repr__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__repr__"] = function (self) {
	    Sk.builtin.pyCheckArgs("__repr__", arguments, 0, 0, false, true);

	    return self["$r"]();
	};

	/**
	 * Python wrapper for `__str__` method.
	 * @name  __str__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__str__"] = function (self) {
	    Sk.builtin.pyCheckArgs("__str__", arguments, 0, 0, false, true);

	    return self["$r"]();
	};

	/**
	 * Python wrapper for `__hash__` method.
	 * @name  __hash__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__hash__"] = function (self) {
	    Sk.builtin.pyCheckArgs("__hash__", arguments, 0, 0, false, true);

	    return self.tp$hash();
	};

	/**
	 * Python wrapper for `__eq__` method.
	 * @name  __eq__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__eq__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__eq__", arguments, 1, 1, false, true);

	    return self.ob$eq(other);
	};

	/**
	 * Python wrapper for `__ne__` method.
	 * @name  __ne__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__ne__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__ne__", arguments, 1, 1, false, true);

	    return self.ob$ne(other);
	};

	/**
	 * Python wrapper for `__lt__` method.
	 * @name  __lt__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__lt__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__lt__", arguments, 1, 1, false, true);

	    return self.ob$lt(other);
	};

	/**
	 * Python wrapper for `__le__` method.
	 * @name  __le__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__le__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__le__", arguments, 1, 1, false, true);

	    return self.ob$le(other);
	};

	/**
	 * Python wrapper for `__gt__` method.
	 * @name  __gt__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__gt__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__gt__", arguments, 1, 1, false, true);

	    return self.ob$gt(other);
	};

	/**
	 * Python wrapper for `__ge__` method.
	 * @name  __ge__
	 * @memberOf Sk.builtin.object.prototype
	 * @instance
	 */
	Sk.builtin.object.prototype["__ge__"] = function (self, other) {
	    Sk.builtin.pyCheckArgs("__ge__", arguments, 1, 1, false, true);

	    return self.ob$ge(other);
	};

	/** Default implementations of Javascript functions used in dunder methods */

	/**
	 * Return the string representation of this instance.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @name  $r
	 * @memberOf Sk.builtin.object.prototype
	 * @return {Sk.builtin.str} The Python string representation of this instance.
	 */
	Sk.builtin.object.prototype["$r"] = function () {
	    return new Sk.builtin.str("<object>");
	};

	Sk.builtin.hashCount = 1;
	Sk.builtin.idCount = 1;

	/**
	 * Return the hash value of this instance.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @return {Sk.builtin.int_} The hash value
	 */
	Sk.builtin.object.prototype.tp$hash = function () {
	    if (!this.$savedHash_) {
	        this.$savedHash_ = new Sk.builtin.int_(Sk.builtin.hashCount++);
	    }

	    return this.$savedHash_;
	};

	/**
	 * Perform equality check between this instance and a Python object (i.e. this == other).
	 *
	 * Implements `__eq__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to check for equality.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if equal, false otherwise
	 */
	Sk.builtin.object.prototype.ob$eq = function (other) {
	    if (this === other) {
	        return Sk.builtin.bool.true$;
	    }

	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Perform non-equality check between this instance and a Python object (i.e. this != other).
	 *
	 * Implements `__ne__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to check for non-equality.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if not equal, false otherwise
	 */
	Sk.builtin.object.prototype.ob$ne = function (other) {
	    if (this === other) {
	        return Sk.builtin.bool.false$;
	    }

	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is less than a Python object (i.e. this < other).
	 *
	 * Implements `__lt__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this < other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$lt = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is less than or equal to a Python object (i.e. this <= other).
	 *
	 * Implements `__le__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this <= other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$le = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is greater than a Python object (i.e. this > other).
	 *
	 * Implements `__gt__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this > other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$gt = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	/**
	 * Determine if this instance is greater than or equal to a Python object (i.e. this >= other).
	 *
	 * Implements `__ge__` dunder method.
	 *
	 * Javascript function, returns Python object.
	 *
	 * @param  {Object} other The Python object to compare.
	 * @return {(Sk.builtin.bool|Sk.builtin.NotImplemented)} true if this >= other, false otherwise
	 */
	Sk.builtin.object.prototype.ob$ge = function (other) {
	    return Sk.builtin.NotImplemented.NotImplemented$;
	};

	// Wrap the following functions in Sk.builtin.func once that class is initialized
	/**
	 * Array of all the Python functions which are methods of this class.
	 * @type {Array}
	 */
	Sk.builtin.object.pythonFunctions = ["__repr__", "__str__", "__hash__",
	"__eq__", "__ne__", "__lt__", "__le__", "__gt__", "__ge__", "__getattr__", "__setattr__"];

	/**
	 * @constructor
	 * Sk.builtin.none
	 *
	 * @extends {Sk.builtin.object}
	 */
	Sk.builtin.none = function () {
	    this.v = null;
	};
	Sk.abstr.setUpInheritance("NoneType", Sk.builtin.none, Sk.builtin.object);

	/** @override */
	Sk.builtin.none.prototype["$r"] = function () { return new Sk.builtin.str("None"); };

	/** @override */
	Sk.builtin.none.prototype.tp$hash = function () {
	    return new Sk.builtin.int_(0);
	};

	/**
	 * Python None constant.
	 * @type {Sk.builtin.none}
	 */
	Sk.builtin.none.none$ = new Sk.builtin.none();

	/**
	 * @constructor
	 * Sk.builtin.NotImplemented
	 *
	 * @extends {Sk.builtin.object}
	 */
	Sk.builtin.NotImplemented = function() { };
	Sk.abstr.setUpInheritance("NotImplementedType", Sk.builtin.NotImplemented, Sk.builtin.object);

	/** @override */
	Sk.builtin.NotImplemented.prototype["$r"] = function () { return new Sk.builtin.str("NotImplemented"); };

	/**
	 * Python NotImplemented constant.
	 * @type {Sk.builtin.NotImplemented}
	 */
	Sk.builtin.NotImplemented.NotImplemented$ = new Sk.builtin.NotImplemented();

	goog.exportSymbol("Sk.builtin.none", Sk.builtin.none);
	goog.exportSymbol("Sk.builtin.NotImplemented", Sk.builtin.NotImplemented);



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/function.js ---- */ 

	/**
	 * @namespace Sk.builtin
	 */


	/**
	 * Check arguments to Python functions to ensure the correct number of
	 * arguments are passed.
	 *
	 * @param {string} name the name of the function
	 * @param {Object} args the args passed to the function
	 * @param {number} minargs the minimum number of allowable arguments
	 * @param {number=} maxargs optional maximum number of allowable
	 * arguments (default: Infinity)
	 * @param {boolean=} kwargs optional true if kwargs, false otherwise
	 * (default: false)
	 * @param {boolean=} free optional true if free vars, false otherwise
	 * (default: false)
	 */
	Sk.builtin.pyCheckArgs = function (name, args, minargs, maxargs, kwargs, free) {
	    var nargs = args.length;
	    var msg = "";

	    if (maxargs === undefined) {
	        maxargs = Infinity;
	    }
	    if (kwargs) {
	        nargs -= 1;
	    }
	    if (free) {
	        nargs -= 1;
	    }
	    if ((nargs < minargs) || (nargs > maxargs)) {
	        if (minargs === maxargs) {
	            msg = name + "() takes exactly " + minargs + " arguments";
	        } else if (nargs < minargs) {
	            msg = name + "() takes at least " + minargs + " arguments";
	        } else {
	            msg = name + "() takes at most " + maxargs + " arguments";
	        }
	        msg += " (" + nargs + " given)";
	        throw new Sk.builtin.TypeError(msg);
	    }
	};
	goog.exportSymbol("Sk.builtin.pyCheckArgs", Sk.builtin.pyCheckArgs);

	/**
	 * Check type of argument to Python functions.
	 *
	 * @param {string} name the name of the argument
	 * @param {string} exptype string of the expected type name
	 * @param {boolean} check truthy if type check passes, falsy otherwise
	 */
	Sk.builtin.pyCheckType = function (name, exptype, check) {
	    if (!check) {
	        throw new Sk.builtin.TypeError(name + " must be a " + exptype);
	    }
	};
	goog.exportSymbol("Sk.builtin.pyCheckType", Sk.builtin.pyCheckType);

	Sk.builtin.checkSequence = function (arg) {
	    return (arg !== null && arg.mp$subscript !== undefined);
	};
	goog.exportSymbol("Sk.builtin.checkSequence", Sk.builtin.checkSequence);

	/**
	 * Use this to test whether or not a Python object is iterable.  You should **not** rely
	 * on the presence of tp$iter on the object as a good test, as it could be a user defined
	 * class with `__iter__` defined or ``__getitem__``  This tests for all of those cases
	 *
	 * @param arg {Object}   A Python object
	 * @returns {boolean} true if the object is iterable
	 */
	Sk.builtin.checkIterable = function (arg) {
	    var ret = false;
	    if (arg !== null ) {
	        try {
	            ret = Sk.abstr.iter(arg);
	            if (ret) {
	                return true;
	            } else {
	                return false;
	            }
	        } catch (e) {
	            if (e instanceof Sk.builtin.TypeError) {
	                return false;
	            } else {
	                throw e;
	            }
	        }
	    }
	    return ret;
	};
	goog.exportSymbol("Sk.builtin.checkIterable", Sk.builtin.checkIterable);

	Sk.builtin.checkCallable = function (obj) {
	    // takes care of builtin functions and methods, builtins
	    if (typeof obj === "function") {
	        return true;
	    }
	    // takes care of python function, methods and lambdas
	    if (obj instanceof Sk.builtin.func) {
	        return true;
	    }
	    // takes care of instances of methods
	    if (obj instanceof Sk.builtin.method) {
	        return true;
	    }
	    // go up the prototype chain to see if the class has a __call__ method
	    if (Sk.abstr.lookupSpecial(obj, "__call__") !== undefined) {
	        return true;
	    } 
	    return false;
	};

	Sk.builtin.checkNumber = function (arg) {
	    return (arg !== null && (typeof arg === "number" ||
	        arg instanceof Sk.builtin.int_ ||
	        arg instanceof Sk.builtin.float_ ||
	        arg instanceof Sk.builtin.lng));
	};
	goog.exportSymbol("Sk.builtin.checkNumber", Sk.builtin.checkNumber);

	/**
	 * Checks for complex type, delegates to internal method
	 * Most skulpt users would search here!
	 */
	Sk.builtin.checkComplex = function (arg) {
	    return Sk.builtin.complex._complex_check(arg);
	};
	goog.exportSymbol("Sk.builtin.checkComplex", Sk.builtin.checkComplex);

	Sk.builtin.checkInt = function (arg) {
	    return (arg !== null) && ((typeof arg === "number" && arg === (arg | 0)) ||
	        arg instanceof Sk.builtin.int_ ||
	        arg instanceof Sk.builtin.lng);
	};
	goog.exportSymbol("Sk.builtin.checkInt", Sk.builtin.checkInt);

	Sk.builtin.checkFloat = function (arg) {
	    return (arg !== null) && (arg instanceof Sk.builtin.float_);
	};
	goog.exportSymbol("Sk.builtin.checkFloat", Sk.builtin.checkFloat);

	Sk.builtin.checkString = function (arg) {
	    return (arg !== null && arg.__class__ == Sk.builtin.str);
	};
	goog.exportSymbol("Sk.builtin.checkString", Sk.builtin.checkString);

	Sk.builtin.checkClass = function (arg) {
	    return (arg !== null && arg.sk$type);
	};
	goog.exportSymbol("Sk.builtin.checkClass", Sk.builtin.checkClass);

	Sk.builtin.checkBool = function (arg) {
	    return (arg instanceof Sk.builtin.bool);
	};
	goog.exportSymbol("Sk.builtin.checkBool", Sk.builtin.checkBool);

	Sk.builtin.checkNone = function (arg) {
	    return (arg instanceof Sk.builtin.none);
	};
	goog.exportSymbol("Sk.builtin.checkNone", Sk.builtin.checkNone);

	Sk.builtin.checkFunction = function (arg) {
	    return (arg !== null && arg.tp$call !== undefined);
	};
	goog.exportSymbol("Sk.builtin.checkFunction", Sk.builtin.checkFunction);

	/**
	 * @constructor
	 * Sk.builtin.func
	 *
	 * @description
	 * This function converts a Javascript function into a Python object that is callable.  Or just
	 * think of it as a Python function rather than a Javascript function now.  This is an important
	 * distinction in skulpt because once you have Python function you cannot just call it.
	 * You must now use Sk.misceval.callsim to call the Python function.
	 *
	 * @param {Function} code the javascript implementation of this function
	 * @param {Object=} globals the globals where this function was defined.
	 * Can be undefined (which will be stored as null) for builtins. (is
	 * that ok?)
	 * @param {Object=} closure dict of free variables
	 * @param {Object=} closure2 another dict of free variables that will be
	 * merged into 'closure'. there's 2 to simplify generated code (one is $free,
	 * the other is $cell)
	 *
	 * closure is the cell variables from the parent scope that we need to close
	 * over. closure2 is the free variables in the parent scope that we also might
	 * need to access.
	 *
	 * NOTE: co_varnames and co_name are defined by compiled code only, so we have
	 * to access them via dict-style lookup for closure.
	 *
	 */
	Sk.builtin.func = function (code, globals, closure, closure2) {
	    var k;
	    this.func_code = code;
	    this.func_globals = globals || null;
	    if (closure2 !== undefined) {
	        // todo; confirm that modification here can't cause problems
	        for (k in closure2) {
	            closure[k] = closure2[k];
	        }
	    }
	    this.func_closure = closure;
	    return this;
	};
	goog.exportSymbol("Sk.builtin.func", Sk.builtin.func);


	Sk.builtin.func.prototype.tp$name = "function";
	Sk.builtin.func.prototype.tp$descr_get = function (obj, objtype) {
	    goog.asserts.assert(obj !== undefined && objtype !== undefined);
	    if (obj == null) {
	        return this;
	    }
	    return new Sk.builtin.method(this, obj, objtype);
	};
	Sk.builtin.func.prototype.tp$call = function (args, kw) {
	    var j;
	    var i;
	    var numvarnames;
	    var varnames;
	    var kwlen;
	    var kwargsarr;
	    var expectskw;
	    var name;
	    var numargs;

	    // note: functions expect 'this' to be globals to avoid having to
	    // slice/unshift onto the main args
	    if (this.func_closure) {
	        // todo; OK to modify?
	        if (this.func_code["$defaults"] && this.func_code["co_varnames"]) {
	            // Make sure all default arguments are in args before adding closure
	            numargs = args.length;
	            numvarnames = this.func_code["co_varnames"].length;
	            for (i = numargs; i < numvarnames; i++) {
	                args.push(undefined);
	            }
	        }
	        args.push(this.func_closure);
	    }

	    expectskw = this.func_code["co_kwargs"];
	    kwargsarr = [];

	    if (this.func_code["no_kw"] && kw) {
	        name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	        throw new Sk.builtin.TypeError(name + "() takes no keyword arguments");
	    }

	    if (kw) {
	        // bind the kw args
	        kwlen = kw.length;
	        varnames = this.func_code["co_varnames"];
	        numvarnames = varnames && varnames.length;
	        for (i = 0; i < kwlen; i += 2) {
	            // todo; make this a dict mapping name to offset
	            for (j = 0; j < numvarnames; ++j) {
	                if (kw[i] === varnames[j]) {
	                    break;
	                }
	            }
	            if (varnames && j !== numvarnames) {
	                if (j in args) {
	                    name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	                    throw new Sk.builtin.TypeError(name + "() got multiple values for keyword argument '" + kw[i] + "'");
	                }
	                args[j] = kw[i + 1];
	            } else if (expectskw) {
	                // build kwargs dict
	                kwargsarr.push(new Sk.builtin.str(kw[i]));
	                kwargsarr.push(kw[i + 1]);
	            } else {
	                name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	                throw new Sk.builtin.TypeError(name + "() got an unexpected keyword argument '" + kw[i] + "'");
	            }
	        }
	    }
	    if (expectskw) {
	        args.unshift(kwargsarr);
	    }

	    //print(JSON.stringify(args, null, 2));

	    return this.func_code.apply(this.func_globals, args);
	};

	Sk.builtin.func.prototype.tp$getattr = function (key) {
	    return this[key];
	};
	Sk.builtin.func.prototype.tp$setattr = function (key, value) {
	    this[key] = value;
	};

	//todo; investigate why the other doesn't work
	//Sk.builtin.type.makeIntoTypeObj('function', Sk.builtin.func);
	Sk.builtin.func.prototype.ob$type = Sk.builtin.type.makeTypeObj("function", new Sk.builtin.func(null, null));

	Sk.builtin.func.prototype["$r"] = function () {
	    var name = (this.func_code && this.func_code["co_name"] && this.func_code["co_name"].v) || "<native JS>";
	    return new Sk.builtin.str("<function " + name + ">");
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/seqtype.js ---- */ 

	/**
	 * @constructor
	 * Sk.builtin.seqtype
	 *
	 * @description
	 * Abstract class for Python sequence types.
	 *
	 * @extends {Sk.builtin.object}
	 *
	 * @return {undefined} Cannot instantiate a Sk.builtin.seqtype object
	 */
	Sk.builtin.seqtype = function () {

	    throw new Sk.builtin.ExternalError("Cannot instantiate abstract Sk.builtin.seqtype class");

	};

	Sk.abstr.setUpInheritance("SequenceType", Sk.builtin.seqtype, Sk.builtin.object);

	Sk.builtin.seqtype.sk$abstract = true;

	/**
	 * Python wrapper of `__len__` method.
	 *
	 * @name  __len__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__len__"] = new Sk.builtin.func(function (self) {

	    Sk.builtin.pyCheckArgs("__len__", arguments, 0, 0, false, true);

	    return new Sk.builtin.int_(self.sq$length());    

	});

	/**
	 * Python wrapper of `__iter__` method.
	 *
	 * @name  __iter__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__iter__"] = new Sk.builtin.func(function (self) {

	    Sk.builtin.pyCheckArgs("__iter__", arguments, 0, 0, false, true);

	    return self.tp$iter();

	});

	/**
	 * Python wrapper of `__contains__` method.
	 *
	 * @name  __contains__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__contains__"] = new Sk.builtin.func(function (self, item) {

	    Sk.builtin.pyCheckArgs("__contains__", arguments, 1, 1, false, true);

	    if (self.sq$contains(item)) {
	        return Sk.builtin.bool.true$;
	    } else {
	        return Sk.builtin.bool.false$;
	    }

	});

	/**
	 * Python wrapper of `__getitem__` method.
	 *
	 * @name  __getitem__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__getitem__"] = new Sk.builtin.func(function (self, key) {

	    Sk.builtin.pyCheckArgs("__getitem__", arguments, 1, 1, false, true);

	    return self.mp$subscript(key);

	});

	/**
	 * Python wrapper of `__add__` method.
	 *
	 * @name  __add__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__add__"] = new Sk.builtin.func(function (self, other) {

	    Sk.builtin.pyCheckArgs("__add__", arguments, 1, 1, false, true);

	    return self.sq$concat(other);

	});

	/**
	 * Python wrapper of `__mul__` method.
	 *
	 * @name  __mul__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__mul__"] = new Sk.builtin.func(function (self, n) {

	    Sk.builtin.pyCheckArgs("__mul__", arguments, 1, 1, false, true);

	    if (!Sk.misceval.isIndex(n)) {
	        throw new Sk.builtin.TypeError("can't multiply sequence by non-int of type '" + Sk.abstr.typeName(n) + "'");
	    }

	    return self.sq$repeat(n);

	});

	/**
	 * Python wrapper of `__rmul__` method.
	 *
	 * @name  __rmul__
	 * @instance
	 * @memberOf Sk.builtin.seqtype.prototype
	 */
	Sk.builtin.seqtype.prototype["__rmul__"] = new Sk.builtin.func(function (self, n) {

	    Sk.builtin.pyCheckArgs("__rmul__", arguments, 1, 1, false, true);

	    return self.sq$repeat(n);    

	});



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/str.js ---- */ 

	Sk.builtin.interned = {};

	/**
	 * @constructor
	 * @param {*} x
	 * @extends Sk.builtin.object
	 */
	Sk.builtin.str = function (x) {
	    var ret;
	    if (x === undefined) {
	        x = "";
	    }
	    if (x instanceof Sk.builtin.str) {
	        return x;
	    }
	    if (!(this instanceof Sk.builtin.str)) {
	        return new Sk.builtin.str(x);
	    }


	    // convert to js string
	    if (x === true) {
	        ret = "True";
	    } else if (x === false) {
	        ret = "False";
	    } else if ((x === null) || (x instanceof Sk.builtin.none)) {
	        ret = "None";
	    } else if (x instanceof Sk.builtin.bool) {
	        if (x.v) {
	            ret = "True";
	        } else {
	            ret = "False";
	        }
	    } else if (typeof x === "number") {
	        ret = x.toString();
	        if (ret === "Infinity") {
	            ret = "inf";
	        } else if (ret === "-Infinity") {
	            ret = "-inf";
	        }
	    } else if (typeof x === "string") {
	        ret = x;
	    } else if (x.tp$str !== undefined) {
	        ret = x.tp$str();
	        if (!(ret instanceof Sk.builtin.str)) {
	            throw new Sk.builtin.ValueError("__str__ didn't return a str");
	        }
	        return ret;
	    } else {
	        return Sk.misceval.objectRepr(x);
	    }

	    // interning required for strings in py
	    if (Sk.builtin.interned["1" + ret]) {
	        return Sk.builtin.interned["1" + ret];
	    }

	    this.__class__ = Sk.builtin.str;
	    this.v = ret;
	    this["v"] = this.v;
	    Sk.builtin.interned["1" + ret] = this;
	    return this;

	};
	goog.exportSymbol("Sk.builtin.str", Sk.builtin.str);

	Sk.abstr.setUpInheritance("str", Sk.builtin.str, Sk.builtin.seqtype);

	Sk.builtin.str.prototype.mp$subscript = function (index) {
	    var ret;
	    if (Sk.misceval.isIndex(index)) {
	        index = Sk.misceval.asIndex(index);
	        if (index < 0) {
	            index = this.v.length + index;
	        }
	        if (index < 0 || index >= this.v.length) {
	            throw new Sk.builtin.IndexError("string index out of range");
	        }
	        return new Sk.builtin.str(this.v.charAt(index));
	    } else if (index instanceof Sk.builtin.slice) {
	        ret = "";
	        index.sssiter$(this, function (i, wrt) {
	            if (i >= 0 && i < wrt.v.length) {
	                ret += wrt.v.charAt(i);
	            }
	        });
	        return new Sk.builtin.str(ret);
	    } else {
	        throw new Sk.builtin.TypeError("string indices must be integers, not " + Sk.abstr.typeName(index));
	    }
	};

	Sk.builtin.str.prototype.sq$length = function () {
	    return this.v.length;
	};
	Sk.builtin.str.prototype.sq$concat = function (other) {
	    var otypename;
	    if (!other || !Sk.builtin.checkString(other)) {
	        otypename = Sk.abstr.typeName(other);
	        throw new Sk.builtin.TypeError("cannot concatenate 'str' and '" + otypename + "' objects");
	    }
	    return new Sk.builtin.str(this.v + other.v);
	};
	Sk.builtin.str.prototype.nb$add = Sk.builtin.str.prototype.sq$concat;
	Sk.builtin.str.prototype.nb$inplace_add = Sk.builtin.str.prototype.sq$concat;
	Sk.builtin.str.prototype.sq$repeat = function (n) {
	    var i;
	    var ret;

	    if (!Sk.misceval.isIndex(n)) {
	        throw new Sk.builtin.TypeError("can't multiply sequence by non-int of type '" + Sk.abstr.typeName(n) + "'");
	    }

	    n = Sk.misceval.asIndex(n);
	    ret = "";
	    for (i = 0; i < n; ++i) {
	        ret += this.v;
	    }
	    return new Sk.builtin.str(ret);
	};
	Sk.builtin.str.prototype.nb$multiply = Sk.builtin.str.prototype.sq$repeat;
	Sk.builtin.str.prototype.nb$inplace_multiply = Sk.builtin.str.prototype.sq$repeat;
	Sk.builtin.str.prototype.sq$item = function () {
	    goog.asserts.fail();
	};
	Sk.builtin.str.prototype.sq$slice = function (i1, i2) {
	    i1 = Sk.builtin.asnum$(i1);
	    i2 = Sk.builtin.asnum$(i2);
	    if (i1 < 0) {
	        i1 = 0;
	    }
	    return new Sk.builtin.str(this.v.substr(i1, i2 - i1));
	};

	Sk.builtin.str.prototype.sq$contains = function (ob) {
	    if (!(ob instanceof Sk.builtin.str)) {
	        throw new Sk.builtin.TypeError("TypeError: 'In <string> requires string as left operand");
	    }
	    return this.v.indexOf(ob.v) != -1;
	};

	Sk.builtin.str.prototype.__iter__ = new Sk.builtin.func(function (self) {
	    return new Sk.builtin.str_iter_(self);
	});

	Sk.builtin.str.prototype.tp$iter = function () {
	    return new Sk.builtin.str_iter_(this);
	};

	Sk.builtin.str.prototype.tp$richcompare = function (other, op) {
	    if (!(other instanceof Sk.builtin.str)) {
	        return undefined;
	    }

	    switch (op) {
	        case "Lt":
	            return this.v < other.v;
	        case "LtE":
	            return this.v <= other.v;
	        case "Eq":
	            return this.v === other.v;
	        case "NotEq":
	            return this.v !== other.v;
	        case "Gt":
	            return this.v > other.v;
	        case "GtE":
	            return this.v >= other.v;
	        default:
	            goog.asserts.fail();
	    }
	};

	Sk.builtin.str.prototype["$r"] = function () {
	    // single is preferred
	    var ashex;
	    var c;
	    var i;
	    var ret;
	    var len;
	    var quote = "'";
	    //jshint ignore:start
	    if (this.v.indexOf("'") !== -1 && this.v.indexOf('"') === -1) {
	        quote = '"';
	    }
	    //jshint ignore:end
	    len = this.v.length;
	    ret = quote;
	    for (i = 0; i < len; ++i) {
	        c = this.v.charAt(i);
	        if (c === quote || c === "\\") {
	            ret += "\\" + c;
	        } else if (c === "\t") {
	            ret += "\\t";
	        } else if (c === "\n") {
	            ret += "\\n";
	        } else if (c === "\r") {
	            ret += "\\r";
	        } else if (c < " " || c >= 0x7f) {
	            ashex = c.charCodeAt(0).toString(16);
	            if (ashex.length < 2) {
	                ashex = "0" + ashex;
	            }
	            ret += "\\x" + ashex;
	        } else {
	            ret += c;
	        }
	    }
	    ret += quote;
	    return new Sk.builtin.str(ret);
	};


	Sk.builtin.str.re_escape_ = function (s) {
	    var c;
	    var i;
	    var ret = [];
	    var re = /^[A-Za-z0-9]+$/;
	    for (i = 0; i < s.length; ++i) {
	        c = s.charAt(i);

	        if (re.test(c)) {
	            ret.push(c);
	        } else {
	            if (c === "\\000") {
	                ret.push("\\000");
	            } else {
	                ret.push("\\" + c);
	            }
	        }
	    }
	    return ret.join("");
	};

	Sk.builtin.str.prototype["lower"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("lower", arguments, 1, 1);
	    return new Sk.builtin.str(self.v.toLowerCase());
	});

	Sk.builtin.str.prototype["upper"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("upper", arguments, 1, 1);
	    return new Sk.builtin.str(self.v.toUpperCase());
	});

	Sk.builtin.str.prototype["capitalize"] = new Sk.builtin.func(function (self) {
	    var i;
	    var cap;
	    var orig;
	    Sk.builtin.pyCheckArgs("capitalize", arguments, 1, 1);
	    orig = self.v;

	    if (orig.length === 0) {
	        return new Sk.builtin.str("");
	    }
	    cap = orig.charAt(0).toUpperCase();

	    for (i = 1; i < orig.length; i++) {
	        cap += orig.charAt(i).toLowerCase();
	    }
	    return new Sk.builtin.str(cap);
	});

	Sk.builtin.str.prototype["join"] = new Sk.builtin.func(function (self, seq) {
	    var it, i;
	    var arrOfStrs;
	    Sk.builtin.pyCheckArgs("join", arguments, 2, 2);
	    Sk.builtin.pyCheckType("seq", "iterable", Sk.builtin.checkIterable(seq));
	    arrOfStrs = [];
	    for (it = seq.tp$iter(), i = it.tp$iternext(); i !== undefined; i = it.tp$iternext()) {
	        if (i.constructor !== Sk.builtin.str) {
	            throw new Sk.builtin.TypeError("TypeError: sequence item " + arrOfStrs.length + ": expected string, " + typeof i + " found");
	        }
	        arrOfStrs.push(i.v);
	    }
	    return new Sk.builtin.str(arrOfStrs.join(self.v));
	});

	Sk.builtin.str.prototype["split"] = new Sk.builtin.func(function (self, on, howmany) {
	    var splits;
	    var index;
	    var match;
	    var result;
	    var s;
	    var str;
	    var regex;
	    Sk.builtin.pyCheckArgs("split", arguments, 1, 3);
	    if ((on === undefined) || (on instanceof Sk.builtin.none)) {
	        on = null;
	    }
	    if ((on !== null) && !Sk.builtin.checkString(on)) {
	        throw new Sk.builtin.TypeError("expected a string");
	    }
	    if ((on !== null) && on.v === "") {
	        throw new Sk.builtin.ValueError("empty separator");
	    }
	    if ((howmany !== undefined) && !Sk.builtin.checkInt(howmany)) {
	        throw new Sk.builtin.TypeError("an integer is required");
	    }

	    howmany = Sk.builtin.asnum$(howmany);
	    regex = /[\s]+/g;
	    str = self.v;
	    if (on === null) {
	        str = goog.string.trimLeft(str);
	    } else {
	        // Escape special characters in "on" so we can use a regexp
	        s = on.v.replace(/([.*+?=|\\\/()\[\]\{\}^$])/g, "\\$1");
	        regex = new RegExp(s, "g");
	    }

	    // This is almost identical to re.split,
	    // except how the regexp is constructed

	    result = [];
	    index = 0;
	    splits = 0;
	    while ((match = regex.exec(str)) != null) {
	        if (match.index === regex.lastIndex) {
	            // empty match
	            break;
	        }
	        result.push(new Sk.builtin.str(str.substring(index, match.index)));
	        index = regex.lastIndex;
	        splits += 1;
	        if (howmany && (splits >= howmany)) {
	            break;
	        }
	    }
	    str = str.substring(index);
	    if (on !== null || (str.length > 0)) {
	        result.push(new Sk.builtin.str(str));
	    }

	    return new Sk.builtin.list(result);
	});

	Sk.builtin.str.prototype["strip"] = new Sk.builtin.func(function (self, chars) {
	    var regex;
	    var pattern;
	    Sk.builtin.pyCheckArgs("strip", arguments, 1, 2);
	    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {
	        throw new Sk.builtin.TypeError("strip arg must be None or str");
	    }
	    if (chars === undefined) {
	        pattern = /^\s+|\s+$/g;
	    } else {
	        regex = Sk.builtin.str.re_escape_(chars.v);
	        pattern = new RegExp("^[" + regex + "]+|[" + regex + "]+$", "g");
	    }
	    return new Sk.builtin.str(self.v.replace(pattern, ""));
	});

	Sk.builtin.str.prototype["lstrip"] = new Sk.builtin.func(function (self, chars) {
	    var regex;
	    var pattern;
	    Sk.builtin.pyCheckArgs("lstrip", arguments, 1, 2);
	    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {
	        throw new Sk.builtin.TypeError("lstrip arg must be None or str");
	    }
	    if (chars === undefined) {
	        pattern = /^\s+/g;
	    } else {
	        regex = Sk.builtin.str.re_escape_(chars.v);
	        pattern = new RegExp("^[" + regex + "]+", "g");
	    }
	    return new Sk.builtin.str(self.v.replace(pattern, ""));
	});

	Sk.builtin.str.prototype["rstrip"] = new Sk.builtin.func(function (self, chars) {
	    var regex;
	    var pattern;
	    Sk.builtin.pyCheckArgs("rstrip", arguments, 1, 2);
	    if ((chars !== undefined) && !Sk.builtin.checkString(chars)) {
	        throw new Sk.builtin.TypeError("rstrip arg must be None or str");
	    }
	    if (chars === undefined) {
	        pattern = /\s+$/g;
	    } else {
	        regex = Sk.builtin.str.re_escape_(chars.v);
	        pattern = new RegExp("[" + regex + "]+$", "g");
	    }
	    return new Sk.builtin.str(self.v.replace(pattern, ""));
	});

	Sk.builtin.str.prototype["partition"] = new Sk.builtin.func(function (self, sep) {
	    var pos;
	    var sepStr;
	    Sk.builtin.pyCheckArgs("partition", arguments, 2, 2);
	    Sk.builtin.pyCheckType("sep", "string", Sk.builtin.checkString(sep));
	    sepStr = new Sk.builtin.str(sep);
	    pos = self.v.indexOf(sepStr.v);
	    if (pos < 0) {
	        return new Sk.builtin.tuple([self, Sk.builtin.str.$emptystr, Sk.builtin.str.$emptystr]);
	    }

	    return new Sk.builtin.tuple([
	        new Sk.builtin.str(self.v.substring(0, pos)),
	        sepStr,
	        new Sk.builtin.str(self.v.substring(pos + sepStr.v.length))]);
	});

	Sk.builtin.str.prototype["rpartition"] = new Sk.builtin.func(function (self, sep) {
	    var pos;
	    var sepStr;
	    Sk.builtin.pyCheckArgs("rpartition", arguments, 2, 2);
	    Sk.builtin.pyCheckType("sep", "string", Sk.builtin.checkString(sep));
	    sepStr = new Sk.builtin.str(sep);
	    pos = self.v.lastIndexOf(sepStr.v);
	    if (pos < 0) {
	        return new Sk.builtin.tuple([Sk.builtin.str.$emptystr, Sk.builtin.str.$emptystr, self]);
	    }

	    return new Sk.builtin.tuple([
	        new Sk.builtin.str(self.v.substring(0, pos)),
	        sepStr,
	        new Sk.builtin.str(self.v.substring(pos + sepStr.v.length))]);
	});

	Sk.builtin.str.prototype["count"] = new Sk.builtin.func(function (self, pat, start, end) {
	    var normaltext;
	    var ctl;
	    var slice;
	    var m;
	    Sk.builtin.pyCheckArgs("count", arguments, 2, 4);
	    if (!Sk.builtin.checkString(pat)) {
	        throw new Sk.builtin.TypeError("expected a character buffer object");
	    }
	    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }
	    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }

	    if (start === undefined) {
	        start = 0;
	    } else {
	        start = Sk.builtin.asnum$(start);
	        start = start >= 0 ? start : self.v.length + start;
	    }

	    if (end === undefined) {
	        end = self.v.length;
	    } else {
	        end = Sk.builtin.asnum$(end);
	        end = end >= 0 ? end : self.v.length + end;
	    }

	    normaltext = pat.v.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	    m = new RegExp(normaltext, "g");
	    slice = self.v.slice(start, end);
	    ctl = slice.match(m);
	    if (!ctl) {
	        return  new Sk.builtin.int_(0);
	    } else {
	        return new Sk.builtin.int_(ctl.length);
	    }

	});

	Sk.builtin.str.prototype["ljust"] = new Sk.builtin.func(function (self, len, fillchar) {
	    var newstr;
	    Sk.builtin.pyCheckArgs("ljust", arguments, 2, 3);
	    if (!Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepcted, got " + Sk.abstr.typeName(len));
	    }
	    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {
	        throw new Sk.builtin.TypeError("must be char, not " + Sk.abstr.typeName(fillchar));
	    }
	    if (fillchar === undefined) {
	        fillchar = " ";
	    } else {
	        fillchar = fillchar.v;
	    }
	    len = Sk.builtin.asnum$(len);
	    if (self.v.length >= len) {
	        return self;
	    } else {
	        newstr = Array.prototype.join.call({length: Math.floor(len - self.v.length) + 1}, fillchar);
	        return new Sk.builtin.str(self.v + newstr);
	    }
	});

	Sk.builtin.str.prototype["rjust"] = new Sk.builtin.func(function (self, len, fillchar) {
	    var newstr;
	    Sk.builtin.pyCheckArgs("rjust", arguments, 2, 3);
	    if (!Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepcted, got " + Sk.abstr.typeName(len));
	    }
	    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {
	        throw new Sk.builtin.TypeError("must be char, not " + Sk.abstr.typeName(fillchar));
	    }
	    if (fillchar === undefined) {
	        fillchar = " ";
	    } else {
	        fillchar = fillchar.v;
	    }
	    len = Sk.builtin.asnum$(len);
	    if (self.v.length >= len) {
	        return self;
	    } else {
	        newstr = Array.prototype.join.call({length: Math.floor(len - self.v.length) + 1}, fillchar);
	        return new Sk.builtin.str(newstr + self.v);
	    }

	});

	Sk.builtin.str.prototype["center"] = new Sk.builtin.func(function (self, len, fillchar) {
	    var newstr;
	    var newstr1;
	    Sk.builtin.pyCheckArgs("center", arguments, 2, 3);
	    if (!Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepcted, got " + Sk.abstr.typeName(len));
	    }
	    if ((fillchar !== undefined) && (!Sk.builtin.checkString(fillchar) || fillchar.v.length !== 1)) {
	        throw new Sk.builtin.TypeError("must be char, not " + Sk.abstr.typeName(fillchar));
	    }
	    if (fillchar === undefined) {
	        fillchar = " ";
	    } else {
	        fillchar = fillchar.v;
	    }
	    len = Sk.builtin.asnum$(len);
	    if (self.v.length >= len) {
	        return self;
	    } else {
	        newstr1 = Array.prototype.join.call({length: Math.floor((len - self.v.length) / 2) + 1}, fillchar);
	        newstr = newstr1 + self.v + newstr1;
	        if (newstr.length < len) {
	            newstr = newstr + fillchar;
	        }
	        return new Sk.builtin.str(newstr);
	    }

	});

	Sk.builtin.str.prototype["find"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("find", arguments, 2, 4);
	    if (!Sk.builtin.checkString(tgt)) {
	        throw new Sk.builtin.TypeError("expected a character buffer object");
	    }
	    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }
	    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }

	    if (start === undefined) {
	        start = 0;
	    } else {
	        start = Sk.builtin.asnum$(start);
	        start = start >= 0 ? start : self.v.length + start;
	    }

	    if (end === undefined) {
	        end = self.v.length;
	    } else {
	        end = Sk.builtin.asnum$(end);
	        end = end >= 0 ? end : self.v.length + end;
	    }

	    idx = self.v.indexOf(tgt.v, start);
	    idx = ((idx >= start) && (idx < end)) ? idx : -1;

	    return new Sk.builtin.int_(idx);
	});

	Sk.builtin.str.prototype["index"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("index", arguments, 2, 4);
	    idx = Sk.misceval.callsim(self["find"], self, tgt, start, end);
	    if (Sk.builtin.asnum$(idx) === -1) {
	        throw new Sk.builtin.ValueError("substring not found");
	    }
	    return idx;
	});

	Sk.builtin.str.prototype["rfind"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("rfind", arguments, 2, 4);
	    if (!Sk.builtin.checkString(tgt)) {
	        throw new Sk.builtin.TypeError("expected a character buffer object");
	    }
	    if ((start !== undefined) && !Sk.builtin.checkInt(start)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }
	    if ((end !== undefined) && !Sk.builtin.checkInt(end)) {
	        throw new Sk.builtin.TypeError("slice indices must be integers or None or have an __index__ method");
	    }

	    if (start === undefined) {
	        start = 0;
	    } else {
	        start = Sk.builtin.asnum$(start);
	        start = start >= 0 ? start : self.v.length + start;
	    }

	    if (end === undefined) {
	        end = self.v.length;
	    } else {
	        end = Sk.builtin.asnum$(end);
	        end = end >= 0 ? end : self.v.length + end;
	    }

	    idx = self.v.lastIndexOf(tgt.v, end);
	    idx = (idx !== end) ? idx : self.v.lastIndexOf(tgt.v, end - 1);
	    idx = ((idx >= start) && (idx < end)) ? idx : -1;

	    return new Sk.builtin.int_(idx);
	});

	Sk.builtin.str.prototype["rindex"] = new Sk.builtin.func(function (self, tgt, start, end) {
	    var idx;
	    Sk.builtin.pyCheckArgs("rindex", arguments, 2, 4);
	    idx = Sk.misceval.callsim(self["rfind"], self, tgt, start, end);
	    if (Sk.builtin.asnum$(idx) === -1) {
	        throw new Sk.builtin.ValueError("substring not found");
	    }
	    return idx;
	});

	Sk.builtin.str.prototype["startswith"] = new Sk.builtin.func(function (self, tgt) {
	    Sk.builtin.pyCheckArgs("startswith", arguments, 2, 2);
	    Sk.builtin.pyCheckType("tgt", "string", Sk.builtin.checkString(tgt));
	    return new Sk.builtin.bool( self.v.indexOf(tgt.v) === 0);
	});

	// http://stackoverflow.com/questions/280634/endswith-in-javascript
	Sk.builtin.str.prototype["endswith"] = new Sk.builtin.func(function (self, tgt) {
	    Sk.builtin.pyCheckArgs("endswith", arguments, 2, 2);
	    Sk.builtin.pyCheckType("tgt", "string", Sk.builtin.checkString(tgt));
	    return new Sk.builtin.bool( self.v.indexOf(tgt.v, self.v.length - tgt.v.length) !== -1);
	});

	Sk.builtin.str.prototype["replace"] = new Sk.builtin.func(function (self, oldS, newS, count) {
	    var c;
	    var patt;
	    Sk.builtin.pyCheckArgs("replace", arguments, 3, 4);
	    Sk.builtin.pyCheckType("oldS", "string", Sk.builtin.checkString(oldS));
	    Sk.builtin.pyCheckType("newS", "string", Sk.builtin.checkString(newS));
	    if ((count !== undefined) && !Sk.builtin.checkInt(count)) {
	        throw new Sk.builtin.TypeError("integer argument expected, got " +
	            Sk.abstr.typeName(count));
	    }
	    count = Sk.builtin.asnum$(count);
	    patt = new RegExp(Sk.builtin.str.re_escape_(oldS.v), "g");

	    if ((count === undefined) || (count < 0)) {
	        return new Sk.builtin.str(self.v.replace(patt, newS.v));
	    }

	    c = 0;

	    function replacer (match) {
	        c++;
	        if (c <= count) {
	            return newS.v;
	        }
	        return match;
	    }

	    return new Sk.builtin.str(self.v.replace(patt, replacer));
	});

	Sk.builtin.str.prototype["zfill"] = new Sk.builtin.func(function (self, len) {
	    var str = self.v;
	    var ret;
	    var zeroes;
	    var offset;
	    var pad = "";

	    Sk.builtin.pyCheckArgs("zfill", arguments, 2, 2);
	    if (! Sk.builtin.checkInt(len)) {
	        throw new Sk.builtin.TypeError("integer argument exepected, got " + Sk.abstr.typeName(len));
	    }

	    // figure out how many zeroes are needed to make the proper length
	    zeroes = len.v - str.length;
	    // offset by 1 if there is a +/- at the beginning of the string
	    offset = (str[0] === "+" || str[0] === "-") ? 1 : 0;
	    for(var i = 0; i < zeroes; i++){
	        pad += "0";
	    }
	    // combine the string and the zeroes
	    ret = str.substr(0, offset) + pad + str.substr(offset);
	    return new Sk.builtin.str(ret);


	});

	Sk.builtin.str.prototype["isdigit"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isdigit", arguments, 1, 1);
	    return new Sk.builtin.bool( /^\d+$/.test(self.v));
	});

	Sk.builtin.str.prototype["isspace"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isspace", arguments, 1, 1);
	    return new Sk.builtin.bool( /^\s+$/.test(self.v));
	});


	Sk.builtin.str.prototype["expandtabs"] = new Sk.builtin.func(function (self, tabsize) {
	    // var input = self.v;
	    // var expanded = "";
	    // var split;
	    // var spacestr = "";
	    // var spacerem;


	    var spaces;
	    var expanded;

	    Sk.builtin.pyCheckArgs("expandtabs", arguments, 1, 2);


	    if ((tabsize !== undefined) && ! Sk.builtin.checkInt(tabsize)) {
	        throw new Sk.builtin.TypeError("integer argument exepected, got " + Sk.abstr.typeName(tabsize));
	    }
	    if (tabsize === undefined) {
	        tabsize = 8;
	    } else {
	        tabsize = Sk.builtin.asnum$(tabsize);
	    }

	    spaces = (new Array(tabsize + 1)).join(" ");
	    expanded = self.v.replace(/([^\r\n\t]*)\t/g, function(a, b) {
	        return b + spaces.slice(b.length % tabsize);
	    });
	    return new Sk.builtin.str(expanded);
	});

	Sk.builtin.str.prototype["swapcase"] = new Sk.builtin.func(function (self) {
	    var ret;
	    Sk.builtin.pyCheckArgs("swapcase", arguments, 1, 1);


	    ret = self.v.replace(/[a-z]/gi, function(c) {
	        var lc = c.toLowerCase();
	        return lc === c ? c.toUpperCase() : lc;
	    });

	    return new Sk.builtin.str(ret);
	});

	Sk.builtin.str.prototype["splitlines"] = new Sk.builtin.func(function (self, keepends) {
	    var data = self.v;
	    var i = 0;
	    var j = i;
	    var selflen = self.v.length;
	    var strs_w = [];
	    var ch;
	    var eol;
	    var sol = 0;
	    var slice;
	    Sk.builtin.pyCheckArgs("splitlines", arguments, 1, 2);
	    if ((keepends !== undefined) && ! Sk.builtin.checkBool(keepends)) {
	        throw new Sk.builtin.TypeError("boolean argument expected, got " + Sk.abstr.typeName(keepends));
	    }
	    if (keepends === undefined) {
	        keepends = false;
	    } else {
	        keepends = keepends.v;
	    }


	    for (i = 0; i < selflen; i ++) {
	        ch = data.charAt(i);
	        if (data.charAt(i + 1) === "\n" && ch === "\r") {
	            eol = i + 2;
	            slice = data.slice(sol, eol);
	            if (! keepends) {
	                slice = slice.replace(/(\r|\n)/g, "");
	            }
	            strs_w.push(new Sk.builtin.str(slice));
	            sol = eol;
	        } else if ((ch === "\n" && data.charAt(i - 1) !== "\r") || ch === "\r") {
	            eol = i + 1;
	            slice = data.slice(sol, eol);
	            if (! keepends) {
	                slice = slice.replace(/(\r|\n)/g, "");
	            }
	            strs_w.push(new Sk.builtin.str(slice));
	            sol = eol;
	        }

	    }
	    if (sol < selflen) {
	        eol = selflen;
	        slice = data.slice(sol, eol);
	        if (! keepends) {
	            slice = slice.replace(/(\r|\n)/g, "");
	        }
	        strs_w.push(new Sk.builtin.str(slice));
	    }
	    return new Sk.builtin.list(strs_w);
	});

	Sk.builtin.str.prototype["title"] = new Sk.builtin.func(function (self) {
	    var ret;

	    Sk.builtin.pyCheckArgs("title", arguments, 1, 1);

	    ret = self.v.replace(/[a-z][a-z]*/gi, function(str) {
	        return str[0].toUpperCase() + str.substr(1).toLowerCase();
	    });

	    return new Sk.builtin.str(ret);
	});

	Sk.builtin.str.prototype["isalpha"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isalpha", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && goog.string.isAlpha(self.v));
	});

	Sk.builtin.str.prototype["isalnum"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isalnum", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && goog.string.isAlphaNumeric(self.v));
	});

	// does not account for unicode numeric values
	Sk.builtin.str.prototype["isnumeric"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isnumeric", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && goog.string.isNumeric(self.v));
	});

	Sk.builtin.str.prototype["islower"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("islower", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && /[a-z]/.test(self.v) && !/[A-Z]/.test(self.v));
	});

	Sk.builtin.str.prototype["isupper"] = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("isupper", arguments, 1, 1);
	    return new Sk.builtin.bool( self.v.length && !/[a-z]/.test(self.v) && /[A-Z]/.test(self.v));
	});

	Sk.builtin.str.prototype["istitle"] = new Sk.builtin.func(function (self) {
	    // Comparing to str.title() seems the most intuitive thing, but it fails on "",
	    // Other empty-ish strings with no change.
	    var input = self.v;
	    var cased = false;
	    var previous_is_cased = false;
	    var pos;
	    var ch;
	    Sk.builtin.pyCheckArgs("istitle", arguments, 1, 1);
	    for (pos = 0; pos < input.length; pos ++) {
	        ch = input.charAt(pos);
	        if (! /[a-z]/.test(ch) && /[A-Z]/.test(ch)) {
	            if (previous_is_cased) {
	                return new Sk.builtin.bool( false);
	            }
	            previous_is_cased = true;
	            cased = true;
	        } else if (/[a-z]/.test(ch) && ! /[A-Z]/.test(ch)) {
	            if (! previous_is_cased) {
	                return new Sk.builtin.bool( false);
	            }
	            cased = true;
	        } else {
	            previous_is_cased = false;
	        }
	    }
	    return new Sk.builtin.bool( cased);
	});

	Sk.builtin.str.prototype.nb$remainder = function (rhs) {
	    // % format op. rhs can be a value, a tuple, or something with __getitem__ (dict)

	    // From http://docs.python.org/library/stdtypes.html#string-formatting the
	    // format looks like:
	    // 1. The '%' character, which marks the start of the specifier.
	    // 2. Mapping key (optional), consisting of a parenthesised sequence of characters (for example, (somename)).
	    // 3. Conversion flags (optional), which affect the result of some conversion types.
	    // 4. Minimum field width (optional). If specified as an '*' (asterisk), the actual width is read from the next
	    // element of the tuple in values, and the object to convert comes after the minimum field width and optional
	    // precision. 5. Precision (optional), given as a '.' (dot) followed by the precision. If specified as '*' (an
	    // asterisk), the actual width is read from the next element of the tuple in values, and the value to convert comes
	    // after the precision. 6. Length modifier (optional). 7. Conversion type.  length modifier is ignored

	    var ret;
	    var replFunc;
	    var index;
	    var regex;
	    if (rhs.constructor !== Sk.builtin.tuple && (rhs.mp$subscript === undefined || rhs.constructor === Sk.builtin.str)) {
	        rhs = new Sk.builtin.tuple([rhs]);
	    }

	    // general approach is to use a regex that matches the format above, and
	    // do an re.sub with a function as replacement to make the subs.

	    //           1 2222222222222222   33333333   444444444   5555555555555  66666  777777777777777777
	    regex = /%(\([a-zA-Z0-9]+\))?([#0 +\-]+)?(\*|[0-9]+)?(\.(\*|[0-9]+))?[hlL]?([diouxXeEfFgGcrs%])/g;
	    index = 0;
	    replFunc = function (substring, mappingKey, conversionFlags, fieldWidth, precision, precbody, conversionType) {
	        var result;
	        var convName;
	        var convValue;
	        var base;
	        var r;
	        var mk;
	        var value;
	        var handleWidth;
	        var formatNumber;
	        var alternateForm;
	        var precedeWithSign;
	        var blankBeforePositive;
	        var leftAdjust;
	        var zeroPad;
	        var i;
	        fieldWidth = Sk.builtin.asnum$(fieldWidth);
	        precision = Sk.builtin.asnum$(precision);

	        if (mappingKey === undefined || mappingKey === "") {
	            i = index++;
	        } // ff passes '' not undef for some reason

	        if (precision === "") { // ff passes '' here aswell causing problems with G,g, etc.
	            precision = undefined;
	        }

	        zeroPad = false;
	        leftAdjust = false;
	        blankBeforePositive = false;
	        precedeWithSign = false;
	        alternateForm = false;
	        if (conversionFlags) {
	            if (conversionFlags.indexOf("-") !== -1) {
	                leftAdjust = true;
	            } else if (conversionFlags.indexOf("0") !== -1) {
	                zeroPad = true;
	            }

	            if (conversionFlags.indexOf("+") !== -1) {
	                precedeWithSign = true;
	            } else if (conversionFlags.indexOf(" ") !== -1) {
	                blankBeforePositive = true;
	            }

	            alternateForm = conversionFlags.indexOf("#") !== -1;
	        }

	        if (precision) {
	            precision = parseInt(precision.substr(1), 10);
	        }

	        formatNumber = function (n, base) {
	            var precZeroPadded;
	            var prefix;
	            var didSign;
	            var neg;
	            var r;
	            var j;
	            base = Sk.builtin.asnum$(base);
	            neg = false;
	            didSign = false;
	            if (typeof n === "number") {
	                if (n < 0) {
	                    n = -n;
	                    neg = true;
	                }
	                r = n.toString(base);
	            } else if (n instanceof Sk.builtin.float_) {
	                r = n.str$(base, false);
	                if (r.length > 2 && r.substr(-2) === ".0") {
	                    r = r.substr(0, r.length - 2);
	                }
	                neg = n.nb$isnegative();
	            } else if (n instanceof Sk.builtin.int_) {
	                r = n.str$(base, false);
	                neg = n.nb$isnegative();
	            } else if (n instanceof Sk.builtin.lng) {
	                r = n.str$(base, false);
	                neg = n.nb$isnegative();	//	neg = n.size$ < 0;	RNL long.js change
	            }

	            goog.asserts.assert(r !== undefined, "unhandled number format");

	            precZeroPadded = false;

	            if (precision) {
	                //print("r.length",r.length,"precision",precision);
	                for (j = r.length; j < precision; ++j) {
	                    r = "0" + r;
	                    precZeroPadded = true;
	                }
	            }

	            prefix = "";

	            if (neg) {
	                prefix = "-";
	            } else if (precedeWithSign) {
	                prefix = "+" + prefix;
	            } else if (blankBeforePositive) {
	                prefix = " " + prefix;
	            }

	            if (alternateForm) {
	                if (base === 16) {
	                    prefix += "0x";
	                } else if (base === 8 && !precZeroPadded && r !== "0") {
	                    prefix += "0";
	                }
	            }

	            return [prefix, r];
	        };

	        handleWidth = function (args) {
	            var totLen;
	            var prefix = args[0];
	            var r = args[1];
	            var j;
	            if (fieldWidth) {
	                fieldWidth = parseInt(fieldWidth, 10);
	                totLen = r.length + prefix.length;
	                if (zeroPad) {
	                    for (j = totLen; j < fieldWidth; ++j) {
	                        r = "0" + r;
	                    }
	                } else if (leftAdjust) {
	                    for (j = totLen; j < fieldWidth; ++j) {
	                        r = r + " ";
	                    }
	                } else {
	                    for (j = totLen; j < fieldWidth; ++j) {
	                        prefix = " " + prefix;
	                    }
	                }
	            }
	            return prefix + r;
	        };

	        //print("Rhs:",rhs, "ctor", rhs.constructor);
	        if (rhs.constructor === Sk.builtin.tuple) {
	            value = rhs.v[i];
	        } else if (rhs.mp$subscript !== undefined && mappingKey !== undefined) {
	            mk = mappingKey.substring(1, mappingKey.length - 1);
	            //print("mk",mk);
	            value = rhs.mp$subscript(new Sk.builtin.str(mk));
	        } else if (rhs.constructor === Sk.builtin.dict || rhs.constructor === Sk.builtin.list) {
	            // new case where only one argument is provided
	            value = rhs;
	        } else {
	            throw new Sk.builtin.AttributeError(rhs.tp$name + " instance has no attribute 'mp$subscript'");
	        }
	        base = 10;
	        if (conversionType === "d" || conversionType === "i") {
	            return handleWidth(formatNumber(value, 10));
	        } else if (conversionType === "o") {
	            return handleWidth(formatNumber(value, 8));
	        } else if (conversionType === "x") {
	            return handleWidth(formatNumber(value, 16));
	        } else if (conversionType === "X") {
	            return handleWidth(formatNumber(value, 16)).toUpperCase();
	        } else if (conversionType === "f" || conversionType === "F" || conversionType === "e" || conversionType === "E" || conversionType === "g" || conversionType === "G") {
	            convValue = Sk.builtin.asnum$(value);
	            if (typeof convValue === "string") {
	                convValue = Number(convValue);
	            }
	            if (convValue === Infinity) {
	                return "inf";
	            }
	            if (convValue === -Infinity) {
	                return "-inf";
	            }
	            if (isNaN(convValue)) {
	                return "nan";
	            }
	            convName = ["toExponential", "toFixed", "toPrecision"]["efg".indexOf(conversionType.toLowerCase())];
	            if (precision === undefined || precision === "") {
	                if (conversionType === "e" || conversionType === "E") {
	                    precision = 6;
	                } else if (conversionType === "f" || conversionType === "F") {
	                    precision = 7;
	                }
	            }
	            result = (convValue)[convName](precision); // possible loose of negative zero sign

	            // apply sign to negative zeros, floats only!
	            if(Sk.builtin.checkFloat(value)) {
	                if(convValue === 0 && 1/convValue === -Infinity) {
	                    result = "-" + result; // add sign for zero
	                }
	            }

	            if ("EFG".indexOf(conversionType) !== -1) {
	                result = result.toUpperCase();
	            }
	            return handleWidth(["", result]);
	        } else if (conversionType === "c") {
	            if (typeof value === "number") {
	                return String.fromCharCode(value);
	            } else if (value instanceof Sk.builtin.int_) {
	                return String.fromCharCode(value.v);
	            } else if (value instanceof Sk.builtin.float_) {
	                return String.fromCharCode(value.v);
	            } else if (value instanceof Sk.builtin.lng) {
	                return String.fromCharCode(value.str$(10, false)[0]);
	            } else if (value.constructor === Sk.builtin.str) {
	                return value.v.substr(0, 1);
	            } else {
	                throw new Sk.builtin.TypeError("an integer is required");
	            }
	        } else if (conversionType === "r") {
	            r = Sk.builtin.repr(value);
	            if (precision) {
	                return r.v.substr(0, precision);
	            }
	            return r.v;
	        } else if (conversionType === "s") {
	            r = new Sk.builtin.str(value);
	            if (precision) {
	                return r.v.substr(0, precision);
	            }
	            if(fieldWidth) {
	                r.v = handleWidth([" ", r.v]);
	            }
	            return r.v;
	        } else if (conversionType === "%") {
	            return "%";
	        }
	    };

	    ret = this.v.replace(regex, replFunc);
	    return new Sk.builtin.str(ret);
	};

	/**
	 * @constructor
	 * @param {Object} obj
	 */
	Sk.builtin.str_iter_ = function (obj) {
	    if (!(this instanceof Sk.builtin.str_iter_)) {
	        return new Sk.builtin.str_iter_(obj);
	    }
	    this.$index = 0;
	    this.$obj = obj.v.slice();
	    this.sq$length = this.$obj.length;
	    this.tp$iter = this;
	    this.tp$iternext = function () {
	        if (this.$index >= this.sq$length) {
	            return undefined;
	        }
	        return new Sk.builtin.str(this.$obj.substr(this.$index++, 1));
	    };
	    this.$r = function () {
	        return new Sk.builtin.str("iterator");
	    };
	    return this;
	};

	Sk.abstr.setUpInheritance("iterator", Sk.builtin.str_iter_, Sk.builtin.object);

	Sk.builtin.str_iter_.prototype.__class__ = Sk.builtin.str_iter_;

	Sk.builtin.str_iter_.prototype.__iter__ = new Sk.builtin.func(function (self) {
	    Sk.builtin.pyCheckArgs("__iter__", arguments, 0, 0, true, false);
	    return self;
	});

	Sk.builtin.str_iter_.prototype["next"] = new Sk.builtin.func(function (self) {
	    var ret = self.tp$iternext();
	    if (ret === undefined) {
	        throw new Sk.builtin.StopIteration();
	    }
	    return ret;
	});



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/tokenize.js ---- */ 

	/*
	 * This is a port of tokenize.py by Ka-Ping Yee.
	 *
	 * each call to readline should return one line of input as a string, or
	 * undefined if it's finished.
	 *
	 * callback is called for each token with 5 args:
	 * 1. the token type
	 * 2. the token string
	 * 3. [ start_row, start_col ]
	 * 4. [ end_row, end_col ]
	 * 5. logical line where the token was found, including continuation lines
	 *
	 * callback can return true to abort.
	 *
	 */

	/**
	 * @constructor
	 */
	Sk.Tokenizer = function (filename, interactive, callback) {
	    this.filename = filename;
	    this.callback = callback;
	    this.lnum = 0;
	    this.parenlev = 0;
	    this.parenstack = [];
	    this.continued = false;
	    this.namechars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
	    this.numchars = "0123456789";
	    this.contstr = "";
	    this.needcont = false;
	    this.contline = undefined;
	    this.indents = [0];
	    this.endprog = /.*/;
	    this.strstart = [-1, -1];
	    this.interactive = interactive;
	    this.doneFunc = function () {
	        var i;
	        for (i = 1; i < this.indents.length; ++i) // pop remaining indent levels
	        {
	            if (this.callback(Sk.Tokenizer.Tokens.T_DEDENT, "", [this.lnum, 0], [this.lnum, 0], "")) {
	                return "done";
	            }
	        }
	        if (this.callback(Sk.Tokenizer.Tokens.T_ENDMARKER, "", [this.lnum, 0], [this.lnum, 0], "")) {
	            return "done";
	        }

	        return "failed";
	    };

	};

	/**
	 * @enum {number}
	 */
	Sk.Tokenizer.Tokens = {
	    T_ENDMARKER       : 0,
	    T_NAME            : 1,
	    T_NUMBER          : 2,
	    T_STRING          : 3,
	    T_NEWLINE         : 4,
	    T_INDENT          : 5,
	    T_DEDENT          : 6,
	    T_LPAR            : 7,
	    T_RPAR            : 8,
	    T_LSQB            : 9,
	    T_RSQB            : 10,
	    T_COLON           : 11,
	    T_COMMA           : 12,
	    T_SEMI            : 13,
	    T_PLUS            : 14,
	    T_MINUS           : 15,
	    T_STAR            : 16,
	    T_SLASH           : 17,
	    T_VBAR            : 18,
	    T_AMPER           : 19,
	    T_LESS            : 20,
	    T_GREATER         : 21,
	    T_EQUAL           : 22,
	    T_DOT             : 23,
	    T_PERCENT         : 24,
	    T_BACKQUOTE       : 25,
	    T_LBRACE          : 26,
	    T_RBRACE          : 27,
	    T_EQEQUAL         : 28,
	    T_NOTEQUAL        : 29,
	    T_LESSEQUAL       : 30,
	    T_GREATEREQUAL    : 31,
	    T_TILDE           : 32,
	    T_CIRCUMFLEX      : 33,
	    T_LEFTSHIFT       : 34,
	    T_RIGHTSHIFT      : 35,
	    T_DOUBLESTAR      : 36,
	    T_PLUSEQUAL       : 37,
	    T_MINEQUAL        : 38,
	    T_STAREQUAL       : 39,
	    T_SLASHEQUAL      : 40,
	    T_PERCENTEQUAL    : 41,
	    T_AMPEREQUAL      : 42,
	    T_VBAREQUAL       : 43,
	    T_CIRCUMFLEXEQUAL : 44,
	    T_LEFTSHIFTEQUAL  : 45,
	    T_RIGHTSHIFTEQUAL : 46,
	    T_DOUBLESTAREQUAL : 47,
	    T_DOUBLESLASH     : 48,
	    T_DOUBLESLASHEQUAL: 49,
	    T_AT              : 50,
	    T_OP              : 51,
	    T_COMMENT         : 52,
	    T_NL              : 53,
	    T_RARROW          : 54,
	    T_ERRORTOKEN      : 55,
	    T_N_TOKENS        : 56,
	    T_NT_OFFSET       : 256
	};

	/** @param {...*} x */
	function group (x) {
	    var args = Array.prototype.slice.call(arguments);
	    return "(" + args.join("|") + ")";
	}

	/** @param {...*} x */
	function any (x) {
	    return group.apply(null, arguments) + "*";
	}

	/** @param {...*} x */
	function maybe (x) {
	    return group.apply(null, arguments) + "?";
	}

	/* we have to use string and ctor to be able to build patterns up. + on /.../
	 * does something strange. */
	var Whitespace = "[ \\f\\t]*";
	var Comment_ = "#[^\\r\\n]*";
	var Ident = "[a-zA-Z_]\\w*";

	var Binnumber = "0[bB][01]*";
	var Hexnumber = "0[xX][\\da-fA-F]*[lL]?";
	var Octnumber = "0[oO]?[0-7]*[lL]?";
	var Decnumber = "[1-9]\\d*[lL]?";
	var Intnumber = group(Binnumber, Hexnumber, Octnumber, Decnumber);

	var Exponent = "[eE][-+]?\\d+";
	var Pointfloat = group("\\d+\\.\\d*", "\\.\\d+") + maybe(Exponent);
	var Expfloat = "\\d+" + Exponent;
	var Floatnumber = group(Pointfloat, Expfloat);
	var Imagnumber = group("\\d+[jJ]", Floatnumber + "[jJ]");
	var Number_ = group(Imagnumber, Floatnumber, Intnumber);

	// tail end of ' string
	var Single = "^[^'\\\\]*(?:\\\\.[^'\\\\]*)*'";
	// tail end of " string
	var Double_ = '^[^"\\\\]*(?:\\\\.[^"\\\\]*)*"';
	// tail end of ''' string
	var Single3 = "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''";
	// tail end of """ string
	var Double3 = '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""';
	var Triple = group("[ubUB]?[rR]?'''", '[ubUB]?[rR]?"""');
	var String_ = group("[uU]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'",
	    '[uU]?[rR]?"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*"');

	// Because of leftmost-then-longest match semantics, be sure to put the
	// longest operators first (e.g., if = came before ==, == would get
	// recognized as two instances of =).
	var Operator = group("\\*\\*=?", ">>=?", "<<=?", "<>", "!=",
	    "//=?", "->",
	    "[+\\-*/%&|^=<>]=?",
	    "~");

	var Bracket = "[\\][(){}]";
	var Special = group("\\r?\\n", "[:;.,`@]");
	var Funny = group(Operator, Bracket, Special);

	var ContStr = group("[uUbB]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*" +
	        group("'", "\\\\\\r?\\n"),
	        "[uUbB]?[rR]?\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*" +
	        group("\"", "\\\\\\r?\\n"));
	var PseudoExtras = group("\\\\\\r?\\n", Comment_, Triple);
	// Need to prefix with "^" as we only want to match what's next
	var PseudoToken = "^" + group(PseudoExtras, Number_, Funny, ContStr, Ident);


	var triple_quoted = {
	    "'''"  : true, '"""': true,
	    "r'''" : true, 'r"""': true, "R'''": true, 'R"""': true,
	    "u'''" : true, 'u"""': true, "U'''": true, 'U"""': true,
	    "b'''" : true, 'b"""': true, "B'''": true, 'B"""': true,
	    "ur'''": true, 'ur"""': true, "Ur'''": true, 'Ur"""': true,
	    "uR'''": true, 'uR"""': true, "UR'''": true, 'UR"""': true,
	    "br'''": true, 'br"""': true, "Br'''": true, 'Br"""': true,
	    "bR'''": true, 'bR"""': true, "BR'''": true, 'BR"""': true
	};

	var single_quoted = {
	    "'"  : true, '"': true,
	    "r'" : true, 'r"': true, "R'": true, 'R"': true,
	    "u'" : true, 'u"': true, "U'": true, 'U"': true,
	    "b'" : true, 'b"': true, "B'": true, 'B"': true,
	    "ur'": true, 'ur"': true, "Ur'": true, 'Ur"': true,
	    "uR'": true, 'uR"': true, "UR'": true, 'UR"': true,
	    "br'": true, 'br"': true, "Br'": true, 'Br"': true,
	    "bR'": true, 'bR"': true, "BR'": true, 'BR"': true
	};

	// hack to make closure keep those objects. not sure what a better way is.
	(function () {
	    var k;
	    for (k in triple_quoted) {
	    }
	    for (k in single_quoted) {
	    }
	}());


	var tabsize = 8;

	function contains (a, obj) {
	    var i = a.length;
	    while (i--) {
	        if (a[i] === obj) {
	            return true;
	        }
	    }
	    return false;
	}

	function rstrip (input, what) {
	    var i;
	    for (i = input.length; i > 0; --i) {
	        if (what.indexOf(input.charAt(i - 1)) === -1) {
	            break;
	        }
	    }
	    return input.substring(0, i);
	}

	Sk.Tokenizer.prototype.generateTokens = function (line) {
	    var nl_pos;
	    var newl;
	    var initial;
	    var token;
	    var epos;
	    var spos;
	    var start;
	    var pseudomatch;
	    var capos;
	    var comment_token;
	    var endmatch, pos, column, end, max;


	    // bnm - Move these definitions in this function otherwise test state is preserved between
	    // calls on single3prog and double3prog causing weird errors with having multiple instances
	    // of triple quoted strings in the same program.

	    var pseudoprog = new RegExp(PseudoToken);
	    var single3prog = new RegExp(Single3, "g");
	    var double3prog = new RegExp(Double3, "g");

	    var endprogs = {     "'": new RegExp(Single, "g"), "\"": new RegExp(Double_, "g"),
	        "'''"               : single3prog, '"""': double3prog,
	        "r'''"              : single3prog, 'r"""': double3prog,
	        "u'''"              : single3prog, 'u"""': double3prog,
	        "b'''"              : single3prog, 'b"""': double3prog,
	        "ur'''"             : single3prog, 'ur"""': double3prog,
	        "br'''"             : single3prog, 'br"""': double3prog,
	        "R'''"              : single3prog, 'R"""': double3prog,
	        "U'''"              : single3prog, 'U"""': double3prog,
	        "B'''"              : single3prog, 'B"""': double3prog,
	        "uR'''"             : single3prog, 'uR"""': double3prog,
	        "Ur'''"             : single3prog, 'Ur"""': double3prog,
	        "UR'''"             : single3prog, 'UR"""': double3prog,
	        "bR'''"             : single3prog, 'bR"""': double3prog,
	        "Br'''"             : single3prog, 'Br"""': double3prog,
	        "BR'''"             : single3prog, 'BR"""': double3prog,
	        'r'                 : null, 'R': null,
	        'u'                 : null, 'U': null,
	        'b'                 : null, 'B': null
	    };


	    if (!line) {
	        line = '';
	    }
	    //print("LINE:'"+line+"'");

	    this.lnum += 1;
	    pos = 0;
	    max = line.length;

	    if (this.contstr.length > 0) {
	        if (!line) {
	            throw new Sk.builtin.SyntaxError("EOF in multi-line string", this.filename, this.strstart[0], this.strstart[1], {
	                kind: "STRING_EOF",
	                line: this.contline
	            });
	        }
	        this.endprog.lastIndex = 0;
	        endmatch = this.endprog.test(line);
	        if (endmatch) {
	            pos = end = this.endprog.lastIndex;
	            if (this.callback(Sk.Tokenizer.Tokens.T_STRING, this.contstr + line.substring(0, end),
	                this.strstart, [this.lnum, end], this.contline + line)) {
	                return 'done';
	            }
	            this.contstr = '';
	            this.needcont = false;
	            this.contline = undefined;
	        }
	        else if (this.needcont && line.substring(line.length - 2) !== "\\\n" && line.substring(line.length - 3) !== "\\\r\n") {
	            if (this.callback(Sk.Tokenizer.Tokens.T_ERRORTOKEN, this.contstr + line,
	                this.strstart, [this.lnum, line.length], this.contline)) {
	                return 'done';
	            }
	            this.contstr = '';
	            this.contline = undefined;
	            return false;
	        }
	        else {
	            this.contstr += line;
	            this.contline = this.contline + line;
	            return false;
	        }
	    }
	    else if (this.parenlev === 0 && !this.continued) {
	        if (!line) {
	            return this.doneFunc();
	        }
	        column = 0;
	        while (pos < max) {
	            if (line.charAt(pos) === ' ') {
	                column += 1;
	            }
	            else if (line.charAt(pos) === '\t') {
	                column = (column / tabsize + 1) * tabsize;
	            }
	            else if (line.charAt(pos) === '\f') {
	                column = 0;
	            }
	            else {
	                break;
	            }
	            pos = pos + 1;
	        }
	        if (pos === max) {
	            return this.doneFunc();
	        }

	        if ("#\r\n".indexOf(line.charAt(pos)) !== -1) // skip comments or blank lines
	        {
	            if (line.charAt(pos) === '#') {
	                comment_token = rstrip(line.substring(pos), '\r\n');
	                nl_pos = pos + comment_token.length;
	                if (this.callback(Sk.Tokenizer.Tokens.T_COMMENT, comment_token,
	                    [this.lnum, pos], [this.lnum, pos + comment_token.length], line)) {
	                    return 'done';
	                }
	                //print("HERE:1");
	                if (this.callback(Sk.Tokenizer.Tokens.T_NL, line.substring(nl_pos),
	                    [this.lnum, nl_pos], [this.lnum, line.length], line)) {
	                    return 'done';
	                }
	                return false;
	            }
	            else {
	                //print("HERE:2");
	                if (this.callback(Sk.Tokenizer.Tokens.T_NL, line.substring(pos),
	                    [this.lnum, pos], [this.lnum, line.length], line)) {
	                    return 'done';
	                }
	                if (!this.interactive) {
	                    return false;
	                }
	            }
	        }

	        if (column > this.indents[this.indents.length - 1]) // count indents or dedents
	        {
	            this.indents.push(column);
	            if (this.callback(Sk.Tokenizer.Tokens.T_INDENT, line.substring(0, pos), [this.lnum, 0], [this.lnum, pos], line)) {
	                return 'done';
	            }
	        }
	        while (column < this.indents[this.indents.length - 1]) {
	            if (!contains(this.indents, column)) {
	                throw new Sk.builtin.IndentationError("unindent does not match any outer indentation level",
	                    this.filename, this.lnum, pos, line);
	            }
	            this.indents.splice(this.indents.length - 1, 1);
	            //print("dedent here");
	            if (this.callback(Sk.Tokenizer.Tokens.T_DEDENT, '', [this.lnum, pos], [this.lnum, pos], line)) {
	                return 'done';
	            }
	        }
	    }
	    else // continued statement
	    {
	        if (!line) {
	            throw new Sk.builtin.SyntaxError("EOF in multi-line statement", this.filename, this.lnum, 0, {
	                kind: 'STATEMENT_EOF',
	                parenlev: this.parenlev,
	                parenstack: this.parenstack
	            });
	        }
	        this.continued = false;
	    }

	    while (pos < max) {
	        //print("pos:"+pos+":"+max);
	        // js regexes don't return any info about matches, other than the
	        // content. we'd like to put a \w+ before pseudomatch, but then we
	        // can't get any data
	        capos = line.charAt(pos);
	        while (capos === ' ' || capos === '\f' || capos === '\t') {
	            pos += 1;
	            capos = line.charAt(pos);
	        }
	        pseudoprog.lastIndex = 0;
	        pseudomatch = pseudoprog.exec(line.substring(pos));
	        if (pseudomatch) {
	            start = pos;
	            end = start + pseudomatch[1].length;
	            spos = [this.lnum, start];
	            epos = [this.lnum, end];
	            pos = end;
	            token = line.substring(start, end);
	            initial = line.charAt(start);
	            //Sk.debugout("token:",token, "initial:",initial, start, end);
	            if (this.numchars.indexOf(initial) !== -1 || (initial === '.' && token !== '.')) {
	                if (this.callback(Sk.Tokenizer.Tokens.T_NUMBER, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (initial === '\r' || initial === '\n') {
	                newl = Sk.Tokenizer.Tokens.T_NEWLINE;
	                //print("HERE:3");
	                if (this.parenlev > 0) {
	                    newl = Sk.Tokenizer.Tokens.T_NL;
	                }
	                if (this.callback(newl, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (initial === '#') {
	                if (this.callback(Sk.Tokenizer.Tokens.T_COMMENT, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (triple_quoted.hasOwnProperty(token)) {
	                this.endprog = endprogs[token];
	                this.endprog.lastIndex = 0;
	                endmatch = this.endprog.test(line.substring(pos));
	                if (endmatch) {
	                    pos = this.endprog.lastIndex + pos;
	                    token = line.substring(start, pos);
	                    if (this.callback(Sk.Tokenizer.Tokens.T_STRING, token, spos, [this.lnum, pos], line)) {
	                        return 'done';
	                    }
	                }
	                else {
	                    this.strstart = [this.lnum, start];
	                    this.contstr = line.substring(start);
	                    this.contline = line;
	                    return false;
	                }
	            }
	            else if (single_quoted.hasOwnProperty(initial) ||
	                single_quoted.hasOwnProperty(token.substring(0, 2)) ||
	                single_quoted.hasOwnProperty(token.substring(0, 3))) {
	                if (token[token.length - 1] === '\n') {
	                    this.strstart = [this.lnum, start];
	                    this.endprog = endprogs[initial] || endprogs[token[1]] || endprogs[token[2]];
	                    this.contstr = line.substring(start);
	                    this.needcont = true;
	                    this.contline = line;
	                    //print("i, t1, t2", initial, token[1], token[2]);
	                    //print("ep, cs", this.endprog, this.contstr);
	                    return false;
	                }
	                else {
	                    if (this.callback(Sk.Tokenizer.Tokens.T_STRING, token, spos, epos, line)) {
	                        return 'done';
	                    }
	                }
	            }
	            else if (this.namechars.indexOf(initial) !== -1) {
	                if (this.callback(Sk.Tokenizer.Tokens.T_NAME, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	            else if (initial === '\\') {
	                //print("HERE:4");
	                if (this.callback(Sk.Tokenizer.Tokens.T_NL, token, spos, [this.lnum, pos], line)) {
	                    return 'done';
	                }
	                this.continued = true;
	            }
	            else {
	                if ('([{'.indexOf(initial) !== -1) {
	                    this.parenlev += 1;
	                    this.parenstack.push([initial, this.lnum, pos]);
	                }
	                else if (')]}'.indexOf(initial) !== -1) {
	                    this.parenlev -= 1;
	                    this.parenstack.pop();
	                }
	                if (this.callback(Sk.Tokenizer.Tokens.T_OP, token, spos, epos, line)) {
	                    return 'done';
	                }
	            }
	        }
	        else {
	            if (this.callback(Sk.Tokenizer.Tokens.T_ERRORTOKEN, line.charAt(pos),
	                [this.lnum, pos], [this.lnum, pos + 1], line)) {
	                return 'done';
	            }
	            pos += 1;
	        }
	    }

	    return false;
	};

	Sk.Tokenizer.tokenNames = {
	    0  : 'T_ENDMARKER', 1: 'T_NAME', 2: 'T_NUMBER', 3: 'T_STRING', 4: 'T_NEWLINE',
	    5  : 'T_INDENT', 6: 'T_DEDENT', 7: 'T_LPAR', 8: 'T_RPAR', 9: 'T_LSQB',
	    10 : 'T_RSQB', 11: 'T_COLON', 12: 'T_COMMA', 13: 'T_SEMI', 14: 'T_PLUS',
	    15 : 'T_MINUS', 16: 'T_STAR', 17: 'T_SLASH', 18: 'T_VBAR', 19: 'T_AMPER',
	    20 : 'T_LESS', 21: 'T_GREATER', 22: 'T_EQUAL', 23: 'T_DOT', 24: 'T_PERCENT',
	    25 : 'T_BACKQUOTE', 26: 'T_LBRACE', 27: 'T_RBRACE', 28: 'T_EQEQUAL', 29: 'T_NOTEQUAL',
	    30 : 'T_LESSEQUAL', 31: 'T_GREATEREQUAL', 32: 'T_TILDE', 33: 'T_CIRCUMFLEX', 34: 'T_LEFTSHIFT',
	    35 : 'T_RIGHTSHIFT', 36: 'T_DOUBLESTAR', 37: 'T_PLUSEQUAL', 38: 'T_MINEQUAL', 39: 'T_STAREQUAL',
	    40 : 'T_SLASHEQUAL', 41: 'T_PERCENTEQUAL', 42: 'T_AMPEREQUAL', 43: 'T_VBAREQUAL', 44: 'T_CIRCUMFLEXEQUAL',
	    45 : 'T_LEFTSHIFTEQUAL', 46: 'T_RIGHTSHIFTEQUAL', 47: 'T_DOUBLESTAREQUAL', 48: 'T_DOUBLESLASH', 49: 'T_DOUBLESLASHEQUAL',
	    50 : 'T_AT', 51: 'T_OP', 52: 'T_COMMENT', 53: 'T_NL', 54: 'T_RARROW',
	    55 : 'T_ERRORTOKEN', 56: 'T_N_TOKENS',
	    256: 'T_NT_OFFSET'
	};

	goog.exportSymbol("Sk.Tokenizer", Sk.Tokenizer);
	goog.exportSymbol("Sk.Tokenizer.prototype.generateTokens", Sk.Tokenizer.prototype.generateTokens);
	goog.exportSymbol("Sk.Tokenizer.tokenNames", Sk.Tokenizer.tokenNames);



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/gen/parse_tables.js ---- */ 

	// generated by pgen/main.py
	Sk.OpMap = {
	"(": Sk.Tokenizer.Tokens.T_LPAR,
	")": Sk.Tokenizer.Tokens.T_RPAR,
	"[": Sk.Tokenizer.Tokens.T_LSQB,
	"]": Sk.Tokenizer.Tokens.T_RSQB,
	":": Sk.Tokenizer.Tokens.T_COLON,
	",": Sk.Tokenizer.Tokens.T_COMMA,
	";": Sk.Tokenizer.Tokens.T_SEMI,
	"+": Sk.Tokenizer.Tokens.T_PLUS,
	"-": Sk.Tokenizer.Tokens.T_MINUS,
	"*": Sk.Tokenizer.Tokens.T_STAR,
	"/": Sk.Tokenizer.Tokens.T_SLASH,
	"|": Sk.Tokenizer.Tokens.T_VBAR,
	"&": Sk.Tokenizer.Tokens.T_AMPER,
	"<": Sk.Tokenizer.Tokens.T_LESS,
	">": Sk.Tokenizer.Tokens.T_GREATER,
	"=": Sk.Tokenizer.Tokens.T_EQUAL,
	".": Sk.Tokenizer.Tokens.T_DOT,
	"%": Sk.Tokenizer.Tokens.T_PERCENT,
	"`": Sk.Tokenizer.Tokens.T_BACKQUOTE,
	"{": Sk.Tokenizer.Tokens.T_LBRACE,
	"}": Sk.Tokenizer.Tokens.T_RBRACE,
	"@": Sk.Tokenizer.Tokens.T_AT,
	"==": Sk.Tokenizer.Tokens.T_EQEQUAL,
	"!=": Sk.Tokenizer.Tokens.T_NOTEQUAL,
	"<>": Sk.Tokenizer.Tokens.T_NOTEQUAL,
	"<=": Sk.Tokenizer.Tokens.T_LESSEQUAL,
	">=": Sk.Tokenizer.Tokens.T_GREATEREQUAL,
	"~": Sk.Tokenizer.Tokens.T_TILDE,
	"^": Sk.Tokenizer.Tokens.T_CIRCUMFLEX,
	"<<": Sk.Tokenizer.Tokens.T_LEFTSHIFT,
	">>": Sk.Tokenizer.Tokens.T_RIGHTSHIFT,
	"**": Sk.Tokenizer.Tokens.T_DOUBLESTAR,
	"+=": Sk.Tokenizer.Tokens.T_PLUSEQUAL,
	"-=": Sk.Tokenizer.Tokens.T_MINEQUAL,
	"*=": Sk.Tokenizer.Tokens.T_STAREQUAL,
	"/=": Sk.Tokenizer.Tokens.T_SLASHEQUAL,
	"%=": Sk.Tokenizer.Tokens.T_PERCENTEQUAL,
	"&=": Sk.Tokenizer.Tokens.T_AMPEREQUAL,
	"|=": Sk.Tokenizer.Tokens.T_VBAREQUAL,
	"^=": Sk.Tokenizer.Tokens.T_CIRCUMFLEXEQUAL,
	"<<=": Sk.Tokenizer.Tokens.T_LEFTSHIFTEQUAL,
	">>=": Sk.Tokenizer.Tokens.T_RIGHTSHIFTEQUAL,
	"**=": Sk.Tokenizer.Tokens.T_DOUBLESTAREQUAL,
	"//": Sk.Tokenizer.Tokens.T_DOUBLESLASH,
	"//=": Sk.Tokenizer.Tokens.T_DOUBLESLASHEQUAL,
	"->": Sk.Tokenizer.Tokens.T_RARROW
	};
	Sk.ParseTables = {
	sym:
	{and_expr: 257,
	 and_test: 258,
	 arglist: 259,
	 argument: 260,
	 arith_expr: 261,
	 assert_stmt: 262,
	 atom: 263,
	 augassign: 264,
	 break_stmt: 265,
	 classdef: 266,
	 comp_for: 267,
	 comp_if: 268,
	 comp_iter: 269,
	 comp_op: 270,
	 comparison: 271,
	 compound_stmt: 272,
	 continue_stmt: 273,
	 debugger_stmt: 274,
	 decorated: 275,
	 decorator: 276,
	 decorators: 277,
	 del_stmt: 278,
	 dictorsetmaker: 279,
	 dotted_as_name: 280,
	 dotted_as_names: 281,
	 dotted_name: 282,
	 encoding_decl: 283,
	 eval_input: 284,
	 except_clause: 285,
	 exec_stmt: 286,
	 expr: 287,
	 expr_stmt: 288,
	 exprlist: 289,
	 factor: 290,
	 file_input: 291,
	 flow_stmt: 292,
	 for_stmt: 293,
	 fpdef: 294,
	 fplist: 295,
	 funcdef: 296,
	 global_stmt: 297,
	 if_stmt: 298,
	 import_as_name: 299,
	 import_as_names: 300,
	 import_from: 301,
	 import_name: 302,
	 import_stmt: 303,
	 lambdef: 304,
	 list_for: 305,
	 list_if: 306,
	 list_iter: 307,
	 listmaker: 308,
	 not_test: 309,
	 old_lambdef: 310,
	 old_test: 311,
	 or_test: 312,
	 parameters: 313,
	 pass_stmt: 314,
	 power: 315,
	 print_stmt: 316,
	 raise_stmt: 317,
	 return_stmt: 318,
	 shift_expr: 319,
	 simple_stmt: 320,
	 single_input: 256,
	 sliceop: 321,
	 small_stmt: 322,
	 stmt: 323,
	 subscript: 324,
	 subscriptlist: 325,
	 suite: 326,
	 term: 327,
	 test: 328,
	 testlist: 329,
	 testlist1: 330,
	 testlist_comp: 331,
	 testlist_safe: 332,
	 trailer: 333,
	 try_stmt: 334,
	 varargslist: 335,
	 while_stmt: 336,
	 with_item: 337,
	 with_stmt: 338,
	 xor_expr: 339,
	 yield_expr: 340,
	 yield_stmt: 341},
	number2symbol:
	{256: 'single_input',
	 257: 'and_expr',
	 258: 'and_test',
	 259: 'arglist',
	 260: 'argument',
	 261: 'arith_expr',
	 262: 'assert_stmt',
	 263: 'atom',
	 264: 'augassign',
	 265: 'break_stmt',
	 266: 'classdef',
	 267: 'comp_for',
	 268: 'comp_if',
	 269: 'comp_iter',
	 270: 'comp_op',
	 271: 'comparison',
	 272: 'compound_stmt',
	 273: 'continue_stmt',
	 274: 'debugger_stmt',
	 275: 'decorated',
	 276: 'decorator',
	 277: 'decorators',
	 278: 'del_stmt',
	 279: 'dictorsetmaker',
	 280: 'dotted_as_name',
	 281: 'dotted_as_names',
	 282: 'dotted_name',
	 283: 'encoding_decl',
	 284: 'eval_input',
	 285: 'except_clause',
	 286: 'exec_stmt',
	 287: 'expr',
	 288: 'expr_stmt',
	 289: 'exprlist',
	 290: 'factor',
	 291: 'file_input',
	 292: 'flow_stmt',
	 293: 'for_stmt',
	 294: 'fpdef',
	 295: 'fplist',
	 296: 'funcdef',
	 297: 'global_stmt',
	 298: 'if_stmt',
	 299: 'import_as_name',
	 300: 'import_as_names',
	 301: 'import_from',
	 302: 'import_name',
	 303: 'import_stmt',
	 304: 'lambdef',
	 305: 'list_for',
	 306: 'list_if',
	 307: 'list_iter',
	 308: 'listmaker',
	 309: 'not_test',
	 310: 'old_lambdef',
	 311: 'old_test',
	 312: 'or_test',
	 313: 'parameters',
	 314: 'pass_stmt',
	 315: 'power',
	 316: 'print_stmt',
	 317: 'raise_stmt',
	 318: 'return_stmt',
	 319: 'shift_expr',
	 320: 'simple_stmt',
	 321: 'sliceop',
	 322: 'small_stmt',
	 323: 'stmt',
	 324: 'subscript',
	 325: 'subscriptlist',
	 326: 'suite',
	 327: 'term',
	 328: 'test',
	 329: 'testlist',
	 330: 'testlist1',
	 331: 'testlist_comp',
	 332: 'testlist_safe',
	 333: 'trailer',
	 334: 'try_stmt',
	 335: 'varargslist',
	 336: 'while_stmt',
	 337: 'with_item',
	 338: 'with_stmt',
	 339: 'xor_expr',
	 340: 'yield_expr',
	 341: 'yield_stmt'},
	dfas:
	{256: [[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],
	       {2: 1,
	        4: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        10: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        16: 1,
	        17: 1,
	        18: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        29: 1,
	        30: 1,
	        31: 1,
	        32: 1,
	        33: 1,
	        34: 1,
	        35: 1,
	        36: 1,
	        37: 1}],
	 257: [[[[38, 1]], [[39, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 258: [[[[40, 1]], [[41, 0], [0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 259: [[[[42, 1], [43, 2], [44, 3]],
	        [[45, 4]],
	        [[46, 5], [0, 2]],
	        [[45, 6]],
	        [[46, 7], [0, 4]],
	        [[42, 1], [43, 2], [44, 3], [0, 5]],
	        [[0, 6]],
	        [[43, 4], [44, 3]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1,
	        42: 1,
	        44: 1}],
	 260: [[[[45, 1]], [[47, 2], [48, 3], [0, 1]], [[45, 3]], [[0, 3]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 261: [[[[49, 1]], [[26, 0], [37, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 262: [[[[21, 1]], [[45, 2]], [[46, 3], [0, 2]], [[45, 4]], [[0, 4]]],
	       {21: 1}],
	 263: [[[[19, 1], [8, 2], [9, 5], [30, 4], [14, 3], [15, 6], [22, 2]],
	        [[19, 1], [0, 1]],
	        [[0, 2]],
	        [[50, 7], [51, 2]],
	        [[52, 2], [53, 8], [54, 8]],
	        [[55, 2], [56, 9]],
	        [[57, 10]],
	        [[51, 2]],
	        [[52, 2]],
	        [[55, 2]],
	        [[15, 2]]],
	       {8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 30: 1}],
	 264: [[[[58, 1],
	         [59, 1],
	         [60, 1],
	         [61, 1],
	         [62, 1],
	         [63, 1],
	         [64, 1],
	         [65, 1],
	         [66, 1],
	         [67, 1],
	         [68, 1],
	         [69, 1]],
	        [[0, 1]]],
	       {58: 1,
	        59: 1,
	        60: 1,
	        61: 1,
	        62: 1,
	        63: 1,
	        64: 1,
	        65: 1,
	        66: 1,
	        67: 1,
	        68: 1,
	        69: 1}],
	 265: [[[[33, 1]], [[0, 1]]], {33: 1}],
	 266: [[[[10, 1]],
	        [[22, 2]],
	        [[70, 3], [30, 4]],
	        [[71, 5]],
	        [[52, 6], [72, 7]],
	        [[0, 5]],
	        [[70, 3]],
	        [[52, 6]]],
	       {10: 1}],
	 267: [[[[29, 1]],
	        [[73, 2]],
	        [[74, 3]],
	        [[75, 4]],
	        [[76, 5], [0, 4]],
	        [[0, 5]]],
	       {29: 1}],
	 268: [[[[32, 1]], [[77, 2]], [[76, 3], [0, 2]], [[0, 3]]], {32: 1}],
	 269: [[[[78, 1], [48, 1]], [[0, 1]]], {29: 1, 32: 1}],
	 270: [[[[79, 1],
	         [80, 1],
	         [7, 2],
	         [81, 1],
	         [79, 1],
	         [74, 1],
	         [82, 1],
	         [83, 3],
	         [84, 1],
	         [85, 1]],
	        [[0, 1]],
	        [[74, 1]],
	        [[7, 1], [0, 3]]],
	       {7: 1, 74: 1, 79: 1, 80: 1, 81: 1, 82: 1, 83: 1, 84: 1, 85: 1}],
	 271: [[[[86, 1]], [[87, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 272: [[[[88, 1],
	         [89, 1],
	         [90, 1],
	         [91, 1],
	         [92, 1],
	         [93, 1],
	         [94, 1],
	         [95, 1]],
	        [[0, 1]]],
	       {4: 1, 10: 1, 16: 1, 18: 1, 29: 1, 32: 1, 35: 1, 36: 1}],
	 273: [[[[34, 1]], [[0, 1]]], {34: 1}],
	 274: [[[[13, 1]], [[0, 1]]], {13: 1}],
	 275: [[[[96, 1]], [[94, 2], [91, 2]], [[0, 2]]], {35: 1}],
	 276: [[[[35, 1]],
	        [[97, 2]],
	        [[2, 4], [30, 3]],
	        [[52, 5], [98, 6]],
	        [[0, 4]],
	        [[2, 4]],
	        [[52, 5]]],
	       {35: 1}],
	 277: [[[[99, 1]], [[99, 1], [0, 1]]], {35: 1}],
	 278: [[[[23, 1]], [[73, 2]], [[0, 2]]], {23: 1}],
	 279: [[[[45, 1]],
	        [[70, 2], [48, 3], [46, 4], [0, 1]],
	        [[45, 5]],
	        [[0, 3]],
	        [[45, 6], [0, 4]],
	        [[48, 3], [46, 7], [0, 5]],
	        [[46, 4], [0, 6]],
	        [[45, 8], [0, 7]],
	        [[70, 9]],
	        [[45, 10]],
	        [[46, 7], [0, 10]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 280: [[[[97, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]], {22: 1}],
	 281: [[[[101, 1]], [[46, 0], [0, 1]]], {22: 1}],
	 282: [[[[22, 1]], [[102, 0], [0, 1]]], {22: 1}],
	 283: [[[[22, 1]], [[0, 1]]], {22: 1}],
	 284: [[[[72, 1]], [[2, 1], [103, 2]], [[0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 285: [[[[104, 1]],
	        [[45, 2], [0, 1]],
	        [[100, 3], [46, 3], [0, 2]],
	        [[45, 4]],
	        [[0, 4]]],
	       {104: 1}],
	 286: [[[[17, 1]],
	        [[86, 2]],
	        [[74, 3], [0, 2]],
	        [[45, 4]],
	        [[46, 5], [0, 4]],
	        [[45, 6]],
	        [[0, 6]]],
	       {17: 1}],
	 287: [[[[105, 1]], [[106, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 288: [[[[72, 1]],
	        [[107, 2], [47, 3], [0, 1]],
	        [[72, 4], [53, 4]],
	        [[72, 5], [53, 5]],
	        [[0, 4]],
	        [[47, 3], [0, 5]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 289: [[[[86, 1]], [[46, 2], [0, 1]], [[86, 1], [0, 2]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 290: [[[[37, 2], [26, 2], [6, 2], [108, 1]], [[0, 1]], [[109, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 291: [[[[2, 0], [103, 1], [110, 0]], [[0, 1]]],
	       {2: 1,
	        4: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        10: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        16: 1,
	        17: 1,
	        18: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        29: 1,
	        30: 1,
	        31: 1,
	        32: 1,
	        33: 1,
	        34: 1,
	        35: 1,
	        36: 1,
	        37: 1,
	        103: 1}],
	 292: [[[[111, 1], [112, 1], [113, 1], [114, 1], [115, 1]], [[0, 1]]],
	       {5: 1, 20: 1, 27: 1, 33: 1, 34: 1}],
	 293: [[[[29, 1]],
	        [[73, 2]],
	        [[74, 3]],
	        [[72, 4]],
	        [[70, 5]],
	        [[71, 6]],
	        [[116, 7], [0, 6]],
	        [[70, 8]],
	        [[71, 9]],
	        [[0, 9]]],
	       {29: 1}],
	 294: [[[[30, 1], [22, 2]], [[117, 3]], [[0, 2]], [[52, 2]]], {22: 1, 30: 1}],
	 295: [[[[118, 1]], [[46, 2], [0, 1]], [[118, 1], [0, 2]]], {22: 1, 30: 1}],
	 296: [[[[4, 1]], [[22, 2]], [[119, 3]], [[70, 4]], [[71, 5]], [[0, 5]]],
	       {4: 1}],
	 297: [[[[28, 1]], [[22, 2]], [[46, 1], [0, 2]]], {28: 1}],
	 298: [[[[32, 1]],
	        [[45, 2]],
	        [[70, 3]],
	        [[71, 4]],
	        [[116, 5], [120, 1], [0, 4]],
	        [[70, 6]],
	        [[71, 7]],
	        [[0, 7]]],
	       {32: 1}],
	 299: [[[[22, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]], {22: 1}],
	 300: [[[[121, 1]], [[46, 2], [0, 1]], [[121, 1], [0, 2]]], {22: 1}],
	 301: [[[[31, 1]],
	        [[97, 2], [102, 3]],
	        [[25, 4]],
	        [[97, 2], [25, 4], [102, 3]],
	        [[122, 5], [42, 5], [30, 6]],
	        [[0, 5]],
	        [[122, 7]],
	        [[52, 5]]],
	       {31: 1}],
	 302: [[[[25, 1]], [[123, 2]], [[0, 2]]], {25: 1}],
	 303: [[[[124, 1], [125, 1]], [[0, 1]]], {25: 1, 31: 1}],
	 304: [[[[11, 1]], [[70, 2], [126, 3]], [[45, 4]], [[70, 2]], [[0, 4]]],
	       {11: 1}],
	 305: [[[[29, 1]],
	        [[73, 2]],
	        [[74, 3]],
	        [[127, 4]],
	        [[128, 5], [0, 4]],
	        [[0, 5]]],
	       {29: 1}],
	 306: [[[[32, 1]], [[77, 2]], [[128, 3], [0, 2]], [[0, 3]]], {32: 1}],
	 307: [[[[129, 1], [130, 1]], [[0, 1]]], {29: 1, 32: 1}],
	 308: [[[[45, 1]],
	        [[129, 2], [46, 3], [0, 1]],
	        [[0, 2]],
	        [[45, 4], [0, 3]],
	        [[46, 3], [0, 4]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 309: [[[[7, 1], [131, 2]], [[40, 2]], [[0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 310: [[[[11, 1]], [[70, 2], [126, 3]], [[77, 4]], [[70, 2]], [[0, 4]]],
	       {11: 1}],
	 311: [[[[132, 1], [75, 1]], [[0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 312: [[[[133, 1]], [[134, 0], [0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 313: [[[[30, 1]], [[52, 2], [126, 3]], [[0, 2]], [[52, 2]]], {30: 1}],
	 314: [[[[24, 1]], [[0, 1]]], {24: 1}],
	 315: [[[[135, 1]], [[44, 2], [136, 1], [0, 1]], [[109, 3]], [[0, 3]]],
	       {8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 30: 1}],
	 316: [[[[12, 1]],
	        [[45, 2], [137, 3], [0, 1]],
	        [[46, 4], [0, 2]],
	        [[45, 5]],
	        [[45, 2], [0, 4]],
	        [[46, 6], [0, 5]],
	        [[45, 7]],
	        [[46, 8], [0, 7]],
	        [[45, 7], [0, 8]]],
	       {12: 1}],
	 317: [[[[5, 1]],
	        [[45, 2], [0, 1]],
	        [[46, 3], [0, 2]],
	        [[45, 4]],
	        [[46, 5], [0, 4]],
	        [[45, 6]],
	        [[0, 6]]],
	       {5: 1}],
	 318: [[[[20, 1]], [[72, 2], [0, 1]], [[0, 2]]], {20: 1}],
	 319: [[[[138, 1]], [[139, 0], [137, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 320: [[[[140, 1]], [[2, 2], [141, 3]], [[0, 2]], [[140, 1], [2, 2]]],
	       {5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        17: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        30: 1,
	        31: 1,
	        33: 1,
	        34: 1,
	        37: 1}],
	 321: [[[[70, 1]], [[45, 2], [0, 1]], [[0, 2]]], {70: 1}],
	 322: [[[[142, 1],
	         [143, 1],
	         [144, 1],
	         [145, 1],
	         [146, 1],
	         [147, 1],
	         [148, 1],
	         [149, 1],
	         [150, 1],
	         [151, 1]],
	        [[0, 1]]],
	       {5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        17: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        30: 1,
	        31: 1,
	        33: 1,
	        34: 1,
	        37: 1}],
	 323: [[[[1, 1], [3, 1]], [[0, 1]]],
	       {4: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        10: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        16: 1,
	        17: 1,
	        18: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        29: 1,
	        30: 1,
	        31: 1,
	        32: 1,
	        33: 1,
	        34: 1,
	        35: 1,
	        36: 1,
	        37: 1}],
	 324: [[[[45, 1], [70, 2], [102, 3]],
	        [[70, 2], [0, 1]],
	        [[45, 4], [152, 5], [0, 2]],
	        [[102, 6]],
	        [[152, 5], [0, 4]],
	        [[0, 5]],
	        [[102, 5]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1,
	        70: 1,
	        102: 1}],
	 325: [[[[153, 1]], [[46, 2], [0, 1]], [[153, 1], [0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1,
	        70: 1,
	        102: 1}],
	 326: [[[[1, 1], [2, 2]],
	        [[0, 1]],
	        [[154, 3]],
	        [[110, 4]],
	        [[155, 1], [110, 4]]],
	       {2: 1,
	        5: 1,
	        6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        12: 1,
	        13: 1,
	        14: 1,
	        15: 1,
	        17: 1,
	        19: 1,
	        20: 1,
	        21: 1,
	        22: 1,
	        23: 1,
	        24: 1,
	        25: 1,
	        26: 1,
	        27: 1,
	        28: 1,
	        30: 1,
	        31: 1,
	        33: 1,
	        34: 1,
	        37: 1}],
	 327: [[[[109, 1]], [[156, 0], [42, 0], [157, 0], [158, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 328: [[[[75, 1], [159, 2]],
	        [[32, 3], [0, 1]],
	        [[0, 2]],
	        [[75, 4]],
	        [[116, 5]],
	        [[45, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 329: [[[[45, 1]], [[46, 2], [0, 1]], [[45, 1], [0, 2]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 330: [[[[45, 1]], [[46, 0], [0, 1]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 331: [[[[45, 1]],
	        [[48, 2], [46, 3], [0, 1]],
	        [[0, 2]],
	        [[45, 4], [0, 3]],
	        [[46, 3], [0, 4]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 332: [[[[77, 1]],
	        [[46, 2], [0, 1]],
	        [[77, 3]],
	        [[46, 4], [0, 3]],
	        [[77, 3], [0, 4]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 333: [[[[30, 1], [102, 2], [14, 3]],
	        [[52, 4], [98, 5]],
	        [[22, 4]],
	        [[160, 6]],
	        [[0, 4]],
	        [[52, 4]],
	        [[51, 4]]],
	       {14: 1, 30: 1, 102: 1}],
	 334: [[[[16, 1]],
	        [[70, 2]],
	        [[71, 3]],
	        [[161, 4], [162, 5]],
	        [[70, 6]],
	        [[70, 7]],
	        [[71, 8]],
	        [[71, 9]],
	        [[161, 4], [116, 10], [162, 5], [0, 8]],
	        [[0, 9]],
	        [[70, 11]],
	        [[71, 12]],
	        [[162, 5], [0, 12]]],
	       {16: 1}],
	 335: [[[[42, 1], [118, 2], [44, 3]],
	        [[22, 4]],
	        [[47, 5], [46, 6], [0, 2]],
	        [[22, 7]],
	        [[46, 8], [0, 4]],
	        [[45, 9]],
	        [[42, 1], [118, 2], [44, 3], [0, 6]],
	        [[0, 7]],
	        [[44, 3]],
	        [[46, 6], [0, 9]]],
	       {22: 1, 30: 1, 42: 1, 44: 1}],
	 336: [[[[18, 1]],
	        [[45, 2]],
	        [[70, 3]],
	        [[71, 4]],
	        [[116, 5], [0, 4]],
	        [[70, 6]],
	        [[71, 7]],
	        [[0, 7]]],
	       {18: 1}],
	 337: [[[[45, 1]], [[100, 2], [0, 1]], [[86, 3]], [[0, 3]]],
	       {6: 1,
	        7: 1,
	        8: 1,
	        9: 1,
	        11: 1,
	        14: 1,
	        15: 1,
	        19: 1,
	        22: 1,
	        26: 1,
	        30: 1,
	        37: 1}],
	 338: [[[[36, 1]], [[163, 2]], [[70, 3], [46, 1]], [[71, 4]], [[0, 4]]],
	       {36: 1}],
	 339: [[[[164, 1]], [[165, 0], [0, 1]]],
	       {6: 1, 8: 1, 9: 1, 14: 1, 15: 1, 19: 1, 22: 1, 26: 1, 30: 1, 37: 1}],
	 340: [[[[27, 1]], [[72, 2], [0, 1]], [[0, 2]]], {27: 1}],
	 341: [[[[53, 1]], [[0, 1]]], {27: 1}]},
	states:
	[[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[2, 1]]],
	 [[[38, 1]], [[39, 0], [0, 1]]],
	 [[[40, 1]], [[41, 0], [0, 1]]],
	 [[[42, 1], [43, 2], [44, 3]],
	  [[45, 4]],
	  [[46, 5], [0, 2]],
	  [[45, 6]],
	  [[46, 7], [0, 4]],
	  [[42, 1], [43, 2], [44, 3], [0, 5]],
	  [[0, 6]],
	  [[43, 4], [44, 3]]],
	 [[[45, 1]], [[47, 2], [48, 3], [0, 1]], [[45, 3]], [[0, 3]]],
	 [[[49, 1]], [[26, 0], [37, 0], [0, 1]]],
	 [[[21, 1]], [[45, 2]], [[46, 3], [0, 2]], [[45, 4]], [[0, 4]]],
	 [[[19, 1], [8, 2], [9, 5], [30, 4], [14, 3], [15, 6], [22, 2]],
	  [[19, 1], [0, 1]],
	  [[0, 2]],
	  [[50, 7], [51, 2]],
	  [[52, 2], [53, 8], [54, 8]],
	  [[55, 2], [56, 9]],
	  [[57, 10]],
	  [[51, 2]],
	  [[52, 2]],
	  [[55, 2]],
	  [[15, 2]]],
	 [[[58, 1],
	   [59, 1],
	   [60, 1],
	   [61, 1],
	   [62, 1],
	   [63, 1],
	   [64, 1],
	   [65, 1],
	   [66, 1],
	   [67, 1],
	   [68, 1],
	   [69, 1]],
	  [[0, 1]]],
	 [[[33, 1]], [[0, 1]]],
	 [[[10, 1]],
	  [[22, 2]],
	  [[70, 3], [30, 4]],
	  [[71, 5]],
	  [[52, 6], [72, 7]],
	  [[0, 5]],
	  [[70, 3]],
	  [[52, 6]]],
	 [[[29, 1]], [[73, 2]], [[74, 3]], [[75, 4]], [[76, 5], [0, 4]], [[0, 5]]],
	 [[[32, 1]], [[77, 2]], [[76, 3], [0, 2]], [[0, 3]]],
	 [[[78, 1], [48, 1]], [[0, 1]]],
	 [[[79, 1],
	   [80, 1],
	   [7, 2],
	   [81, 1],
	   [79, 1],
	   [74, 1],
	   [82, 1],
	   [83, 3],
	   [84, 1],
	   [85, 1]],
	  [[0, 1]],
	  [[74, 1]],
	  [[7, 1], [0, 3]]],
	 [[[86, 1]], [[87, 0], [0, 1]]],
	 [[[88, 1], [89, 1], [90, 1], [91, 1], [92, 1], [93, 1], [94, 1], [95, 1]],
	  [[0, 1]]],
	 [[[34, 1]], [[0, 1]]],
	 [[[13, 1]], [[0, 1]]],
	 [[[96, 1]], [[94, 2], [91, 2]], [[0, 2]]],
	 [[[35, 1]],
	  [[97, 2]],
	  [[2, 4], [30, 3]],
	  [[52, 5], [98, 6]],
	  [[0, 4]],
	  [[2, 4]],
	  [[52, 5]]],
	 [[[99, 1]], [[99, 1], [0, 1]]],
	 [[[23, 1]], [[73, 2]], [[0, 2]]],
	 [[[45, 1]],
	  [[70, 2], [48, 3], [46, 4], [0, 1]],
	  [[45, 5]],
	  [[0, 3]],
	  [[45, 6], [0, 4]],
	  [[48, 3], [46, 7], [0, 5]],
	  [[46, 4], [0, 6]],
	  [[45, 8], [0, 7]],
	  [[70, 9]],
	  [[45, 10]],
	  [[46, 7], [0, 10]]],
	 [[[97, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]],
	 [[[101, 1]], [[46, 0], [0, 1]]],
	 [[[22, 1]], [[102, 0], [0, 1]]],
	 [[[22, 1]], [[0, 1]]],
	 [[[72, 1]], [[2, 1], [103, 2]], [[0, 2]]],
	 [[[104, 1]],
	  [[45, 2], [0, 1]],
	  [[100, 3], [46, 3], [0, 2]],
	  [[45, 4]],
	  [[0, 4]]],
	 [[[17, 1]],
	  [[86, 2]],
	  [[74, 3], [0, 2]],
	  [[45, 4]],
	  [[46, 5], [0, 4]],
	  [[45, 6]],
	  [[0, 6]]],
	 [[[105, 1]], [[106, 0], [0, 1]]],
	 [[[72, 1]],
	  [[107, 2], [47, 3], [0, 1]],
	  [[72, 4], [53, 4]],
	  [[72, 5], [53, 5]],
	  [[0, 4]],
	  [[47, 3], [0, 5]]],
	 [[[86, 1]], [[46, 2], [0, 1]], [[86, 1], [0, 2]]],
	 [[[37, 2], [26, 2], [6, 2], [108, 1]], [[0, 1]], [[109, 1]]],
	 [[[2, 0], [103, 1], [110, 0]], [[0, 1]]],
	 [[[111, 1], [112, 1], [113, 1], [114, 1], [115, 1]], [[0, 1]]],
	 [[[29, 1]],
	  [[73, 2]],
	  [[74, 3]],
	  [[72, 4]],
	  [[70, 5]],
	  [[71, 6]],
	  [[116, 7], [0, 6]],
	  [[70, 8]],
	  [[71, 9]],
	  [[0, 9]]],
	 [[[30, 1], [22, 2]], [[117, 3]], [[0, 2]], [[52, 2]]],
	 [[[118, 1]], [[46, 2], [0, 1]], [[118, 1], [0, 2]]],
	 [[[4, 1]], [[22, 2]], [[119, 3]], [[70, 4]], [[71, 5]], [[0, 5]]],
	 [[[28, 1]], [[22, 2]], [[46, 1], [0, 2]]],
	 [[[32, 1]],
	  [[45, 2]],
	  [[70, 3]],
	  [[71, 4]],
	  [[116, 5], [120, 1], [0, 4]],
	  [[70, 6]],
	  [[71, 7]],
	  [[0, 7]]],
	 [[[22, 1]], [[100, 2], [0, 1]], [[22, 3]], [[0, 3]]],
	 [[[121, 1]], [[46, 2], [0, 1]], [[121, 1], [0, 2]]],
	 [[[31, 1]],
	  [[97, 2], [102, 3]],
	  [[25, 4]],
	  [[97, 2], [25, 4], [102, 3]],
	  [[122, 5], [42, 5], [30, 6]],
	  [[0, 5]],
	  [[122, 7]],
	  [[52, 5]]],
	 [[[25, 1]], [[123, 2]], [[0, 2]]],
	 [[[124, 1], [125, 1]], [[0, 1]]],
	 [[[11, 1]], [[70, 2], [126, 3]], [[45, 4]], [[70, 2]], [[0, 4]]],
	 [[[29, 1]], [[73, 2]], [[74, 3]], [[127, 4]], [[128, 5], [0, 4]], [[0, 5]]],
	 [[[32, 1]], [[77, 2]], [[128, 3], [0, 2]], [[0, 3]]],
	 [[[129, 1], [130, 1]], [[0, 1]]],
	 [[[45, 1]],
	  [[129, 2], [46, 3], [0, 1]],
	  [[0, 2]],
	  [[45, 4], [0, 3]],
	  [[46, 3], [0, 4]]],
	 [[[7, 1], [131, 2]], [[40, 2]], [[0, 2]]],
	 [[[11, 1]], [[70, 2], [126, 3]], [[77, 4]], [[70, 2]], [[0, 4]]],
	 [[[132, 1], [75, 1]], [[0, 1]]],
	 [[[133, 1]], [[134, 0], [0, 1]]],
	 [[[30, 1]], [[52, 2], [126, 3]], [[0, 2]], [[52, 2]]],
	 [[[24, 1]], [[0, 1]]],
	 [[[135, 1]], [[44, 2], [136, 1], [0, 1]], [[109, 3]], [[0, 3]]],
	 [[[12, 1]],
	  [[45, 2], [137, 3], [0, 1]],
	  [[46, 4], [0, 2]],
	  [[45, 5]],
	  [[45, 2], [0, 4]],
	  [[46, 6], [0, 5]],
	  [[45, 7]],
	  [[46, 8], [0, 7]],
	  [[45, 7], [0, 8]]],
	 [[[5, 1]],
	  [[45, 2], [0, 1]],
	  [[46, 3], [0, 2]],
	  [[45, 4]],
	  [[46, 5], [0, 4]],
	  [[45, 6]],
	  [[0, 6]]],
	 [[[20, 1]], [[72, 2], [0, 1]], [[0, 2]]],
	 [[[138, 1]], [[139, 0], [137, 0], [0, 1]]],
	 [[[140, 1]], [[2, 2], [141, 3]], [[0, 2]], [[140, 1], [2, 2]]],
	 [[[70, 1]], [[45, 2], [0, 1]], [[0, 2]]],
	 [[[142, 1],
	   [143, 1],
	   [144, 1],
	   [145, 1],
	   [146, 1],
	   [147, 1],
	   [148, 1],
	   [149, 1],
	   [150, 1],
	   [151, 1]],
	  [[0, 1]]],
	 [[[1, 1], [3, 1]], [[0, 1]]],
	 [[[45, 1], [70, 2], [102, 3]],
	  [[70, 2], [0, 1]],
	  [[45, 4], [152, 5], [0, 2]],
	  [[102, 6]],
	  [[152, 5], [0, 4]],
	  [[0, 5]],
	  [[102, 5]]],
	 [[[153, 1]], [[46, 2], [0, 1]], [[153, 1], [0, 2]]],
	 [[[1, 1], [2, 2]], [[0, 1]], [[154, 3]], [[110, 4]], [[155, 1], [110, 4]]],
	 [[[109, 1]], [[156, 0], [42, 0], [157, 0], [158, 0], [0, 1]]],
	 [[[75, 1], [159, 2]],
	  [[32, 3], [0, 1]],
	  [[0, 2]],
	  [[75, 4]],
	  [[116, 5]],
	  [[45, 2]]],
	 [[[45, 1]], [[46, 2], [0, 1]], [[45, 1], [0, 2]]],
	 [[[45, 1]], [[46, 0], [0, 1]]],
	 [[[45, 1]],
	  [[48, 2], [46, 3], [0, 1]],
	  [[0, 2]],
	  [[45, 4], [0, 3]],
	  [[46, 3], [0, 4]]],
	 [[[77, 1]],
	  [[46, 2], [0, 1]],
	  [[77, 3]],
	  [[46, 4], [0, 3]],
	  [[77, 3], [0, 4]]],
	 [[[30, 1], [102, 2], [14, 3]],
	  [[52, 4], [98, 5]],
	  [[22, 4]],
	  [[160, 6]],
	  [[0, 4]],
	  [[52, 4]],
	  [[51, 4]]],
	 [[[16, 1]],
	  [[70, 2]],
	  [[71, 3]],
	  [[161, 4], [162, 5]],
	  [[70, 6]],
	  [[70, 7]],
	  [[71, 8]],
	  [[71, 9]],
	  [[161, 4], [116, 10], [162, 5], [0, 8]],
	  [[0, 9]],
	  [[70, 11]],
	  [[71, 12]],
	  [[162, 5], [0, 12]]],
	 [[[42, 1], [118, 2], [44, 3]],
	  [[22, 4]],
	  [[47, 5], [46, 6], [0, 2]],
	  [[22, 7]],
	  [[46, 8], [0, 4]],
	  [[45, 9]],
	  [[42, 1], [118, 2], [44, 3], [0, 6]],
	  [[0, 7]],
	  [[44, 3]],
	  [[46, 6], [0, 9]]],
	 [[[18, 1]],
	  [[45, 2]],
	  [[70, 3]],
	  [[71, 4]],
	  [[116, 5], [0, 4]],
	  [[70, 6]],
	  [[71, 7]],
	  [[0, 7]]],
	 [[[45, 1]], [[100, 2], [0, 1]], [[86, 3]], [[0, 3]]],
	 [[[36, 1]], [[163, 2]], [[70, 3], [46, 1]], [[71, 4]], [[0, 4]]],
	 [[[164, 1]], [[165, 0], [0, 1]]],
	 [[[27, 1]], [[72, 2], [0, 1]], [[0, 2]]],
	 [[[53, 1]], [[0, 1]]]],
	labels:
	[[0, 'EMPTY'],
	 [320, null],
	 [4, null],
	 [272, null],
	 [1, 'def'],
	 [1, 'raise'],
	 [32, null],
	 [1, 'not'],
	 [2, null],
	 [26, null],
	 [1, 'class'],
	 [1, 'lambda'],
	 [1, 'print'],
	 [1, 'debugger'],
	 [9, null],
	 [25, null],
	 [1, 'try'],
	 [1, 'exec'],
	 [1, 'while'],
	 [3, null],
	 [1, 'return'],
	 [1, 'assert'],
	 [1, null],
	 [1, 'del'],
	 [1, 'pass'],
	 [1, 'import'],
	 [15, null],
	 [1, 'yield'],
	 [1, 'global'],
	 [1, 'for'],
	 [7, null],
	 [1, 'from'],
	 [1, 'if'],
	 [1, 'break'],
	 [1, 'continue'],
	 [50, null],
	 [1, 'with'],
	 [14, null],
	 [319, null],
	 [19, null],
	 [309, null],
	 [1, 'and'],
	 [16, null],
	 [260, null],
	 [36, null],
	 [328, null],
	 [12, null],
	 [22, null],
	 [267, null],
	 [327, null],
	 [308, null],
	 [10, null],
	 [8, null],
	 [340, null],
	 [331, null],
	 [27, null],
	 [279, null],
	 [330, null],
	 [46, null],
	 [39, null],
	 [41, null],
	 [47, null],
	 [42, null],
	 [43, null],
	 [37, null],
	 [44, null],
	 [49, null],
	 [45, null],
	 [38, null],
	 [40, null],
	 [11, null],
	 [326, null],
	 [329, null],
	 [289, null],
	 [1, 'in'],
	 [312, null],
	 [269, null],
	 [311, null],
	 [268, null],
	 [29, null],
	 [21, null],
	 [28, null],
	 [30, null],
	 [1, 'is'],
	 [31, null],
	 [20, null],
	 [287, null],
	 [270, null],
	 [334, null],
	 [298, null],
	 [293, null],
	 [266, null],
	 [338, null],
	 [336, null],
	 [296, null],
	 [275, null],
	 [277, null],
	 [282, null],
	 [259, null],
	 [276, null],
	 [1, 'as'],
	 [280, null],
	 [23, null],
	 [0, null],
	 [1, 'except'],
	 [339, null],
	 [18, null],
	 [264, null],
	 [315, null],
	 [290, null],
	 [323, null],
	 [265, null],
	 [273, null],
	 [317, null],
	 [318, null],
	 [341, null],
	 [1, 'else'],
	 [295, null],
	 [294, null],
	 [313, null],
	 [1, 'elif'],
	 [299, null],
	 [300, null],
	 [281, null],
	 [302, null],
	 [301, null],
	 [335, null],
	 [332, null],
	 [307, null],
	 [305, null],
	 [306, null],
	 [271, null],
	 [310, null],
	 [258, null],
	 [1, 'or'],
	 [263, null],
	 [333, null],
	 [35, null],
	 [261, null],
	 [34, null],
	 [322, null],
	 [13, null],
	 [292, null],
	 [278, null],
	 [288, null],
	 [314, null],
	 [316, null],
	 [262, null],
	 [286, null],
	 [297, null],
	 [303, null],
	 [274, null],
	 [321, null],
	 [324, null],
	 [5, null],
	 [6, null],
	 [48, null],
	 [17, null],
	 [24, null],
	 [304, null],
	 [325, null],
	 [285, null],
	 [1, 'finally'],
	 [337, null],
	 [257, null],
	 [33, null]],
	keywords:
	{'and': 41,
	 'as': 100,
	 'assert': 21,
	 'break': 33,
	 'class': 10,
	 'continue': 34,
	 'debugger': 13,
	 'def': 4,
	 'del': 23,
	 'elif': 120,
	 'else': 116,
	 'except': 104,
	 'exec': 17,
	 'finally': 162,
	 'for': 29,
	 'from': 31,
	 'global': 28,
	 'if': 32,
	 'import': 25,
	 'in': 74,
	 'is': 83,
	 'lambda': 11,
	 'not': 7,
	 'or': 134,
	 'pass': 24,
	 'print': 12,
	 'raise': 5,
	 'return': 20,
	 'try': 16,
	 'while': 18,
	 'with': 36,
	 'yield': 27},
	tokens:
	{0: 103,
	 1: 22,
	 2: 8,
	 3: 19,
	 4: 2,
	 5: 154,
	 6: 155,
	 7: 30,
	 8: 52,
	 9: 14,
	 10: 51,
	 11: 70,
	 12: 46,
	 13: 141,
	 14: 37,
	 15: 26,
	 16: 42,
	 17: 157,
	 18: 106,
	 19: 39,
	 20: 85,
	 21: 80,
	 22: 47,
	 23: 102,
	 24: 158,
	 25: 15,
	 26: 9,
	 27: 55,
	 28: 81,
	 29: 79,
	 30: 82,
	 31: 84,
	 32: 6,
	 33: 165,
	 34: 139,
	 35: 137,
	 36: 44,
	 37: 64,
	 38: 68,
	 39: 59,
	 40: 69,
	 41: 60,
	 42: 62,
	 43: 63,
	 44: 65,
	 45: 67,
	 46: 58,
	 47: 61,
	 48: 156,
	 49: 66,
	 50: 35},
	start: 256
	};



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/parser.js ---- */ 

	// low level parser to a concrete syntax tree, derived from cpython's lib2to3

	/**
	 *
	 * @constructor
	 * @param {Object} grammar
	 *
	 * p = new Parser(grammar);
	 * p.setup([start]);
	 * foreach input token:
	 *     if p.addtoken(...):
	 *         break
	 * root = p.rootnode
	 *
	 * can throw SyntaxError
	 */
	function Parser (filename, grammar) {
	    this.filename = filename;
	    this.grammar = grammar;
	    this.p_flags = 0;
	    return this;
	}

	// all possible parser flags
	Parser.FUTURE_PRINT_FUNCTION = "print_function";
	Parser.FUTURE_UNICODE_LITERALS = "unicode_literals";
	Parser.FUTURE_DIVISION = "division";
	Parser.FUTURE_ABSOLUTE_IMPORT = "absolute_import";
	Parser.FUTURE_WITH_STATEMENT = "with_statement";
	Parser.FUTURE_NESTED_SCOPES = "nested_scopes";
	Parser.FUTURE_GENERATORS = "generators";
	Parser.CO_FUTURE_PRINT_FUNCTION = 0x10000;
	Parser.CO_FUTURE_UNICODE_LITERALS = 0x20000;
	Parser.CO_FUTURE_DIVISON = 0x2000;
	Parser.CO_FUTURE_ABSOLUTE_IMPORT = 0x4000;
	Parser.CO_FUTURE_WITH_STATEMENT = 0x8000;

	Parser.prototype.setup = function (start) {
	    var stackentry;
	    var newnode;
	    start = start || this.grammar.start;
	    //print("START:"+start);

	    newnode =
	    {
	        type    : start,
	        value   : null,
	        context : null,
	        children: []
	    };
	    stackentry =
	    {
	        dfa  : this.grammar.dfas[start],
	        state: 0,
	        node : newnode
	    };
	    this.stack = [stackentry];
	    this.used_names = {};
	};

	function findInDfa (a, obj) {
	    var i = a.length;
	    while (i--) {
	        if (a[i][0] === obj[0] && a[i][1] === obj[1]) {
	            return true;
	        }
	    }
	    return false;
	}


	// Add a token; return true if we're done
	Parser.prototype.addtoken = function (type, value, context) {
	    var errline;
	    var itsfirst;
	    var itsdfa;
	    var state;
	    var v;
	    var t;
	    var newstate;
	    var i;
	    var a;
	    var arcs;
	    var first;
	    var states;
	    var tp;
	    var ilabel = this.classify(type, value, context);
	    //print("ilabel:"+ilabel);

	    OUTERWHILE:
	    while (true) {
	        tp = this.stack[this.stack.length - 1];
	        states = tp.dfa[0];
	        first = tp.dfa[1];
	        arcs = states[tp.state];

	        // look for a state with this label
	        for (a = 0; a < arcs.length; ++a) {
	            i = arcs[a][0];
	            newstate = arcs[a][1];
	            t = this.grammar.labels[i][0];
	            v = this.grammar.labels[i][1];
	            if (ilabel === i) {
	                // look it up in the list of labels
	                goog.asserts.assert(t < 256);
	                // shift a token; we're done with it
	                this.shift(type, value, newstate, context);
	                // pop while we are in an accept-only state
	                state = newstate;
	                //print("before:"+JSON.stringify(states[state]) + ":state:"+state+":"+JSON.stringify(states[state]));
	                /* jshint ignore:start */
	                while (states[state].length === 1
	                    && states[state][0][0] === 0
	                    && states[state][0][1] === state) {
	                    // states[state] == [(0, state)])
	                    this.pop();
	                    //print("in after pop:"+JSON.stringify(states[state]) + ":state:"+state+":"+JSON.stringify(states[state]));
	                    if (this.stack.length === 0) {
	                        // done!
	                        return true;
	                    }
	                    tp = this.stack[this.stack.length - 1];
	                    state = tp.state;
	                    states = tp.dfa[0];
	                    first = tp.dfa[1];
	                    //print(JSON.stringify(states), JSON.stringify(first));
	                    //print("bottom:"+JSON.stringify(states[state]) + ":state:"+state+":"+JSON.stringify(states[state]));
	                }
	                /* jshint ignore:end */
	                // done with this token
	                //print("DONE, return false");
	                return false;
	            } else if (t >= 256) {
	                itsdfa = this.grammar.dfas[t];
	                itsfirst = itsdfa[1];
	                if (itsfirst.hasOwnProperty(ilabel)) {
	                    // push a symbol
	                    this.push(t, this.grammar.dfas[t], newstate, context);
	                    continue OUTERWHILE;
	                }
	            }
	        }

	        //print("findInDfa: " + JSON.stringify(arcs)+" vs. " + tp.state);
	        if (findInDfa(arcs, [0, tp.state])) {
	            // an accepting state, pop it and try somethign else
	            //print("WAA");
	            this.pop();
	            if (this.stack.length === 0) {
	                throw new Sk.builtin.SyntaxError("too much input", this.filename);
	            }
	        } else {
	            // no transition
	            errline = context[0][0];

	            var that = this;
	            var ar = arcs.map(function(a) {
	                var i = a[0];
	                var t = that.grammar.labels[i][0];
	                return Sk.nameForToken(t);
	            });
	            var extra = {
	                kind: "DAG_MISS",
	                expected: ar,
	                found: Sk.nameForToken(type),
	                found_val: value,
	                inside: Sk.nameForToken(tp.node.type),
	                node: tp.node,
	                parent: this.stack.length > 1 ? this.stack[this.stack.length - 2].node : undefined
	            };
	            var reason = "expected " + ar.join(', ') + " but found " + extra.found + " while parsing " + extra.inside;

	            throw new Sk.builtin.SyntaxError(reason, this.filename, errline, context, extra);
	        }
	    }
	};

	// turn a token into a label
	Parser.prototype.classify = function (type, value, context) {
	    var ilabel;
	    if (type === Sk.Tokenizer.Tokens.T_NAME) {
	        this.used_names[value] = true;
	        ilabel = this.grammar.keywords.hasOwnProperty(value) && this.grammar.keywords[value];

	        /* Check for handling print as an builtin function */
	        if(value === "print" && (this.p_flags & Parser.CO_FUTURE_PRINT_FUNCTION || Sk.python3 === true)) {
	            ilabel = false; // ilabel determines if the value is a keyword
	        }

	        if (ilabel) {
	            //print("is keyword");
	            return ilabel;
	        }
	    }
	    ilabel = this.grammar.tokens.hasOwnProperty(type) && this.grammar.tokens[type];
	    if (!ilabel) {
	        // throw new Sk.builtin.SyntaxError("bad token", type, value, context);
	        // Questionable modification to put line number in position 2
	        // like everywhere else and filename in position 1.
	        var extra = {
	            kind: "CLASSIFY",
	            type: type,
	            value: value
	        };
	        throw new Sk.builtin.SyntaxError("bad token", this.filename, context[0][0], context, extra);
	    }
	    return ilabel;
	};

	// shift a token
	Parser.prototype.shift = function (type, value, newstate, context) {
	    var dfa = this.stack[this.stack.length - 1].dfa;
	    var state = this.stack[this.stack.length - 1].state;
	    var node = this.stack[this.stack.length - 1].node;
	    //print("context", context);
	    var newnode = {
	        type      : type,
	        value     : value,
	        lineno    : context[0][0],         // throwing away end here to match cpython
	        col_offset: context[0][1],
	        children  : null
	    };
	    if (newnode) {
	        node.children.push(newnode);
	    }
	    this.stack[this.stack.length - 1] = {
	        dfa  : dfa,
	        state: newstate,
	        node : node
	    };
	};

	// push a nonterminal
	Parser.prototype.push = function (type, newdfa, newstate, context) {
	    var dfa = this.stack[this.stack.length - 1].dfa;
	    var node = this.stack[this.stack.length - 1].node;
	    var newnode = {
	        type      : type,
	        value     : null,
	        lineno    : context[0][0],      // throwing away end here to match cpython
	        col_offset: context[0][1],
	        children  : []
	    };
	    this.stack[this.stack.length - 1] = {
	        dfa  : dfa,
	        state: newstate,
	        node : node
	    };
	    this.stack.push({
	        dfa  : newdfa,
	        state: 0,
	        node : newnode
	    });
	};

	//var ac = 0;
	//var bc = 0;

	// pop a nonterminal
	Parser.prototype.pop = function () {
	    var node;
	    var pop = this.stack.pop();
	    var newnode = pop.node;
	    //print("POP");
	    if (newnode) {
	        //print("A", ac++, newnode.type);
	        //print("stacklen:"+this.stack.length);
	        if (this.stack.length !== 0) {
	            //print("B", bc++);
	            node = this.stack[this.stack.length - 1].node;
	            node.children.push(newnode);
	        } else {
	            //print("C");
	            this.rootnode = newnode;
	            this.rootnode.used_names = this.used_names;
	        }
	    }
	};

	/**
	 * parser for interactive input. returns a function that should be called with
	 * lines of input as they are entered. the function will return false
	 * until the input is complete, when it will return the rootnode of the parse.
	 *
	 * @param {string} filename
	 * @param {string=} style root of parse tree (optional)
	 */
	function makeParser (filename, style) {
	    var tokenizer;
	    var T_OP;
	    var T_NL;
	    var T_COMMENT;
	    var prefix;
	    var column;
	    var lineno;
	    var p;
	    if (style === undefined) {
	        style = "file_input";
	    }
	    p = new Parser(filename, Sk.ParseTables);
	    // for closure's benefit
	    if (style === "file_input") {
	        p.setup(Sk.ParseTables.sym.file_input);
	    } else {
	        goog.asserts.fail("todo;");
	    }
	    lineno = 1;
	    column = 0;
	    prefix = "";
	    T_COMMENT = Sk.Tokenizer.Tokens.T_COMMENT;
	    T_NL = Sk.Tokenizer.Tokens.T_NL;
	    T_OP = Sk.Tokenizer.Tokens.T_OP;
	    tokenizer = new Sk.Tokenizer(filename, style === "single_input", function (type, value, start, end, line) {
	        var s_lineno = start[0];
	        var s_column = start[1];
	        /*
	         if (s_lineno !== lineno && s_column !== column)
	         {
	         // todo; update prefix and line/col
	         }
	         */
	        if (type === T_COMMENT || type === T_NL) {
	            prefix += value;
	            lineno = end[0];
	            column = end[1];
	            if (value[value.length - 1] === "\n") {
	                lineno += 1;
	                column = 0;
	            }
	            //print("  not calling addtoken");
	            return undefined;
	        }
	        if (type === T_OP) {
	            type = Sk.OpMap[value];
	        }
	        if (p.addtoken(type, value, [start, end, line])) {
	            return true;
	        }
	    });

	    // create parser function
	    var parseFunc = function (line) {
	        var ret = tokenizer.generateTokens(line);
	        //print("tok:"+ret);
	        if (ret) {
	            if (ret !== "done") {
	                throw new Sk.builtin.SyntaxError("incomplete input", this.filename);
	            }
	            return p.rootnode;
	        }
	        return false;
	    };

	    // set flags, and return
	    parseFunc.p_flags = p.p_flags;
	    return parseFunc;
	}

	Sk.parse = function parse (filename, input) {
	    var i;
	    var ret;
	    var lines;
	    var parseFunc = makeParser(filename);
	    if (input.substr(input.length - 1, 1) !== "\n") {
	        input += "\n";
	    }
	    //print("input:"+input);
	    lines = input.split("\n");
	    for (i = 0; i < lines.length; ++i) {
	        ret = parseFunc(lines[i] + ((i === lines.length - 1) ? "" : "\n"));
	    }

	    /*
	     * Small adjustments here in order to return th flags and the cst
	     */
	    return {"cst": ret, "flags": parseFunc.p_flags};
	};

	Sk.parseTreeDump = function parseTreeDump (n, indent) {
	    //return JSON.stringify(n, null, 2);
	    var i;
	    var ret;
	    indent = indent || "";
	    ret = "";
	    ret += indent;
	    if (n.type >= 256) { // non-term
	        ret += Sk.ParseTables.number2symbol[n.type] + "\n";
	        for (i = 0; i < n.children.length; ++i) {
	            ret += Sk.parseTreeDump(n.children[i], indent + "  ");
	        }
	    } else {
	        ret += Sk.Tokenizer.tokenNames[n.type] + ": " + new Sk.builtin.str(n.value)["$r"]().v + "\n";
	    }
	    return ret;
	};


	goog.exportSymbol("Sk.parse", Sk.parse);
	goog.exportSymbol("Sk.parseTreeDump", Sk.parseTreeDump);



	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/gen/astnodes.js ---- */ 

	/* File automatically generated by ./asdl_js.py. */

	/* ----- expr_context ----- */
	/** @constructor */
	function Load() {}
	/** @constructor */
	function Store() {}
	/** @constructor */
	function Del() {}
	/** @constructor */
	function AugLoad() {}
	/** @constructor */
	function AugStore() {}
	/** @constructor */
	function Param() {}

	/* ----- boolop ----- */
	/** @constructor */
	function And() {}
	/** @constructor */
	function Or() {}

	/* ----- operator ----- */
	/** @constructor */
	function Add() {}
	/** @constructor */
	function Sub() {}
	/** @constructor */
	function Mult() {}
	/** @constructor */
	function Div() {}
	/** @constructor */
	function Mod() {}
	/** @constructor */
	function Pow() {}
	/** @constructor */
	function LShift() {}
	/** @constructor */
	function RShift() {}
	/** @constructor */
	function BitOr() {}
	/** @constructor */
	function BitXor() {}
	/** @constructor */
	function BitAnd() {}
	/** @constructor */
	function FloorDiv() {}

	/* ----- unaryop ----- */
	/** @constructor */
	function Invert() {}
	/** @constructor */
	function Not() {}
	/** @constructor */
	function UAdd() {}
	/** @constructor */
	function USub() {}

	/* ----- cmpop ----- */
	/** @constructor */
	function Eq() {}
	/** @constructor */
	function NotEq() {}
	/** @constructor */
	function Lt() {}
	/** @constructor */
	function LtE() {}
	/** @constructor */
	function Gt() {}
	/** @constructor */
	function GtE() {}
	/** @constructor */
	function Is() {}
	/** @constructor */
	function IsNot() {}
	/** @constructor */
	function In_() {}
	/** @constructor */
	function NotIn() {}







	/* ---------------------- */
	/* constructors for nodes */
	/* ---------------------- */





	/** @constructor */
	function Module(/* {asdl_seq *} */ body)
	{
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function Interactive(/* {asdl_seq *} */ body)
	{
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function Expression(/* {expr_ty} */ body)
	{
	    goog.asserts.assert(body !== null && body !== undefined);
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function Suite(/* {asdl_seq *} */ body)
	{
	    this.body = body;
	    return this;
	}

	/** @constructor */
	function FunctionDef(/* {identifier} */ name, /* {arguments__ty} */ args, /*
	                          {asdl_seq *} */ body, /* {asdl_seq *} */
	                          decorator_list, /* {int} */ lineno, /* {int} */
	                          col_offset)
	{
	    goog.asserts.assert(name !== null && name !== undefined);
	    goog.asserts.assert(args !== null && args !== undefined);
	    this.name = name;
	    this.args = args;
	    this.body = body;
	    this.decorator_list = decorator_list;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function ClassDef(/* {identifier} */ name, /* {asdl_seq *} */ bases, /*
	                       {asdl_seq *} */ body, /* {asdl_seq *} */ decorator_list,
	                       /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(name !== null && name !== undefined);
	    this.name = name;
	    this.bases = bases;
	    this.body = body;
	    this.decorator_list = decorator_list;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Return_(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Delete_(/* {asdl_seq *} */ targets, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    this.targets = targets;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Assign(/* {asdl_seq *} */ targets, /* {expr_ty} */ value, /* {int} */
	                     lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.targets = targets;
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function AugAssign(/* {expr_ty} */ target, /* {operator_ty} */ op, /* {expr_ty}
	                        */ value, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(target !== null && target !== undefined);
	    goog.asserts.assert(op !== null && op !== undefined);
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.target = target;
	    this.op = op;
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Print(/* {expr_ty} */ dest, /* {asdl_seq *} */ values, /* {bool} */
	                    nl, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.dest = dest;
	    this.values = values;
	    this.nl = nl;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function For_(/* {expr_ty} */ target, /* {expr_ty} */ iter, /* {asdl_seq *} */
	                   body, /* {asdl_seq *} */ orelse, /* {int} */ lineno, /*
	                   {int} */ col_offset)
	{
	    goog.asserts.assert(target !== null && target !== undefined);
	    goog.asserts.assert(iter !== null && iter !== undefined);
	    this.target = target;
	    this.iter = iter;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function While_(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /* {asdl_seq *}
	                     */ orelse, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    this.test = test;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function If_(/* {expr_ty} */ test, /* {asdl_seq *} */ body, /* {asdl_seq *} */
	                  orelse, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    this.test = test;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function With_(/* {expr_ty} */ context_expr, /* {expr_ty} */ optional_vars, /*
	                    {asdl_seq *} */ body, /* {int} */ lineno, /* {int} */
	                    col_offset)
	{
	    goog.asserts.assert(context_expr !== null && context_expr !== undefined);
	    this.context_expr = context_expr;
	    this.optional_vars = optional_vars;
	    this.body = body;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Raise(/* {expr_ty} */ type, /* {expr_ty} */ inst, /* {expr_ty} */
	                    tback, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.type = type;
	    this.inst = inst;
	    this.tback = tback;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function TryExcept(/* {asdl_seq *} */ body, /* {asdl_seq *} */ handlers, /*
	                        {asdl_seq *} */ orelse, /* {int} */ lineno, /* {int} */
	                        col_offset)
	{
	    this.body = body;
	    this.handlers = handlers;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function TryFinally(/* {asdl_seq *} */ body, /* {asdl_seq *} */ finalbody, /*
	                         {int} */ lineno, /* {int} */ col_offset)
	{
	    this.body = body;
	    this.finalbody = finalbody;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Assert(/* {expr_ty} */ test, /* {expr_ty} */ msg, /* {int} */ lineno,
	                     /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    this.test = test;
	    this.msg = msg;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Import_(/* {asdl_seq *} */ names, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    this.names = names;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function ImportFrom(/* {identifier} */ module, /* {asdl_seq *} */ names, /*
	                         {int} */ level, /* {int} */ lineno, /* {int} */
	                         col_offset)
	{
	    goog.asserts.assert(module !== null && module !== undefined);
	    this.module = module;
	    this.names = names;
	    this.level = level;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Exec(/* {expr_ty} */ body, /* {expr_ty} */ globals, /* {expr_ty} */
	                   locals, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(body !== null && body !== undefined);
	    this.body = body;
	    this.globals = globals;
	    this.locals = locals;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Global(/* {asdl_seq *} */ names, /* {int} */ lineno, /* {int} */
	                     col_offset)
	{
	    this.names = names;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Expr(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Pass(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Break_(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Continue_(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Debugger_(/* {int} */ lineno, /* {int} */ col_offset)
	{
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function BoolOp(/* {boolop_ty} */ op, /* {asdl_seq *} */ values, /* {int} */
	                     lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(op !== null && op !== undefined);
	    this.op = op;
	    this.values = values;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function BinOp(/* {expr_ty} */ left, /* {operator_ty} */ op, /* {expr_ty} */
	                    right, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(left !== null && left !== undefined);
	    goog.asserts.assert(op !== null && op !== undefined);
	    goog.asserts.assert(right !== null && right !== undefined);
	    this.left = left;
	    this.op = op;
	    this.right = right;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function UnaryOp(/* {unaryop_ty} */ op, /* {expr_ty} */ operand, /* {int} */
	                      lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(op !== null && op !== undefined);
	    goog.asserts.assert(operand !== null && operand !== undefined);
	    this.op = op;
	    this.operand = operand;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Lambda(/* {arguments__ty} */ args, /* {expr_ty} */ body, /* {int} */
	                     lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(args !== null && args !== undefined);
	    goog.asserts.assert(body !== null && body !== undefined);
	    this.args = args;
	    this.body = body;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function IfExp(/* {expr_ty} */ test, /* {expr_ty} */ body, /* {expr_ty} */
	                    orelse, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(test !== null && test !== undefined);
	    goog.asserts.assert(body !== null && body !== undefined);
	    goog.asserts.assert(orelse !== null && orelse !== undefined);
	    this.test = test;
	    this.body = body;
	    this.orelse = orelse;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Dict(/* {asdl_seq *} */ keys, /* {asdl_seq *} */ values, /* {int} */
	                   lineno, /* {int} */ col_offset)
	{
	    this.keys = keys;
	    this.values = values;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Set(/* {asdl_seq *} */ elts, /* {int} */ lineno, /* {int} */
	                  col_offset)
	{
	    this.elts = elts;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function ListComp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /* {int}
	                       */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(elt !== null && elt !== undefined);
	    this.elt = elt;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function SetComp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /* {int}
	                      */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(elt !== null && elt !== undefined);
	    this.elt = elt;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function DictComp(/* {expr_ty} */ key, /* {expr_ty} */ value, /* {asdl_seq *}
	                       */ generators, /* {int} */ lineno, /* {int} */
	                       col_offset)
	{
	    goog.asserts.assert(key !== null && key !== undefined);
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.key = key;
	    this.value = value;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function GeneratorExp(/* {expr_ty} */ elt, /* {asdl_seq *} */ generators, /*
	                           {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(elt !== null && elt !== undefined);
	    this.elt = elt;
	    this.generators = generators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Yield(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */
	                    col_offset)
	{
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Compare(/* {expr_ty} */ left, /* {asdl_int_seq *} */ ops, /* {asdl_seq
	                      *} */ comparators, /* {int} */ lineno, /* {int} */
	                      col_offset)
	{
	    goog.asserts.assert(left !== null && left !== undefined);
	    this.left = left;
	    this.ops = ops;
	    this.comparators = comparators;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Call(/* {expr_ty} */ func, /* {asdl_seq *} */ args, /* {asdl_seq *} */
	                   keywords, /* {expr_ty} */ starargs, /* {expr_ty} */ kwargs,
	                   /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(func !== null && func !== undefined);
	    this.func = func;
	    this.args = args;
	    this.keywords = keywords;
	    this.starargs = starargs;
	    this.kwargs = kwargs;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Repr(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.value = value;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Num(/* {object} */ n, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(n !== null && n !== undefined);
	    this.n = n;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Str(/* {string} */ s, /* {int} */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(s !== null && s !== undefined);
	    this.s = s;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Attribute(/* {expr_ty} */ value, /* {identifier} */ attr, /*
	                        {expr_context_ty} */ ctx, /* {int} */ lineno, /* {int}
	                        */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    goog.asserts.assert(attr !== null && attr !== undefined);
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.value = value;
	    this.attr = attr;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Subscript(/* {expr_ty} */ value, /* {slice_ty} */ slice, /*
	                        {expr_context_ty} */ ctx, /* {int} */ lineno, /* {int}
	                        */ col_offset)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    goog.asserts.assert(slice !== null && slice !== undefined);
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.value = value;
	    this.slice = slice;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Name(/* {identifier} */ id, /* {expr_context_ty} */ ctx, /* {int} */
	                   lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(id !== null && id !== undefined);
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.id = id;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function List(/* {asdl_seq *} */ elts, /* {expr_context_ty} */ ctx, /* {int} */
	                   lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.elts = elts;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Tuple(/* {asdl_seq *} */ elts, /* {expr_context_ty} */ ctx, /* {int}
	                    */ lineno, /* {int} */ col_offset)
	{
	    goog.asserts.assert(ctx !== null && ctx !== undefined);
	    this.elts = elts;
	    this.ctx = ctx;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function Ellipsis()
	{
	    return this;
	}

	/** @constructor */
	function Slice(/* {expr_ty} */ lower, /* {expr_ty} */ upper, /* {expr_ty} */
	                    step)
	{
	    this.lower = lower;
	    this.upper = upper;
	    this.step = step;
	    return this;
	}

	/** @constructor */
	function ExtSlice(/* {asdl_seq *} */ dims)
	{
	    this.dims = dims;
	    return this;
	}

	/** @constructor */
	function Index(/* {expr_ty} */ value)
	{
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.value = value;
	    return this;
	}

	/** @constructor */
	function comprehension(/* {expr_ty} */ target, /* {expr_ty} */ iter, /*
	                            {asdl_seq *} */ ifs)
	{
	    goog.asserts.assert(target !== null && target !== undefined);
	    goog.asserts.assert(iter !== null && iter !== undefined);
	    this.target = target;
	    this.iter = iter;
	    this.ifs = ifs;
	    return this;
	}

	/** @constructor */
	function ExceptHandler(/* {expr_ty} */ type, /* {expr_ty} */ name, /* {asdl_seq
	                            *} */ body, /* {int} */ lineno, /* {int} */
	                            col_offset)
	{
	    this.type = type;
	    this.name = name;
	    this.body = body;
	    this.lineno = lineno;
	    this.col_offset = col_offset;
	    return this;
	}

	/** @constructor */
	function arguments_(/* {asdl_seq *} */ args, /* {identifier} */ vararg, /*
	                         {identifier} */ kwarg, /* {asdl_seq *} */ defaults)
	{
	    this.args = args;
	    this.vararg = vararg;
	    this.kwarg = kwarg;
	    this.defaults = defaults;
	    return this;
	}

	/** @constructor */
	function keyword(/* {identifier} */ arg, /* {expr_ty} */ value)
	{
	    goog.asserts.assert(arg !== null && arg !== undefined);
	    goog.asserts.assert(value !== null && value !== undefined);
	    this.arg = arg;
	    this.value = value;
	    return this;
	}

	/** @constructor */
	function alias(/* {identifier} */ name, /* {identifier} */ asname)
	{
	    goog.asserts.assert(name !== null && name !== undefined);
	    this.name = name;
	    this.asname = asname;
	    return this;
	}


	Module.prototype._astname = "Module";
	Module.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	Interactive.prototype._astname = "Interactive";
	Interactive.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	Expression.prototype._astname = "Expression";
	Expression.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	Suite.prototype._astname = "Suite";
	Suite.prototype._fields = [
	    "body", function(n) { return n.body; }
	];
	FunctionDef.prototype._astname = "FunctionDef";
	FunctionDef.prototype._fields = [
	    "name", function(n) { return n.name; },
	    "args", function(n) { return n.args; },
	    "body", function(n) { return n.body; },
	    "decorator_list", function(n) { return n.decorator_list; }
	];
	ClassDef.prototype._astname = "ClassDef";
	ClassDef.prototype._fields = [
	    "name", function(n) { return n.name; },
	    "bases", function(n) { return n.bases; },
	    "body", function(n) { return n.body; },
	    "decorator_list", function(n) { return n.decorator_list; }
	];
	Return_.prototype._astname = "Return";
	Return_.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Delete_.prototype._astname = "Delete";
	Delete_.prototype._fields = [
	    "targets", function(n) { return n.targets; }
	];
	Assign.prototype._astname = "Assign";
	Assign.prototype._fields = [
	    "targets", function(n) { return n.targets; },
	    "value", function(n) { return n.value; }
	];
	AugAssign.prototype._astname = "AugAssign";
	AugAssign.prototype._fields = [
	    "target", function(n) { return n.target; },
	    "op", function(n) { return n.op; },
	    "value", function(n) { return n.value; }
	];
	Print.prototype._astname = "Print";
	Print.prototype._fields = [
	    "dest", function(n) { return n.dest; },
	    "values", function(n) { return n.values; },
	    "nl", function(n) { return n.nl; }
	];
	For_.prototype._astname = "For";
	For_.prototype._fields = [
	    "target", function(n) { return n.target; },
	    "iter", function(n) { return n.iter; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	While_.prototype._astname = "While";
	While_.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	If_.prototype._astname = "If";
	If_.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	With_.prototype._astname = "With";
	With_.prototype._fields = [
	    "context_expr", function(n) { return n.context_expr; },
	    "optional_vars", function(n) { return n.optional_vars; },
	    "body", function(n) { return n.body; }
	];
	Raise.prototype._astname = "Raise";
	Raise.prototype._fields = [
	    "type", function(n) { return n.type; },
	    "inst", function(n) { return n.inst; },
	    "tback", function(n) { return n.tback; }
	];
	TryExcept.prototype._astname = "TryExcept";
	TryExcept.prototype._fields = [
	    "body", function(n) { return n.body; },
	    "handlers", function(n) { return n.handlers; },
	    "orelse", function(n) { return n.orelse; }
	];
	TryFinally.prototype._astname = "TryFinally";
	TryFinally.prototype._fields = [
	    "body", function(n) { return n.body; },
	    "finalbody", function(n) { return n.finalbody; }
	];
	Assert.prototype._astname = "Assert";
	Assert.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "msg", function(n) { return n.msg; }
	];
	Import_.prototype._astname = "Import";
	Import_.prototype._fields = [
	    "names", function(n) { return n.names; }
	];
	ImportFrom.prototype._astname = "ImportFrom";
	ImportFrom.prototype._fields = [
	    "module", function(n) { return n.module; },
	    "names", function(n) { return n.names; },
	    "level", function(n) { return n.level; }
	];
	Exec.prototype._astname = "Exec";
	Exec.prototype._fields = [
	    "body", function(n) { return n.body; },
	    "globals", function(n) { return n.globals; },
	    "locals", function(n) { return n.locals; }
	];
	Global.prototype._astname = "Global";
	Global.prototype._fields = [
	    "names", function(n) { return n.names; }
	];
	Expr.prototype._astname = "Expr";
	Expr.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Pass.prototype._astname = "Pass";
	Pass.prototype._fields = [
	];
	Break_.prototype._astname = "Break";
	Break_.prototype._fields = [
	];
	Continue_.prototype._astname = "Continue";
	Continue_.prototype._fields = [
	];
	Debugger_.prototype._astname = "Debugger";
	Debugger_.prototype._fields = [
	];
	BoolOp.prototype._astname = "BoolOp";
	BoolOp.prototype._fields = [
	    "op", function(n) { return n.op; },
	    "values", function(n) { return n.values; }
	];
	BinOp.prototype._astname = "BinOp";
	BinOp.prototype._fields = [
	    "left", function(n) { return n.left; },
	    "op", function(n) { return n.op; },
	    "right", function(n) { return n.right; }
	];
	UnaryOp.prototype._astname = "UnaryOp";
	UnaryOp.prototype._fields = [
	    "op", function(n) { return n.op; },
	    "operand", function(n) { return n.operand; }
	];
	Lambda.prototype._astname = "Lambda";
	Lambda.prototype._fields = [
	    "args", function(n) { return n.args; },
	    "body", function(n) { return n.body; }
	];
	IfExp.prototype._astname = "IfExp";
	IfExp.prototype._fields = [
	    "test", function(n) { return n.test; },
	    "body", function(n) { return n.body; },
	    "orelse", function(n) { return n.orelse; }
	];
	Dict.prototype._astname = "Dict";
	Dict.prototype._fields = [
	    "keys", function(n) { return n.keys; },
	    "values", function(n) { return n.values; }
	];
	Set.prototype._astname = "Set";
	Set.prototype._fields = [
	    "elts", function(n) { return n.elts; }
	];
	ListComp.prototype._astname = "ListComp";
	ListComp.prototype._fields = [
	    "elt", function(n) { return n.elt; },
	    "generators", function(n) { return n.generators; }
	];
	SetComp.prototype._astname = "SetComp";
	SetComp.prototype._fields = [
	    "elt", function(n) { return n.elt; },
	    "generators", function(n) { return n.generators; }
	];
	DictComp.prototype._astname = "DictComp";
	DictComp.prototype._fields = [
	    "key", function(n) { return n.key; },
	    "value", function(n) { return n.value; },
	    "generators", function(n) { return n.generators; }
	];
	GeneratorExp.prototype._astname = "GeneratorExp";
	GeneratorExp.prototype._fields = [
	    "elt", function(n) { return n.elt; },
	    "generators", function(n) { return n.generators; }
	];
	Yield.prototype._astname = "Yield";
	Yield.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Compare.prototype._astname = "Compare";
	Compare.prototype._fields = [
	    "left", function(n) { return n.left; },
	    "ops", function(n) { return n.ops; },
	    "comparators", function(n) { return n.comparators; }
	];
	Call.prototype._astname = "Call";
	Call.prototype._fields = [
	    "func", function(n) { return n.func; },
	    "args", function(n) { return n.args; },
	    "keywords", function(n) { return n.keywords; },
	    "starargs", function(n) { return n.starargs; },
	    "kwargs", function(n) { return n.kwargs; }
	];
	Repr.prototype._astname = "Repr";
	Repr.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	Num.prototype._astname = "Num";
	Num.prototype._fields = [
	    "n", function(n) { return n.n; }
	];
	Str.prototype._astname = "Str";
	Str.prototype._fields = [
	    "s", function(n) { return n.s; }
	];
	Attribute.prototype._astname = "Attribute";
	Attribute.prototype._fields = [
	    "value", function(n) { return n.value; },
	    "attr", function(n) { return n.attr; },
	    "ctx", function(n) { return n.ctx; }
	];
	Subscript.prototype._astname = "Subscript";
	Subscript.prototype._fields = [
	    "value", function(n) { return n.value; },
	    "slice", function(n) { return n.slice; },
	    "ctx", function(n) { return n.ctx; }
	];
	Name.prototype._astname = "Name";
	Name.prototype._fields = [
	    "id", function(n) { return n.id; },
	    "ctx", function(n) { return n.ctx; }
	];
	List.prototype._astname = "List";
	List.prototype._fields = [
	    "elts", function(n) { return n.elts; },
	    "ctx", function(n) { return n.ctx; }
	];
	Tuple.prototype._astname = "Tuple";
	Tuple.prototype._fields = [
	    "elts", function(n) { return n.elts; },
	    "ctx", function(n) { return n.ctx; }
	];
	Load.prototype._astname = "Load";
	Load.prototype._isenum = true;
	Store.prototype._astname = "Store";
	Store.prototype._isenum = true;
	Del.prototype._astname = "Del";
	Del.prototype._isenum = true;
	AugLoad.prototype._astname = "AugLoad";
	AugLoad.prototype._isenum = true;
	AugStore.prototype._astname = "AugStore";
	AugStore.prototype._isenum = true;
	Param.prototype._astname = "Param";
	Param.prototype._isenum = true;
	Ellipsis.prototype._astname = "Ellipsis";
	Ellipsis.prototype._fields = [
	];
	Slice.prototype._astname = "Slice";
	Slice.prototype._fields = [
	    "lower", function(n) { return n.lower; },
	    "upper", function(n) { return n.upper; },
	    "step", function(n) { return n.step; }
	];
	ExtSlice.prototype._astname = "ExtSlice";
	ExtSlice.prototype._fields = [
	    "dims", function(n) { return n.dims; }
	];
	Index.prototype._astname = "Index";
	Index.prototype._fields = [
	    "value", function(n) { return n.value; }
	];
	And.prototype._astname = "And";
	And.prototype._isenum = true;
	Or.prototype._astname = "Or";
	Or.prototype._isenum = true;
	Add.prototype._astname = "Add";
	Add.prototype._isenum = true;
	Sub.prototype._astname = "Sub";
	Sub.prototype._isenum = true;
	Mult.prototype._astname = "Mult";
	Mult.prototype._isenum = true;
	Div.prototype._astname = "Div";
	Div.prototype._isenum = true;
	Mod.prototype._astname = "Mod";
	Mod.prototype._isenum = true;
	Pow.prototype._astname = "Pow";
	Pow.prototype._isenum = true;
	LShift.prototype._astname = "LShift";
	LShift.prototype._isenum = true;
	RShift.prototype._astname = "RShift";
	RShift.prototype._isenum = true;
	BitOr.prototype._astname = "BitOr";
	BitOr.prototype._isenum = true;
	BitXor.prototype._astname = "BitXor";
	BitXor.prototype._isenum = true;
	BitAnd.prototype._astname = "BitAnd";
	BitAnd.prototype._isenum = true;
	FloorDiv.prototype._astname = "FloorDiv";
	FloorDiv.prototype._isenum = true;
	Invert.prototype._astname = "Invert";
	Invert.prototype._isenum = true;
	Not.prototype._astname = "Not";
	Not.prototype._isenum = true;
	UAdd.prototype._astname = "UAdd";
	UAdd.prototype._isenum = true;
	USub.prototype._astname = "USub";
	USub.prototype._isenum = true;
	Eq.prototype._astname = "Eq";
	Eq.prototype._isenum = true;
	NotEq.prototype._astname = "NotEq";
	NotEq.prototype._isenum = true;
	Lt.prototype._astname = "Lt";
	Lt.prototype._isenum = true;
	LtE.prototype._astname = "LtE";
	LtE.prototype._isenum = true;
	Gt.prototype._astname = "Gt";
	Gt.prototype._isenum = true;
	GtE.prototype._astname = "GtE";
	GtE.prototype._isenum = true;
	Is.prototype._astname = "Is";
	Is.prototype._isenum = true;
	IsNot.prototype._astname = "IsNot";
	IsNot.prototype._isenum = true;
	In_.prototype._astname = "In";
	In_.prototype._isenum = true;
	NotIn.prototype._astname = "NotIn";
	NotIn.prototype._isenum = true;
	comprehension.prototype._astname = "comprehension";
	comprehension.prototype._fields = [
	    "target", function(n) { return n.target; },
	    "iter", function(n) { return n.iter; },
	    "ifs", function(n) { return n.ifs; }
	];
	ExceptHandler.prototype._astname = "ExceptHandler";
	ExceptHandler.prototype._fields = [
	    "type", function(n) { return n.type; },
	    "name", function(n) { return n.name; },
	    "body", function(n) { return n.body; }
	];
	arguments_.prototype._astname = "arguments";
	arguments_.prototype._fields = [
	    "args", function(n) { return n.args; },
	    "vararg", function(n) { return n.vararg; },
	    "kwarg", function(n) { return n.kwarg; },
	    "defaults", function(n) { return n.defaults; }
	];
	keyword.prototype._astname = "keyword";
	keyword.prototype._fields = [
	    "arg", function(n) { return n.arg; },
	    "value", function(n) { return n.value; }
	];
	alias.prototype._astname = "alias";
	alias.prototype._fields = [
	    "name", function(n) { return n.name; },
	    "asname", function(n) { return n.asname; }
	];




	/* ---- /Users/rob/skulpty/lib/../node_modules/skulpt/src/ast.js ---- */ 

	//
	// This is pretty much a straight port of ast.c from CPython 2.6.5.
	//
	// The previous version was easier to work with and more JS-ish, but having a
	// somewhat different ast structure than cpython makes testing more difficult.
	//
	// This way, we can use a dump from the ast module on any arbitrary python
	// code and know that we're the same up to ast level, at least.
	//

	var SYM = Sk.ParseTables.sym;
	var TOK = Sk.Tokenizer.Tokens;
	var COMP_GENEXP = 0;
	var COMP_SETCOMP = 1;

	/** @constructor */
	function Compiling (encoding, filename, c_flags) {
	    this.c_encoding = encoding;
	    this.c_filename = filename;
	    this.c_flags = c_flags || 0;
	}

	/**
	 * @return {number}
	 */
	function NCH (n) {
	    goog.asserts.assert(n !== undefined);
	    if (n.children === null) {
	        return 0;
	    }
	    return n.children.length;
	}

	function CHILD (n, i) {
	    goog.asserts.assert(n !== undefined);
	    goog.asserts.assert(i !== undefined);
	    return n.children[i];
	}

	function REQ (n, type) {
	    goog.asserts.assert(n.type === type, "node wasn't expected type");
	}

	function strobj (s) {
	    goog.asserts.assert(typeof s === "string", "expecting string, got " + (typeof s));
	    return new Sk.builtin.str(s);
	}

	/** @return {number} */
	function numStmts (n) {
	    var ch;
	    var i;
	    var cnt;
	    switch (n.type) {
	        case SYM.single_input:
	            if (CHILD(n, 0).type === TOK.T_NEWLINE) {
	                return 0;
	            }
	            else {
	                return numStmts(CHILD(n, 0));
	            }
	        case SYM.file_input:
	            cnt = 0;
	            for (i = 0; i < NCH(n); ++i) {
	                ch = CHILD(n, i);
	                if (ch.type === SYM.stmt) {
	                    cnt += numStmts(ch);
	                }
	            }
	            return cnt;
	        case SYM.stmt:
	            return numStmts(CHILD(n, 0));
	        case SYM.compound_stmt:
	            return 1;
	        case SYM.simple_stmt:
	            return Math.floor(NCH(n) / 2); // div 2 is to remove count of ;s
	        case SYM.suite:
	            if (NCH(n) === 1) {
	                return numStmts(CHILD(n, 0));
	            }
	            else {
	                cnt = 0;
	                for (i = 2; i < NCH(n) - 1; ++i) {
	                    cnt += numStmts(CHILD(n, i));
	                }
	                return cnt;
	            }
	            break;
	        default:
	            goog.asserts.fail("Non-statement found");
	    }
	    return 0;
	}

	function forbiddenCheck (c, n, x, lineno) {
	    if (x === "None") {
	        throw new Sk.builtin.SyntaxError("assignment to None", c.c_filename, lineno, [], {node: n});
	    }
	    if (x === "True" || x === "False") {
	        throw new Sk.builtin.SyntaxError("assignment to True or False is forbidden", c.c_filename, lineno, [], {node: n});
	    }
	}

	/**
	 * Set the context ctx for e, recursively traversing e.
	 *
	 * Only sets context for expr kinds that can appear in assignment context as
	 * per the asdl file.
	 */
	function setContext (c, e, ctx, n) {
	    var i;
	    var exprName;
	    var s;
	    goog.asserts.assert(ctx !== AugStore && ctx !== AugLoad);
	    s = null;
	    exprName = null;

	    switch (e.constructor) {
	        case Attribute:
	        case Name:
	            if (ctx === Store) {
	                forbiddenCheck(c, n, e.attr, n.lineno);
	            }
	            e.ctx = ctx;
	            break;
	        case Subscript:
	            e.ctx = ctx;
	            break;
	        case List:
	            e.ctx = ctx;
	            s = e.elts;
	            break;
	        case Tuple:
	            if (e.elts.length === 0) {
	                throw new Sk.builtin.SyntaxError("can't assign to ()", c.c_filename, n.lineno, ctx, {node: n});
	            }
	            e.ctx = ctx;
	            s = e.elts;
	            break;
	        case Lambda:
	            exprName = "lambda";
	            break;
	        case Call:
	            exprName = "function call";
	            break;
	        case BoolOp:
	        case BinOp:
	        case UnaryOp:
	            exprName = "operator";
	            break;
	        case GeneratorExp:
	            exprName = "generator expression";
	            break;
	        case Yield:
	            exprName = "yield expression";
	            break;
	        case ListComp:
	            exprName = "list comprehension";
	            break;
	        case SetComp:
	            exprName = "set comprehension";
	            break;
	        case DictComp:
	            exprName = "dict comprehension";
	            break;
	        case Dict:
	        case Set:
	        case Num:
	        case Str:
	            exprName = "literal";
	            break;
	        case Compare:
	            exprName = "comparison";
	            break;
	        case Repr:
	            exprName = "repr";
	            break;
	        case IfExp:
	            exprName = "conditional expression";
	            break;
	        default:
	            goog.asserts.fail("unhandled expression in assignment");
	    }
	    if (exprName) {
	        throw new Sk.builtin.SyntaxError("can't " + (ctx === Store ? "assign to" : "delete") + " " + exprName, c.c_filename, n.lineno, [], {node: n});
	    }

	    if (s) {
	        for (i = 0; i < s.length; ++i) {
	            setContext(c, s[i], ctx, n);
	        }
	    }
	}

	var operatorMap = {};
	(function () {
	    operatorMap[TOK.T_VBAR] = BitOr;
	    operatorMap[TOK.T_CIRCUMFLEX] = BitXor;
	    operatorMap[TOK.T_AMPER] = BitAnd;
	    operatorMap[TOK.T_LEFTSHIFT] = LShift;
	    operatorMap[TOK.T_RIGHTSHIFT] = RShift;
	    operatorMap[TOK.T_PLUS] = Add;
	    operatorMap[TOK.T_MINUS] = Sub;
	    operatorMap[TOK.T_STAR] = Mult;
	    operatorMap[TOK.T_SLASH] = Div;
	    operatorMap[TOK.T_DOUBLESLASH] = FloorDiv;
	    operatorMap[TOK.T_PERCENT] = Mod;
	}());

	function getOperator (n) {
	    goog.asserts.assert(operatorMap[n.type] !== undefined);
	    return operatorMap[n.type];
	}

	function astForCompOp (c, n) {
	    /* comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'
	     |'is' 'not'
	     */
	    REQ(n, SYM.comp_op);
	    if (NCH(n) === 1) {
	        n = CHILD(n, 0);
	        switch (n.type) {
	            case TOK.T_LESS:
	                return Lt;
	            case TOK.T_GREATER:
	                return Gt;
	            case TOK.T_EQEQUAL:
	                return Eq;
	            case TOK.T_LESSEQUAL:
	                return LtE;
	            case TOK.T_GREATEREQUAL:
	                return GtE;
	            case TOK.T_NOTEQUAL:
	                return NotEq;
	            case TOK.T_NAME:
	                if (n.value === "in") {
	                    return In_;
	                }
	                if (n.value === "is") {
	                    return Is;
	                }
	        }
	    }
	    else if (NCH(n) === 2) {
	        if (CHILD(n, 0).type === TOK.T_NAME) {
	            if (CHILD(n, 1).value === "in") {
	                return NotIn;
	            }
	            if (CHILD(n, 0).value === "is") {
	                return IsNot;
	            }
	        }
	    }
	    goog.asserts.fail("invalid comp_op");
	}

	function seqForTestlist (c, n) {
	    /* testlist: test (',' test)* [','] */
	    var i;
	    var seq = [];
	    goog.asserts.assert(n.type === SYM.testlist ||
	        n.type === SYM.listmaker ||
	        n.type === SYM.testlist_comp ||
	        n.type === SYM.testlist_safe ||
	        n.type === SYM.testlist1);
	    for (i = 0; i < NCH(n); i += 2) {
	        goog.asserts.assert(CHILD(n, i).type === SYM.test || CHILD(n, i).type === SYM.old_test);
	        seq[i / 2] = astForExpr(c, CHILD(n, i));
	    }
	    return seq;
	}

	function astForSuite (c, n) {
	    /* suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT */
	    var j;
	    var num;
	    var i;
	    var end;
	    var ch;
	    var pos;
	    var seq;
	    REQ(n, SYM.suite);
	    seq = [];
	    pos = 0;
	    if (CHILD(n, 0).type === SYM.simple_stmt) {
	        n = CHILD(n, 0);
	        /* simple_stmt always ends with an NEWLINE and may have a trailing
	         * SEMI. */
	        end = NCH(n) - 1;
	        if (CHILD(n, end - 1).type === TOK.T_SEMI) {
	            end -= 1;
	        }
	        for (i = 0; i < end; i += 2) // by 2 to skip ;
	        {
	            seq[pos++] = astForStmt(c, CHILD(n, i));
	        }
	    }
	    else {
	        for (i = 2; i < NCH(n) - 1; ++i) {
	            ch = CHILD(n, i);
	            REQ(ch, SYM.stmt);
	            num = numStmts(ch);
	            if (num === 1) {
	                // small_stmt or compound_stmt w/ only 1 child
	                seq[pos++] = astForStmt(c, ch);
	            }
	            else {
	                ch = CHILD(ch, 0);
	                REQ(ch, SYM.simple_stmt);
	                for (j = 0; j < NCH(ch); j += 2) {
	                    if (NCH(CHILD(ch, j)) === 0) {
	                        goog.asserts.assert(j + 1 === NCH(ch));
	                        break;
	                    }
	                    seq[pos++] = astForStmt(c, CHILD(ch, j));
	                }
	            }
	        }
	    }
	    goog.asserts.assert(pos === numStmts(n));
	    return seq;
	}

	function astForExceptClause (c, exc, body) {
	    /* except_clause: 'except' [test [(',' | 'as') test]] */
	    var e;
	    REQ(exc, SYM.except_clause);
	    REQ(body, SYM.suite);
	    if (NCH(exc) === 1) {
	        return new ExceptHandler(null, null, astForSuite(c, body), exc.lineno, exc.col_offset);
	    }
	    else if (NCH(exc) === 2) {
	        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), null, astForSuite(c, body), exc.lineno, exc.col_offset);
	    }
	    else if (NCH(exc) === 4) {
	        e = astForExpr(c, CHILD(exc, 3));
	        setContext(c, e, Store, CHILD(exc, 3));
	        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), e, astForSuite(c, body), exc.lineno, exc.col_offset);
	    }
	    goog.asserts.fail("wrong number of children for except clause");
	}

	function astForTryStmt (c, n) {
	    var exceptSt;
	    var i;
	    var handlers;
	    var nc = NCH(n);
	    var nexcept = (nc - 3) / 3;
	    var body, orelse = [],
	        finally_ = null;

	    REQ(n, SYM.try_stmt);
	    body = astForSuite(c, CHILD(n, 2));
	    if (CHILD(n, nc - 3).type === TOK.T_NAME) {
	        if (CHILD(n, nc - 3).value === "finally") {
	            if (nc >= 9 && CHILD(n, nc - 6).type === TOK.T_NAME) {
	                /* we can assume it's an "else",
	                 because nc >= 9 for try-else-finally and
	                 it would otherwise have a type of except_clause */
	                orelse = astForSuite(c, CHILD(n, nc - 4));
	                nexcept--;
	            }

	            finally_ = astForSuite(c, CHILD(n, nc - 1));
	            nexcept--;
	        }
	        else {
	            /* we can assume it's an "else",
	             otherwise it would have a type of except_clause */
	            orelse = astForSuite(c, CHILD(n, nc - 1));
	            nexcept--;
	        }
	    }
	    else if (CHILD(n, nc - 3).type !== SYM.except_clause) {
	        throw new Sk.builtin.SyntaxError("malformed 'try' statement", c.c_filename, n.lineno);
	    }

	    if (nexcept > 0) {
	        handlers = [];
	        for (i = 0; i < nexcept; ++i) {
	            handlers[i] = astForExceptClause(c, CHILD(n, 3 + i * 3), CHILD(n, 5 + i * 3));
	        }
	        exceptSt = new TryExcept(body, handlers, orelse, n.lineno, n.col_offset);

	        if (!finally_) {
	            return exceptSt;
	        }

	        /* if a 'finally' is present too, we nest the TryExcept within a
	         TryFinally to emulate try ... except ... finally */
	        body = [exceptSt];
	    }

	    goog.asserts.assert(finally_ !== null);
	    return new TryFinally(body, finally_, n.lineno, n.col_offset);
	}


	function astForDottedName (c, n) {
	    var i;
	    var e;
	    var id;
	    var col_offset;
	    var lineno;
	    REQ(n, SYM.dotted_name);
	    lineno = n.lineno;
	    col_offset = n.col_offset;
	    id = strobj(CHILD(n, 0).value);
	    e = new Name(id, Load, lineno, col_offset);
	    for (i = 2; i < NCH(n); i += 2) {
	        id = strobj(CHILD(n, i).value);
	        e = new Attribute(e, id, Load, lineno, col_offset);
	    }
	    return e;
	}

	function astForDecorator (c, n) {
	    /* decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE */
	    var nameExpr;
	    REQ(n, SYM.decorator);
	    REQ(CHILD(n, 0), TOK.T_AT);
	    REQ(CHILD(n, NCH(n) - 1), TOK.T_NEWLINE);
	    nameExpr = astForDottedName(c, CHILD(n, 1));
	    if (NCH(n) === 3) // no args
	    {
	        return nameExpr;
	    }
	    else if (NCH(n) === 5) // call with no args
	    {
	        return new Call(nameExpr, [], [], null, null, n.lineno, n.col_offset);
	    }
	    else {
	        return astForCall(c, CHILD(n, 3), nameExpr);
	    }
	}

	function astForDecorators (c, n) {
	    var i;
	    var decoratorSeq;
	    REQ(n, SYM.decorators);
	    decoratorSeq = [];
	    for (i = 0; i < NCH(n); ++i) {
	        decoratorSeq[i] = astForDecorator(c, CHILD(n, i));
	    }
	    return decoratorSeq;
	}

	function astForDecorated (c, n) {
	    var thing;
	    var decoratorSeq;
	    REQ(n, SYM.decorated);
	    decoratorSeq = astForDecorators(c, CHILD(n, 0));
	    goog.asserts.assert(CHILD(n, 1).type === SYM.funcdef || CHILD(n, 1).type === SYM.classdef);

	    thing = null;
	    if (CHILD(n, 1).type === SYM.funcdef) {
	        thing = astForFuncdef(c, CHILD(n, 1), decoratorSeq);
	    }
	    else if (CHILD(n, 1) === SYM.classdef) {
	        thing = astForClassdef(c, CHILD(n, 1), decoratorSeq);
	    }
	    if (thing) {
	        thing.lineno = n.lineno;
	        thing.col_offset = n.col_offset;
	    }
	    return thing;
	}

	//note: with statements need to be updated to 2.7
	//see: ast.c lines: 3127 -> 3185

	function astForWithVar (c, n) {
	    REQ(n, SYM.with_item);
	    return astForExpr(c, CHILD(n, 1));
	}

	function astForWithStmt (c, n) {
	    /* with_stmt: 'with' test [ with_var ] ':' suite */
	    var optionalVars;
	    var contextExpr;
	    var suiteIndex = 3; // skip with, test, :
	    goog.asserts.assert(n.type === SYM.with_stmt);
	    contextExpr = astForExpr(c, CHILD(n, 1));
	    if (CHILD(n, 2).type === SYM.with_item) {
	        optionalVars = astForWithVar(c, CHILD(n, 2));
	        setContext(c, optionalVars, Store, n);
	        suiteIndex = 4;
	    }
	    return new With_(contextExpr, optionalVars, astForSuite(c, CHILD(n, suiteIndex)), n.lineno, n.col_offset);
	}

	function astForExecStmt (c, n) {
	    var expr1, globals = null, locals = null;
	    var nchildren = NCH(n);
	    goog.asserts.assert(nchildren === 2 || nchildren === 4 || nchildren === 6);

	    /* exec_stmt: 'exec' expr ['in' test [',' test]] */
	    REQ(n, SYM.exec_stmt);
	    expr1 = astForExpr(c, CHILD(n, 1));
	    if (nchildren >= 4) {
	        globals = astForExpr(c, CHILD(n, 3));
	    }
	    if (nchildren === 6) {
	        locals = astForExpr(c, CHILD(n, 5));
	    }
	    return new Exec(expr1, globals, locals, n.lineno, n.col_offset);
	}

	function astForIfStmt (c, n) {
	    /* if_stmt: 'if' test ':' suite ('elif' test ':' suite)*
	     ['else' ':' suite]
	     */
	    var off;
	    var i;
	    var orelse;
	    var hasElse;
	    var nElif;
	    var decider;
	    var s;
	    REQ(n, SYM.if_stmt);
	    if (NCH(n) === 4) {
	        return new If_(
	            astForExpr(c, CHILD(n, 1)),
	            astForSuite(c, CHILD(n, 3)),
	            [], n.lineno, n.col_offset);
	    }

	    s = CHILD(n, 4).value;
	    decider = s.charAt(2); // elSe or elIf
	    if (decider === "s") {
	        return new If_(
	            astForExpr(c, CHILD(n, 1)),
	            astForSuite(c, CHILD(n, 3)),
	            astForSuite(c, CHILD(n, 6)),
	            n.lineno, n.col_offset);
	    }
	    else if (decider === "i") {
	        nElif = NCH(n) - 4;
	        hasElse = false;
	        orelse = [];

	        /* must reference the child nElif+1 since 'else' token is third, not
	         * fourth child from the end. */
	        if (CHILD(n, nElif + 1).type === TOK.T_NAME &&
	            CHILD(n, nElif + 1).value.charAt(2) === "s") {
	            hasElse = true;
	            nElif -= 3;
	        }
	        nElif /= 4;

	        if (hasElse) {
	            orelse = [
	                new If_(
	                    astForExpr(c, CHILD(n, NCH(n) - 6)),
	                    astForSuite(c, CHILD(n, NCH(n) - 4)),
	                    astForSuite(c, CHILD(n, NCH(n) - 1)),
	                    CHILD(n, NCH(n) - 6).lineno,
	                    CHILD(n, NCH(n) - 6).col_offset)];
	            nElif--;
	        }

	        for (i = 0; i < nElif; ++i) {
	            off = 5 + (nElif - i - 1) * 4;
	            orelse = [
	                new If_(
	                    astForExpr(c, CHILD(n, off)),
	                    astForSuite(c, CHILD(n, off + 2)),
	                    orelse,
	                    CHILD(n, off).lineno,
	                    CHILD(n, off).col_offset)];
	        }
	        return new If_(
	            astForExpr(c, CHILD(n, 1)),
	            astForSuite(c, CHILD(n, 3)),
	            orelse, n.lineno, n.col_offset);
	    }

	    goog.asserts.fail("unexpected token in 'if' statement");
	}

	function astForExprlist (c, n, context) {
	    var e;
	    var i;
	    var seq;
	    REQ(n, SYM.exprlist);
	    seq = [];
	    for (i = 0; i < NCH(n); i += 2) {
	        e = astForExpr(c, CHILD(n, i));
	        seq[i / 2] = e;
	        if (context) {
	            setContext(c, e, context, CHILD(n, i));
	        }
	    }
	    return seq;
	}

	function astForDelStmt (c, n) {
	    /* del_stmt: 'del' exprlist */
	    REQ(n, SYM.del_stmt);
	    return new Delete_(astForExprlist(c, CHILD(n, 1), Del), n.lineno, n.col_offset);
	}

	function astForGlobalStmt (c, n) {
	    /* global_stmt: 'global' NAME (',' NAME)* */
	    var i;
	    var s = [];
	    REQ(n, SYM.global_stmt);
	    for (i = 1; i < NCH(n); i += 2) {
	        s[(i - 1) / 2] = strobj(CHILD(n, i).value);
	    }
	    return new Global(s, n.lineno, n.col_offset);
	}

	function astForAssertStmt (c, n) {
	    /* assert_stmt: 'assert' test [',' test] */
	    REQ(n, SYM.assert_stmt);
	    if (NCH(n) === 2) {
	        return new Assert(astForExpr(c, CHILD(n, 1)), null, n.lineno, n.col_offset);
	    }
	    else if (NCH(n) === 4) {
	        return new Assert(astForExpr(c, CHILD(n, 1)), astForExpr(c, CHILD(n, 3)), n.lineno, n.col_offset);
	    }
	    goog.asserts.fail("improper number of parts to assert stmt");
	}

	function aliasForImportName (c, n) {
	    /*
	     import_as_name: NAME ['as' NAME]
	     dotted_as_name: dotted_name ['as' NAME]
	     dotted_name: NAME ('.' NAME)*
	     */

	    var i;
	    var a;
	    var name;
	    var str;
	    loop: while (true) {
	        switch (n.type) {
	            case SYM.import_as_name:
	                str = null;
	                name = strobj(CHILD(n, 0).value);
	                if (NCH(n) === 3) {
	                    str = CHILD(n, 2).value;
	                }
	                return new alias(name, str == null ? null : strobj(str));
	            case SYM.dotted_as_name:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue loop;
	                }
	                else {
	                    a = aliasForImportName(c, CHILD(n, 0));
	                    goog.asserts.assert(!a.asname);
	                    a.asname = strobj(CHILD(n, 2).value);
	                    return a;
	                }
	                break;
	            case SYM.dotted_name:
	                if (NCH(n) === 1) {
	                    return new alias(strobj(CHILD(n, 0).value), null);
	                }
	                else {
	                    // create a string of the form a.b.c
	                    str = "";
	                    for (i = 0; i < NCH(n); i += 2) {
	                        str += CHILD(n, i).value + ".";
	                    }
	                    return new alias(strobj(str.substr(0, str.length - 1)), null);
	                }
	                break;
	            case TOK.T_STAR:
	                return new alias(strobj("*"), null);
	            default:
	                throw new Sk.builtin.SyntaxError("unexpected import name", c.c_filename, n.lineno);
	        }
	        break;
	    }
	}

	function astForImportStmt (c, n) {
	    /*
	     import_stmt: import_name | import_from
	     import_name: 'import' dotted_as_names
	     import_from: 'from' ('.'* dotted_name | '.') 'import'
	     ('*' | '(' import_as_names ')' | import_as_names)
	     */
	    var modname;
	    var idx;
	    var nchildren;
	    var ndots;
	    var mod;
	    var i;
	    var aliases;
	    var col_offset;
	    var lineno;
	    REQ(n, SYM.import_stmt);
	    lineno = n.lineno;
	    col_offset = n.col_offset;
	    n = CHILD(n, 0);
	    if (n.type === SYM.import_name) {
	        n = CHILD(n, 1);
	        REQ(n, SYM.dotted_as_names);
	        aliases = [];
	        for (i = 0; i < NCH(n); i += 2) {
	            aliases[i / 2] = aliasForImportName(c, CHILD(n, i));
	        }
	        return new Import_(aliases, lineno, col_offset);
	    }
	    else if (n.type === SYM.import_from) {
	        mod = null;
	        ndots = 0;

	        for (idx = 1; idx < NCH(n); ++idx) {
	            if (CHILD(n, idx).type === SYM.dotted_name) {
	                mod = aliasForImportName(c, CHILD(n, idx));
	                idx++;
	                break;
	            }
	            else if (CHILD(n, idx).type !== TOK.T_DOT) {
	                break;
	            }
	            ndots++;
	        }
	        ++idx; // skip the import keyword
	        switch (CHILD(n, idx).type) {
	            case TOK.T_STAR:
	                // from ... import
	                n = CHILD(n, idx);
	                nchildren = 1;
	                break;
	            case TOK.T_LPAR:
	                // from ... import (x, y, z)
	                n = CHILD(n, idx + 1);
	                nchildren = NCH(n);
	                break;
	            case SYM.import_as_names:
	                // from ... import x, y, z
	                n = CHILD(n, idx);
	                nchildren = NCH(n);
	                if (nchildren % 2 === 0) {
	                    throw new Sk.builtin.SyntaxError("trailing comma not allowed without surrounding parentheses", c.c_filename, n.lineno);
	                }
	                break;
	            default:
	                throw new Sk.builtin.SyntaxError("Unexpected node-type in from-import", c.c_filename, n.lineno);
	        }
	        aliases = [];
	        if (n.type === TOK.T_STAR) {
	            aliases[0] = aliasForImportName(c, n);
	        }
	        else {
	            for (i = 0; i < NCH(n); i += 2) {
	                aliases[i / 2] = aliasForImportName(c, CHILD(n, i));
	            }
	        }
	        modname = mod ? mod.name.v : "";
	        return new ImportFrom(strobj(modname), aliases, ndots, lineno, col_offset);
	    }
	    throw new Sk.builtin.SyntaxError("unknown import statement", c.c_filename, n.lineno);
	}

	function astForTestlistComp(c, n) {
	    /* testlist_comp: test ( comp_for | (',' test)* [','] ) */
	    /* argument: test [comp_for] */
	    goog.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);
	    if (NCH(n) > 1 && CHILD(n, 1).type === SYM.comp_for) {
	        return astForGenExpr(c, n);
	    }
	    return astForTestlist(c, n);
	}

	function astForListcomp (c, n) {
	    /* listmaker: test ( list_for | (',' test)* [','] )
	     list_for: 'for' exprlist 'in' testlist_safe [list_iter]
	     list_iter: list_for | list_if
	     list_if: 'if' test [list_iter]
	     testlist_safe: test [(',' test)+ [',']]
	     */

	    function countListFors (c, n) {
	        var nfors = 0;
	        var ch = CHILD(n, 1);
	        count_list_for: while (true) {
	            nfors++;
	            REQ(ch, SYM.list_for);
	            if (NCH(ch) === 5) {
	                ch = CHILD(ch, 4);
	            }
	            else {
	                return nfors;
	            }
	            count_list_iter: while (true) {
	                REQ(ch, SYM.list_iter);
	                ch = CHILD(ch, 0);
	                if (ch.type === SYM.list_for) {
	                    continue count_list_for;
	                }
	                else if (ch.type === SYM.list_if) {
	                    if (NCH(ch) === 3) {
	                        ch = CHILD(ch, 2);
	                        continue count_list_iter;
	                    }
	                    else {
	                        return nfors;
	                    }
	                }
	                break;
	            }
	            break;
	        }
	    }

	    function countListIfs (c, n) {
	        var nifs = 0;
	        while (true) {
	            REQ(n, SYM.list_iter);
	            if (CHILD(n, 0).type === SYM.list_for) {
	                return nifs;
	            }
	            n = CHILD(n, 0);
	            REQ(n, SYM.list_if);
	            nifs++;
	            if (NCH(n) == 2) {
	                return nifs;
	            }
	            n = CHILD(n, 2);
	        }
	    }

	    var j;
	    var ifs;
	    var nifs;
	    var lc;
	    var expression;
	    var t;
	    var forch;
	    var i;
	    var ch;
	    var listcomps;
	    var nfors;
	    var elt;
	    REQ(n, SYM.listmaker);
	    goog.asserts.assert(NCH(n) > 1);
	    elt = astForExpr(c, CHILD(n, 0));
	    nfors = countListFors(c, n);
	    listcomps = [];
	    ch = CHILD(n, 1);
	    for (i = 0; i < nfors; ++i) {
	        REQ(ch, SYM.list_for);
	        forch = CHILD(ch, 1);
	        t = astForExprlist(c, forch, Store);
	        expression = astForTestlist(c, CHILD(ch, 3));
	        if (NCH(forch) === 1) {
	            lc = new comprehension(t[0], expression, []);
	        }
	        else {
	            lc = new comprehension(new Tuple(t, Store, ch.lineno, ch.col_offset), expression, []);
	        }

	        if (NCH(ch) === 5) {
	            ch = CHILD(ch, 4);
	            nifs = countListIfs(c, ch);
	            ifs = [];
	            for (j = 0; j < nifs; ++j) {
	                REQ(ch, SYM.list_iter);
	                ch = CHILD(ch, 0);
	                REQ(ch, SYM.list_if);
	                ifs[j] = astForExpr(c, CHILD(ch, 1));
	                if (NCH(ch) === 3) {
	                    ch = CHILD(ch, 2);
	                }
	            }
	            if (ch.type === SYM.list_iter) {
	                ch = CHILD(ch, 0);
	            }
	            lc.ifs = ifs;
	        }
	        listcomps[i] = lc;
	    }
	    return new ListComp(elt, listcomps, n.lineno, n.col_offset);
	}

	function astForFactor (c, n) {
	    /* some random peephole thing that cpy does */
	    var expression;
	    var pnum;
	    var patom;
	    var ppower;
	    var pfactor;
	    if (CHILD(n, 0).type === TOK.T_MINUS && NCH(n) === 2) {
	        pfactor = CHILD(n, 1);
	        if (pfactor.type === SYM.factor && NCH(pfactor) === 1) {
	            ppower = CHILD(pfactor, 0);
	            if (ppower.type === SYM.power && NCH(ppower) === 1) {
	                patom = CHILD(ppower, 0);
	                if (patom.type === SYM.atom) {
	                    pnum = CHILD(patom, 0);
	                    if (pnum.type === TOK.T_NUMBER) {
	                        pnum.value = "-" + pnum.value;
	                        return astForAtom(c, patom);
	                    }
	                }
	            }
	        }
	    }

	    expression = astForExpr(c, CHILD(n, 1));
	    switch (CHILD(n, 0).type) {
	        case TOK.T_PLUS:
	            return new UnaryOp(UAdd, expression, n.lineno, n.col_offset);
	        case TOK.T_MINUS:
	            return new UnaryOp(USub, expression, n.lineno, n.col_offset);
	        case TOK.T_TILDE:
	            return new UnaryOp(Invert, expression, n.lineno, n.col_offset);
	    }

	    goog.asserts.fail("unhandled factor");
	}

	function astForForStmt (c, n) {
	    /* for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite] */
	    var target;
	    var _target;
	    var nodeTarget;
	    var seq = [];
	    REQ(n, SYM.for_stmt);
	    if (NCH(n) === 9) {
	        seq = astForSuite(c, CHILD(n, 8));
	    }
	    nodeTarget = CHILD(n, 1);
	    _target = astForExprlist(c, nodeTarget, Store);
	    if (NCH(nodeTarget) === 1) {
	        target = _target[0];
	    }
	    else {
	        target = new Tuple(_target, Store, n.lineno, n.col_offset);
	    }

	    return new For_(target,
	        astForTestlist(c, CHILD(n, 3)),
	        astForSuite(c, CHILD(n, 5)),
	        seq, n.lineno, n.col_offset);
	}

	function astForCall (c, n, func) {
	    /*
	      arglist: (argument ',')* (argument [',']| '*' test [',' '**' test]
	               | '**' test)
	      argument: test [comp_for] | test '=' test       # Really [keyword '='] test
	    */
	    var tmp;
	    var k;
	    var key;
	    var e;
	    var kwarg;
	    var vararg;
	    var keywords;
	    var args;
	    var ch;
	    var i;
	    var ngens;
	    var nkeywords;
	    var nargs;

	    REQ(n, SYM.arglist);
	    nargs = 0;
	    nkeywords = 0;
	    ngens = 0;
	    for (i = 0; i < NCH(n); i++) {
	        ch = CHILD(n, i);
	        if (ch.type === SYM.argument) {
	            if (NCH(ch) === 1) {
	                nargs++;
	            }
	            else if (CHILD(ch, 1).type === SYM.comp_for) {
	                ngens++;
	            }
	            else {
	                nkeywords++;
	            }
	        }
	    }
	    if (ngens > 1 || (ngens && (nargs || nkeywords))) {
	        throw new Sk.builtin.SyntaxError("Generator expression must be parenthesized if not sole argument", c.c_filename, n.lineno);
	    }
	    if (nargs + nkeywords + ngens > 255) {
	        throw new Sk.builtin.SyntaxError("more than 255 arguments", c.c_filename, n.lineno);
	    }
	    args = [];
	    keywords = [];
	    nargs = 0;
	    nkeywords = 0;
	    vararg = null;
	    kwarg = null;
	    for (i = 0; i < NCH(n); i++) {
	        ch = CHILD(n, i);
	        if (ch.type === SYM.argument) {
	            if (NCH(ch) === 1) {
	                if (nkeywords) {
	                    throw new Sk.builtin.SyntaxError("non-keyword arg after keyword arg", c.c_filename, n.lineno);
	                }
	                if (vararg) {
	                    throw new Sk.builtin.SyntaxError("only named arguments may follow *expression", c.c_filename, n.lineno);
	                }
	                args[nargs++] = astForExpr(c, CHILD(ch, 0));
	            }
	            else if (CHILD(ch, 1).type === SYM.comp_for) {
	                args[nargs++] = astForGenExpr(c, ch);
	            }
	            else {
	                e = astForExpr(c, CHILD(ch, 0));
	                if (e.constructor === Lambda) {
	                    throw new Sk.builtin.SyntaxError("lambda cannot contain assignment", c.c_filename, n.lineno);
	                }
	                else if (e.constructor !== Name) {
	                    throw new Sk.builtin.SyntaxError("keyword can't be an expression", c.c_filename, n.lineno);
	                }
	                key = e.id;
	                forbiddenCheck(c, CHILD(ch, 0), key, n.lineno);
	                for (k = 0; k < nkeywords; ++k) {
	                    tmp = keywords[k].arg;
	                    if (tmp === key) {
	                        throw new Sk.builtin.SyntaxError("keyword argument repeated", c.c_filename, n.lineno);
	                    }
	                }
	                keywords[nkeywords++] = new keyword(key, astForExpr(c, CHILD(ch, 2)));
	            }
	        }
	        else if (ch.type === TOK.T_STAR) {
	            vararg = astForExpr(c, CHILD(n, ++i));
	        }
	        else if (ch.type === TOK.T_DOUBLESTAR) {
	            kwarg = astForExpr(c, CHILD(n, ++i));
	        }
	    }
	    return new Call(func, args, keywords, vararg, kwarg, func.lineno, func.col_offset);
	}

	function astForTrailer (c, n, leftExpr) {
	    /* trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME 
	     subscriptlist: subscript (',' subscript)* [',']
	     subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
	     */
	    var e;
	    var elts;
	    var slc;
	    var j;
	    var slices;
	    var simple;
	    REQ(n, SYM.trailer);
	    if (CHILD(n, 0).type === TOK.T_LPAR) {
	        if (NCH(n) === 2) {
	            return new Call(leftExpr, [], [], null, null, n.lineno, n.col_offset);
	        }
	        else {
	            return astForCall(c, CHILD(n, 1), leftExpr);
	        }
	    }
	    else if (CHILD(n, 0).type === TOK.T_DOT) {
	        return new Attribute(leftExpr, strobj(CHILD(n, 1).value), Load, n.lineno, n.col_offset);
	    }
	    else {
	        REQ(CHILD(n, 0), TOK.T_LSQB);
	        REQ(CHILD(n, 2), TOK.T_RSQB);
	        n = CHILD(n, 1);
	        if (NCH(n) === 1) {
	            return new Subscript(leftExpr, astForSlice(c, CHILD(n, 0)), Load, n.lineno, n.col_offset);
	        }
	        else {
	            /* The grammar is ambiguous here. The ambiguity is resolved 
	             by treating the sequence as a tuple literal if there are
	             no slice features.
	             */
	            simple = true;
	            slices = [];
	            for (j = 0; j < NCH(n); j += 2) {
	                slc = astForSlice(c, CHILD(n, j));
	                if (slc.constructor !== Index) {
	                    simple = false;
	                }
	                slices[j / 2] = slc;
	            }
	            if (!simple) {
	                return new Subscript(leftExpr, new ExtSlice(slices), Load, n.lineno, n.col_offset);
	            }
	            elts = [];
	            for (j = 0; j < slices.length; ++j) {
	                slc = slices[j];
	                goog.asserts.assert(slc.constructor === Index && slc.value !== null && slc.value !== undefined);
	                elts[j] = slc.value;
	            }
	            e = new Tuple(elts, Load, n.lineno, n.col_offset);
	            return new Subscript(leftExpr, new Index(e), Load, n.lineno, n.col_offset);
	        }
	    }
	}

	function astForFlowStmt (c, n) {
	    /*
	     flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
	     | yield_stmt
	     break_stmt: 'break'
	     continue_stmt: 'continue'
	     return_stmt: 'return' [testlist]
	     yield_stmt: yield_expr
	     yield_expr: 'yield' testlist
	     raise_stmt: 'raise' [test [',' test [',' test]]]
	     */
	    var ch;
	    REQ(n, SYM.flow_stmt);
	    ch = CHILD(n, 0);
	    switch (ch.type) {
	        case SYM.break_stmt:
	            return new Break_(n.lineno, n.col_offset);
	        case SYM.continue_stmt:
	            return new Continue_(n.lineno, n.col_offset);
	        case SYM.yield_stmt:
	            return new Expr(astForExpr(c, CHILD(ch, 0)), n.lineno, n.col_offset);
	        case SYM.return_stmt:
	            if (NCH(ch) === 1) {
	                return new Return_(null, n.lineno, n.col_offset);
	            }
	            else {
	                return new Return_(astForTestlist(c, CHILD(ch, 1)), n.lineno, n.col_offset);
	            }
	            break;
	        case SYM.raise_stmt:
	            if (NCH(ch) === 1) {
	                return new Raise(null, null, null, n.lineno, n.col_offset);
	            }
	            else if (NCH(ch) === 2) {
	                return new Raise(astForExpr(c, CHILD(ch, 1)), null, null, n.lineno, n.col_offset);
	            }
	            else if (NCH(ch) === 4) {
	                return new Raise(
	                    astForExpr(c, CHILD(ch, 1)),
	                    astForExpr(c, CHILD(ch, 3)),
	                    null, n.lineno, n.col_offset);
	            }
	            else if (NCH(ch) === 6) {
	                return new Raise(
	                    astForExpr(c, CHILD(ch, 1)),
	                    astForExpr(c, CHILD(ch, 3)),
	                    astForExpr(c, CHILD(ch, 5)),
	                    n.lineno, n.col_offset);
	            }
	            break;
	        default:
	            goog.asserts.fail("unexpected flow_stmt");
	    }
	    goog.asserts.fail("unhandled flow statement");
	}

	function astForArguments (c, n) {
	    /* parameters: '(' [varargslist] ')'
	     varargslist: (fpdef ['=' test] ',')* ('*' NAME [',' '**' NAME]
	     | '**' NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [',']
	     */
	    var parenthesized;
	    var id;
	    var complexArgs;
	    var k;
	    var j;
	    var i;
	    var foundDefault;
	    var defaults;
	    var args;
	    var ch;
	    var vararg = null;
	    var kwarg = null;
	    if (n.type === SYM.parameters) {
	        if (NCH(n) === 2) // () as arglist
	        {
	            return new arguments_([], null, null, []);
	        }
	        n = CHILD(n, 1);
	    }
	    REQ(n, SYM.varargslist);

	    args = [];
	    defaults = [];

	    /* fpdef: NAME | '(' fplist ')'
	     fplist: fpdef (',' fpdef)* [',']
	     */
	    foundDefault = false;
	    i = 0;
	    j = 0; // index for defaults
	    k = 0; // index for args
	    while (i < NCH(n)) {
	        ch = CHILD(n, i);
	        switch (ch.type) {
	            case SYM.fpdef:
	                complexArgs = 0;
	                parenthesized = 0;
	                handle_fpdef: while (true) {
	                    if (i + 1 < NCH(n) && CHILD(n, i + 1).type === TOK.T_EQUAL) {
	                        defaults[j++] = astForExpr(c, CHILD(n, i + 2));
	                        i += 2;
	                        foundDefault = true;
	                    }
	                    else if (foundDefault) {
	                        /* def f((x)=4): pass should raise an error.
	                         def f((x, (y))): pass will just incur the tuple unpacking warning. */
	                        if (parenthesized && !complexArgs) {
	                            throw new Sk.builtin.SyntaxError("parenthesized arg with default", c.c_filename, n.lineno);
	                        }
	                        throw new Sk.builtin.SyntaxError("non-default argument follows default argument", c.c_filename, n.lineno);
	                    }

	                    if (NCH(ch) === 3) {
	                        ch = CHILD(ch, 1);
	                        // def foo((x)): is not complex, special case.
	                        if (NCH(ch) !== 1) {
	                            throw new Sk.builtin.SyntaxError("tuple parameter unpacking has been removed", c.c_filename, n.lineno);
	                        }
	                        else {
	                            /* def foo((x)): setup for checking NAME below. */
	                            /* Loop because there can be many parens and tuple
	                             unpacking mixed in. */
	                            parenthesized = true;
	                            ch = CHILD(ch, 0);
	                            goog.asserts.assert(ch.type === SYM.fpdef);
	                            continue handle_fpdef;
	                        }
	                    }
	                    if (CHILD(ch, 0).type === TOK.T_NAME) {
	                        forbiddenCheck(c, n, CHILD(ch, 0).value, n.lineno);
	                        id = strobj(CHILD(ch, 0).value);
	                        args[k++] = new Name(id, Param, ch.lineno, ch.col_offset);
	                    }
	                    i += 2;
	                    if (parenthesized) {
	                        throw new Sk.builtin.SyntaxError("parenthesized argument names are invalid", c.c_filename, n.lineno);
	                    }
	                    break;
	                }
	                break;
	            case TOK.T_STAR:
	                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.lineno);
	                vararg = strobj(CHILD(n, i + 1).value);
	                i += 3;
	                break;
	            case TOK.T_DOUBLESTAR:
	                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.lineno);
	                kwarg = strobj(CHILD(n, i + 1).value);
	                i += 3;
	                break;
	            default:
	                goog.asserts.fail("unexpected node in varargslist");
	        }
	    }
	    return new arguments_(args, vararg, kwarg, defaults);
	}

	function astForFuncdef (c, n, decoratorSeq) {
	    /* funcdef: 'def' NAME parameters ':' suite */
	    var body;
	    var args;
	    var name;
	    REQ(n, SYM.funcdef);
	    name = strobj(CHILD(n, 1).value);
	    forbiddenCheck(c, CHILD(n, 1), CHILD(n, 1).value, n.lineno);
	    args = astForArguments(c, CHILD(n, 2));
	    body = astForSuite(c, CHILD(n, 4));
	    return new FunctionDef(name, args, body, decoratorSeq, n.lineno, n.col_offset);
	}

	function astForClassBases (c, n) {
	    /* testlist: test (',' test)* [','] */
	    goog.asserts.assert(NCH(n) > 0);
	    REQ(n, SYM.testlist);
	    if (NCH(n) === 1) {
	        return [ astForExpr(c, CHILD(n, 0)) ];
	    }
	    return seqForTestlist(c, n);
	}

	function astForClassdef (c, n, decoratorSeq) {
	    /* classdef: 'class' NAME ['(' testlist ')'] ':' suite */
	    var s;
	    var bases;
	    var classname;
	    REQ(n, SYM.classdef);
	    forbiddenCheck(c, n, CHILD(n, 1).value, n.lineno);
	    classname = strobj(CHILD(n, 1).value);
	    if (NCH(n) === 4) {
	        return new ClassDef(classname, [], astForSuite(c, CHILD(n, 3)), decoratorSeq, n.lineno, n.col_offset);
	    }
	    if (CHILD(n, 3).type === TOK.T_RPAR) {
	        return new ClassDef(classname, [], astForSuite(c, CHILD(n, 5)), decoratorSeq, n.lineno, n.col_offset);
	    }

	    bases = astForClassBases(c, CHILD(n, 3));
	    s = astForSuite(c, CHILD(n, 6));
	    return new ClassDef(classname, bases, s, decoratorSeq, n.lineno, n.col_offset);
	}

	function astForLambdef (c, n) {
	    /* lambdef: 'lambda' [varargslist] ':' test */
	    var args;
	    var expression;
	    if (NCH(n) === 3) {
	        args = new arguments_([], null, null, []);
	        expression = astForExpr(c, CHILD(n, 2));
	    }
	    else {
	        args = astForArguments(c, CHILD(n, 1));
	        expression = astForExpr(c, CHILD(n, 3));
	    }
	    return new Lambda(args, expression, n.lineno, n.col_offset);
	}

	function astForComprehension(c, n) {
	    /* testlist_comp: test ( comp_for | (',' test)* [','] )
	       argument: test [comp_for] | test '=' test       # Really [keyword '='] test */
	    
	    var j;
	    var ifs;
	    var nifs;
	    var ge;
	    var expression;
	    var t;
	    var forch;
	    var i;
	    var ch;
	    var genexps;
	    var nfors;
	    var elt;
	    var comps;
	    var comp;

	    function countCompFors(c, n) {
	        var nfors = 0;
	        count_comp_for: while (true) {
	            nfors++;
	            REQ(n, SYM.comp_for);
	            if (NCH(n) === 5) {
	                n = CHILD(n, 4);
	            } else {
	                return nfors;
	            }
	            count_comp_iter: while (true) {
	                REQ(n, SYM.comp_iter);
	                n = CHILD(n, 0);
	                if (n.type === SYM.comp_for) {
	                    continue count_comp_for;
	                } else if (n.type === SYM.comp_if) {
	                    if (NCH(n) === 3) {
	                        n = CHILD(n, 2);
	                        continue count_comp_iter;
	                    } else {
	                        return nfors;
	                    }
	                }
	                break;
	            }
	            break;
	        }
	        goog.asserts.fail("logic error in countCompFors");
	    }

	    function countCompIfs(c, n) {
	        var nifs = 0;
	        while (true) {
	            REQ(n, SYM.comp_iter);
	            if (CHILD(n, 0).type === SYM.comp_for) {
	                return nifs;
	            }
	            n = CHILD(n, 0);
	            REQ(n, SYM.comp_if);
	            nifs++;
	            if (NCH(n) == 2) {
	                return nifs;
	            }
	            n = CHILD(n, 2);
	        }
	    }

	    nfors = countCompFors(c, n);
	    comps = [];
	    for (i = 0; i < nfors; ++i) {
	        REQ(n, SYM.comp_for);
	        forch = CHILD(n, 1);
	        t = astForExprlist(c, forch, Store);
	        expression = astForExpr(c, CHILD(n, 3));
	        if (NCH(forch) === 1) {
	            comp = new comprehension(t[0], expression, []);
	        } else {
	            comp = new comprehension(new Tuple(t, Store, n.lineno, n.col_offset), expression, []);
	        }
	        if (NCH(n) === 5) {
	            n = CHILD(n, 4);
	            nifs = countCompIfs(c, n);
	            ifs = [];
	            for (j = 0; j < nifs; ++j) {
	                REQ(n, SYM.comp_iter);
	                n = CHILD(n, 0);
	                REQ(n, SYM.comp_if);
	                expression = astForExpr(c, CHILD(n, 1));
	                ifs[j] = expression;
	                if (NCH(n) === 3) {
	                    n = CHILD(n, 2);
	                }
	            }
	            if (n.type === SYM.comp_iter) {
	                n = CHILD(n, 0);
	            }
	            comp.ifs = ifs;
	        }
	        comps[i] = comp;
	    }
	    return comps;
	}

	function astForIterComp(c, n, type) {
	    var elt, comps;
	    goog.asserts.assert(NCH(n) > 1);
	    elt = astForExpr(c, CHILD(n, 0));
	    comps = astForComprehension(c, CHILD(n, 1));
	    if (type === COMP_GENEXP) {
	        return new GeneratorExp(elt, comps, n.lineno, n.col_offset);
	    } else if (type === COMP_SETCOMP) {
	        return new SetComp(elt, comps, n.lineno, n.col_offset);
	    }
	}

	function astForDictComp(c, n) {
	    var key, value;
	    var comps = [];
	    goog.asserts.assert(NCH(n) > 3);
	    REQ(CHILD(n, 1), TOK.T_COLON);
	    key = astForExpr(c, CHILD(n, 0));
	    value = astForExpr(c, CHILD(n, 2));
	    comps = astForComprehension(c, CHILD(n, 3));
	    return new DictComp(key, value, comps, n.lineno, n.col_offset);
	}

	function astForGenExpr(c, n) {
	    goog.asserts.assert(n.type === SYM.testlist_comp || n.type === SYM.argument);
	    return astForIterComp(c, n, COMP_GENEXP);
	}

	function astForSetComp(c, n) {
	    goog.asserts.assert(n.type === SYM.dictorsetmaker);
	    return astForIterComp(c, n, COMP_SETCOMP);
	}

	function astForWhileStmt (c, n) {
	    /* while_stmt: 'while' test ':' suite ['else' ':' suite] */
	    REQ(n, SYM.while_stmt);
	    if (NCH(n) === 4) {
	        return new While_(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), [], n.lineno, n.col_offset);
	    }
	    else if (NCH(n) === 7) {
	        return new While_(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), astForSuite(c, CHILD(n, 6)), n.lineno, n.col_offset);
	    }
	    goog.asserts.fail("wrong number of tokens for 'while' stmt");
	}

	function astForAugassign (c, n) {
	    REQ(n, SYM.augassign);
	    n = CHILD(n, 0);
	    switch (n.value.charAt(0)) {
	        case "+":
	            return Add;
	        case "-":
	            return Sub;
	        case "/":
	            if (n.value.charAt(1) === "/") {
	                return FloorDiv;
	            }
	            return Div;
	        case "%":
	            return Mod;
	        case "<":
	            return LShift;
	        case ">":
	            return RShift;
	        case "&":
	            return BitAnd;
	        case "^":
	            return BitXor;
	        case "|":
	            return BitOr;
	        case "*":
	            if (n.value.charAt(1) === "*") {
	                return Pow;
	            }
	            return Mult;
	        default:
	            goog.asserts.fail("invalid augassign");
	    }
	}

	function astForBinop (c, n) {
	    /* Must account for a sequence of expressions.
	     How should A op B op C by represented?
	     BinOp(BinOp(A, op, B), op, C).
	     */
	    var tmp;
	    var newoperator;
	    var nextOper;
	    var i;
	    var result = new BinOp(
	        astForExpr(c, CHILD(n, 0)),
	        getOperator(CHILD(n, 1)),
	        astForExpr(c, CHILD(n, 2)),
	        n.lineno, n.col_offset);
	    var nops = (NCH(n) - 1) / 2;
	    for (i = 1; i < nops; ++i) {
	        nextOper = CHILD(n, i * 2 + 1);
	        newoperator = getOperator(nextOper);
	        tmp = astForExpr(c, CHILD(n, i * 2 + 2));
	        result = new BinOp(result, newoperator, tmp, nextOper.lineno, nextOper.col_offset);
	    }
	    return result;

	}


	function astForTestlist(c, n) {
	    /* this doesn't show up in Grammar.txt never did: testlist_gexp: test (',' test)* [','] */
	    /* testlist_comp: test (',' test)* [','] */
	    /* testlist: test (',' test)* [','] */
	    /* testlist_safe: test (',' test)+ [','] */
	    /* testlist1: test (',' test)* */
	    goog.asserts.assert(NCH(n) > 0);
	    if (n.type === SYM.testlist_comp) {
	        if (NCH(n) > 1) {
	            goog.asserts.assert(CHILD(n, 1).type !== SYM.comp_for);
	        }
	    }
	    else {
	        goog.asserts.assert(n.type === SYM.testlist || n.type === SYM.testlist_safe || n.type === SYM.testlist1);
	    }

	    if (NCH(n) === 1) {
	        return astForExpr(c, CHILD(n, 0));
	    }
	    else {
	        return new Tuple(seqForTestlist(c, n), Load, n.lineno, n.col_offset);
	    }

	}

	function astForExprStmt (c, n) {
	    var expression;
	    var value;
	    var e;
	    var i;
	    var targets;
	    var expr2;
	    var varName;
	    var expr1;
	    var ch;
	    REQ(n, SYM.expr_stmt);
	    /* expr_stmt: testlist (augassign (yield_expr|testlist) 
	     | ('=' (yield_expr|testlist))*)
	     testlist: test (',' test)* [',']
	     augassign: '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^='
	     | '<<=' | '>>=' | '**=' | '//='
	     test: ... here starts the operator precendence dance
	     */
	    if (NCH(n) === 1) {
	        return new Expr(astForTestlist(c, CHILD(n, 0)), n.lineno, n.col_offset);
	    }
	    else if (CHILD(n, 1).type === SYM.augassign) {
	        ch = CHILD(n, 0);
	        expr1 = astForTestlist(c, ch);
	        switch (expr1.constructor) {
	            case GeneratorExp:
	                throw new Sk.builtin.SyntaxError("augmented assignment to generator expression not possible", c.c_filename, n.lineno);
	            case Yield:
	                throw new Sk.builtin.SyntaxError("augmented assignment to yield expression not possible", c.c_filename, n.lineno);
	            case Name:
	                varName = expr1.id;
	                forbiddenCheck(c, ch, varName, n.lineno);
	                break;
	            case Attribute:
	            case Subscript:
	                break;
	            default:
	                throw new Sk.builtin.SyntaxError("illegal expression for augmented assignment", c.c_filename, n.lineno);
	        }
	        setContext(c, expr1, Store, ch);

	        ch = CHILD(n, 2);
	        if (ch.type === SYM.testlist) {
	            expr2 = astForTestlist(c, ch);
	        }
	        else {
	            expr2 = astForExpr(c, ch);
	        }

	        return new AugAssign(expr1, astForAugassign(c, CHILD(n, 1)), expr2, n.lineno, n.col_offset);
	    }
	    else {
	        // normal assignment
	        REQ(CHILD(n, 1), TOK.T_EQUAL);
	        targets = [];
	        for (i = 0; i < NCH(n) - 2; i += 2) {
	            ch = CHILD(n, i);
	            if (ch.type === SYM.yield_expr) {
	                throw new Sk.builtin.SyntaxError("assignment to yield expression not possible", c.c_filename, n.lineno);
	            }
	            e = astForTestlist(c, ch);
	            setContext(c, e, Store, CHILD(n, i));
	            targets[i / 2] = e;
	        }
	        value = CHILD(n, NCH(n) - 1);
	        if (value.type === SYM.testlist) {
	            expression = astForTestlist(c, value);
	        }
	        else {
	            expression = astForExpr(c, value);
	        }
	        return new Assign(targets, expression, n.lineno, n.col_offset);
	    }
	}

	function astForIfexpr (c, n) {
	    /* test: or_test 'if' or_test 'else' test */
	    goog.asserts.assert(NCH(n) === 5);
	    return new IfExp(
	        astForExpr(c, CHILD(n, 2)),
	        astForExpr(c, CHILD(n, 0)),
	        astForExpr(c, CHILD(n, 4)),
	        n.lineno, n.col_offset);
	}

	/**
	 * s is a python-style string literal, including quote characters and u/r/b
	 * prefixes. Returns decoded string object.
	 */
	function parsestr (c, s) {
	    var encodeUtf8 = function (s) {
	        return unescape(encodeURIComponent(s));
	    };
	    var decodeUtf8 = function (s) {
	        return decodeURIComponent(escape(s));
	    };
	    var decodeEscape = function (s, quote) {
	        var d3;
	        var d2;
	        var d1;
	        var d0;
	        var c;
	        var i;
	        var len = s.length;
	        var ret = "";
	        for (i = 0; i < len; ++i) {
	            c = s.charAt(i);
	            if (c === "\\") {
	                ++i;
	                c = s.charAt(i);
	                if (c === "n") {
	                    ret += "\n";
	                }
	                else if (c === "\\") {
	                    ret += "\\";
	                }
	                else if (c === "t") {
	                    ret += "\t";
	                }
	                else if (c === "r") {
	                    ret += "\r";
	                }
	                else if (c === "b") {
	                    ret += "\b";
	                }
	                else if (c === "f") {
	                    ret += "\f";
	                }
	                else if (c === "v") {
	                    ret += "\v";
	                }
	                else if (c === "0") {
	                    ret += "\0";
	                }
	                else if (c === '"') {
	                    ret += '"';
	                }
	                else if (c === '\'') {
	                    ret += '\'';
	                }
	                else if (c === "\n") /* escaped newline, join lines */ {
	                }
	                else if (c === "x") {
	                    d0 = s.charAt(++i);
	                    d1 = s.charAt(++i);
	                    ret += String.fromCharCode(parseInt(d0 + d1, 16));
	                }
	                else if (c === "u" || c === "U") {
	                    d0 = s.charAt(++i);
	                    d1 = s.charAt(++i);
	                    d2 = s.charAt(++i);
	                    d3 = s.charAt(++i);
	                    ret += String.fromCharCode(parseInt(d0 + d1, 16), parseInt(d2 + d3, 16));
	                }
	                else {
	                    // Leave it alone
	                    ret += "\\" + c;
	                    // goog.asserts.fail("unhandled escape: '" + c.charCodeAt(0) + "'");
	                }
	            }
	            else {
	                ret += c;
	            }
	        }
	        return ret;
	    };

	    //print("parsestr", s);

	    var quote = s.charAt(0);
	    var rawmode = false;
	    var unicode = false;

	    // treats every sequence as unicodes even if they are not treated with uU prefix
	    // kinda hacking though working for most purposes
	    if((c.c_flags & Parser.CO_FUTURE_UNICODE_LITERALS || Sk.python3 === true)) {
	        unicode = true;
	    }

	    if (quote === "u" || quote === "U") {
	        s = s.substr(1);
	        quote = s.charAt(0);
	        unicode = true;
	    }
	    else if (quote === "r" || quote === "R") {
	        s = s.substr(1);
	        quote = s.charAt(0);
	        rawmode = true;
	    }
	    goog.asserts.assert(quote !== "b" && quote !== "B", "todo; haven't done b'' strings yet");

	    goog.asserts.assert(quote === "'" || quote === '"' && s.charAt(s.length - 1) === quote);
	    s = s.substr(1, s.length - 2);
	    if (unicode) {
	        s = encodeUtf8(s);
	    }

	    if (s.length >= 4 && s.charAt(0) === quote && s.charAt(1) === quote) {
	        goog.asserts.assert(s.charAt(s.length - 1) === quote && s.charAt(s.length - 2) === quote);
	        s = s.substr(2, s.length - 4);
	    }

	    if (rawmode || s.indexOf("\\") === -1) {
	        return strobj(decodeUtf8(s));
	    }
	    return strobj(decodeEscape(s, quote));
	}

	function parsestrplus (c, n) {
	    var i;
	    var ret;
	    REQ(CHILD(n, 0), TOK.T_STRING);
	    ret = new Sk.builtin.str("");
	    for (i = 0; i < NCH(n); ++i) {
	        try {
	            ret = ret.sq$concat(parsestr(c, CHILD(n, i).value));
	        } catch (x) {
	            throw new Sk.builtin.SyntaxError("invalid string (possibly contains a unicode character)", c.c_filename, CHILD(n, i).lineno);
	        }
	    }
	    return ret;
	}

	function parsenumber (c, s, lineno) {
	    var neg;
	    var val;
	    var tmp;
	    var end = s.charAt(s.length - 1);

	    // call internal complex type constructor for complex strings
	    if (end === "j" || end === "J") {
	        return Sk.builtin.complex.complex_subtype_from_string(s);
	    }

	    // Handle longs
	    if (end === "l" || end === "L") {
	        return Sk.longFromStr(s.substr(0, s.length - 1), 0);
	    }

	    // todo; we don't currently distinguish between int and float so
	    // str is wrong for these.
	    if (s.indexOf(".") !== -1) {
	        return new Sk.builtin.float_(parseFloat(s));
	    }

	    // Handle integers of various bases
	    tmp = s;
	    neg = false;
	    if (s.charAt(0) === "-") {
	        tmp = s.substr(1);
	        neg = true;
	    }

	    if (tmp.charAt(0) === "0" && (tmp.charAt(1) === "x" || tmp.charAt(1) === "X")) {
	        // Hex
	        tmp = tmp.substring(2);
	        val = parseInt(tmp, 16);
	    } else if ((s.indexOf("e") !== -1) || (s.indexOf("E") !== -1)) {
	        // Float with exponent (needed to make sure e/E wasn't hex first)
	        return new Sk.builtin.float_(parseFloat(s));
	    } else if (tmp.charAt(0) === "0" && (tmp.charAt(1) === "b" || tmp.charAt(1) === "B")) {
	        // Binary
	        tmp = tmp.substring(2);
	        val = parseInt(tmp, 2);
	    } else if (tmp.charAt(0) === "0") {
	        if (tmp === "0") {
	            // Zero
	            val = 0;
	        } else {
	            // Octal
	            tmp = tmp.substring(1);
	            if ((tmp.charAt(0) === "o") || (tmp.charAt(0) === "O")) {
	                tmp = tmp.substring(1);
	            }
	            val = parseInt(tmp, 8);
	        }
	    }
	    else {
	        // Decimal
	        val = parseInt(tmp, 10);
	    }

	    // Convert to long
	    if (val > Sk.builtin.int_.threshold$ &&
	        Math.floor(val) === val &&
	        (s.indexOf("e") === -1 && s.indexOf("E") === -1)) {
	        return Sk.longFromStr(s, 0);
	    }

	    // Small enough, return parsed number
	    if (neg) {
	        return new Sk.builtin.int_(-val);
	    } else {
	        return new Sk.builtin.int_(val);
	    }
	}

	function astForSlice (c, n) {
	    var n2;
	    var step;
	    var upper;
	    var lower;
	    var ch;
	    REQ(n, SYM.subscript);

	    /*
	     subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
	     sliceop: ':' [test]
	     */
	    ch = CHILD(n, 0);
	    lower = null;
	    upper = null;
	    step = null;
	    if (ch.type === TOK.T_DOT) {
	        return new Ellipsis();
	    }
	    if (NCH(n) === 1 && ch.type === SYM.test) {
	        return new Index(astForExpr(c, ch));
	    }
	    if (ch.type === SYM.test) {
	        lower = astForExpr(c, ch);
	    }
	    if (ch.type === TOK.T_COLON) {
	        if (NCH(n) > 1) {
	            n2 = CHILD(n, 1);
	            if (n2.type === SYM.test) {
	                upper = astForExpr(c, n2);
	            }
	        }
	    }
	    else if (NCH(n) > 2) {
	        n2 = CHILD(n, 2);
	        if (n2.type === SYM.test) {
	            upper = astForExpr(c, n2);
	        }
	    }

	    ch = CHILD(n, NCH(n) - 1);
	    if (ch.type === SYM.sliceop) {
	        if (NCH(ch) === 1) {
	            ch = CHILD(ch, 0);
	            step = new Name(strobj("None"), Load, ch.lineno, ch.col_offset);
	        }
	        else {
	            ch = CHILD(ch, 1);
	            if (ch.type === SYM.test) {
	                step = astForExpr(c, ch);
	            }
	        }
	    }
	    return new Slice(lower, upper, step);
	}

	function astForAtom(c, n) {
	    /* atom: ('(' [yield_expr|testlist_comp] ')' |
	       '[' [listmaker] ']' |
	       '{' [dictorsetmaker] '}' |
	       '`' testlist1 '`' |
	       NAME | NUMBER | STRING+)
	    */
	    var i;
	    var values;
	    var keys;
	    var size;
	    var ch = CHILD(n, 0);
	    var elts;
	    switch (ch.type) {
	        case TOK.T_NAME:
	            // All names start in Load context, but may be changed later
	            return new Name(strobj(ch.value), Load, n.lineno, n.col_offset);
	        case TOK.T_STRING:
	            return new Str(parsestrplus(c, n), n.lineno, n.col_offset);
	        case TOK.T_NUMBER:
	            return new Num(parsenumber(c, ch.value, n.lineno), n.lineno, n.col_offset);
	        case TOK.T_LPAR: // various uses for parens
	            ch = CHILD(n, 1);
	            if (ch.type === TOK.T_RPAR) {
	                return new Tuple([], Load, n.lineno, n.col_offset);
	            }
	            if (ch.type === SYM.yield_expr) {
	                return astForExpr(c, ch);
	            }
	            //            if (NCH(ch) > 1 && CHILD(ch, 1).type === SYM.comp_for) {
	            //                return astForComprehension(c, ch);
	            //            }
	            return astForTestlistComp(c, ch);
	        case TOK.T_LSQB: // list or listcomp
	            ch = CHILD(n, 1);
	            if (ch.type === TOK.T_RSQB) {
	                return new List([], Load, n.lineno, n.col_offset);
	            }
	            REQ(ch, SYM.listmaker);
	            if (NCH(ch) === 1 || CHILD(ch, 1).type === TOK.T_COMMA) {
	                return new List(seqForTestlist(c, ch), Load, n.lineno, n.col_offset);
	            } 
	            return astForListcomp(c, ch);
	            
	        case TOK.T_LBRACE:
	            /* dictorsetmaker: 
	             *     (test ':' test (comp_for : (',' test ':' test)* [','])) |
	             *     (test (comp_for | (',' test)* [',']))
	             */
	            keys = [];
	            values = [];
	            ch = CHILD(n, 1);
	            if (n.type === TOK.T_RBRACE) {
	                //it's an empty dict
	                return new Dict([], null, n.lineno, n.col_offset);
	            } 
	            else if (NCH(ch) === 1 || (NCH(ch) !== 0 && CHILD(ch, 1).type === TOK.T_COMMA)) {
	                //it's a simple set
	                elts = [];
	                size = Math.floor((NCH(ch) + 1) / 2);
	                for (i = 0; i < NCH(ch); i += 2) {
	                    var expression = astForExpr(c, CHILD(ch, i));
	                    elts[i / 2] = expression;
	                }
	                return new Set(elts, n.lineno, n.col_offset);
	            } 
	            else if (NCH(ch) !== 0 && CHILD(ch, 1).type == SYM.comp_for) {
	                //it's a set comprehension
	                return astForSetComp(c, ch);
	            } 
	            else if (NCH(ch) > 3 && CHILD(ch, 3).type === SYM.comp_for) {
	                //it's a dict compr. I think.
	                return astForDictComp(c, ch);
	            } 
	            else {
	                size = Math.floor((NCH(ch) + 1) / 4); // + 1 for no trailing comma case
	                for (i = 0; i < NCH(ch); i += 4) {
	                    keys[i / 4] = astForExpr(c, CHILD(ch, i));
	                    values[i / 4] = astForExpr(c, CHILD(ch, i + 2));
	                }
	                return new Dict(keys, values, n.lineno, n.col_offset);
	            }
	        case TOK.T_BACKQUOTE:
	            //throw new Sk.builtin.SyntaxError("backquote not supported, use repr()", c.c_filename, n.lineno);
	            return new Repr(astForTestlist(c, CHILD(n, 1)), n.lineno, n.col_offset);
	        default:
	            goog.asserts.fail("unhandled atom", ch.type);

	    }
	}

	function astForPower (c, n) {
	    /* power: atom trailer* ('**' factor)*
	     */
	    var f;
	    var tmp;
	    var ch;
	    var i;
	    var e;
	    REQ(n, SYM.power);
	    e = astForAtom(c, CHILD(n, 0));
	    if (NCH(n) === 1) {
	        return e;
	    }
	    for (i = 1; i < NCH(n); ++i) {
	        ch = CHILD(n, i);
	        if (ch.type !== SYM.trailer) {
	            break;
	        }
	        tmp = astForTrailer(c, ch, e);
	        tmp.lineno = e.lineno;
	        tmp.col_offset = e.col_offset;
	        e = tmp;
	    }
	    if (CHILD(n, NCH(n) - 1).type === SYM.factor) {
	        f = astForExpr(c, CHILD(n, NCH(n) - 1));
	        e = new BinOp(e, Pow, f, n.lineno, n.col_offset);
	    }
	    return e;
	}

	function astForExpr (c, n) {
	    /* handle the full range of simple expressions
	     test: or_test ['if' or_test 'else' test] | lambdef
	     or_test: and_test ('or' and_test)*
	     and_test: not_test ('and' not_test)*
	     not_test: 'not' not_test | comparison
	     comparison: expr (comp_op expr)*
	     expr: xor_expr ('|' xor_expr)*
	     xor_expr: and_expr ('^' and_expr)*
	     and_expr: shift_expr ('&' shift_expr)*
	     shift_expr: arith_expr (('<<'|'>>') arith_expr)*
	     arith_expr: term (('+'|'-') term)*
	     term: factor (('*'|'/'|'%'|'//') factor)*
	     factor: ('+'|'-'|'~') factor | power
	     power: atom trailer* ('**' factor)*

	     As well as modified versions that exist for backward compatibility,
	     to explicitly allow:
	     [ x for x in lambda: 0, lambda: 1 ]
	     (which would be ambiguous without these extra rules)

	     old_test: or_test | old_lambdef
	     old_lambdef: 'lambda' [vararglist] ':' old_test

	     */

	    var exp;
	    var cmps;
	    var ops;
	    var i;
	    var seq;
	    LOOP: while (true) {
	        switch (n.type) {
	            case SYM.test:
	            case SYM.old_test:
	                if (CHILD(n, 0).type === SYM.lambdef || CHILD(n, 0).type === SYM.old_lambdef) {
	                    return astForLambdef(c, CHILD(n, 0));
	                }
	                else if (NCH(n) > 1) {
	                    return astForIfexpr(c, n);
	                }
	            // fallthrough
	            case SYM.or_test:
	            case SYM.and_test:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                seq = [];
	                for (i = 0; i < NCH(n); i += 2) {
	                    seq[i / 2] = astForExpr(c, CHILD(n, i));
	                }
	                if (CHILD(n, 1).value === "and") {
	                    return new BoolOp(And, seq, n.lineno, n.col_offset);
	                }
	                goog.asserts.assert(CHILD(n, 1).value === "or");
	                return new BoolOp(Or, seq, n.lineno, n.col_offset);
	            case SYM.not_test:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                else {
	                    return new UnaryOp(Not, astForExpr(c, CHILD(n, 1)), n.lineno, n.col_offset);
	                }
	                break;
	            case SYM.comparison:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                else {
	                    ops = [];
	                    cmps = [];
	                    for (i = 1; i < NCH(n); i += 2) {
	                        ops[(i - 1) / 2] = astForCompOp(c, CHILD(n, i));
	                        cmps[(i - 1) / 2] = astForExpr(c, CHILD(n, i + 1));
	                    }
	                    return new Compare(astForExpr(c, CHILD(n, 0)), ops, cmps, n.lineno, n.col_offset);
	                }
	                break;
	            case SYM.expr:
	            case SYM.xor_expr:
	            case SYM.and_expr:
	            case SYM.shift_expr:
	            case SYM.arith_expr:
	            case SYM.term:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                return astForBinop(c, n);
	            case SYM.yield_expr:
	                exp = null;
	                if (NCH(n) === 2) {
	                    exp = astForTestlist(c, CHILD(n, 1));
	                }
	                return new Yield(exp, n.lineno, n.col_offset);
	            case SYM.factor:
	                if (NCH(n) === 1) {
	                    n = CHILD(n, 0);
	                    continue LOOP;
	                }
	                return astForFactor(c, n);
	            case SYM.power:
	                return astForPower(c, n);
	            default:
	                goog.asserts.fail("unhandled expr", "n.type: %d", n.type);
	        }
	        break;
	    }
	}

	function astForPrintStmt (c, n) {
	    /* print_stmt: 'print' ( [ test (',' test)* [','] ]
	     | '>>' test [ (',' test)+ [','] ] )
	     */
	    var nl;
	    var i, j;
	    var seq;
	    var start = 1;
	    var dest = null;
	    REQ(n, SYM.print_stmt);
	    if (NCH(n) >= 2 && CHILD(n, 1).type === TOK.T_RIGHTSHIFT) {
	        dest = astForExpr(c, CHILD(n, 2));
	        start = 4;
	    }
	    seq = [];
	    for (i = start, j = 0; i < NCH(n); i += 2, ++j) {
	        seq[j] = astForExpr(c, CHILD(n, i));
	    }
	    nl = (CHILD(n, NCH(n) - 1)).type === TOK.T_COMMA ? false : true;
	    return new Print(dest, seq, nl, n.lineno, n.col_offset);
	}

	function astForStmt (c, n) {
	    var ch;
	    if (n.type === SYM.stmt) {
	        goog.asserts.assert(NCH(n) === 1);
	        n = CHILD(n, 0);
	    }
	    if (n.type === SYM.simple_stmt) {
	        goog.asserts.assert(numStmts(n) === 1);
	        n = CHILD(n, 0);
	    }
	    if (n.type === SYM.small_stmt) {
	        REQ(n, SYM.small_stmt);
	        n = CHILD(n, 0);
	        /* small_stmt: expr_stmt | print_stmt  | del_stmt | pass_stmt
	         | flow_stmt | import_stmt | global_stmt | exec_stmt
	         | assert_stmt
	         */
	        switch (n.type) {
	            case SYM.expr_stmt:
	                return astForExprStmt(c, n);
	            case SYM.print_stmt:
	                return astForPrintStmt(c, n);
	            case SYM.del_stmt:
	                return astForDelStmt(c, n);
	            case SYM.pass_stmt:
	                return new Pass(n.lineno, n.col_offset);
	            case SYM.flow_stmt:
	                return astForFlowStmt(c, n);
	            case SYM.import_stmt:
	                return astForImportStmt(c, n);
	            case SYM.global_stmt:
	                return astForGlobalStmt(c, n);
	            case SYM.exec_stmt:
	                return astForExecStmt(c, n);
	            case SYM.assert_stmt:
	                return astForAssertStmt(c, n);
	            case SYM.debugger_stmt:
	                return new Debugger_(n.lineno, n.col_offset);
	            default:
	                goog.asserts.fail("unhandled small_stmt");
	        }
	    }
	    else {
	        /* compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt
	         | funcdef | classdef | decorated
	         */
	        ch = CHILD(n, 0);
	        REQ(n, SYM.compound_stmt);
	        switch (ch.type) {
	            case SYM.if_stmt:
	                return astForIfStmt(c, ch);
	            case SYM.while_stmt:
	                return astForWhileStmt(c, ch);
	            case SYM.for_stmt:
	                return astForForStmt(c, ch);
	            case SYM.try_stmt:
	                return astForTryStmt(c, ch);
	            case SYM.with_stmt:
	                return astForWithStmt(c, ch);
	            case SYM.funcdef:
	                return astForFuncdef(c, ch, []);
	            case SYM.classdef:
	                return astForClassdef(c, ch, []);
	            case SYM.decorated:
	                return astForDecorated(c, ch);
	            default:
	                goog.asserts.assert("unhandled compound_stmt");
	        }
	    }
	}

	Sk.astFromParse = function (n, filename, c_flags) {
	    var j;
	    var num;
	    var ch;
	    var i;
	    var c = new Compiling("utf-8", filename, c_flags);
	    var stmts = [];
	    var k = 0;
	    switch (n.type) {
	        case SYM.file_input:
	            for (i = 0; i < NCH(n) - 1; ++i) {
	                ch = CHILD(n, i);
	                if (n.type === TOK.T_NEWLINE) {
	                    continue;
	                }
	                REQ(ch, SYM.stmt);
	                num = numStmts(ch);
	                if (num === 1) {
	                    stmts[k++] = astForStmt(c, ch);
	                }
	                else {
	                    ch = CHILD(ch, 0);
	                    REQ(ch, SYM.simple_stmt);
	                    for (j = 0; j < num; ++j) {
	                        stmts[k++] = astForStmt(c, CHILD(ch, j * 2));
	                    }
	                }
	            }
	            return new Module(stmts);
	        case SYM.eval_input:
	            goog.asserts.fail("todo;");
	        case SYM.single_input:
	            goog.asserts.fail("todo;");
	        default:
	            goog.asserts.fail("todo;");
	    }
	};

	Sk.astDump = function (node) {
	    var spaces = function (n) // todo; blurgh
	    {
	        var i;
	        var ret = "";
	        for (i = 0; i < n; ++i) {
	            ret += " ";
	        }
	        return ret;
	    };

	    var _format = function (node, indent) {
	        var ret;
	        var elemsstr;
	        var x;
	        var elems;
	        var fieldstr;
	        var field;
	        var attrs;
	        var fieldlen;
	        var b;
	        var a;
	        var i;
	        var fields;
	        var namelen;
	        if (node === null) {
	            return indent + "None";
	        }
	        else if (node.prototype && node.prototype._astname !== undefined && node.prototype._isenum) {
	            return indent + node.prototype._astname + "()";
	        }
	        else if (node._astname !== undefined) {
	            namelen = spaces(node._astname.length + 1);
	            fields = [];
	            for (i = 0; i < node._fields.length; i += 2) // iter_fields
	            {
	                a = node._fields[i]; // field name
	                b = node._fields[i + 1](node); // field getter func
	                fieldlen = spaces(a.length + 1);
	                fields.push([a, _format(b, indent + namelen + fieldlen)]);
	            }
	            attrs = [];
	            for (i = 0; i < fields.length; ++i) {
	                field = fields[i];
	                attrs.push(field[0] + "=" + field[1].replace(/^\s+/, ""));
	            }
	            fieldstr = attrs.join(",\n" + indent + namelen);
	            return indent + node._astname + "(" + fieldstr + ")";
	        }
	        else if (goog.isArrayLike(node)) {
	            //Sk.debugout("arr", node.length);
	            elems = [];
	            for (i = 0; i < node.length; ++i) {
	                x = node[i];
	                elems.push(_format(x, indent + " "));
	            }
	            elemsstr = elems.join(",\n");
	            return indent + "[" + elemsstr.replace(/^\s+/, "") + "]";
	        }
	        else {
	            if (node === true) {
	                ret = "True";
	            }
	            else if (node === false) {
	                ret = "False";
	            }
	            else if (node instanceof Sk.builtin.lng) {
	                ret = node.tp$str().v;
	            }
	            else if (node instanceof Sk.builtin.str) {
	                ret = node["$r"]().v;
	            }
	            else {
	                ret = "" + node;
	            }
	            return indent + ret;
	        }
	    };

	    return _format(node, "");
	};

	goog.exportSymbol("Sk.astFromParse", Sk.astFromParse);
	goog.exportSymbol("Sk.astDump", Sk.astDump);



	/* ---- /Users/rob/skulpty/lib/afterword.js ---- */ 

	function wrapAstThing(fx, argpos, debug) {
		argpos = argpos || 2;
		return function(x) {
			var n = arguments[argpos-1];
			var result = fx.apply(undefined, arguments);
			result.range = n.range;
			result.str = n.str;
			result.loc = n.loc;
			if ( debug ) {
				console.log(n);
				console.log(result);
			}
			return result;
		};
	}

	astForAtom = wrapAstThing(astForAtom);
	astForCompOp = wrapAstThing(astForCompOp);
	astForSuite = wrapAstThing(astForSuite);
	astForExceptClause = wrapAstThing(astForExceptClause);
	astForDottedName = wrapAstThing(astForDottedName);
	astForDecorator = wrapAstThing(astForDecorator);
	astForDecorators = wrapAstThing(astForDecorators);
	astForDecorated = wrapAstThing(astForDecorated);
	astForWithVar = wrapAstThing(astForWithVar);
	astForWithStmt = wrapAstThing(astForWithStmt);
	astForExecStmt = wrapAstThing(astForExecStmt);
	astForIfStmt = wrapAstThing(astForIfStmt);
	astForExprlist = wrapAstThing(astForExprlist);
	astForDelStmt = wrapAstThing(astForDelStmt);
	astForGlobalStmt = wrapAstThing(astForGlobalStmt);
	astForAssertStmt = wrapAstThing(astForAssertStmt);
	astForImportStmt = wrapAstThing(astForImportStmt);
	astForTestlistComp = wrapAstThing(astForTestlistComp);
	astForListcomp = wrapAstThing(astForListcomp);
	astForFactor = wrapAstThing(astForFactor);
	astForForStmt = wrapAstThing(astForForStmt);
	astForTrailer = wrapAstThing(astForTrailer);
	astForFlowStmt = wrapAstThing(astForFlowStmt);
	astForArguments = wrapAstThing(astForArguments);
	astForFuncdef = wrapAstThing(astForFuncdef);
	astForClassBases = wrapAstThing(astForClassBases);
	astForClassdef = wrapAstThing(astForClassdef);
	astForLambdef = wrapAstThing(astForLambdef);
	astForComprehension = wrapAstThing(astForComprehension);
	astForIterComp = wrapAstThing(astForIterComp);
	astForDictComp = wrapAstThing(astForDictComp);
	astForGenExpr = wrapAstThing(astForGenExpr);
	astForSetComp = wrapAstThing(astForSetComp);
	astForWhileStmt = wrapAstThing(astForWhileStmt);
	astForAugassign = wrapAstThing(astForAugassign);
	astForBinop = wrapAstThing(astForBinop);
	astForTestlist = wrapAstThing(astForTestlist);
	astForExprStmt = wrapAstThing(astForExprStmt);
	astForIfexpr = wrapAstThing(astForIfexpr);
	astForExpr = wrapAstThing(astForExpr);
	Sk.astFromParse = wrapAstThing(Sk.astFromParse, 1);

	Sk.nameForToken = function(v) {
		if ( typeof v === "string" ) return v;
		for ( var name in Sk.Tokenizer.Tokens ) {
			if ( Sk.Tokenizer.Tokens[name] == v ) return name;
		}
		if ( v in Sk.ParseTables.number2symbol ) {
			return Sk.ParseTables.number2symbol[v];
		}

		return '???:' + v;
	};

	//Sk.python3 = true;
	Sk.Parser = Parser;
	Sk.builtin.str.prototype.valueOf = function() { return this.v; };
	Sk.builtin.str.prototype.toString = function() { return this.v; };

	Sk.builtin.SyntaxError = function(str, file, line, ctx, extra) {
		var err = new SyntaxError(str, file, line);
		err.context = ctx;
		err.extra = extra;
		err.line = line;
		return err;
	};

	Sk.builtin.IndentationError = function(str, file, line, row, extra) {
		var err = new SyntaxError('Indentation Error: ' + str, file, line);
		err.context = [[line, row], [line, row]];
		err.extra = {
		};
		err.line = line;
		return err;
	};


	module.exports = Sk;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	var isArray = Array.isArray;

	function getOpName(op) {
		if (op.name) return op.name;
		//Work around browsers that dont suport Function#name (like IE11)
		var matches = op.toString().match(/function ([^)]+)\(/);
		if ( matches === null ) return undefined;
		return matches[1];
	}

	function abort(why) {
		console.log(new Error("ABORT:" + why).stack);
		throw new Error(why);
	}

	function isExpression(n) {
		return /Expression$/.test(n.type);
	}

	var idx = 0;
	function createTempName(hint) {
		return '__temp$' + hint + '$' + idx++;
	}

	function ensureStatement(s) {
		var f = s;
		if ( !isArray(s) ) f = [f];
		for ( var i = 0; i < f.length; ++i ) {
			var v = f[i];
			if ( isExpression(v) ) {
				f[i] = {type: "ExpressionStatement", expression: v};
			}
		}

		if ( isArray(s) ) return s;
		else return f[0];
	}

	function ident(n) {
		return {type: "Identifier", name: n.valueOf()};
	}

	function member(o, p) {
		return {
			type: "MemberExpression",
			object: o,
			property: p,
			computed: false
		};
	}

	function literal(v) {
		if ( typeof v === 'object' ) v = v.valueOf();

		if ( typeof v === 'number' && (1 / v !== 1 / Math.abs(v)) ) {
			return {type: "UnaryExpression", argument: literal(-v), operator: '-' };
		}

		return {type: "Literal", value: v, raw: JSON.stringify(v)};
	}

	function binOp(left, op, right) {
		return {
			type: "BinaryExpression",
			left: left,
			right: right,
			operator: op
		};
	}

	function logicOp(left, op, right) {
		return {
			type: "LogicalExpression",
			left: left,
			right: right,
			operator: op
		};
	}

	function ternary(cond, a, b) {
		return {
			type: "ConditionalExpression",
			test: cond,
			consequent: a,
			alternate: b
		};
	}

	function var_(name, init) {
		return {
			type: "VariableDeclaration",
			kind: 'var',
			declarations: [{
				type: "VariableDeclarator",
				id: name,
				init: init ? init : undefined
			}]
		};
	}

	function transform(node, ctx) {
		//console.log(node.lineno, node.col_offset);
		var result = dispatch(node, ctx);
		if ( node.range ) result.range = [node.range[0], node.range[1]];
		if ( node.loc ) result.loc = node.loc;
		result.str = node.str;
		return result;
	}

	function dispatch(node, ctx) {
		if ( !ctx.locals ) ctx.locals = Object.create(null);

		if ( !node ) {
			console.log("WAT!", new Error().stack);
			throw new Error("What?");
		}
		if ( isArray(node) ) {
			var body = [];
			for ( var i = 0; i < node.length; ++i ) {
				var r = transform(node[i], ctx);
				if ( isArray(r) ) body.push.apply(body, r);
				else body.push(r);
			}
			return body;
		}
		switch (node._astname) {
			case 'Attribute': return transformAttribute(node, ctx);
			case 'Assign': return transformAssign(node, ctx);
			case 'AugAssign': return transformAugAssign(node, ctx);
			case 'BinOp': return transformBinOp(node, ctx);
			case 'BoolOp': return transformBoolOp(node, ctx);
			case 'Break': return transformBreak(node, ctx);
			case 'Call': return transformCall(node, ctx);
			case 'ClassDef': return transformClassDef(node, ctx);
			case 'Continue': return tranformContinue(node, ctx);
			case 'Compare': return transformCompare(node, ctx);
			case 'Dict': return transformDict(node, ctx);
			case 'Delete': return transformDel(node, ctx);
			case 'Expr': return transformExpr(node, ctx);
			case 'For': return transformFor(node, ctx);
			case 'FunctionDef': return transformFunctionDef(node, ctx);
			case 'GeneratorExp': return transformListComp(node, ctx); //TODO: Make this seperate
			case 'Global': return transformGlobal(node, ctx);
			case 'If': return transformIf(node, ctx);
			case 'Import': return NoOp();
			case 'Lambda': return transformLambda(node, ctx);
			case 'List': return transformList(node, ctx);
			case 'ListComp': return transformListComp(node, ctx);
			case 'Module': return transformModule(node, ctx);
			case 'Name': return transformName(node, ctx);
			case 'Print': return transformPrint(node, ctx);
			case 'Return': return transformReturn(node, ctx);
			case 'Str': return transformStr(node, ctx);
			case 'Subscript': return transformSubscript(node, ctx);
			case 'Tuple': return transformTuple(node, ctx);
			case 'Num': return transformNum(node, ctx);
			case 'Pass': return transformPass(node, ctx);
			case 'UnaryOp': return transformUnaryOp(node, ctx);
			case 'While': return transformWhile(node, ctx);
			default:
				console.log("Dont know how to transform: " + node._astname);
				console.log(JSON.stringify(node, null, '  '));
				throw new Error("Dont know how to transform: " + node._astname);
		}
	}

	function NoOp() { return []; }



	function makeVariableName(name) {
		var parts = Array.isArray(name) ? name : name.split(/\./g);
		if ( parts.length === 1 ) return ident(name);
		var prop = parts.pop();
		return member(makeVariableName(parts), ident(prop));
	}

	function transformAttribute(node, ctx) {
		var n = node.attr;
		if ( n._astname ) n = transform(n, ctx);
		else n = {type: 'Identifier', name: n.valueOf()};
		return member(transform(node.value, ctx), n);
	}

	function transformAugAssign(node, ctx) {
		//TODO: We need to not inject left into the code twice
		//as it could have side effects.
		var right = transform(node.value, ctx);
		var left = transform(node.target, ctx);
		var tn = createTempName("left");
		var opName = getOpName(node.op);
		return [
			var_(ident(tn), left),
			ensureStatement({
				type: "AssignmentExpression",
				operator: '=',
				left: left,
				right: createBinOp(left, opName, right)
			})
		];
	}

	function transformAssign(node, ctx) {

		var results = [];
		for ( var i = 0; i < node.targets.length; ++i ) {
			var left = node.targets[i];
			if ( ctx.writeTarget ) {
				left = member(ctx.writeTarget, transform(left,ctx));
			}
			results.push.apply(results,createTupleUnpackingAssign(left, transform(node.value, ctx), ctx));
		
		}
		if ( results.length == 1 ) return results[0];
		return {type: "BlockStatement", body: results}; 
	}

	function createBinOp(left, op, right) {

		if ( op === 'FloorDiv' ) {
			return {
				type: "CallExpression",
				callee: makeVariableName('Math.floor'),
				arguments: [{
					type: "BinaryExpression",
					left: left,
					right: right,
					operator: '/'
				}]
			};
		}

		var fxOps = {
			"Add": "__pythonRuntime.ops.add",
			"Mult": "__pythonRuntime.ops.multiply",
			"Pow": "Math.pow"
		};

		if ( op in fxOps  ) {
			var call = {
				type: "CallExpression",
				callee: makeVariableName(fxOps[op]),
				arguments: [left, right]
			};
			return call;
		}

		var operators = {
			"Add": "+",
			"Sub": "-",
			"Mod": "%",
			"Div": "/",
			"BitAnd": "&",
			"BitOr": "|",
			'BitXor': '^',
			"LShift": "<<",
			"RShift": ">>"

		};

		if ( !(op in operators) ) abort("Unknwon binary operator: " + op);

		return binOp(left, operators[op], right);
	}

	function transformBinOp(node, ctx) {
		var left = transform(node.left, ctx);
		var right = transform(node.right, ctx);
		return createBinOp(left, getOpName(node.op), right);
	}

	function transformBoolOp(node, ctx) {
		var fvals = new Array(node.values.length);
		for ( var i = 0; i < node.values.length; ++i ) {
			fvals[i] = transform(node.values[i], ctx);
		}
		var opName = getOpName(node.op);
		var operators = {
			'And': '&&',
			'Or': '||'
		};

		if ( !(opName in operators ) ) abort("Unknown bool opeartor: " + opName);
		var opstr = operators[opName];

		var result = fvals.pop();
		while ( fvals.length > 0 ) {
			result = logicOp(fvals.pop(), opstr, result);
		}


		//TODO: Support || as well?
		return result;
	}

	function transformBreak(node, ctx) {
		return {type: "BreakStatement"};
	}

	function transformCall(node, ctx) {
		var builtins = ['len'];
		if ( node.func._astname == 'Name' ) {
			switch ( node.func.id.v ) {
				case 'len':
					return {
						type: "MemberExpression",
						object: transform(node.args[0], ctx),
						property: {type: "Identifier", name: "length"}
					};
				case 'all': case 'ord':
				case 'sum': case 'any':
				case 'str': case 'chr':
				case 'ascii': case 'divmod':
				case 'range': case 'enumerate':
				case 'round': case 'filter':
				case 'abs': case 'float':
				case 'int': case 'hex':
				case 'tuple': case  'map':
				case 'bool': case 'max':
				case 'sorted': case 'min':
				case 'list': case 'oct':
				case 'pow': case  'reversed':
				case 'repr':
					return {
						type: 'CallExpression',
						callee: makeVariableName('__pythonRuntime.functions.' + node.func.id.v),
						arguments: transform(node.args, ctx)
					};
				case 'dict':
					var args = [];
					for ( var i = 0; i < node.keywords.length; ++i ) {
						args.push({
							type: "ArrayExpression",
							elements: [
								literal(node.keywords[i].arg.v),
								transform(node.keywords[i].value, ctx)
							]
						});
					}
					return {
						type: "NewExpression",
						callee: makeVariableName('__pythonRuntime.objects.dict'),
						arguments: args
					};

			}
		}

		var args = transform(node.args, ctx);

		if ( node.keywords.length > 0 ) {
			var paramsDict = {
				type: "ObjectExpression",
				properties: [{
					type: "Property",
					key: ident("__kwp"),
					value: literal(true)
				}]
			};

			for ( var i = 0; i < node.keywords.length; ++i ) {
				var k = node.keywords[i];
				paramsDict.properties.push({
					type: "Property",
					key: ident(k.arg.v),
					value: transform(k.value, ctx)
				});
			}

			var extraArg = {
				type: "CallExpression",
				callee: makeVariableName('__pythonRuntime.utils.createParamsObj'),
				arguments: [paramsDict]
			};

			args.push(extraArg);
		}

		return {
			type: "CallExpression",
			callee: transform(node.func, ctx),
			arguments: args
		};
	}

	function transformClassDef(node, ctx) {
		var body = [];
		var proto = member(ident(node.name), ident('prototype'));
		var nctx = {
			writeTarget: proto,
			inClass: true,
			locals: Object.create(null)
		};

		if ( node.bases.length > 1 ) alert("Multiple base classes not supported.");

		var base = (node.bases.length > 0) ? transform(node.bases[0], ctx) : undefined;

		var ctorBody = [];
		ctorBody.push({
			type: "VariableDeclaration",
			kind: 'var',
			declarations: [{
				type: "VariableDeclarator",
				id: ident('that'),
				init: {type: "ThisExpression"}
			}]
		});

		ctorBody.push({
			type: "IfStatement",
			test: {
				type:"UnaryExpression",
				argument: binOp(ident('that'), "instanceof", ident(node.name)),
				operator: "!"
			},
			consequent: ensureStatement({
				type: "AssignmentExpression",
				left: ident('that'),
				right: {
					type:  "CallExpression",
					callee: makeVariableName('Object.create'),
					arguments: [ proto ]
				},
				operator: '='
			})
		});

		ctorBody.push({
			type: "IfStatement",
			test: {
				type: "CallExpression",
				callee: member(proto, ident('hasOwnProperty')),
				arguments: [literal('__init__')]
			},
			consequent: ensureStatement({
				type: "CallExpression",
				callee: member(member(proto, ident('__init__')), ident('apply')),
				arguments: [ident('that'), ident('arguments')]
			})
		});

		if ( base ) {
			ctorBody.push(ensureStatement({
				type: "CallExpression",
				callee: {
					type: "MemberExpression",
					object: base,
					property: ident('apply'),
					computed: false
				},
				arguments: [ident('that'), ident('arguments')]
			}));
		}

		ctorBody.push({
			type: "ReturnStatement",
			argument: ident('that')
		});


		body.push({
			type: "FunctionDeclaration",
			id: ident(node.name),
			params: [],
			body: {type: "BlockStatement", body:ctorBody}
		});

		if ( base ) {
			body.push({
				type: "AssignmentExpression",
				left: proto,
				right: {
					type:  "CallExpression",
					callee: makeVariableName('Object.create'),
					arguments: [ member(base, ident('prototype')) ]
				},
				operator: "="
			});
		}

		body = body.concat(transform(node.body, nctx));

		body.push({
			type: "ReturnStatement",
			argument: ident(node.name)
		});

		return {
			"type": "VariableDeclaration",
			"declarations": [
			{
			  "type": "VariableDeclarator",
			  "id": ident(node.name),
			  "init": {
			  	type: "CallExpression",
			  	callee: {
			  		type: "FunctionExpression",
			  		params: [],
			  		body: {type: "BlockStatement", body: ensureStatement(body)}
			  	},
			  	arguments: []
			  }
			}],
			"kind": ctx.varType || 'var'
		};
	}


	function tranformContinue(node, ctx) {
		return {type: "ContinueStatement"};
	}

	function makeCop(left, op, right) {

		var fxOps = {
			"In_": "in",
			"NotIn": "in"
		};
		var opName = getOpName(op);
		if ( opName in fxOps  ) {
			var call = {
				type: "CallExpression",
				callee: makeVariableName("__pythonRuntime.ops." + fxOps[opName]),
				arguments: [left, right]
			};

			if ( opName == "NotIn" ) {
				return {
					type: "UnaryExpression",
					argument: call,
					operator: "!"
				};
			} else {
				return call;	
			} 
		}

		
		var operators = {
			"Eq": "===",
			"NotEq": "!==",
			"LtE": "<=",
			"Lt": "<",
			"GtE": ">=",
			"Gt": ">",
			"Is": "===",
			"IsNot": "!=="
		};
		
		if ( !(opName in operators) ) abort("Unsuported Compare operator: " + opName);
		return binOp(left, operators[opName], right);
	}

	function transformCompare(node, ctx) {
		var left = transform(node.left, ctx);
		var result;

		for ( var i = 0; i < node.comparators.length; ++i ) {
			var right = transform(node.comparators[i], ctx);
			var cop = makeCop(left, node.ops[i], right);
			if ( result ) {
				result = binOp(result, '&&', cop);
			} else {
				result = cop;
			}
			left = right;
		}

		

		return result;
		
	}

	function transformDel(node, ctx) {
		var result = [];
		for ( var i = 0; i < node.targets.length; ++i ) {
			var st = node.targets[i];
			var partial = transform(st, ctx);
			result.push({
				type: "AssignmentExpression",
				operator: "=",
				left: partial,
				right: {
					type: "UnaryExpression",
					argument: literal(0),
					operator: 'void',
					prefix: true
				}
			});
		}
		return ensureStatement({
			type: "SequenceExpression",
			expressions: result
		});
	}

	function transformDict(node, ctx) {
		var args = [];
		for ( var i = 0; i < node.keys.length; ++i ) {
			args.push({
				type: "ArrayExpression",
				elements: [
					transform(node.keys[i], ctx),
					transform(node.values[i], ctx)
				]
			});
		}
		return {
			type: "NewExpression",
			callee: makeVariableName("__pythonRuntime.objects.dict"),
			arguments: args
		};
	}

	function transformExpr(node, ctx) {
		return {
			type: "ExpressionStatement",
			expression: transform(node.value, ctx)
		};
	}

	function assignPossiblyWithDeclaration(target, value, ctx) {
		var left = target._astname ? transform(target, ctx) : target;
		var varible;

		if ( left.type === "Identifier" ) varible = left.name;

		if ( !varible || !ctx || !ctx.locals || ctx.locals[varible] ) {
			return {type: "ExpressionStatement", expression: {
				type: "AssignmentExpression",
				operator: "=",
				left: left,
				right: value
			}};
		}

		ctx.locals[varible] = true;

		return {
			type: "VariableDeclaration",
			declarations: [{
				type: "VariableDeclarator",
				id: left,
				init: value
			}],
			kind: ctx.varType || 'var'
		};
	}

	function createTupleUnpackingAssign(target, value, ctx) {

		if ( target._astname === 'Tuple' ) {
			var result = [];
			var tn = createTempName("right");
			result.push({
				type: "VariableDeclaration",
				kind: "var",
				declarations: [{
					type: "VariableDeclarator",
					id: ident(tn),
					init: value
				}]
			});
			for ( var i = 0; i < target.elts.length; ++i ) {
				result.push.apply(result,createTupleUnpackingAssign(
					target.elts[i],
					{type: "MemberExpression", object: ident(tn), property: literal(i),  computed: true}
				,ctx));
			}
			return result;
		}

		return [assignPossiblyWithDeclaration(target, value, ctx)];
	}

	function createForLoop(iident, tident, iter, target, body, ctx) {

		body = createTupleUnpackingAssign(
			target, 
			{type: "MemberExpression", object: tident, property: iident, computed: true},
			ctx
		).concat(body);

		var riter = ternary(
			{type: "CallExpression", callee: makeVariableName("Array.isArray"), arguments:[iter]},
			iter,
			{type: "CallExpression", callee: makeVariableName("Object.keys"), arguments:[iter]}
		);

		return {
			type: "ForStatement",
			init: {
				"type": "VariableDeclaration",
				"declarations": [
				{
				  "type": "VariableDeclarator",
				  "id": iident,
				  "init": literal(0)
				},
				{
				  "type": "VariableDeclarator",
				  "id": tident,
				  "init": riter
				}],
				"kind": ctx.varType
			},
			test: binOp(iident, '<', {
				type: "MemberExpression", object: tident, property: {type: "Identifier", name: "length"}
			}),
			update: {
				"type": "UpdateExpression",
				"operator": "++",
				"prefix": true,
				"argument": iident
			},
			body: {type: "BlockStatement", body: body}
		};
	}

	function transformFor(node, ctx) {
		var name = createTempName('idx');
		var iident = ident(name);
		var tname = createTempName('target');
		var tident = {type: "Identifier", name: tname};
		var iter = transform(node.iter, ctx);
		var body = ensureStatement(transform(node.body, ctx));

		if ( node.orelse && node.orelse.length > 0 ) abort("else: for-else statement unsupported.");
		return createForLoop(iident, tident, iter, node.target, body, ctx);
	}

	function prepareFunctionBody(node, ctx) {
		var args = node.args.args.slice(0);
		if  ( ctx.inClass ) {
			//TODO: Make sure it's named self, maybe?
			args.shift();
		}
		var hasAnyArguments = args.length > 0 || node.args.vararg || node.args.kwarg;
		var nctx = {
			locals: Object.create(null),
			varType: ctx.varType
		};
		var body = ensureStatement(transform(node.body, nctx));
		var premble = [];

		if ( ctx.inClass ) {
			premble.push({
				"type": "VariableDeclaration",
				"declarations": [{
					"type": "VariableDeclarator",
					"id": ident('self'),
					"init": {type: "ThisExpression"}
				}],
				"kind": "var"
			});
		}

		if ( hasAnyArguments ) {
			
			var hasParams = createTempName('hasParams');
			var param0 = createTempName('param0');
			var realArgCount = createTempName('realArgCount');
			var argLen = makeVariableName('arguments.length');
			var argN = {type: "MemberExpression", object: ident('arguments'), property: binOp(argLen, '-', literal(1)), computed: true};
			var argNKeywords = {type: "MemberExpression", object: argN, property: ident('keywords'), computed: false};

			premble.push({
				"type": "VariableDeclaration",
				"declarations": [
				{
				  "type": "VariableDeclarator",
				  "id": ident(hasParams),
				  "init": logicOp(binOp(argLen, '>', literal(0)), '&&', logicOp(argN, '&&', argNKeywords))
				}],
				"kind":  "var"
			});

			var main = [];
			main.push({
				"type": "VariableDeclaration",
				"declarations": [{
					"type": "VariableDeclarator",
					"id": ident(param0),
					"init": ternary(ident(hasParams), argNKeywords, {type: "ObjectExpression", properties: []})
				},{
					"type": "VariableDeclarator",
					"id": ident(realArgCount),
					"init": binOp(argLen, '-', ternary(ident(hasParams), literal(1), literal(0)))
				}],
				"kind": "var"
			});

			for ( var i = 0; i < args.length; ++i ) {
				var a = node.args.args[i];
				var didx = i - (node.args.args.length - node.args.defaults.length);
				var def = didx >= 0 ? transform(node.args.defaults[didx], ctx) : ident('undefined');

				main.push({
					type: "IfStatement",
					test: binOp(ident(realArgCount), '<', literal(i+1)),
					consequent: ensureStatement({
						type: "AssignmentExpression",
						operator: "=",
						left: ident(a.id),
						right: ternary(
							binOp(literal(a.id), 'in', ident(param0)),
							{type: "MemberExpression", object: ident(param0), property: ident(a.id), computed: false},
							def
						)
					})
				});
			}

			if ( node.args.vararg ) {
				main.push({
					"type": "VariableDeclaration",
					"declarations": [{
						"type": "VariableDeclarator",
						"id": ident(node.args.vararg),
						"init": {
							type: "CallExpression",
							callee: makeVariableName("Array.prototype.slice.call"),
							arguments: [ident('arguments'), literal(node.args.args.length), hasAnyArguments ? ident(realArgCount) : undefined]
						}
					}],
					"kind": "var"
				});
			}

			if ( node.args.kwarg ) {
				for ( var i = 0; i < node.args.args.length; ++i ) {
					main.push(ensureStatement({
						type: "UnaryExpression",
						operator: "delete",
						argument: {
							type: "MemberExpression",
							object: ident(param0),
							property: ident(node.args.args[i].id),
							computed: false
						}
					}));
				}
				main.push({
					"type": "VariableDeclaration",
					"declarations": [{
						"type": "VariableDeclarator",
						"id": ident(node.args.kwarg),
						"init": ident(param0)
					}],
					"kind": "var"
				});
			}

			premble = premble.concat(main); //TODO: If we dont have defauts, we can guard this with __hasParams	
		}


		body = premble.concat(body);
		var params = transform(args, ctx);
		return {
			premble: premble,
			body: body,
			params: params
		};

	}

	function transformFunctionDef(node, ctx) {
		var data = prepareFunctionBody(node, ctx);



		if ( ctx.writeTarget ) {
			return ensureStatement({
				type: "AssignmentExpression",
				left: {type: "MemberExpression", object: ctx.writeTarget, property: ident(node.name)},
				right: {
					type: "FunctionExpression",
					name: ident(node.name),
					params: data.params,
					body: {type: "BlockStatement", body: data.body}
				},
				operator: '='
			});
		} else {
			return {
				type: "FunctionDeclaration",
				id: {type: "Identifier", name: node.name.v},
				params: data.params,
				body: {type: "BlockStatement", body: data.body}
			};
		}
	}

	function transformGlobal(node, ctx) {
		for ( var i = 0; i < node.names.length; ++i ) {
			ctx.locals[node.names[i].v] = true;
		}
		return [];
	}

	function transformIf(node, ctx) {
		var body = ensureStatement(transform(node.body, ctx));
		return {
			type: "IfStatement",
			test: transform(node.test, ctx),
			consequent: {type: "BlockStatement", body: body},
			alternate: (node.orelse && node.orelse.length > 0) ? {type: "BlockStatement", body: ensureStatement(transform(node.orelse, ctx))} : undefined
		};
	}

	function transformLambda(node, ctx) {
		var data = prepareFunctionBody(node, ctx);
		
		//TODO: This is pretty sketchy.
		var last = data.body[data.body.length - 1];
		data.body[data.body.length - 1] = {type: "ReturnStatement", argument: last.expression};

		return {
			type: "FunctionExpression",
			params: data.params,
			body: {type: "BlockStatement", body: data.body}
		};
	}

	function transformList(node, ctx) {
		var call = {
			type: "CallExpression",
			callee: makeVariableName("__pythonRuntime.objects.list"),
			arguments: transform(node.elts, ctx)
		};
		return call;
	}

	function transformListComp(node, ctx) {	
		var body = [];
		var aggrigator = createTempName('result');

		body.push({
			"type": "VariableDeclaration",
			"declarations": [{
				"type": "VariableDeclarator",
				"id": ident(aggrigator),
				"init": {
					type: "NewExpression",
					callee: makeVariableName('__pythonRuntime.objects.list'),
					arguments: []
				}
			}],
			"kind": "var"
		});

		var insideBody = [];

		insideBody.push(ensureStatement({
			type: "CallExpression",
			callee: {type: "MemberExpression", object: ident(aggrigator), property: ident('push'), computed: false},
			arguments: [transform(node.elt, ctx)]
		}));

		//if ( node.generators.length !== 1 ) abort("Unsuported number of generators");
		var gen = node.generators[0];

		for ( var g = node.generators.length - 1; g >= 0; --g ) {
			var idxName = createTempName('idx');
			var listName = createTempName("list" + g);
			var iterName = createTempName('iter');
			var gen = node.generators[g];
			for ( var i = 0; i < gen.ifs.length; ++i ) {
				insideBody.unshift({
					type: "IfStatement",
					test: {type: "UnaryExpression", argument: transform(gen.ifs[i], ctx), operator: "!"},
					consequent: {type: "ContinueStatement"}
				});
			}

			insideBody = [
				{
					type: "VariableDeclaration",
					kind: "var",
					declarations: [{
						type: "VariableDeclarator",
						id: ident(listName),
						init: transform(gen.iter, ctx)
					}]
				},
				createForLoop(ident(idxName), ident(iterName), ident(listName), gen.target, insideBody, ctx)
			];
		}

		body.push.apply(body, insideBody);
		body.push({
			type: "ReturnStatement",
			argument: ident(aggrigator)
		});

		var expr = {
			type: "FunctionExpression",
			params: [],
			body: {type: "BlockStatement", body: body}
		};

		return {
			type: "CallExpression",
			callee: expr,
			arguments: []
		};
	}

	function transformModule(node, ctx) {
		return {
			type: "Program",
			body: ensureStatement(transform(node.body, ctx))
		};
	}

	function transformName(node, ctx) {
		if ( node.id.v === 'True' ) return {type: "Literal", value: true, raw: "true"};
		if ( node.id.v === 'False' ) return {type: "Literal", value: false, raw: "false"};
		if ( node.id.v === 'None' ) return {type: "Literal", value: null, raw: "null"};

		if ( node.id.v === 'random' ) return makeVariableName('__pythonRuntime.imports.random');
		return ident(node.id);
	}

	function transformNum(node, ctx) {
		return literal(node.n);
	}

	function transformPrint(node, ctx) {
		return {
			type: "CallExpression",
			callee: makeVariableName("console.log"),
			arguments: transform(node.values, ctx)
		};
	}

	function transformReturn(node, ctx) {
		return {
			type: "ReturnStatement",
			argument: node.value ? transform(node.value, ctx) : undefined
		};
	}

	function transformStr(node, ctx) {
		return literal(node.s.valueOf());
	}

	function transformTuple(node, ctx) {
		var call = {
			type: "CallExpression",
			callee: makeVariableName("__pythonRuntime.objects.tuple"),
			arguments: transform(node.elts, ctx)
		};
		return call;
	}

	function transformSubscript(node, ctx) {
		//TODO: Do silly pythonic list offset logic
		var val = transform(node.value, ctx);
		if ( node.slice.value ) {
			var lu = transform(node.slice.value, ctx);
			lu = {
				type: "CallExpression",
				callee: makeVariableName("__pythonRuntime.ops.subscriptIndex"),
				arguments: [val, lu]
			};
			return {
				type: "MemberExpression",
				computed: true,
				object: val,
				property: lu
			};
		}

		return {
			type: "CallExpression",
			callee: makeVariableName('__pythonRuntime.internal.slice'),
			arguments:[
				val,
				node.slice.lower ? transform(node.slice.lower, ctx) : ident('undefined'),
				node.slice.upper ? transform(node.slice.upper, ctx) : ident('undefined'),
				node.slice.step ? transform(node.slice.step, ctx) : ident('undefined'),
			]
		};
	}

	function transformPass(node, ctx) {
		return {type: "EmptyStatement"};
	}

	function transformUnaryOp(node, ctx) {
		var argument = transform(node.operand, ctx);

		var fxOps = {
			"Add": "add",
			"Mult": "multiply",
		};
		var opName = getOpName(node.op);

		if ( opName in fxOps  ) {
			var call = {
				type: "CallExpression",
				callee: makeVariableName("__pythonRuntime.ops." + fxOps[opName]),
				arguments: [argument]
			};
			return call;
		}

		var operators = {
			"Not": "!",
			"USub": "-",
			"Invert": "~"
		};

		if ( !(opName in operators) ) abort("Unknown unary operator: " + opName);

		return {
			type: "UnaryExpression",
			argument: argument,
			operator: operators[opName]
		};
		
	}

	function transformWhile(node, ctx) {
		if ( node.orelse && node.orelse.length > 0 ) abort("else: statement for while unsupported.");
		return {
			type: "WhileStatement",
			test: transform(node.test, ctx),
			body: {type: "BlockStatement", body: ensureStatement(transform(node.body, ctx))}
		};	
	}

	module.exports = transform;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Sk = __webpack_require__(1);

	function splat(e) {
		console.log("GOT ERROR!");
		console.log(e, e.extra);
		console.log(JSON.stringify(e.extra.node, function(k,  o) {
			if ( k == 'type' ) return Sk.nameForToken(o);
			else if ( k == 'children' ) return o;
			else if ( k ===  '' ) return o;
			else if ( !isNaN(parseInt(k)) ) return o;
			else return undefined;
		}, '  '));
	}

	function improveError(e, options, code) {
		var r;
		if ( e.context && e.context.length >0 ) {
			r = e.context[0];	
		}

		if ( e.extra && e.extra.node ) {
			if ( !r ) {
				r = [e.extra.node.loc.start.line,e.extra.node.loc.start.column];
			}
		}

		if ( r ) {
			setErrorPos(e, r[0], r[1]);
		}

		if ( options.friendlyErrors && e.extra ) {
			e.message = makeErrorFriendly(e, code);
		}
	}

	function setErrorPos(e, line, col) {
		e.loc = {line: line, column: col};
		e.line = line;
		e.column = col;
	}

	function friendlyString(s) {
		switch (s) {
		case 'if_stmt': return 'if statement';
		case 'while_stmt': return 'while statement';
		case 'funcdef': return 'function';
		default: return '?' + s + '?';
		} 
	}

	function nodeToType(n) {
		var type = Sk.nameForToken(n.type);
		if ( type === 'suite' ) return nodeToType(n.children[0]);
		return friendlyString(type);
	}

	function makeErrorFriendly(e, code) {
		//console.log("EX", e.message, e.extra);
		if ( e.extra.kind == "DAG_MISS" ) {
			if ( e.extra.expected.indexOf('T_COLON') !== -1 ) {
				//We might be missing a colon.
				var after = (e.context && e.context[2] ? e.context[2] : e.extra.found_val).replace(/\s+$/,'');
				var lc = e.extra.node.children[e.extra.node.children.length-1];
				if ( lc.value === 'else' ) after = 'else';

				if ( e.extra.found == 'T_SEMI' ) {
					return "Replace the `;` at the end of `" + after + "` with a `:`";
				} else if ( e.extra.found == 'T_NEWLINE' ) {
					return "Need a `:` on the end of the line following `" + after + "`.";
				} else if ( e.extra.found == 'T_NAME' ) {
					return "Need a `:` after `" + after + "`.";
				} else if ( e.extra.found == 'T_EQUAL' ) {
					return "Can't assign to a variable within the condition of an " + friendlyString(e.extra.inside) + ".  Did you mean to use `==` instead of `=`?";
				}
			}

			if ( e.extra.expected.indexOf('T_DEDENT') !== -1 ) {
				if ( e.extra.found_val.toLowerCase() === 'else' ) {
					return "`else` needs to line up with its `if`.";
				} else {
					return "Indentation error.";
				}
			}

			if ( e.extra.expected.indexOf('T_INDENT') !== -1 ) {
				var lc = e.extra.parent || e.extra.node;
				var name  = nodeToType(lc);
				if ( name === 'if statement' ) {
					//Scan for the most recent part of the ifstatement.
					for ( var i = 0; i < lc.children.length; ++i ) {
						if ( ["if", "elif", "else"].indexOf(lc.children[i].value) !== -1 ) {
							name = lc.children[i].value + ' statement';
						}
					}
				}
				if ( lc.value === 'else' ) name = 'else statement';
				return 'Empty ' + name + '. Put 4 spaces in front of statements inside the ' + name + '.';
			}

			if ( e.extra.found === 'T_NAME' ) {
				switch ( e.extra.found_val ) {
					case 'else':
					case 'elif':
						return '`' + e.extra.found_val + '` must be paired with an `if`';
					case 'elseif':
						return '`elseif` should be shortened to `elif`';
				} 
			}

			if ( e.extra.found === 'T_AMPER' && e.extra.inside == 'and_expr' ) {
				return 'Python uses the word `and` instead of `&&` for boolean AND expressions.';
			}


			if ( e.extra.inside === 'trailer' ) {
				//We are parsing either an arglist or a subscript.
				if ( e.extra.expected.indexOf('T_RPAR') === 0 ) {
					//Expected ), must be a arglsit;
					if ( e.line > e.extra.node.lineno ) {
						//Our arglist is incomplete, and we have made it to the next line,.
						//Likely they just forgot to close their ()'s
						setErrorPos(e, e.extra.node.lineno, e.extra.node.col_offset);
						var t = e.extra.node.loc;
						e.context = [
							[t.start.line,t.start.column],
							[t.end.line,t.end.column]
						];
						return 'Unclosed `(` in function arguments.' + e.extra.node.lineno;

					}
					return 'Function calls paramaters must be seperated by `,`s';
				}
			}

			if ( e.extra.found === 'T_INDENT' ) {
				if ( e.extra.expected.indexOf('stmt') !== -1 ) {
					return 'Too much indentation at the beginning of this line.';
				}
			}

			if ( e.extra.expected.indexOf('subscriptlist') === 0 ) {
				return "Malformed subscript";
			}

			if ( e.extra.expected.indexOf('T_NEWLINE') !== -1 ) {
				var n = e.extra.node;
				
				if ( e.extra.node.children[0] ) {
					var n = e.extra.node.children[0];
					var previousType = Sk.nameForToken(n.type);
				
					if ( previousType == 'small_stmt' ) {
						while ( n.children && n.children.length == 1 ) n = n.children[0];
						var what = code.substring(n.range[0], n.range[1]);
						return 'If you want to call `' + what +'` as function, you need `()`\'s';
					}
				}
			}

			return 'Unexpected token: ' + e.message;
		} else if ( e.extra.kind == "CLASSIFY" ) {
			if ( e.extra.value === '"' ) return 'Unterminated string. Add a matching `"` at the end of your string.';
			return 'Unterminated `' + e.extra.value + '`';
		} else if ( e.extra.kind == "STRING_EOF" ) {
			return 'Unterminated muti-line string. Add a matching `"""` at the end of your string.';
		} else if ( e.extra.kind == "STATEMENT_EOF" ) {
			if ( e.extra.parenlev > 0 ) {
				var top = e.extra.parenstack[e.extra.parenstack.length-1];
				var kind = top[0];
				var types = '([{';
				var pair = ')]}';
				var close = pair[types.indexOf(kind)];
				setErrorPos(e, top[1], top[2]-1);
				return 'Unmatched `' + kind + '`.  Every opening `' + kind + '` needs a closing `' + close + '` to match it.';
			}
			return e.message;
		}

		return e.message;
		
		
	}

	module.exports = improveError;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	(function (root, factory) {
	  'use strict';
	  if(true)
	    module.exports = factory();
	  else if(typeof define === 'function' && define.amd)
	    define([], factory);
	  else if(typeof exports === 'object')
	    exports["__pythonRuntime"] = factory();
	  else
	    root["__pythonRuntime"] = factory();
	}(this, function() {
	  'use strict';
	  var pythonRuntime = {
	    internal: {
	      // Only used within runtime
	      isSeq: function (a) { return a && (a._type === "list" || a._type === "tuple"); },
	      slice: function (obj, start, end, step) {
	        var slice;
	        if ( typeof obj === 'string' ) slice = function(x,y) { return obj.substring(x,y); }
	        else slice = obj.slice.bind(obj);

	        if (step == null || step === 0) step = 1; // TODO: step === 0 is a runtime error
	        if (start == null) {
	          if (step < 0) start = obj.length - 1;
	          else start = 0;
	        } else if (start < 0) start += obj.length;
	        if (end == null) {
	          if (step < 0) end = -1;
	          else end = obj.length;
	        } else if (end < 0) end += obj.length;

	        var ret = new pythonRuntime.objects.list(), tmp, i;
	        if (step < 0) {
	          tmp = slice(end + 1, start + 1);
	          for (i = tmp.length - 1; i >= 0; i += step) ret.append(tmp[i]);
	        } else {
	          tmp = slice(start, end);
	          if (step === 1 && typeof tmp !== 'string') ret = pythonRuntime.utils.createList(tmp);
	          else for (i = 0; i < tmp.length; i += step) ret.append(tmp[i]);
	        }
	        if ( typeof obj === 'string' ) return ret.join('');
	        return ret;
	      },
	      isJSArray: Array.isArray || function(obj) {
	        return toString.call(obj) === '[object Array]';
	      }
	    },

	    utils: {
	      createDict: function () {
	        var ret = new pythonRuntime.objects.dict();
	        if (arguments.length === 1 && arguments[0] instanceof Object)
	          for (var k in arguments[0]) ret[k] = arguments[0][k];
	        else
	          throw TypeError("createDict expects a single JavaScript object");
	        return ret;
	      },
	      createParamsObj: function () {
	        // In: expr, expr, ..., {id:expr, __kwp:true}, {id:expr, __kwp:true}, ...
	        // Out: {formals:[expr, expr, ...], keywords:{id:expr, id:expr, ...}}
	        var params = { formals: new pythonRuntime.objects.list(), keywords: new PythonDict() };
	        for (var i = 0; i < arguments.length; i++) {
	          if (arguments[i] && arguments[i].__kwp === true) {
	            for (var k in arguments[i])
	              if (k !== '__kwp') params.keywords[k] = arguments[i][k];
	          }
	          else params.formals.push(arguments[i]);
	        }
	        return params;
	      },
	      convertToList: function (list) {
	        Object.defineProperties(list, pythonRuntime.utils.listPropertyDescriptor);
	        return list;
	      },
	      convertToDict: function (dict) {
	        Object.defineProperties(dict, pythonRuntime.utils.dictPropertyDescriptor);
	        return dict;
	      }, 
	      listPropertyDescriptor: {
	          "_type": {
	            get: function () { return 'list'; },
	            enumerable: false
	          },
	          "_isPython": {
	            get: function () { return true; },
	            enumerable: false
	          },
	          "append": {
	            value: function (x) {
	              this.push(x);
	            },
	            enumerable: false
	          },
	          "clear": {
	            value: function () {
	              this.splice(0, this.length);
	            },
	            enumerable: false
	          },
	          "copy": {
	            value: function () {
	              return this.slice(0);
	            },
	            enumerable: false
	          },
	          "count": {
	            value: function (x) {
	              var c = 0;
	              for (var i = 0; i < this.length; i++)
	                if (this[i] === x) c++;
	              return c;
	            },
	            enumerable: false
	          },
	          "equals": {
	            value: function (x) {
	              try {
	                if (this.length !== x.length) return false;
	                for (var i = 0; i < this.length; i++) {
	                  if (this[i].hasOwnProperty("equals")) {
	                    if (!this[i].equals(x[i])) return false;
	                  } else if (this[i] !== x[i]) return false;
	                }
	                return true;
	              }
	              catch (e) { }
	              return false;
	            },
	            enumerable: false
	          },
	          "extend": {
	            value: function (L) {
	              for (var i = 0; i < L.length; i++) this.push(L[i]);
	            },
	            enumerable: false
	          },
	          "index": {
	            value: function (x) {
	              return this.indexOf(x);
	            },
	            enumerable: false
	          },
	          "indexOf": {
	            value: function (x, fromIndex) {
	              try {
	                for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {
	                  if (this[i].hasOwnProperty("equals")) {
	                    if (this[i].equals(x)) return i;
	                  } else if (this[i] === x) return i;
	                }
	              }
	              catch (e) { }
	              return -1;
	            },
	            enumerable: false
	          },
	          "insert": {
	            value: function (i, x) {
	              this.splice(i, 0, x);
	            },
	            enumerable: false
	          },
	          "pop": {
	            value: function (i) {
	              if (arguments.length<1) i = this.length - 1;
	              var item = this[i];
	              this.splice(i, 1);
	              return item;
	            },
	            enumerable: false
	          },
	          "_pySlice": {
	            value: function (start, end, step) {
	              return pythonRuntime.internal.slice(this, start, end, step);
	            },
	            enumerable: false
	          },
	          "remove": {
	            value: function (x) {
	              this.splice(this.indexOf(x), 1);
	            },
	            enumerable: false
	          },
	          "sort": {
	            value: function(x, reverse) {
	              var list2 = this.slice(0);
	              var apply_key = function(a, numerical) {
	                var list3 = list2.map(x);
	                // construct a dict that maps the listay before and after the map
	                var mapping = {}
	                for(var i in list3) mapping[list3[i]] = list2[i];
	                if(numerical)
	                  list3.sort(function(a, b) { return a - b; });
	                else
	                  list3.sort()
	                for(var i in a) a[i] = mapping[list3[i]];
	              }
	              for(var i in this) {
	                if(typeof this[i] !== 'number' || !isFinite(this[i])) {
	                  if(typeof x != 'undefined') {
	                    apply_key(this, false);
	                  }
	                  else {
	                    list2.sort();
	                    for (var j in this) this[j] = list2[j];
	                  }
	                  if(reverse)
	                    this.reverse();
	                  return;
	                }
	              }
	              if(typeof x != 'undefined') {
	                apply_key(this, true);
	              }
	              else {
	                list2.sort(function(a, b) { return a - b; });
	                for(var i in this) this[i] = list2[i];
	              }
	              if(reverse)
	                this.reverse();
	            },
	            enumerable: false
	          },
	          "toString": {
	            value: function () {
	              return '[' + this.join(', ') + ']';
	            },
	            enumerable: false
	          }
	      },
	      createList: function () {
	        var ret = new pythonRuntime.objects.list();
	        if (arguments.length === 1 && arguments[0] instanceof Array)
	          for (var i in arguments[0]) ret.push(arguments[0][i]);
	        else
	          for (var i in arguments) ret.push(arguments[i]);
	        return ret;
	      },
	      dictPropertyDescriptor: {
	        "_type": {
	          get: function () { return 'dict';},
	          enumerable: false
	        },
	        "_isPython": {
	          get: function () { return true; },
	          enumerable: false
	        },
	        "items": {
	          value: function () {
	            var items = new pythonRuntime.objects.list();
	            for (var k in this) items.append(new pythonRuntime.objects.tuple(k, this[k]));
	            return items;
	          },
	          enumerable: false
	        },
	        "length": {
	          get: function () {
	            return Object.keys(this).length;
	          },
	          enumerable: false
	        },
	        "clear": {
	          value: function () {
	            for (var i in this) delete this[i];
	          },
	          enumerable: false
	        },
	        "get": {
	          value: function (key, def) {
	            if (key in this) return this[key];
	            else if (def !== undefined) return def;
	            return null;
	          },
	          enumerable: false
	        },
	        "keys": {
	          value: function () {
	            return Object.keys(this);
	          },
	          enumerable: false
	        },
	        "pop": {
	          value: function (key, def) {
	            var value;
	            if (key in this) {
	              value = this[key];
	              delete this[key];
	            } else if (def !== undefined) value = def;
	            else return new Error("KeyError");
	            return value;
	          },
	          enumerable: false
	        }, "values": {
	          value: function () {
	            var values = new pythonRuntime.objects.list();
	            for (var key in this) values.append(this[key]);
	            return values;
	          },
	          enumerable: false
	        }
	      }
	    },
	    ops: {
	      add: function (a, b) {
	        if (typeof a === 'object' && pythonRuntime.internal.isSeq(a) && pythonRuntime.internal.isSeq(b)) {
	          if (a._type !== b._type)
	            throw TypeError("can only concatenate " + a._type + " (not '" + b._type + "') to " + a._type);
	          var ret;
	          if (a._type === 'list') ret = new pythonRuntime.objects.list();
	          else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();
	          if (ret) {
	            for (var i = 0; i < a.length; i++) ret.push(a[i]);
	            for (var i = 0; i < b.length; i++) ret.push(b[i]);
	            return ret;
	          }
	        }
	        return a + b;
	      },
	      in: function (a, b, n) {
	        var r = b.hasOwnProperty('indexOf') ? b.indexOf(a) >= 0 : a in b;
	        return n ? !r : r;
	      },
	      multiply: function (a, b) {
	        // TODO: non-sequence operand must be an integer
	        if ( typeof a === 'object' ) {
	          if (pythonRuntime.internal.isSeq(a) && !isNaN(parseInt(b))) {
	            var ret;
	            if (a._type === 'list') ret = new pythonRuntime.objects.list();
	            else if (a._type === 'tuple') ret = new pythonRuntime.objects.tuple();
	            if (ret) {
	              for (var i = 0; i < b; i++)
	                for (var j = 0; j < a.length; j++) ret.push(a[j]);
	              return ret;
	            }
	          } else if (pythonRuntime.internal.isSeq(b) && !isNaN(parseInt(a))) {
	            var ret;
	            if (b._type === 'list') ret = new pythonRuntime.objects.list();
	            else if (b._type === 'tuple') ret = new pythonRuntime.objects.tuple();
	            if (ret) {
	              for (var i = 0; i < a; i++)
	                for (var j = 0; j < b.length; j++) ret.push(b[j]);
	              return ret;
	            }
	          }
	        }
	        return a * b;
	      },
	      subscriptIndex: function (o, i) {
	        if ( i >= 0 ) return i;
	        if ( pythonRuntime.internal.isSeq(o) ) return o.length + i;
	        if ( pythonRuntime.internal.isJSArray(o) ) return o.length + i;
	        if ( typeof o === "string" ) return o.length + i;
	        return i;
	      }
	    },

	    objects: {
	      dict: function () {
	        var obj = new PythonDict();
	        for (var i = 0; i < arguments.length; ++i ) obj[arguments[i][0]] = arguments[i][1];
	        return obj;
	      },
	      list: function () {
	        var arr = [];
	        arr.push.apply(arr, arguments);
	        pythonRuntime.utils.convertToList(arr);
	        return arr;
	      },
	      tuple: function () {
	        var arr = [];
	        arr.push.apply(arr, arguments);
	        Object.defineProperty(arr, "_type",
	        {
	          get: function () { return 'tuple'; },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "_isPython",
	        {
	          get: function () { return true; },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "count",
	        {
	          value: function (x) {
	            var c = 0;
	            for (var i = 0; i < this.length; i++)
	              if (this[i] === x) c++;
	            return c;
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "equals",
	        {
	          value: function (x) {
	            try {
	              if (this.length !== x.length) return false;
	              for (var i = 0; i < this.length; i++) {
	                if (this[i].hasOwnProperty("equals")) {
	                  if (!this[i].equals(x[i])) return false;
	                } else if (this[i] !== x[i]) return false;
	              }
	              return true;
	            }
	            catch (e) { }
	            return false;
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "index",
	        {
	          value: function (x) {
	            return this.indexOf(x);
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "indexOf",
	        {
	          value: function (x, fromIndex) {
	            try {
	              for (var i = fromIndex ? fromIndex : 0; i < this.length; i++) {
	                if (this[i].hasOwnProperty("equals")) {
	                  if (this[i].equals(x)) return i;
	                } else if (this[i] === x) return i;
	              }
	            }
	            catch (e) { }
	            return -1;
	          },
	          enumerable: false
	        });
	        Object.defineProperty(arr, "_pySlice",
	        {
	          value: function (start, end, step) { 
	            return pythonRuntime.internal.slice(this, start, end, step);
	          },
	            enumerable: false
	        });
	        Object.defineProperty(arr, "toString",
	        {
	          value: function () {
	            var s = '(' + this.join(', ');
	            if (this.length === 1) s += ',';
	            s += ')';
	            return s;
	          },
	          enumerable: false
	        });
	        return arr;
	      }
	    },

	    // Python built-in functions

	    functions: {
	      abs: function(x) {
	        return Math.abs(x);
	      },
	      all: function(iterable) {
	        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) !== true) return false;
	        return true;
	      },
	      any: function(iterable) {
	        for (var i in iterable) if (pythonRuntime.functions.bool(iterable[i]) === true) return true;
	        return false;
	      },
	      ascii: function(obj) {
	        var s = pythonRuntime.functions.repr(obj),
	            asc = "",
	            code;
	        for (var i = 0; i < s.length; i++) {
	          code = s.charCodeAt(i);
	          if (code <= 127) asc += s[i];
	          else if (code <= 0xFF) asc += "\\x" + code.toString(16);
	          else if (0xD800 <= code && code <= 0xDBFF) { // UCS-2 for the astral chars
	            // if (i+1 >= s.length) throw "High surrogate not followed by low surrogate"; // Is this needed?
	            code = ((code-0xD800)*0x400)+(s.charCodeAt(++i)-0xDC00)+0x10000;
	            asc += "\\U" + ("000"+code.toString(16)).slice(-8);
	          } else if (code <= 0xFFFF) asc += "\\u" + ("0"+code.toString(16)).slice(-4);
	          else if (code <= 0x10FFFF) asc += "\\U" + ("000"+code.toString(16)).slice(-8);
	          else; // Invalid value, should probably throw something. It should never get here though as strings shouldn't contain them in the first place
	        }
	        return asc;
	      },
	      bool: function(x) {
	        return !(x === undefined || // No argument
	                 x === null || // None
	                 x === false || // False
	                 x === 0 || // Zero
	                 x.length === 0 || // Empty Sequence
	                 // TODO: Empty Mapping, needs more support for python mappings first
	                 (x.__bool__ !== undefined && x.__bool__() === false) || // If it has bool conversion defined
	                 (x.__len__ !== undefined && (x.__len__() === false || x.__len__() === 0))); // If it has length conversion defined
	      },
	      chr: function(i) {
	        return String.fromCharCode(i); // TODO: Error code for not 0 <= i <= 1114111
	      },
	      divmod: function(a, b) {
	        return pythonRuntime.objects.tuple(Math.floor(a/b), a%b);
	      },
	      enumerate: function(iterable, start) {
	        start = start || 0;
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) ret.push(new pythonRuntime.objects.tuple(start++, iterable[i]));
	        return ret;
	      },
	      filter: function(fn, iterable) {
	        fn = fn || function () { return true; };
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) if (fn(iterable[i])) ret.push(iterable[i]);
	        return ret;
	      },
	      float: function(x) {
	        if (x === undefined) return 0.0;
	        else if (typeof x == "string") { // TODO: Fix type check
	          x = x.trim().toLowerCase();
	          if ((/^[+-]?inf(inity)?$/i).exec(x) !== null) return Infinity*(x[0]==="-"?-1:1);
	          else if ((/^nan$/i).exec(x) !== null) return NaN;
	          else return parseFloat(x);
	        } else if (typeof x == "number") { // TODO: Fix type check
	          return x; // TODO: Get python types working right so we can return an actual float
	        } else {
	          if (x.__float__ !== undefined) return x.__float__();
	          else return null; // TODO: Throw TypeError: float() argument must be a string or a number, not '<type of x>'
	        }
	      },
	      hex: function(x) {
	        return x.toString(16);
	      },
	      int: function (s) {
	        return parseInt(s);
	      },
	      len: function (o) {
	        return o.length;
	      },
	      list: function (iterable) {
	        var ret = new pythonRuntime.objects.list();
	        if ( arguments.length == 0 ) return ret;
	        if ( arguments.length > 1 ) throw new TypeError('list() takes at most 1 argument (' + arguments.length + ' given)');
	        if (iterable instanceof Array) for (var i in iterable) ret.push(iterable[i]);
	        else for (var i in iterable) ret.push(i);
	        return ret;
	      },
	      map: function(fn, iterable) {
	        // TODO: support additional iterables passed
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) ret.push(fn(iterable[i]));
	        return ret;
	      },
	      max: function(arg1, arg2) {
	        // TODO: support optional keyword-only arguments
	        // TODO: empty iterable raises Python ValueError
	        if (!arg2) { // iterable
	          var max = null;
	          for (var i in arg1) if (max === null || arg1[i] > max) max = arg1[i];
	          return max;
	        } else return arg1 >= arg2 ? arg1 : arg2;
	      },
	      min: function(arg1, arg2) {
	        // TODO: support optional keyword-only arguments
	        // TODO: empty iterable raises Python ValueError
	        if (!arg2) { // iterable
	          var max = null;
	          for (var i in arg1) if (max === null || arg1[i] < max) max = arg1[i];
	          return max;
	        } else return arg1 <= arg2 ? arg1 : arg2;
	      },
	      oct: function(x) {
	        return x.toString(8);
	      },
	      ord: function(c) {
	        return c.charCodeAt(0);
	      },
	      pow: function(x, y, z) {
	        return z ? Math.pow(x, y) % z : Math.pow(x, y);
	      },
	      print: function () {
	        var s = "";
	        for (var i = 0; i < arguments.length; i++)
	          s += i === 0 ? arguments[i] : " " + arguments[i];
	        console.log(s);
	      },
	      range: function (start, stop, step) {
	        if (stop === undefined) {
	          stop = start;
	          start = 0;
	          step = 1;
	        }
	        else if (step === undefined) step = 1;
	        var len = ~~((stop - start) / step); //~~ is a fast floor
	        if ( len < 0 ) return pythonRuntime.utils.convertToList([]);
	        var r = new Array(len);
	        var element = 0;

	        var i = start;
	        while (i < stop && step > 0 || i > stop && step < 0) {
	          r[element++] = i;
	          i += step;
	        }

	        pythonRuntime.utils.convertToList(r);
	        return r;
	      },
	      repr: function (obj) {
	        if (typeof obj === 'string') return "'" + obj + "'"; // TODO: Patch until typesystem comes up.
	        if (obj.__repr__ !== undefined) return obj.__repr__();
	        else if (obj.__class__ !== undefined && obj.__class__.module !== undefined && obj.__class__.__name__) {
	          return '<'+obj.__class__.__module__+'.'+obj.__class__.__name__+' object>';
	        } else return obj.toString(); // Raise a please report warning here, we should never reach this piece of code
	      },
	      reversed: function (seq) {
	        var ret = new pythonRuntime.objects.list();
	        for (var i in seq) ret.push(seq[i]);
	        return ret.reverse();
	      },
	      round: function (num, ndigits) {
	        if (ndigits) {
	          var scale = Math.pow(10, ndigits);
	          return Math.round(num * scale) / scale;
	        }
	        return Math.round(num);
	      },
	      sorted: function (iterable, key, reverse) {
	        var ret = new pythonRuntime.objects.list();
	        for (var i in iterable) ret.push(iterable[i]);
	        if(key) ret.sort(key); else ret.sort();
	        if (reverse) ret.reverse();
	        return ret;
	      },
	      str: function (obj) {
	        return obj.toString();
	      },
	      sum: function (iterable, start) {
	        // TODO: start can't be a string
	        var ret = start || 0;
	        for (var i in iterable) ret += iterable[i];
	        return ret;
	      },
	      tuple: function (iterable) {
	        var ret = new pythonRuntime.objects.tuple();
	        for (var i in iterable) ret.push(iterable[i]);
	        return ret;
	      }
	    },

	    // Python imports
	    // TODO: from x import y, z

	    imports: {
	      random: {
	        random: function () { return Math.random(); }
	      }
	    }
	  };

	  function PythonDict() {

	  }

	  Object.defineProperties(PythonDict.prototype, pythonRuntime.utils.dictPropertyDescriptor);
	  return pythonRuntime;
	}));



/***/ }
/******/ ])
});
;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(32);


/***/ })
/******/ ]);
});